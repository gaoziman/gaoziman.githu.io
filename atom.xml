<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱笑的Gao的个人博客</title>
  
  <subtitle>生活明朗 万物可爱</subtitle>
  <link href="https://manamn.space/atom.xml" rel="self"/>
  
  <link href="https://manamn.space/"/>
  <updated>2022-06-03T07:45:59.096Z</updated>
  <id>https://manamn.space/</id>
  
  <author>
    <name>Gao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://manamn.space/2022/10/16/Map-HashSet-HashMap-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://manamn.space/2022/10/16/Map-HashSet-HashMap-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2022-10-16T03:58:41.832Z</published>
    <updated>2022-06-03T07:45:59.096Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: Map - HashSet &amp; HashMap 源码解析<br>date: 2022-05-03 10:35:17<br>tags:<br>    - Java<br>    - Java基础<br>categories: Java<br>cover: <a href="https://cdn.jsdelivr.net/gh/520ck/cdnseovx/1/I/l/1/I/l/seovx-com-2018%20(55).jpg">https://cdn.jsdelivr.net/gh/520ck/cdnseovx/1/I/l/1/I/l/seovx-com-2018%20(55).jpg</a><br>–</p><h1 id="Map-HashSet-amp-HashMap-源码解析"><a href="#Map-HashSet-amp-HashMap-源码解析" class="headerlink" title="Map - HashSet &amp; HashMap 源码解析"></a>Map - HashSet &amp; HashMap 源码解析</h1><blockquote><p>本文主要对Map - HashSet &amp; HashMap进行源码解析。@pdai</p></blockquote><ul><li>Map - HashSet &amp; HashMap 源码解析<ul><li>Java7 HashMap<ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#get">get()</a></li><li><a href="#put">put()</a></li><li><a href="#remove">remove()</a></li></ul></li><li>Java8 HashMap<ul><li><a href="#put-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">put 过程分析</a></li><li><a href="#%E6%95%B0%E7%BB%84%E6%89%A9%E5%AE%B9">数组扩容</a></li><li><a href="#get-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">get 过程分析</a></li></ul></li><li><a href="#hashset">HashSet</a></li></ul></li></ul><h2 id="Java7-HashMap"><a href="#Java7-HashMap" class="headerlink" title="Java7 HashMap"></a>Java7 HashMap</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>之所以把<em>HashSet</em>和<em>HashMap</em>放在一起讲解，是因为二者在Java里有着相同的实现，前者仅仅是对后者做了一层包装，也就是说<em>HashSet</em>里面有一个<em>HashMap</em>(适配器模式)。因此本文将重点分析<em>HashMap</em>。</p><p><em>HashMap</em>实现了<em>Map</em>接口，即允许放入<code>key</code>为<code>null</code>的元素，也允许插入<code>value</code>为<code>null</code>的元素；除该类未实现同步外，其余跟<code>Hashtable</code>大致相同；跟<em>TreeMap</em>不同，该容器不保证元素顺序，根据需要该容器可能会对元素重新哈希，元素的顺序也会被重新打散，因此不同时间迭代同一个<em>HashMap</em>的顺序可能会不同。 根据对冲突的处理方式不同，哈希表有两种实现方式，一种开放地址方式(Open addressing)，另一种是冲突链表方式(Separate chaining with linked lists)。<strong>Java7 *HashMap*采用的是冲突链表方式</strong>。</p><img src="https://pdai.tech/_images/collection/HashMap_base.png" alt="HashMap_base" style="zoom:80%;" /><p>从上图容易看出，如果选择合适的哈希函数，<code>put()</code>和<code>get()</code>方法可以在常数时间内完成。但在对<em>HashMap</em>进行迭代时，需要遍历整个table以及后面跟的冲突链表。因此对于迭代比较频繁的场景，不宜将<em>HashMap</em>的初始大小设的过大。</p><p>有两个参数可以影响<em>HashMap</em>的性能: 初始容量(inital capacity)和负载系数(load factor)。初始容量指定了初始<code>table</code>的大小，负载系数用来指定自动扩容的临界值。当<code>entry</code>的数量超过<code>capacity*load_factor</code>时，容器将自动扩容并重新哈希。对于插入元素较多的场景，将初始容量设大可以减少重新哈希的次数。</p><p>将对象放入到<em>HashMap</em>或<em>HashSet</em>中时，有两个方法需要特别关心: <code>hashCode()</code>和<code>equals()</code>。**<code>hashCode()</code>方法决定了对象会被放到哪个<code>bucket</code>里，当多个对象的哈希值冲突时，<code>equals()</code>方法决定了这些对象是否是“同一个对象”<em><em>。所以，如果要将自定义的对象放入到<code>HashMap</code>或<code>HashSet</code>中，需要</em>@Override</em><code>hashCode()</code>和<code>equals()</code>方法。</p><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p><code>get(Object key)</code>方法根据指定的<code>key</code>值返回对应的<code>value</code>，该方法调用了<code>getEntry(Object key)</code>得到相应的<code>entry</code>，然后返回<code>entry.getValue()</code>。因此<code>getEntry()</code>是算法的核心。 算法思想是首先通过<code>hash()</code>函数得到对应<code>bucket</code>的下标，然后依次遍历冲突链表，通过<code>key.equals(k)</code>方法来判断是否是要找的那个<code>entry</code>。</p><img src="https://pdai.tech/_images/collection/HashMap_getEntry.png" alt="HashMap_getEntry" style="zoom:67%;" /><p>上图中<code>hash(k)&amp;(table.length-1)</code>等价于<code>hash(k)%table.length</code>，原因是<em>HashMap</em>要求<code>table.length</code>必须是2的指数，因此<code>table.length-1</code>就是二进制低位全是1，跟<code>hash(k)</code>相与会将哈希值的高位全抹掉，剩下的就是余数了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getEntry()方法</span></span><br><span class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title function_">getEntry</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">......</span><br><span class="line"><span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[hash&amp;(table.length-<span class="number">1</span>)];<span class="comment">//得到冲突链表</span></span><br><span class="line">         e != <span class="literal">null</span>; e = e.next) &#123;<span class="comment">//依次遍历冲突链表中的每个entry</span></span><br><span class="line">        Object k;</span><br><span class="line">        <span class="comment">//依据equals()方法判断是否相等</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h3><p><code>put(K key, V value)</code>方法是将指定的<code>key, value</code>对添加到<code>map</code>里。该方法首先会对<code>map</code>做一次查找，看是否包含该元组，如果已经包含则直接返回，查找过程类似于<code>getEntry()</code>方法；如果没有找到，则会通过<code>addEntry(int hash, K key, V value, int bucketIndex)</code>方法插入新的<code>entry</code>，插入方式为<strong>头插法</strong>。</p><img src="https://pdai.tech/_images/collection/HashMap_addEntry.png" alt="HashMap_addEntry" style="zoom:67%;" /><p>著作权归<a href="https://pdai.tech所有./">https://pdai.tech所有。</a> 链接：<a href="https://pdai.tech/md/java/collection/java-map-HashMap&amp;HashSet.html">https://pdai.tech/md/java/collection/java-map-HashMap&amp;HashSet.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//addEntry()</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="literal">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        resize(<span class="number">2</span> * table.length);<span class="comment">//自动扩容，并重新哈希</span></span><br><span class="line">        hash = (<span class="literal">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = hash &amp; (table.length-<span class="number">1</span>);<span class="comment">//hash%table.length</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在冲突链表头部插入新的entry</span></span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">        </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="move"><a href="#move" class="headerlink" title="move()"></a>move()</h3><p><code>remove(Object key)</code>的作用是删除<code>key</code>值对应的<code>entry</code>，该方法的具体逻辑是在<code>removeEntryForKey(Object key)</code>里实现的。<code>removeEntryForKey()</code>方法会首先找到<code>key</code>值对应的<code>entry</code>，然后删除该<code>entry</code>(修改链表的相应引用)。查找过程跟<code>getEntry()</code>过程类似。</p><img src="https://pdai.tech/_images/collection/HashMap_removeEntryForKey.png" alt="HashMap_removeEntryForKey" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//removeEntryForKey()</span></span><br><span class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title function_">removeEntryForKey</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">......</span><br><span class="line"><span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);<span class="comment">//hash&amp;(table.length-1)</span></span><br><span class="line">    Entry&lt;K,V&gt; prev = table[i];<span class="comment">//得到冲突链表</span></span><br><span class="line">    Entry&lt;K,V&gt; e = prev;</span><br><span class="line">    <span class="keyword">while</span> (e != <span class="literal">null</span>) &#123;<span class="comment">//遍历冲突链表</span></span><br><span class="line">        Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;<span class="comment">//找到要删除的entry</span></span><br><span class="line">            modCount++; size--;</span><br><span class="line">            <span class="keyword">if</span> (prev == e) table[i] = next;<span class="comment">//删除的是冲突链表的第一个entry</span></span><br><span class="line">            <span class="keyword">else</span> prev.next = next;</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = e; e = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="Java8-HashMap"><a href="#Java8-HashMap" class="headerlink" title="Java8 HashMap"></a>Java8 HashMap</h2><p>Java8 对 HashMap 进行了一些修改，最大的不同就是利用了红黑树，所以其由 <strong>数组+链表+红黑树</strong> 组成。</p><p>根据 Java7 HashMap 的介绍，我们知道，查找的时候，根据 hash 值我们能够快速定位到数组的具体下标，但是之后的话，需要顺着链表一个个比较下去才能找到我们需要的，时间复杂度取决于链表的长度，为 O(n)。</p><p>为了降低这部分的开销，在 Java8 中，当链表中的元素达到了 8 个时，会将链表转换为红黑树，在这些位置进行查找的时候可以降低时间复杂度为 O(logN)。</p><p>来一张图简单示意一下吧：</p><p><img src="https://pdai.tech/_images/java/java-collection-hashmap8.png" alt="img"></p><p>注意，上图是示意图，主要是描述结构，不会达到这个状态的，因为这么多数据的时候早就扩容了。</p><p>下面，我们还是用代码来介绍吧，个人感觉，Java8 的源码可读性要差一些，不过精简一些。</p><p>Java7 中使用 Entry 来代表每个 HashMap 中的数据节点，Java8 中使用 Node，基本没有区别，都是 key，value，hash 和 next 这四个属性，不过，Node 只能用于链表的情况，红黑树的情况需要使用 TreeNode。</p><p>我们根据数组元素中，第一个节点数据类型是 Node 还是 TreeNode 来判断该位置下是链表还是红黑树的。</p><h3 id="put-过程分析"><a href="#put-过程分析" class="headerlink" title="put 过程分析"></a>put 过程分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四个参数 onlyIfAbsent 如果是 true，那么只有在不存在该 key 时才会进行 put 操作</span></span><br><span class="line"><span class="comment">// 第五个参数 evict 我们这里不关心</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// 第一次 put 值的时候，会触发下面的 resize()，类似 java7 的第一次 put 也要初始化数组长度</span></span><br><span class="line">    <span class="comment">// 第一次 resize 和后续的扩容有些不一样，因为这次是数组从 null 初始化到默认的 16 或自定义的初始容量</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 找到具体的数组下标，如果此位置没有值，那么直接初始化一下 Node 并放置在这个位置就可以了</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">// 数组该位置有数据</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 首先，判断该位置的第一个数据和我们要插入的数据，key 是不是&quot;相等&quot;，如果是，取出这个节点</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 如果该节点是代表红黑树的节点，调用红黑树的插值方法，本文不展开说红黑树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 到这里，说明数组该位置上是一个链表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 插入到链表的最后面(Java7 是插入到链表的最前面)</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// TREEIFY_THRESHOLD 为 8，所以，如果新插入的值是链表中的第 8 个</span></span><br><span class="line">                    <span class="comment">// 会触发下面的 treeifyBin，也就是将链表转换为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果在该链表中找到了&quot;相等&quot;的 key(== 或 equals)</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 此时 break，那么 e 为链表中[与要插入的新值的 key &quot;相等&quot;]的 node</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// e!=null 说明存在旧值的key与要插入的key&quot;相等&quot;</span></span><br><span class="line">        <span class="comment">// 对于我们分析的put操作，下面这个 if 其实就是进行 &quot;值覆盖&quot;，然后返回旧值</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 如果 HashMap 由于新插入这个值导致 size 已经超过了阈值，需要进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">        <span class="meta">@pdai</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>和 Java7 稍微有点不一样的地方就是，Java7 是先扩容后插入新值的，Java8 先插值再扩容，不过这个不重要。</p><h3 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h3><p>resize() 方法用于初始化数组或数组扩容，每次扩容后，容量为原来的 2 倍，并进行数据迁移。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123; <span class="comment">// 对应数组扩容</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将数组大小扩大一倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            <span class="comment">// 将阈值扩大一倍</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// 对应使用 new HashMap(int initialCapacity) 初始化后，第一次 put 的时候</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">// 对应使用 new HashMap() 初始化后，第一次 put 的时候</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用新的数组大小初始化新的数组</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab; <span class="comment">// 如果是初始化数组，到这里就结束了，返回 newTab 即可</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 开始遍历原数组，进行数据迁移。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// 如果该数组位置上只有单个元素，那就简单了，简单迁移这个元素就可以了</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">// 如果是红黑树，具体我们就不展开了</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; </span><br><span class="line">                    <span class="comment">// 这块是处理链表的情况，</span></span><br><span class="line">                    <span class="comment">// 需要将此链表拆成两个链表，放到新的数组中，并且保留原来的先后顺序</span></span><br><span class="line">                    <span class="comment">// loHead、loTail 对应一条链表，hiHead、hiTail 对应另一条链表，代码还是比较简单的</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        <span class="comment">// 第一条链表</span></span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        <span class="comment">// 第二条链表的新的位置是 j + oldCap，这个很好理解</span></span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">       </span><br></pre></td></tr></table></figure><h3 id="get-过程分析"><a href="#get-过程分析" class="headerlink" title="get 过程分析"></a>get 过程分析</h3><p>相对于 put 来说，get 真的太简单了。</p><ul><li>计算 key 的 hash 值，根据 hash 值找到对应数组下标: hash &amp; (length-1)</li><li>判断数组该位置处的元素是否刚好就是我们要找的，如果不是，走第三步</li><li>判断该元素类型是否是 TreeNode，如果是，用红黑树的方法取数据，如果不是，走第四步</li><li>遍历链表，直到找到相等(&#x3D;&#x3D;或equals)的 key</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="type">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断第一个节点是不是就是需要的</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断是否是红黑树</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 链表遍历</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">     </span><br></pre></td></tr></table></figure><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>前面已经说过<em>HashSet</em>是对<em>HashMap</em>的简单包装，对<em>HashSet</em>的函数调用都会转换成合适的<em>HashMap</em>方法，因此<em>HashSet</em>的实现非常简单，只有不到300行代码。这里不再赘述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HashSet是对HashMap的简单包装</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt;</span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;<span class="comment">//HashSet里面有一个HashMap</span></span><br><span class="line">    <span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;<span class="comment">//简单的方法转换</span></span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title: Map - HashSet &amp;amp; HashMap 源码解析&lt;br&gt;date: 2022-05-03 10:35:17&lt;br&gt;tags:&lt;br&gt;    - Java&lt;br&gt;    - Java基础&lt;br&gt;categories: Java&lt;br&gt;c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第17章 Java8新特性</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC17%E7%AB%A0-Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC17%E7%AB%A0-Java8%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2022-07-28T05:08:53.000Z</published>
    <updated>2022-10-16T04:43:25.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第17章-Java8新特性"><a href="#第17章-Java8新特性" class="headerlink" title="第17章 Java8新特性"></a>第17章 Java8新特性</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>Lambda表达式</li><li>StreamAPI</li><li>Optional</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><input disabled="" type="checkbox"> 能够理解函数式编程相对于面向对象的优点</li><li><input disabled="" type="checkbox"> 能够掌握Lambda表达式的标准格式</li><li><input disabled="" type="checkbox"> 能够使用Lambda标准格式</li><li><input disabled="" type="checkbox"> 能够掌握Lambda表达式的省略格式与规则</li><li><input disabled="" type="checkbox"> 能够通过Lambda使用自定义的接口（有且仅有一个抽象方法）</li><li><input disabled="" type="checkbox"> 能够使用@FunctionalInterface注解</li><li><input disabled="" type="checkbox"> 能够使用Supplier函数式接口</li><li><input disabled="" type="checkbox"> 能够使用Consumer函数式接口</li><li><input disabled="" type="checkbox"> 能够使用Function函数式接口</li><li><input disabled="" type="checkbox"> 能够使用Predicate函数式接口</li><li><input disabled="" type="checkbox"> 能够使用方法引用和构造器引用</li><li><input disabled="" type="checkbox"> 能够理解流与集合相比的优点</li><li><input disabled="" type="checkbox"> 能够理解流的延迟执行特点</li><li><input disabled="" type="checkbox"> 能够通过集合、映射或数组获取流</li><li><input disabled="" type="checkbox"> 能够掌握常用的流操作</li><li><input disabled="" type="checkbox"> 能够使用Optional类包装对象并获取其中包装的对象</li></ul><h1 id="第17章-Java8新特性-1"><a href="#第17章-Java8新特性-1" class="headerlink" title="第17章 Java8新特性"></a>第17章 Java8新特性</h1><p>Java8的新特征有很多，之前我们在学习接口时，学习了接口的静态方法和默认方法，在学习常用类时，学习了新版的日期时间API。今天我们来学习Java8最具革命性的两个新特性：Lambda表达式和StreamAPI。然后带领大家用Optioanl类解决最令人头疼的空指针异常。</p><h2 id="17-1-Lambda表达式"><a href="#17-1-Lambda表达式" class="headerlink" title="17.1 Lambda表达式"></a>17.1 Lambda表达式</h2><h3 id="17-1-1-函数式编程思想"><a href="#17-1-1-函数式编程思想" class="headerlink" title="17.1.1 函数式编程思想"></a>17.1.1 函数式编程思想</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/03-Overview.png"></p><p>在数学中，<strong>函数</strong>就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。编程中的函数，也有类似的概念，你调用我的时候，给我实参为形参赋值，然后通过运行方法体，给你返回一个结果。对于调用者来做，关注这个方法具备什么样的功能。相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法——<strong>强调做什么，而不是以什么形式做</strong>。</p><ul><li><p>面向对象的思想:</p><ul><li>做一件事情,找一个能解决这个事情的对象,调用对象的方法,完成事情.</li></ul></li><li><p>函数式编程思想:</p><ul><li>只要能获取到结果,谁去做的,怎么做的都不重要,重视的是结果,不重视过程</li></ul></li></ul><p>Java8引入了Lambda表达式之后，Java也开始支持函数式编程。</p><p>Lambda表达式不是Java最早使用的，很多语言就支持Lambda表达式，例如：C++，C#，Python，Scala等。如果有Python或者Javascript的语言基础，对理解Lambda表达式有很大帮助，可以这么说lambda表达式其实就是实现SAM接口的语法糖，使得Java也算是支持函数式编程的语言。Lambda<strong>写的好</strong>可以极大的减少代码冗余，同时可读性也好过冗长的匿名内部类。</p><blockquote><p>备注：“语法糖”是指使用更加方便，但是原理不变的代码语法。例如在遍历集合时使用的for-each语法，其实<br>底层的实现原理仍然是迭代器，这便是“语法糖”。从应用层面来讲，Java中的Lambda可以被当做是匿名内部<br>类的“语法糖”，但是二者在原理上是不同的。</p></blockquote><h4 id="冗余的匿名内部类"><a href="#冗余的匿名内部类" class="headerlink" title="冗余的匿名内部类"></a>冗余的匿名内部类</h4><p>当需要启动一个线程去完成任务时，通常会通过<code>java.lang.Runnable</code>接口来定义任务内容，并使用<code>java.lang.Thread</code>类来启动该线程。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01Runnable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 匿名内部类</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">// 覆盖重写抽象方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;多线程任务执行！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(task).start(); <span class="comment">// 启动线程</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本着“一切皆对象”的思想，这种做法是无可厚非的：首先创建一个<code>Runnable</code>接口的匿名内部类对象来指定任务内容，再将其交给一个线程来启动。</p><p><strong>代码分析：</strong></p><p>对于<code>Runnable</code>的匿名内部类用法，可以分析出几点内容：</p><ul><li><code>Thread</code>类需要<code>Runnable</code>接口作为参数，其中的抽象<code>run</code>方法是用来指定线程任务内容的核心；</li><li>为了指定<code>run</code>的方法体，<strong>不得不</strong>需要<code>Runnable</code>接口的实现类；</li><li>为了省去定义一个<code>RunnableImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</li><li>必须覆盖重写抽象<code>run</code>方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；</li><li>而实际上，<strong>似乎只有方法体才是关键所在</strong>。</li></ul><h4 id="编程思想转换"><a href="#编程思想转换" class="headerlink" title="编程思想转换"></a>编程思想转换</h4><p><strong>做什么，而不是谁来做，怎么做</strong></p><p>我们真的希望创建一个匿名内部类对象吗？不。我们只是为了做这件事情而<strong>不得不</strong>创建一个对象。我们真正希望做的事情是：将<code>run</code>方法体内的代码传递给<code>Thread</code>类知晓。</p><p><strong>传递一段代码</strong>——这才是我们真正的目的。而创建对象只是受限于面向对象语法而不得不采取的一种手段方式。那，有没有更加简单的办法？如果我们将关注点从“怎么做”回归到“做什么”的本质上，就会发现只要能够更好地达到目的，过程与形式其实并不重要。</p><p><strong>生活举例：</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/01-%E4%BA%A4%E9%80%9A%E6%96%B9%E5%BC%8F.png"></p><p>当我们需要从北京到上海时，可以选择高铁、汽车、骑行或是徒步。我们的真正目的是到达上海，而如何才能到达上海的形式并不重要，所以我们一直在探索有没有比高铁更好的方式——搭乘飞机。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/02-Lambda.png"></p><p>而现在这种飞机（甚至是飞船）已经诞生：2014年3月Oracle所发布的Java 8（JDK 1.8）中，加入了<strong>Lambda表达式</strong>的重量级新特性，为我们打开了新世界的大门。</p><h4 id="体验Lambda的更优写法"><a href="#体验Lambda的更优写法" class="headerlink" title="体验Lambda的更优写法"></a>体验Lambda的更优写法</h4><p>借助Java 8的全新语法，上述<code>Runnable</code>接口的匿名内部类写法可以通过更简单的Lambda表达式达到等效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02LambdaRunnable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;多线程任务执行！&quot;</span>)).start(); <span class="comment">// 启动线程</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码和刚才的执行效果是完全一样的，可以在1.8或更高的编译级别下通过。从代码的语义中可以看出：我们启动了一个线程，而线程任务的内容以一种更加简洁的形式被指定。</p><p>不再有“不得不创建接口对象”的束缚，不再有“抽象方法覆盖重写”的负担，就是这么简单！</p><h3 id="17-1-2-函数式接口"><a href="#17-1-2-函数式接口" class="headerlink" title="17.1.2 函数式接口"></a>17.1.2 函数式接口</h3><p>lambda表达式其实就是实现SAM接口的语法糖，所谓SAM接口就是Single Abstract Method，即该接口中只有一个抽象方法需要实现，当然该接口可以包含其他非抽象方法。</p><p>其实只要满足“SAM”特征的接口都可以称为函数式接口，都可以使用Lambda表达式，但是如果要更明确一点，最好在声明接口时，加上@FunctionalInterface。一旦使用该注解来定义接口，编译器将会强制检查该接口是否确实有且仅有一个抽象方法，否则将会报错。</p><p>之前学过的SAM接口中，标记了@FunctionalInterface的函数式接口的有：Runnable，Comparator，FileFilter。</p><p>Java8在java.util.function新增了很多函数式接口：主要分为四大类，消费型、供给型、判断型、功能型。基本可以满足我们的开发需求。当然你也可以定义自己的函数式接口。</p><h4 id="1、自定义函数式接口"><a href="#1、自定义函数式接口" class="headerlink" title="1、自定义函数式接口"></a>1、自定义函数式接口</h4><p>只要确保接口中有且仅有一个抽象方法即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface 接口名称 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名称(可选参数信息);</span><br><span class="line">    <span class="comment">// 其他非抽象方法内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口当中抽象方法的 public abstract 是可以省略的</p></blockquote><p>例如：声明一个计算器<code>Calculator</code>接口，内含抽象方法<code>calc</code>可以对两个int数字进行计算，并返回结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类中，声明一个如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokeCalc</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, Calculator calculator)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calculator.calc(a, b);</span><br><span class="line">    System.out.println(<span class="string">&quot;结果是：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">invokeCalc(<span class="number">1</span>, <span class="number">2</span>, (<span class="type">int</span> a,<span class="type">int</span> b)-&gt; &#123;<span class="keyword">return</span> a+b;&#125;);</span><br><span class="line">invokeCalc(<span class="number">1</span>, <span class="number">2</span>, (<span class="type">int</span> a,<span class="type">int</span> b)-&gt; &#123;<span class="keyword">return</span> a-b;&#125;);</span><br><span class="line">invokeCalc(<span class="number">1</span>, <span class="number">2</span>, (<span class="type">int</span> a,<span class="type">int</span> b)-&gt; &#123;<span class="keyword">return</span> a*b;&#125;);</span><br><span class="line">invokeCalc(<span class="number">1</span>, <span class="number">2</span>, (<span class="type">int</span> a,<span class="type">int</span> b)-&gt; &#123;<span class="keyword">return</span> a/b;&#125;);</span><br><span class="line">invokeCalc(<span class="number">1</span>, <span class="number">2</span>, (<span class="type">int</span> a,<span class="type">int</span> b)-&gt; &#123;<span class="keyword">return</span> a%b;&#125;);</span><br><span class="line">invokeCalc(<span class="number">1</span>, <span class="number">2</span>, (<span class="type">int</span> a,<span class="type">int</span> b)-&gt; &#123;<span class="keyword">return</span> a&gt;b?a:b;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、消费型接口"><a href="#2、消费型接口" class="headerlink" title="2、消费型接口"></a><strong>2、消费型接口</strong></h4><p>消费型接口的抽象方法特点：有形参，但是返回值类型是void</p><table><thead><tr><th>接口名</th><th>抽象方法</th><th>描述</th></tr></thead><tbody><tr><td>Consumer<T></td><td>void accept(T t)</td><td>接收一个对象用于完成功能</td></tr><tr><td>BiConsumer&lt;T,U&gt;</td><td>void accept(T t, U u)</td><td>接收两个对象用于完成功能</td></tr><tr><td>DoubleConsumer</td><td>void accept(double value)</td><td>接收一个double值</td></tr><tr><td>IntConsumer</td><td>void accept(int value)</td><td>接收一个int值</td></tr><tr><td>LongConsumer</td><td>void accept(long value)</td><td>接收一个long值</td></tr><tr><td>ObjDoubleConsumer<T></td><td>void accept(T t, double value)</td><td>接收一个对象和一个double值</td></tr><tr><td>ObjIntConsumer<T></td><td>void accept(T t, int value)</td><td>接收一个对象和一个int值</td></tr><tr><td>ObjLongConsumer<T></td><td>void accept(T t, long value)</td><td>接收一个对象和一个long值</td></tr></tbody></table><h4 id="3、供给型接口"><a href="#3、供给型接口" class="headerlink" title="3、供给型接口"></a><strong>3、供给型接口</strong></h4><p>这类接口的抽象方法特点：无参，但是无返回值</p><table><thead><tr><th>接口名</th><th>抽象方法</th><th>描述</th></tr></thead><tbody><tr><td>Supplier<T></td><td>T get()</td><td>返回一个对象</td></tr><tr><td>BooleanSupplier</td><td>boolean getAsBoolean()</td><td>返回一个boolean值</td></tr><tr><td>DoubleSupplier</td><td>double getAsDouble()</td><td>返回一个double值</td></tr><tr><td>IntSupplier</td><td>int getAsInt()</td><td>返回一个int值</td></tr><tr><td>LongSupplier</td><td>long getAsLong()</td><td>返回一个long值</td></tr></tbody></table><h4 id="4、判断型接口"><a href="#4、判断型接口" class="headerlink" title="4、判断型接口"></a><strong>4、判断型接口</strong></h4><p>这里接口的抽象方法特点：有参，但是返回值类型是boolean结果。</p><table><thead><tr><th>接口名</th><th>抽象方法</th><th>描述</th></tr></thead><tbody><tr><td>Predicate<T></td><td>boolean test(T t)</td><td>接收一个对象</td></tr><tr><td>BiPredicate&lt;T,U&gt;</td><td>boolean test(T t, U u)</td><td>接收两个对象</td></tr><tr><td>DoublePredicate</td><td>boolean test(double value)</td><td>接收一个double值</td></tr><tr><td>IntPredicate</td><td>boolean test(int value)</td><td>接收一个int值</td></tr><tr><td>LongPredicate</td><td>boolean test(long value)</td><td>接收一个long值</td></tr></tbody></table><h4 id="5、功能型接口"><a href="#5、功能型接口" class="headerlink" title="5、功能型接口"></a><strong>5、功能型接口</strong></h4><p>这类接口的抽象方法特点：既有参数又有返回值</p><table><thead><tr><th>接口名</th><th>抽象方法</th><th>描述</th></tr></thead><tbody><tr><td>Function&lt;T,R&gt;</td><td>R apply(T t)</td><td>接收一个T类型对象，返回一个R类型对象结果</td></tr><tr><td>UnaryOperator<T></td><td>T apply(T t)</td><td>接收一个T类型对象，返回一个T类型对象结果</td></tr><tr><td>DoubleFunction<R></td><td>R apply(double value)</td><td>接收一个double值，返回一个R类型对象</td></tr><tr><td>IntFunction<R></td><td>R apply(int value)</td><td>接收一个int值，返回一个R类型对象</td></tr><tr><td>LongFunction<R></td><td>R apply(long value)</td><td>接收一个long值，返回一个R类型对象</td></tr><tr><td>ToDoubleFunction<T></td><td>double applyAsDouble(T value)</td><td>接收一个T类型对象，返回一个double</td></tr><tr><td>ToIntFunction<T></td><td>int applyAsInt(T value)</td><td>接收一个T类型对象，返回一个int</td></tr><tr><td>ToLongFunction<T></td><td>long applyAsLong(T value)</td><td>接收一个T类型对象，返回一个long</td></tr><tr><td>DoubleToIntFunction</td><td>int applyAsInt(double value)</td><td>接收一个double值，返回一个int结果</td></tr><tr><td>DoubleToLongFunction</td><td>long applyAsLong(double value)</td><td>接收一个double值，返回一个long结果</td></tr><tr><td>IntToDoubleFunction</td><td>double applyAsDouble(int value)</td><td>接收一个int值，返回一个double结果</td></tr><tr><td>IntToLongFunction</td><td>long applyAsLong(int value)</td><td>接收一个int值，返回一个long结果</td></tr><tr><td>LongToDoubleFunction</td><td>double applyAsDouble(long value)</td><td>接收一个long值，返回一个double结果</td></tr><tr><td>LongToIntFunction</td><td>int applyAsInt(long value)</td><td>接收一个long值，返回一个int结果</td></tr><tr><td>DoubleUnaryOperator</td><td>double applyAsDouble(double operand)</td><td>接收一个double值，返回一个double</td></tr><tr><td>IntUnaryOperator</td><td>int applyAsInt(int operand)</td><td>接收一个int值，返回一个int结果</td></tr><tr><td>LongUnaryOperator</td><td>long applyAsLong(long operand)</td><td>接收一个long值，返回一个long结果</td></tr><tr><td></td><td></td><td></td></tr><tr><td>BiFunction&lt;T,U,R&gt;</td><td>R apply(T t, U u)</td><td>接收一个T类型和一个U类型对象，返回一个R类型对象结果</td></tr><tr><td>BinaryOperator<T></td><td>T apply(T t, T u)</td><td>接收两个T类型对象，返回一个T类型对象结果</td></tr><tr><td>ToDoubleBiFunction&lt;T,U&gt;</td><td>double applyAsDouble(T t, U u)</td><td>接收一个T类型和一个U类型对象，返回一个double</td></tr><tr><td>ToIntBiFunction&lt;T,U&gt;</td><td>int applyAsInt(T t, U u)</td><td>接收一个T类型和一个U类型对象，返回一个int</td></tr><tr><td>ToLongBiFunction&lt;T,U&gt;</td><td>long applyAsLong(T t, U u)</td><td>接收一个T类型和一个U类型对象，返回一个long</td></tr><tr><td>DoubleBinaryOperator</td><td>double applyAsDouble(double left, double right)</td><td>接收两个double值，返回一个double结果</td></tr><tr><td>IntBinaryOperator</td><td>int applyAsInt(int left, int right)</td><td>接收两个int值，返回一个int结果</td></tr><tr><td>LongBinaryOperator</td><td>long applyAsLong(long left, long right)</td><td>接收两个long值，返回一个long结果</td></tr></tbody></table><h3 id="17-1-3-Lambda表达式语法"><a href="#17-1-3-Lambda表达式语法" class="headerlink" title="17.1.3 Lambda表达式语法"></a>17.1.3 Lambda表达式语法</h3><p>Lambda表达式是用来给【函数式接口】的变量或形参赋值用的。</p><p>其实本质上，Lambda表达式是用于实现【函数式接口】的“抽象方法”</p><p>Lambda表达式语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(形参列表) -&gt; &#123;Lambda体&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>(形参列表)它就是你要赋值的函数式接口的抽象方法的(形参列表)，照抄</li><li>{Lambda体}就是实现这个抽象方法的方法体</li><li>-&gt;称为Lambda操作符（减号和大于号中间不能有空格，而且必须是英文状态下半角输入方式）</li></ul><p>优化：Lambda表达式可以精简</p><ul><li>当{Lambda体}中只有一句语句时，可以省略{}和{;}</li><li>当{Lambda体}中只有一句语句时，并且这个语句还是一个return语句，那么return也可以省略，但是如果{;}没有省略的话，return是不能省略的</li><li>(形参列表)的类型可以省略</li><li>当(形参列表)的形参个数只有一个，那么可以把数据类型和()一起省略，但是形参名不能省略</li><li>当(形参列表)是空参时，()不能省略</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambdaGrammer</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//用Lambda表达式给Runnable接口的形参或变量赋值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 确定两件事，才能写好lambda表达式</span></span><br><span class="line"><span class="comment"> * （1）这个接口的抽象方法长什么样：</span></span><br><span class="line"><span class="comment"> * public void run()</span></span><br><span class="line"><span class="comment"> * （2）这个抽象方法的实现要干什么事</span></span><br><span class="line"><span class="comment"> * 例如：我要打印“hello lambda&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; &#123;System.out.println(<span class="string">&quot;hello lambda&quot;</span>);&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//lambda体省略了&#123;;&#125;</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;hello lambda&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">String[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;chai&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为arr数组排序，但是，想要不区分大小写</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public static &lt;T&gt; void sort(T[] a,Comparator&lt;? super T&gt; c)</span></span><br><span class="line"><span class="comment"> * 这里要用Lambda表达式为Comparator类型的形参赋值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 两件事：</span></span><br><span class="line"><span class="comment"> * （1）这个接口的抽象方法：  int compare(T o1, T o2)</span></span><br><span class="line"><span class="comment"> * （2）这个抽象方法要做什么事？</span></span><br><span class="line"><span class="comment"> * 例如：这里要对String类型的元素，不区分大小写的比较大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//Arrays.sort(arr, (String o1, String o2) -&gt; &#123;return o1.compareToIgnoreCase(o2);&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//省略了&#123;return ;&#125;</span></span><br><span class="line"><span class="comment">//Arrays.sort(arr, (String o1, String o2) -&gt;  o1.compareToIgnoreCase(o2));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//省略了两个String</span></span><br><span class="line">Arrays.sort(arr, (o1, o2) -&gt;  o1.compareToIgnoreCase(o2));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String string : arr) &#123;</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JDK1.8给Collection系列的集合，准确的讲是在Iterable接口中，增加了一个默认方法</span></span><br><span class="line"><span class="comment"> * default void forEach(Consumer&lt;? super T&gt; action) </span></span><br><span class="line"><span class="comment"> * 这个方法是用来遍历集合等的。代替原来的foreach循环的。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 这个方法的形参是Consumer接口类型，它是函数式接口中消费型接口的代表</span></span><br><span class="line"><span class="comment"> * 我现在调用这个方法，想要用Lambda表达式为Consumer接口类型形参赋值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 两件事：</span></span><br><span class="line"><span class="comment"> * （1）它的抽象方法：  void  accept(T t)</span></span><br><span class="line"><span class="comment"> * （2）抽象方法的实现要完成的事是什么</span></span><br><span class="line"><span class="comment"> * 例如：这里要打印这个t</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//list.forEach((String t) -&gt; &#123;System.out.println(t);&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//省略&#123;;&#125;</span></span><br><span class="line"><span class="comment">//list.forEach((String t) -&gt; System.out.println(t));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//省略String</span></span><br><span class="line"><span class="comment">//list.forEach((t) -&gt; System.out.println(t));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以省略形参()</span></span><br><span class="line">list.forEach(t -&gt; System.out.println(t));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-1-4-Lambda表达式练习"><a href="#17-1-4-Lambda表达式练习" class="headerlink" title="17.1.4 Lambda表达式练习"></a>17.1.4 Lambda表达式练习</h3><h4 id="练习1：无参无返回值形式"><a href="#练习1：无参无返回值形式" class="headerlink" title="练习1：无参无返回值形式"></a>练习1：无参无返回值形式</h4><p>假如有自定义函数式接口Call如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Call</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类中声明一个如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">callSomething</span><span class="params">(Call call)</span>&#123;</span><br><span class="line">call.shout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类的main方法中调用callSomething方法，并用Lambda表达式为形参call赋值，可以喊出任意你想说的话。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">callSomething(()-&gt;System.out.println(<span class="string">&quot;回家吃饭&quot;</span>));</span><br><span class="line">callSomething(()-&gt;System.out.println(<span class="string">&quot;我爱你&quot;</span>));</span><br><span class="line">callSomething(()-&gt;System.out.println(<span class="string">&quot;滚蛋&quot;</span>));</span><br><span class="line">callSomething(()-&gt;System.out.println(<span class="string">&quot;回来&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">callSomething</span><span class="params">(Call call)</span>&#123;</span><br><span class="line">call.shout();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Call</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习2：消费型接口"><a href="#练习2：消费型接口" class="headerlink" title="练习2：消费型接口"></a>练习2：消费型接口</h4><p>代码示例：Consumer<T>接口</p><p>在JDK1.8中Collection集合接口的父接口Iterable接口中增加了一个默认方法：</p><p><code>public default void forEach(Consumer&lt;? super T&gt; action) </code>遍历Collection集合的每个元素，执行“xxx消费型”操作。</p><p>在JDK1.8中Map集合接口中增加了一个默认方法：</p><p><code>public default void forEach(BiConsumer&lt;? super K,? super V&gt; action)</code>遍历Map集合的每对映射关系，执行“xxx消费型”操作。</p><p>案例：</p><p>（1）创建一个Collection系列的集合，添加你知道的编程语言，调用forEach方法遍历查看</p><p>（2）创建一个Map系列的集合，添加一些(key,value)键值对，例如，添加编程语言排名和语言名称，调用forEach方法遍历查看</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1564370820279.png" alt="1564370820279"></p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;java&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;python&quot;</span>,<span class="string">&quot;c++&quot;</span>,<span class="string">&quot;VB&quot;</span>,<span class="string">&quot;C#&quot;</span>);</span><br><span class="line">list.forEach(s -&gt; System.out.println(s));</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">HashMap&lt;Integer,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">&quot;python&quot;</span>);</span><br><span class="line">map.put(<span class="number">4</span>, <span class="string">&quot;c++&quot;</span>);</span><br><span class="line">       map.put(<span class="number">5</span>, <span class="string">&quot;VB&quot;</span>);</span><br><span class="line">       map.put(<span class="number">6</span>, <span class="string">&quot;C#&quot;</span>);</span><br><span class="line">map.forEach((k,v) -&gt; System.out.println(k+<span class="string">&quot;-&gt;&quot;</span>+v));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习3：供给型接口"><a href="#练习3：供给型接口" class="headerlink" title="练习3：供给型接口"></a>练习3：供给型接口</h4><p>代码示例：Supplier<T>接口</p><p>在JDK1.8中增加了StreamAPI，java.util.stream.Stream<T>是一个数据流。这个类型有一个静态方法：</p><p><code>public static &lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</code>可以创建Stream的对象。而又包含一个forEach方法可以遍历流中的元素：<code>public void forEach(Consumer&lt;? super T&gt; action)</code>。</p><p>案例：</p><p>现在请调用Stream的generate方法，来产生一个流对象，并调用Math.random()方法来产生数据，为Supplier函数式接口的形参赋值。最后调用forEach方法遍历流中的数据查看结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">Stream.generate(() -&gt; Math.random()).forEach(num -&gt; System.out.println(num));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习4：功能型接口"><a href="#练习4：功能型接口" class="headerlink" title="练习4：功能型接口"></a>练习4：功能型接口</h4><p>代码示例：Funtion&lt;T,R&gt;接口</p><p>在JDK1.8时Map接口增加了很多方法，例如：</p><p><code>public default void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function) </code>按照function指定的操作替换map中的value。</p><p><code>public default void forEach(BiConsumer&lt;? super K,? super V&gt; action)</code>遍历Map集合的每对映射关系，执行“xxx消费型”操作。</p><p>案例：</p><p>（1）声明一个Employee员工类型，包含编号、姓名、薪资。</p><p>（2）添加n个员工对象到一个HashMap&lt;Integer,Employee&gt;集合中，其中员工编号为key，员工对象为value。</p><p>（3）调用Map的forEach遍历集合</p><p>（4）调用Map的replaceAll方法，将其中薪资低于10000元的，薪资设置为10000。</p><p>（5）再次调用Map的forEach遍历集合查看结果</p><p>Employee类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Employee [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, salary=&quot;</span> + salary + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">HashMap&lt;Integer,Employee&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">8000</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">9000</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">10000</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">11000</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>, <span class="string">&quot;钱七&quot;</span>, <span class="number">12000</span>);</span><br><span class="line"></span><br><span class="line">map.put(e1.getId(), e1);</span><br><span class="line">map.put(e2.getId(), e2);</span><br><span class="line">map.put(e3.getId(), e3);</span><br><span class="line">map.put(e4.getId(), e4);</span><br><span class="line">map.put(e5.getId(), e5);</span><br><span class="line"></span><br><span class="line">map.forEach((k,v) -&gt; System.out.println(k+<span class="string">&quot;=&quot;</span>+v));</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">map.replaceAll((k,v)-&gt;&#123;</span><br><span class="line"><span class="keyword">if</span>(v.getSalary()&lt;<span class="number">10000</span>)&#123;</span><br><span class="line">v.setSalary(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;);</span><br><span class="line">map.forEach((k,v) -&gt; System.out.println(k+<span class="string">&quot;=&quot;</span>+v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习5：判断型接口"><a href="#练习5：判断型接口" class="headerlink" title="练习5：判断型接口"></a>练习5：判断型接口</h4><p>代码示例：Predicate<T>接口</p><p>JDK1.8时，Collecton<E>接口增加了一下方法，其中一个如下：</p><p><code>public default boolean removeIf(Predicate&lt;? super E&gt; filter)</code> 用于删除集合中满足filter指定的条件判断的。</p><p><code>public default void forEach(Consumer&lt;? super T&gt; action) </code>遍历Collection集合的每个元素，执行“xxx消费型”操作。</p><p>案例：</p><p>（1）添加一些字符串到一个Collection集合中</p><p>（2）调用forEach遍历集合</p><p>（3）调用removeIf方法，删除其中字符串的长度&lt;5的</p><p>（4）再次调用forEach遍历集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line"></span><br><span class="line">list.forEach(str-&gt;System.out.println(str));</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">list.removeIf(str-&gt;str.length()&lt;<span class="number">5</span>);</span><br><span class="line">list.forEach(str-&gt;System.out.println(str));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习6：判断型接口"><a href="#练习6：判断型接口" class="headerlink" title="练习6：判断型接口"></a>练习6：判断型接口</h4><p>案例：</p><p>（1）声明一个Employee员工类型，包含编号、姓名、性别，年龄，薪资。</p><p>（2）声明一个EmployeeSerice员工管理类，包含一个ArrayList<Employee>集合的属性all，在EmployeeSerice的构造器中，创建一些员工对象，为all集合初始化。</p><p>（3）在EmployeeSerice员工管理类中，声明一个方法：ArrayList<Employee> get(Predicate<Employee> p)，即将满足p指定的条件的员工，添加到一个新的ArrayList<Employee> 集合中返回。</p><p>（4）在测试类中创建EmployeeSerice员工管理类的对象，并调用get方法，分别获取：</p><ul><li>所有员工对象</li><li>所有年龄超过35的员工</li><li>所有薪资高于15000的女员工</li><li>所有编号是偶数的员工</li><li>名字是“张三”的员工</li><li>年龄超过25，薪资低于10000的男员工</li></ul><p>示例代码：</p><p>Employee类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">char</span> gender, <span class="type">int</span> age, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.gender = gender;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Employee [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, gender=&quot;</span> + gender + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, salary=&quot;</span> + salary</span><br><span class="line">+ <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>员工管理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EmployeeService</span>&#123;</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;Employee&gt; all;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">EmployeeService</span><span class="params">()</span>&#123;</span><br><span class="line">all = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">all.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">33</span>, <span class="number">8000</span>));</span><br><span class="line">all.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>, <span class="string">&quot;翠花&quot;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">23</span>, <span class="number">18000</span>));</span><br><span class="line">all.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>, <span class="string">&quot;无能&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">46</span>, <span class="number">8000</span>));</span><br><span class="line">all.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">23</span>, <span class="number">9000</span>));</span><br><span class="line">all.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>, <span class="string">&quot;老王&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">23</span>, <span class="number">15000</span>));</span><br><span class="line">all.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">6</span>, <span class="string">&quot;大嘴&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">23</span>, <span class="number">11000</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;Employee&gt; <span class="title function_">get</span><span class="params">(Predicate&lt;Employee&gt; p)</span>&#123;</span><br><span class="line">ArrayList&lt;Employee&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line"><span class="keyword">for</span> (Employee emp : all) &#123;</span><br><span class="line"><span class="keyword">if</span>(p.test(emp))&#123;</span><br><span class="line">result.add(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">EmployeeService</span> <span class="variable">es</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmployeeService</span>();</span><br><span class="line"></span><br><span class="line">es.get(e -&gt; <span class="literal">true</span>).forEach(e-&gt;System.out.println(e));</span><br><span class="line">System.out.println();</span><br><span class="line">es.get(e -&gt; e.getAge()&gt;<span class="number">35</span>).forEach(e-&gt;System.out.println(e));</span><br><span class="line">System.out.println();</span><br><span class="line">es.get(e -&gt; e.getSalary()&gt;<span class="number">15000</span> &amp;&amp; e.getGender()==<span class="string">&#x27;女&#x27;</span>).forEach(e-&gt;System.out.println(e));</span><br><span class="line">System.out.println();</span><br><span class="line">es.get(e -&gt; e.getId()%<span class="number">2</span>==<span class="number">0</span>).forEach(e-&gt;System.out.println(e));</span><br><span class="line">System.out.println();</span><br><span class="line">es.get(e -&gt; <span class="string">&quot;张三&quot;</span>.equals(e.getName())).forEach(e-&gt;System.out.println(e));</span><br><span class="line">System.out.println();</span><br><span class="line">es.get(e -&gt; e.getAge()&gt;<span class="number">25</span> &amp;&amp; e.getSalary()&lt;<span class="number">10000</span> &amp;&amp; e.getGender()==<span class="string">&#x27;男&#x27;</span>).forEach(e-&gt;System.out.println(e));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-1-3-方法引用与构造器引用"><a href="#17-1-3-方法引用与构造器引用" class="headerlink" title="17.1.3 方法引用与构造器引用"></a>17.1.3 方法引用与构造器引用</h3><p>Lambda表达式是可以简化函数式接口的变量与形参赋值的语法。而方法引用和构造器引用是为了简化Lambda表达式的。当Lambda表达式满足一些特殊的情况时，还可以再简化：</p><p>（1）Lambda体只有一句语句，并且是通过调用一个对象的&#x2F;类现有的方法来完成的</p><p>例如：System.out对象，调用println()方法来完成Lambda体</p><p>​          Math类，调用random()静态方法来完成Lambda体</p><p>（2）并且Lambda表达式的形参正好是给该方法的实参</p><p>例如：t-&gt;System.out.println(t)</p><p>​        () -&gt; Math.random() 都是无参</p><h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><p>方法引用的语法格式：</p><p>（1）实例对象名::实例方法</p><p>（2）类名::静态方法</p><p>（3）类名::实例方法</p><p>说明：</p><ul><li>::称为方法引用操作符（两个:中间不能有空格，而且必须英文状态下半角输入）</li><li>Lambda表达式的形参列表，全部在Lambda体中使用上了，要么是作为调用方法的对象，要么是作为方法的实参。</li><li>在整个Lambda体中没有额外的数据。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//Runnable r = () -&gt; System.out.println(&quot;hello lambda&quot;);</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> System.out::println;<span class="comment">//打印空行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不能简化方法引用，因为&quot;hello lambda&quot;这个无法省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">String[] arr = &#123;<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;chai&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//Arrays.sort(arr, (s1,s2) -&gt; s1.compareToIgnoreCase(s2));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用方法引用简化</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Lambda表达式的形参，第一个（例如：s1），正好是调用方法的对象，剩下的形参(例如:s2)正好是给这个方法的实参</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Arrays.sort(arr, String::compareToIgnoreCase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//Stream&lt;Double&gt; stream = Stream.generate(() -&gt; Math.random());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用方法引用简化</span></span><br><span class="line">Stream&lt;Double&gt; stream = Stream.generate(Math::random);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//list.forEach(t -&gt; System.out.println(t));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用方法再简化</span></span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h4><p>（1）当Lambda表达式是创建一个对象，并且满足Lambda表达式形参，正好是给创建这个对象的构造器的实参列表。</p><p>（2）  当Lambda表达式是创建一个数组对象，并且满足Lambda表达式形参，正好是给创建这个数组对象的长度</p><p>构造器引用的语法格式：</p><ul><li>类名::new</li><li>数组类型名::new</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethodReference</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teset04</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">Stream&lt;<span class="type">int</span>[]&gt; map = stream.map(<span class="type">int</span>[]::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">//这个方法是模仿HashMap中，把你指定的数组的长度纠正为2的n次方的代码</span></span><br><span class="line"><span class="comment">//createArray()的作用是，创建一个长度为2的n次方的数组</span></span><br><span class="line"><span class="keyword">public</span> &lt;R&gt; R[] createArray(Function&lt;Integer,R[]&gt; fun,<span class="type">int</span> length)&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> length - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        length = n &lt; <span class="number">0</span> ? <span class="number">1</span> : n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> fun.apply(length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Function是一个函数式接口，可以用Lambda表达式赋值</span></span><br><span class="line"><span class="comment"> * Function&lt;T,R&gt;的抽象方法   R apply(T t)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * createArray这个方法中用的是Function&lt;Integer,R[]&gt; fun。说明T类型已经指定为Integer</span></span><br><span class="line"><span class="comment"> * 说明</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//Function&lt;Integer,String[]&gt; f = (Integer len) -&gt; new String[len];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为Lambda体是在创建一个数组对象完成的，而且Lambda表达式的形参正好是创建数组用的长度</span></span><br><span class="line"><span class="comment">//通过构造器引用省略</span></span><br><span class="line">Function&lt;Integer,String[]&gt; f = String[]::<span class="keyword">new</span>;</span><br><span class="line">String[] array = createArray(f, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(array.length);<span class="comment">//16</span></span><br><span class="line">&#125;</span><br><span class="line">       </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teset02</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;1.0&quot;</span>,<span class="string">&quot;2.3&quot;</span>,<span class="string">&quot;4.4&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Stream&lt;BigDecimal&gt; stream2 = stream.map(num -&gt; new BigDecimal(num));</span></span><br><span class="line"></span><br><span class="line">Stream&lt;BigDecimal&gt; stream2 = stream.map(BigDecimal::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//Supplier&lt;String&gt; s = () -&gt; new String();//通过供给型接口，提供一个空字符串对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器引用</span></span><br><span class="line">Supplier&lt;String&gt; s = String::<span class="keyword">new</span>;<span class="comment">//通过供给型接口，提供一个空字符串对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-2-StreamAPI"><a href="#17-2-StreamAPI" class="headerlink" title="17.2 StreamAPI"></a>17.2 StreamAPI</h2><p>Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则是 Stream API。</p><p>Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p><p>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p><p>Stream是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。“集合讲的是数据，负责存储数据，Stream流讲的是计算，负责处理数据！”</p><p>注意：</p><p>①Stream 自己不会存储元素。</p><p>②Stream 不会改变源对象。每次处理都会返回一个持有结果的新Stream。</p><p>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</p><p>Stream 的操作三个步骤：</p><p>1- 创建 Stream：通过一个数据源（如：集合、数组），获取一个流</p><p>2- 中间操作：中间操作是个操作链，对数据源的数据进行n次处理，但是在终结操作前，并不会真正执行。</p><p>3- 终止操作：一旦执行终止操作，就执行中间操作链，最终产生结果并结束Stream。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1560769396655.png" alt="1560769396655"></p><h3 id="17-2-1-创建Stream"><a href="#17-2-1-创建Stream" class="headerlink" title="17.2.1 创建Stream"></a>17.2.1 创建Stream</h3><p><strong>1、创建 Stream方式一：通过集合</strong></p><p>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：</p><ul><li><p>public default Stream<E> stream() : 返回一个顺序流</p></li><li><p>public default Stream<E> parallelStream() : 返回一个并行流</p></li></ul><p><strong>2、创建 Stream方式二：通过数组</strong></p><p>Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：</p><ul><li>public static <T> Stream<T> stream(T[] array): 返回一个流</li></ul><p>重载形式，能够处理对应基本类型的数组：</p><ul><li>public static IntStream stream(int[] array)：返回一个整型数据流</li><li>public static LongStream stream(long[] array)：返回一个长整型数据流</li><li>public static DoubleStream stream(double[] array)：返回一个浮点型数据流</li></ul><p><strong>3、创建 Stream方式三：通过Stream的of()</strong></p><p>可以调用Stream类静态方法 of(), 通过显示值创建一个流。它可以接收任意数量的参数。</p><ul><li>public static<T> Stream<T> of(T… values) : 返回一个顺序流</li></ul><p><strong>4、创建 Stream方式四：创建无限流</strong></p><p>可以使用静态方法 Stream.iterate() 和 Stream.generate(), 创建无限流。</p><ul><li>public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f):返回一个无限流</li><li>public static<T> Stream<T> generate(Supplier<T> s) ：返回一个无限流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07StreamCreate</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Stream&lt;T&gt; iterate(T seed, UnaryOperator&lt;T&gt; f)  </span></span><br><span class="line"><span class="comment"> * UnaryOperator接口，SAM接口，抽象方法：</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * UnaryOperator&lt;T&gt; extends Function&lt;T,T&gt;</span></span><br><span class="line"><span class="comment"> * T apply(T t)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">1</span>, num -&gt; num+=<span class="number">2</span>);</span><br><span class="line"><span class="comment">//stream = stream.limit(10);</span></span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line">Stream&lt;Double&gt; stream = Stream.generate(Math::random);</span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">String[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; stream = Arrays.stream(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//JDK1.8中，Collection系列集合增加了方法</span></span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="17-2-2-中间操作"><a href="#17-2-2-中间操作" class="headerlink" title="17.2.2  中间操作"></a>17.2.2  中间操作</h3><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。</p><table><thead><tr><th><strong>方  法</strong></th><th><strong>描  述</strong></th></tr></thead><tbody><tr><td><strong>filter(Predicate p)</strong></td><td>接收 Lambda ， 从流中排除某些元素</td></tr><tr><td><strong>distinct()</strong></td><td>筛选，通过流所生成元素的equals() 去除重复元素</td></tr><tr><td><strong>limit(long maxSize)</strong></td><td>截断流，使其元素不超过给定数量</td></tr><tr><td><strong>skip(long n)</strong></td><td>跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</td></tr><tr><td><strong>peek(Consumer</strong> <strong>action)</strong></td><td>接收Lambda，对流中的每个数据执行Lambda体操作</td></tr><tr><td><strong>sorted()</strong></td><td>产生一个新流，其中按自然顺序排序</td></tr><tr><td><strong>sorted(Comparator com)</strong></td><td>产生一个新流，其中按比较器顺序排序</td></tr><tr><td><strong>map(Function f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td></tr><tr><td><strong>mapToDouble(ToDoubleFunction f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。</td></tr><tr><td><strong>mapToInt(ToIntFunction f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream。</td></tr><tr><td><strong>mapToLong(ToLongFunction f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream。</td></tr><tr><td><strong>flatMap(Function f)</strong></td><td>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08StreamMiddle</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test12</span><span class="params">()</span>&#123;</span><br><span class="line">String[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line">Arrays.stream(arr)</span><br><span class="line">.flatMap(t -&gt; Stream.of(t.split(<span class="string">&quot;|&quot;</span>)))<span class="comment">//Function&lt;T,R&gt;接口抽象方法 R apply(T t)  现在的R是一个Stream</span></span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span>&#123;</span><br><span class="line">String[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">Arrays.stream(arr)</span><br><span class="line">.map(t-&gt;t.toUpperCase())</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span>&#123;</span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">.map(t -&gt; t+=<span class="number">1</span>)<span class="comment">//Function&lt;T,R&gt;接口抽象方法 R apply(T t)</span></span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//希望能够找出前三个最大值，前三名最大的，不重复</span></span><br><span class="line">Stream.of(<span class="number">11</span>,<span class="number">2</span>,<span class="number">39</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">54</span>)</span><br><span class="line">.distinct()</span><br><span class="line">.sorted((t1,t2) -&gt; -Integer.compare(t1, t2))<span class="comment">//Comparator接口  int compare(T t1, T t2)</span></span><br><span class="line">.limit(<span class="number">3</span>)</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">.distinct()</span><br><span class="line">.peek(System.out::println)  <span class="comment">//Consumer接口的抽象方法  void accept(T t)</span></span><br><span class="line">.count();</span><br><span class="line">System.out.println(<span class="string">&quot;count=&quot;</span>+count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span>&#123;</span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">.skip(<span class="number">5</span>)</span><br><span class="line">.distinct()</span><br><span class="line">.filter(t -&gt; t%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span>&#123;</span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">.skip(<span class="number">5</span>)</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">.distinct()  <span class="comment">//(1,2,3,4,5,6,7)</span></span><br><span class="line">.filter(t -&gt; t%<span class="number">2</span>!=<span class="number">0</span>) <span class="comment">//(1,3,5,7)</span></span><br><span class="line">.limit(<span class="number">3</span>)</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">.limit(<span class="number">3</span>)</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">.distinct()</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">.filter(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//1、创建Stream</span></span><br><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、加工处理</span></span><br><span class="line"><span class="comment">//过滤：filter(Predicate p)</span></span><br><span class="line"><span class="comment">//把里面的偶数拿出来</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * filter(Predicate p)</span></span><br><span class="line"><span class="comment"> * Predicate是函数式接口，抽象方法：boolean test(T t)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">stream = stream.filter(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、终结操作：例如：遍历</span></span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="17-2-3-终结操作"><a href="#17-2-3-终结操作" class="headerlink" title="17.2.3  终结操作"></a>17.2.3  终结操作</h3><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void。流进行了终止操作后，不能再次使用。</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>boolean</strong> <strong>allMatch(Predicate p)</strong></td><td>检查是否匹配所有元素</td></tr><tr><td><strong>boolean</strong> <strong>anyMatch</strong>(<strong>Predicate p</strong>)</td><td>检查是否至少匹配一个元素</td></tr><tr><td><strong>boolean</strong> <strong>noneMatch(Predicate  p)</strong></td><td>检查是否没有匹配所有元素</td></tr><tr><td><strong>Optional<T></strong> <strong>findFirst()</strong></td><td>返回第一个元素</td></tr><tr><td><strong>Optional<T></strong> <strong>findAny()</strong></td><td>返回当前流中的任意元素</td></tr><tr><td><strong>long</strong> <strong>count()</strong></td><td>返回流中元素总数</td></tr><tr><td><strong>Optional<T></strong> <strong>max(Comparator c)</strong></td><td>返回流中最大值</td></tr><tr><td><strong>Optional<T></strong> <strong>min(Comparator c)</strong></td><td>返回流中最小值</td></tr><tr><td><strong>void</strong> <strong>forEach(Consumer c)</strong></td><td>迭代</td></tr><tr><td><strong>T</strong> <strong>reduce(T iden, BinaryOperator b)</strong></td><td>可以将流中元素反复结合起来，得到一个值。返回 T</td></tr><tr><td><strong>U</strong> <strong>reduce(BinaryOperator b)</strong></td><td>可以将流中元素反复结合起来，得到一个值。返回 Optional<T></td></tr><tr><td><strong>R</strong> <strong>collect(Collector c)</strong></td><td>将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</td></tr></tbody></table><p>Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、Map)。另外， Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09StreamEnding</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test14</span><span class="params">()</span>&#123;</span><br><span class="line">List&lt;Integer&gt; list = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">.filter(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test13</span><span class="params">()</span>&#123;</span><br><span class="line">Optional&lt;Integer&gt; max = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"> .reduce((t1,t2) -&gt; t1&gt;t2?t1:t2);<span class="comment">//BinaryOperator接口   T apply(T t1, T t2)</span></span><br><span class="line">System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test12</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">reduce</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"> .reduce(<span class="number">0</span>, (t1,t2) -&gt; t1+t2);<span class="comment">//BinaryOperator接口   T apply(T t1, T t2)</span></span><br><span class="line">System.out.println(reduce);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span>&#123;</span><br><span class="line">Optional&lt;Integer&gt; max = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">.max((t1,t2) -&gt; Integer.compare(t1, t2));</span><br><span class="line">System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span>&#123;</span><br><span class="line">Optional&lt;Integer&gt; opt = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">.filter(t -&gt; t%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">.findFirst();</span><br><span class="line">System.out.println(opt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span>&#123;</span><br><span class="line">Optional&lt;Integer&gt; opt = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">.filter(t -&gt; t%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">.findFirst();</span><br><span class="line">System.out.println(opt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span>&#123;</span><br><span class="line">Optional&lt;Integer&gt; opt = Stream.of(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>).findFirst();</span><br><span class="line">System.out.println(opt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">.anyMatch(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">.allMatch(t -&gt; t%<span class="number">2</span>!=<span class="number">0</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">.count();</span><br><span class="line">System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-2-4-练习"><a href="#17-2-4-练习" class="headerlink" title="17.2.4 练习"></a>17.2.4 练习</h3><p>案例：</p><p>现在有两个 ArrayList 集合存储队伍当中的多个成员姓名，要求使用传统的for循环（或增强for循环）依次进行以<br>下若干操作步骤：</p><ol><li>第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。</li><li>第一个队伍筛选之后只要前3个人；存储到一个新集合中。</li><li>第二个队伍只要姓张的成员姓名；存储到一个新集合中。</li><li>第二个队伍筛选之后不要前2个人；存储到一个新集合中。</li><li>将两个队伍合并为一个队伍；存储到一个新集合中。</li><li>根据姓名创建 Person 对象；存储到一个新集合中。</li><li>打印整个队伍的Person对象信息。</li></ol><p>Person 类的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个队伍（集合）的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//第一支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; one = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        one.add(<span class="string">&quot;迪丽热巴&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;宋远桥&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;苏星河&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;石破天&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;石中玉&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;老子&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;庄子&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;洪七公&quot;</span>);</span><br><span class="line">        <span class="comment">//第二支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; two = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        two.add(<span class="string">&quot;古力娜扎&quot;</span>);</span><br><span class="line">        two.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        two.add(<span class="string">&quot;赵丽颖&quot;</span>);</span><br><span class="line">        two.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        two.add(<span class="string">&quot;尼古拉斯赵四&quot;</span>);</span><br><span class="line">        two.add(<span class="string">&quot;张天爱&quot;</span>);</span><br><span class="line">        two.add(<span class="string">&quot;张二狗&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// ....编写代码完成题目要求 </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//第一支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; one = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        one.add(<span class="string">&quot;迪丽热巴&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;宋远桥&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;苏星河&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;石破天&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;石中玉&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;老子&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;庄子&quot;</span>);</span><br><span class="line">        one.add(<span class="string">&quot;洪七公&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//第二支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; two = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        two.add(<span class="string">&quot;古力娜扎&quot;</span>);</span><br><span class="line">        two.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        two.add(<span class="string">&quot;赵丽颖&quot;</span>);</span><br><span class="line">        two.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        two.add(<span class="string">&quot;尼古拉斯赵四&quot;</span>);</span><br><span class="line">        two.add(<span class="string">&quot;张天爱&quot;</span>);</span><br><span class="line">        two.add(<span class="string">&quot;张二狗&quot;</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line">        <span class="comment">// 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line">        Stream&lt;String&gt; streamOne = one.stream().filter(s ‐&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line">        <span class="comment">// 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line">        Stream&lt;String&gt; streamTwo = two.stream().filter(s ‐&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).skip(<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 将两个队伍合并为一个队伍；</span></span><br><span class="line">        <span class="comment">// 根据姓名创建Person对象；</span></span><br><span class="line">        <span class="comment">// 打印整个队伍的Person对象信息。</span></span><br><span class="line">        Stream.concat(streamOne, streamTwo).map(Person::<span class="keyword">new</span>).forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-3-Optional类"><a href="#17-3-Optional类" class="headerlink" title="17.3 Optional类"></a>17.3 Optional类</h2><p>到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分。</p><p>   Optional实际上是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。</p><h3 id="17-3-1-API"><a href="#17-3-1-API" class="headerlink" title="17.3.1 API"></a>17.3.1 API</h3><p>1、如何创建Optional对象？或者说如何用Optional来装值对象或null值</p><p>（1）static <T> Optional<T> empty() ：用来创建一个空的Optional</p><p>（2）static <T> Optional<T> of(T value) ：用来创建一个非空的Optional</p><p>（3）static <T> Optional<T> ofNullable(T value) ：用来创建一个可能是空，也可能非空的Optional</p><p>2、如何从Optional容器中取出所包装的对象呢？</p><p>（1）T get()  ：要求Optional容器必须非空</p><p>T get()与of(T value)使用是安全的</p><p>（2）T orElse(T other)  ：</p><p>orElse(T other) 与ofNullable(T value)配合使用，</p><p>如果Optional容器中非空，就返回所包装值，如果为空，就用orElse(T other)other指定的默认值（备胎）代替</p><p>（3）T orElseGet(Supplier&lt;? extends T&gt; other)  ：</p><p>如果Optional容器中非空，就返回所包装值，如果为空，就用Supplier接口的Lambda表达式提供的值代替</p><p>（4）<X extends Throwable> T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) </p><p>如果Optional容器中非空，就返回所包装值，如果为空，就抛出你指定的异常类型代替原来的NoSuchElementException</p><p>3、其他方法</p><p>（1）boolean isPresent()  ：判断Optional容器中的值是否存在</p><p>（2）void ifPresent(Consumer&lt;? super T&gt; consumer) ：</p><p>判断Optional容器中的值是否存在，如果存在，就对它进行Consumer指定的操作，如果不存在就不做</p><p>（3）<U> Optional<U> map(Function&lt;? super T,? extends U&gt; mapper)  </p><p>判断Optional容器中的值是否存在，如果存在，就对它进行Function接口指定的操作，如果不存在就不做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOptional</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test9</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="comment">//判断是否是纯字母单词，如果是，转为大写，否则保持不变</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> opt.filter(s-&gt;s.matches(<span class="string">&quot;[a-zA-Z]+&quot;</span>)).</span><br><span class="line">map(s -&gt; s.toLowerCase()).</span><br><span class="line">orElse(str);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.orElseThrow(()-&gt;<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;值不存在&quot;</span>));</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.orElseGet(String::<span class="keyword">new</span>);</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.orElse(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line"><span class="comment">//System.out.println(opt.get());//java.util.NoSuchElementException: No value present</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">Optional&lt;String&gt; opt = Optional.of(str);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.get();</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">System.out.println(opt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">Optional&lt;String&gt; opt = Optional.of(str);</span><br><span class="line">System.out.println(opt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="17-3-2-练习"><a href="#17-3-2-练习" class="headerlink" title="17.3.2 练习"></a>17.3.2 练习</h3><h4 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h4><p>案例：</p><p>（1）声明一个Girl类型，包含姓名（String）属性</p><p>（2）声明一个Boy类型，包含姓名（String），女朋友（Girl）属性</p><p>（3）在测试类中，创建一个Boy对象，并</p><p>如果他有女朋友，显示他女朋友名称；</p><p>如果他没有女朋友，他的女朋友默认为“嫦娥”，即只能欣赏“嫦娥”了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Girl</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Girl [name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boy</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Girl girlFriend;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Boy</span><span class="params">(String name, Girl girlFriend)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.girlFriend = girlFriend;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Girl <span class="title function_">getGirlFriend</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> girlFriend;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGirlFriend</span><span class="params">(Girl girlFriend)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.girlFriend = girlFriend;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Boy [name=&quot;</span> + name + <span class="string">&quot;, girlFriend=&quot;</span> + girlFriend + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//Boy boy = new Boy(&quot;张三&quot;,null);</span></span><br><span class="line"><span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="string">&quot;张三&quot;</span>,<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;翠翠&quot;</span>));</span><br><span class="line">Optional&lt;Girl&gt; grilFriend = Optional.ofNullable(boy.getGirlFriend());</span><br><span class="line">Optional.of(grilFriend.orElse(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;嫦娥&quot;</span>))).ifPresent(g-&gt;System.out.println(g));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h4><p>案例：</p><p>（1）声明学生类，包含姓名和年龄</p><p>（2）添加几个学生对象到一个ArrayList<Student>集合中</p><p>（3）对集合中的学生进行操作，找出年龄大于30岁的，并取出第一个学生，如果没有这样的学生，用无参构造new一个学生对象，打印学生信息</p><p>学生类示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Student [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">ArrayList&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取出流中第一个年龄大于30岁的学生的年龄，并打印它的年龄，如果没有，用无参构造创建一个学生对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> list.stream()</span><br><span class="line">.filter(s -&gt; s.getAge()&gt;<span class="number">30</span>)</span><br><span class="line">.findFirst().orElse(<span class="keyword">new</span> <span class="title class_">Student</span>());</span><br><span class="line">System.out.println(<span class="string">&quot;学生的年龄：&quot;</span> + stu.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第17章-Java8新特性&quot;&gt;&lt;a href=&quot;#第17章-Java8新特性&quot; class=&quot;headerlink&quot; title=&quot;第17章 Java8新特性&quot;&gt;&lt;/a&gt;第17章 Java8新特性&lt;/h1&gt;&lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot;</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第16章 反射（Reflect）</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC16%E7%AB%A0-%E5%8F%8D%E5%B0%84%EF%BC%88Reflect%EF%BC%89/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC16%E7%AB%A0-%E5%8F%8D%E5%B0%84%EF%BC%88Reflect%EF%BC%89/</id>
    <published>2022-07-28T05:08:38.000Z</published>
    <updated>2022-10-16T04:43:25.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第16章-反射（Reflect）"><a href="#第16章-反射（Reflect）" class="headerlink" title="第16章 反射（Reflect）"></a>第16章 反射（Reflect）</h1><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 了解类的加载过程</li><li><input disabled="" type="checkbox"> 理解类初始化过程</li><li><input disabled="" type="checkbox"> 了解类加载器</li><li><input disabled="" type="checkbox"> 掌握获取Class对象的四种方式</li><li><input disabled="" type="checkbox"> 能够运用反射获取类型的详细信息</li><li><input disabled="" type="checkbox"> 能够运用反射动态创建对象</li><li><input disabled="" type="checkbox"> 能够运用反射动态获取成员变量并使用</li><li><input disabled="" type="checkbox"> 能够运用反射动态获取成员方法并使用</li><li><input disabled="" type="checkbox"> 能够运用反射读取注解</li><li><input disabled="" type="checkbox"> 能够运用反射获取泛型父类的类型参数</li></ul><h1 id="第16章-反射（Reflect）-1"><a href="#第16章-反射（Reflect）-1" class="headerlink" title="第16章 反射（Reflect）"></a>第16章 反射（Reflect）</h1><h2 id="16-1-类加载"><a href="#16-1-类加载" class="headerlink" title="16.1 类加载"></a>16.1 类加载</h2><p>类在内存中的生命周期：加载–&gt;使用–&gt;卸载</p><h3 id="16-1-1-类的加载过程"><a href="#16-1-1-类的加载过程" class="headerlink" title="16.1.1 类的加载过程"></a>16.1.1 类的加载过程</h3><p>当程序主动使用某个类时，如果该类还未被加载到内存中，系统会通过加载、连接、初始化三个步骤来对该类进行初始化，如果没有意外，JVM将会连续完成这三个步骤，所以有时也把这三个步骤统称为类加载。</p><p>类的加载又分为三个阶段：</p><p>（1）加载：load</p><p>就是指将类型的clas字节码数据读入内存</p><p>（2）连接：link</p><p>①验证：校验合法性等</p><p>②准备：准备对应的内存（方法区），创建Class对象，为类变量赋默认值，为静态常量赋初始值。</p><p>③解析：把字节码中的符号引用替换为对应的直接地址引用</p><p>（3）初始化：initialize（类初始化）即执行<clinit>类初始化方法，大多数情况下，类的加载就完成了类的初始化，有些情况下，会延迟类的初始化。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1560767438339.png" alt="1560767438339"></p><h3 id="16-1-2-类初始化"><a href="#16-1-2-类初始化" class="headerlink" title="16.1.2 类初始化"></a>16.1.2 类初始化</h3><p>1、哪些操作会导致类的初始化？</p><p>（1）运行主方法所在的类，要先完成类初始化，再执行main方法</p><p>（2）第一次使用某个类型就是在new它的对象，此时这个类没有初始化的话，先完成类初始化再做实例初始化</p><p>（3）调用某个类的静态成员（类变量和类方法），此时这个类没有初始化的话，先完成类初始化</p><p>（4）子类初始化时，发现它的父类还没有初始化的话，那么先初始化父类</p><p>（5）通过反射操作某个类时，如果这个类没有初始化，也会导致该类先初始化</p><blockquote><p>类初始化执行的是<clinit>()，该方法由（1）类变量的显式赋值代码（2）静态代码块中的代码构成</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;main方法所在的类的父类(1)&quot;</span>);<span class="comment">//初始化子类时，会初始化父类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClinit1</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;main方法所在的类(2)&quot;</span>);<span class="comment">//主方法所在的类会初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">A</span>();<span class="comment">//第一次使用A就是创建它的对象，会初始化A类</span></span><br><span class="line"></span><br><span class="line">B.test();<span class="comment">//直接使用B类的静态成员会初始化B类</span></span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.test02.C&quot;</span>);<span class="comment">//通过反射操作C类，会初始化C类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A类初始化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B类初始化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B类的静态方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;C类初始化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、哪些使用类的操作，但是不会导致类的初始化？</p><p>（1）使用某个类的静态的常量（static  final）</p><p>（2）通过子类调用父类的静态变量，静态方法，只会导致父类初始化，不会导致子类初始化，即只有声明静态成员的类才会初始化</p><p>（3）用某个类型声明数组并创建数组对象时，不会导致这个类初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClinit2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(D.NUM);<span class="comment">//D类不会初始化，因为NUM是final的</span></span><br><span class="line"></span><br><span class="line">System.out.println(F.num);</span><br><span class="line">F.test();<span class="comment">//F类不会初始化，E类会初始化，因为num和test()是在E类中声明的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//G类不会初始化，此时还没有正式用的G类</span></span><br><span class="line">G[] arr = <span class="keyword">new</span> <span class="title class_">G</span>[<span class="number">5</span>];<span class="comment">//没有创建G的对象，创建的是准备用来装G对象的数组对象</span></span><br><span class="line">        <span class="comment">//G[]是一种新的类型，是数组类想，动态编译生成的一种新的类型</span></span><br><span class="line">        <span class="comment">//G[].class</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NUM</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D类的初始化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;E父类的初始化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;父类的静态方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span> <span class="keyword">extends</span> <span class="title class_">E</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;F子类的初始化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">G</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;G类的初始化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-1-3-类加载器"><a href="#16-1-3-类加载器" class="headerlink" title="16.1.3 类加载器"></a>16.1.3 类加载器</h3><p>很多开发人员都遇到过java.lang.ClassNotFoundException或java.lang.NoClassDefError，想要更好的解决这类问题，或者在一些特殊的应用场景，比如需要支持类的动态加载或需要对编译后的字节码文件进行加密解密操作，那么需要你自定义类加载器，因此了解类加载器及其类加载机制也就成了每一个Java开发人员的必备技能之一。</p><p><strong>1、类加载器分为：</strong></p><p>（1）引导类加载器（Bootstrap Classloader）又称为根类加载器</p><pre><code>它负责加载jre/rt.jar核心库它本身不是Java代码实现的，也不是ClassLoader的子类，获取它的对象时往往返回null</code></pre><p>（2）扩展类加载器（Extension ClassLoader）</p><pre><code>它负责加载jre/lib/ext扩展库它是ClassLoader的子类</code></pre><p>（3）应用程序类加载器（Application Classloader）</p><pre><code>它负责加载项目的classpath路径下的类它是ClassLoader的子类</code></pre><p>（4）自定义类加载器</p><pre><code>当你的程序需要加载“特定”目录下的类，可以自定义类加载器；当你的程序的字节码文件需要加密时，那么往往会提供一个自定义类加载器对其进行解码后面会见到的自定义类加载器：tomcat中</code></pre><p><strong>2、Java系统类加载器的双亲委托模式</strong></p><p>简单描述：</p><pre><code>下一级的类加载器，如果接到任务时，会先搜索是否加载过，如果没有，会先把任务往上传，如果都没有加载过，一直到根加载器，如果根加载器在它负责的路径下没有找到，会往回传，如果一路回传到最后一级都没有找到，那么会报ClassNotFoundException或NoClassDefError，如果在某一级找到了，就直接返回Class对象。</code></pre><p>应用程序类加载器  把  扩展类加载器视为父加载器，</p><p>扩展类加载器 把 引导类加载器视为父加载器。</p><p>不是继承关系，是组合的方式实现的。</p><h2 id="16-2-javalang-Class类"><a href="#16-2-javalang-Class类" class="headerlink" title="16.2  javalang.Class类"></a>16.2  javalang.Class类</h2><p>Java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制。</p><p>要想解剖一个类，必须先要获取到该类的Class对象。而剖析一个类或用反射解决具体的问题就是使用相关API（1）java.lang.Class（2）java.lang.reflect.*。所以，Class对象是反射的根源。</p><h3 id="1、哪些类型可以获取Class对象"><a href="#1、哪些类型可以获取Class对象" class="headerlink" title="1、哪些类型可以获取Class对象"></a>1、哪些类型可以获取Class对象</h3><p>所有Java类型</p><p>用代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）基本数据类型和void</span></span><br><span class="line">例如：<span class="type">int</span>.<span class="keyword">class</span></span><br><span class="line"> <span class="title class_">void</span>.class</span><br><span class="line"><span class="comment">//（2）类和接口</span></span><br><span class="line">例如：String.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Comparable</span>.class</span><br><span class="line"><span class="comment">//（3）枚举</span></span><br><span class="line">例如：ElementType.class</span><br><span class="line"><span class="comment">//（4）注解</span></span><br><span class="line">例如：Override.class</span><br><span class="line"><span class="comment">//（5）数组</span></span><br><span class="line">例如：<span class="type">int</span>[].class</span><br></pre></td></tr></table></figure><h3 id="2、获取Class对象的四种方式"><a href="#2、获取Class对象的四种方式" class="headerlink" title="2、获取Class对象的四种方式"></a>2、获取Class对象的四种方式</h3><p>（1）类型名.class</p><p>要求编译期间已知类型</p><p>（2）对象.getClass()</p><p>获取对象的运行时类型</p><p>（3）Class.forName(类型全名称)</p><p> 可以获取编译期间未知的类型</p><p>（4）ClassLoader的类加载器对象.loadClass(类型全名称)</p><p>可以用系统类加载对象或自定义加载器对象加载指定路径下的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> TestClass.class;</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> c.getClassLoader();</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> loader.loadClass(<span class="string">&quot;com.atguigu.test05.Employee&quot;</span>);</span><br><span class="line"><span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Employee.class;</span><br><span class="line">System.out.println(c2 == c3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> String.class;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>.getClass();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(c1 == c2);</span><br><span class="line">System.out.println(c1 == c3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、查看某个类的类加载器对象"><a href="#3、查看某个类的类加载器对象" class="headerlink" title="3、查看某个类的类加载器对象"></a>3、查看某个类的类加载器对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取应用程序类加载器对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取扩展类加载器对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取根加载器对象</span></span><br></pre></td></tr></table></figure><h2 id="16-3-反射的应用"><a href="#16-3-反射的应用" class="headerlink" title="16.3 反射的应用"></a>16.3 反射的应用</h2><h3 id="16-3-1-获取类型的详细信息"><a href="#16-3-1-获取类型的详细信息" class="headerlink" title="16.3.1 获取类型的详细信息"></a>16.3.1 获取类型的详细信息</h3><p>可以获取：包、修饰符、类型名、父类（包括泛型父类）、父接口（包括泛型父接口）、成员（属性、构造器、方法）、注解（类上的、方法上的、属性上的）</p><p>示例代码获取常规信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassInfo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, SecurityException &#123;</span><br><span class="line"><span class="comment">//1、先得到某个类型的Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> String.class;</span><br><span class="line"><span class="comment">//比喻clazz好比是镜子中的影子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取类信息</span></span><br><span class="line"><span class="comment">//（1）获取包对象，即所有java的包，都是Package的对象</span></span><br><span class="line"><span class="type">Package</span> <span class="variable">pkg</span> <span class="operator">=</span> clazz.getPackage();</span><br><span class="line">System.out.println(<span class="string">&quot;包名：&quot;</span> + pkg.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//（2）获取修饰符</span></span><br><span class="line"><span class="comment">//其实修饰符是Modifier，里面有很多常量值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 0x是十六进制</span></span><br><span class="line"><span class="comment"> * PUBLIC           = 0x00000001;  1    1</span></span><br><span class="line"><span class="comment"> * PRIVATE          = 0x00000002;  210</span></span><br><span class="line"><span class="comment"> * PROTECTED        = 0x00000004;  4100</span></span><br><span class="line"><span class="comment"> * STATIC           = 0x00000008;  81000</span></span><br><span class="line"><span class="comment"> * FINAL            = 0x00000010;  1610000</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 设计的理念，就是用二进制的某一位是1，来代表一种修饰符，整个二进制中只有一位是1，其余都是0</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * mod = 17          0x00000011</span></span><br><span class="line"><span class="comment"> * if ((mod &amp; PUBLIC) != 0)  说明修饰符中有public</span></span><br><span class="line"><span class="comment"> * if ((mod &amp; FINAL) != 0)   说明修饰符中有final</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> clazz.getModifiers();</span><br><span class="line">System.out.println(Modifier.toString(mod));</span><br><span class="line"></span><br><span class="line"><span class="comment">//（3）类型名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getName();</span><br><span class="line">System.out.println(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//（4）父类，父类也有父类对应的Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">superclass</span> <span class="operator">=</span> clazz.getSuperclass();</span><br><span class="line">System.out.println(superclass);</span><br><span class="line"></span><br><span class="line"><span class="comment">//（5）父接口们</span></span><br><span class="line">Class[] interfaces = clazz.getInterfaces();</span><br><span class="line"><span class="keyword">for</span> (Class class1 : interfaces) &#123;</span><br><span class="line">System.out.println(class1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（6）类的属性，  你声明的一个属性，它是Field的对象</span></span><br><span class="line"><span class="comment">/*Field clazz.getField(name)  根据属性名获取一个属性对象，但是只能得到公共的</span></span><br><span class="line"><span class="comment">Field[] clazz.getFields();  获取所有公共的属性</span></span><br><span class="line"><span class="comment">Field clazz.getDeclaredField(name)  根据属性名获取一个属性对象，可以获取已声明的</span></span><br><span class="line"><span class="comment">Field[] clazz.getDeclaredFields()获取所有已声明的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">valueField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="comment">//System.out.println(&quot;valueField = &quot; +valueField);</span></span><br><span class="line"></span><br><span class="line">Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line"><span class="comment">//修饰符、数据类型、属性名    </span></span><br><span class="line"><span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> field.getModifiers();</span><br><span class="line">System.out.println(<span class="string">&quot;属性的修饰符：&quot;</span> + Modifier.toString(modifiers));</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name2</span> <span class="operator">=</span> field.getName();</span><br><span class="line">System.out.println(<span class="string">&quot;属性名：&quot;</span> + name2);</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; type = field.getType();</span><br><span class="line">System.out.println(<span class="string">&quot;属性的数据类型：&quot;</span> + type);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"><span class="comment">//（7）构造器们</span></span><br><span class="line">Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line"><span class="comment">//修饰符、构造器名称、构造器形参列表  、抛出异常列表</span></span><br><span class="line"><span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> constructor.getModifiers();</span><br><span class="line">System.out.println(<span class="string">&quot;构造器的修饰符：&quot;</span> + Modifier.toString(modifiers));</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name2</span> <span class="operator">=</span> constructor.getName();</span><br><span class="line">System.out.println(<span class="string">&quot;构造器名：&quot;</span> + name2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//形参列表</span></span><br><span class="line">System.out.println(<span class="string">&quot;形参列表：&quot;</span>);</span><br><span class="line">Class[] parameterTypes = constructor.getParameterTypes();</span><br><span class="line"><span class="keyword">for</span> (Class parameterType : parameterTypes) &#123;</span><br><span class="line">System.out.println(parameterType);</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//异常列表</span></span><br><span class="line">System.out.println(<span class="string">&quot;异常列表：&quot;</span>);</span><br><span class="line">Class&lt;?&gt;[] exceptionTypes = constructor.getExceptionTypes();</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; exceptionType : exceptionTypes) &#123;</span><br><span class="line">System.out.println(exceptionType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;=--------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">//(8)方法们</span></span><br><span class="line">Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method : declaredMethods) &#123;</span><br><span class="line"><span class="comment">//修饰符、返回值类型、方法名、形参列表 、异常列表 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> method.getModifiers();</span><br><span class="line">System.out.println(<span class="string">&quot;方法的修饰符：&quot;</span> + Modifier.toString(modifiers));</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">System.out.println(<span class="string">&quot;返回值类型:&quot;</span> + returnType);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name2</span> <span class="operator">=</span> method.getName();</span><br><span class="line">System.out.println(<span class="string">&quot;方法名：&quot;</span> + name2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//形参列表</span></span><br><span class="line">System.out.println(<span class="string">&quot;形参列表：&quot;</span>);</span><br><span class="line">Class[] parameterTypes = method.getParameterTypes();</span><br><span class="line"><span class="keyword">for</span> (Class parameterType : parameterTypes) &#123;</span><br><span class="line">System.out.println(parameterType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常列表</span></span><br><span class="line">System.out.println(<span class="string">&quot;异常列表：&quot;</span>);</span><br><span class="line">Class&lt;?&gt;[] exceptionTypes = method.getExceptionTypes();</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; exceptionType : exceptionTypes) &#123;</span><br><span class="line">System.out.println(exceptionType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-3-2-创建任意引用类型的对象"><a href="#16-3-2-创建任意引用类型的对象" class="headerlink" title="16.3.2  创建任意引用类型的对象"></a>16.3.2  创建任意引用类型的对象</h3><p>两种方式：</p><p>1、直接通过Class对象来实例化（要求必须有无参构造）</p><p>2、通过获取构造器对象来进行实例化</p><p>方式一的步骤：</p><p>（1）获取该类型的Class对象（2）创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.atguigu.test.Student&quot;</span>);</span><br><span class="line"><span class="comment">//Caused by: java.lang.NoSuchMethodException: com.atguigu.test.Student.&lt;init&gt;()</span></span><br><span class="line"><span class="comment">//即说明Student没有无参构造，就没有无参实例初始化方法&lt;init&gt;</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">stu</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException&#123;</span><br><span class="line"><span class="comment">//AtGuigu obj = new AtGuigu();//编译期间无法创建</span></span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.atguigu.test.AtGuigu&quot;</span>);</span><br><span class="line"><span class="comment">//clazz代表com.atguigu.test.AtGuigu类型</span></span><br><span class="line"><span class="comment">//clazz.newInstance()创建的就是AtGuigu的对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二的步骤：</p><p>（1）获取该类型的Class对象（2）获取构造器对象（3）创建对象</p><blockquote><p>如果构造器的权限修饰符修饰的范围不可见，也可以调用setAccessible(true)</p></blockquote><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNewInstance</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//(1)获取Class对象</span></span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.atguigu.test.Student&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取Student类型中的有参构造</span></span><br><span class="line"><span class="comment"> * 如果构造器有多个，我们通常是根据形参【类型】列表来获取指定的一个构造器的</span></span><br><span class="line"><span class="comment"> * 例如：public Student(int id, String name) </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//(2)获取构造器对象</span></span><br><span class="line">Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(<span class="type">int</span>.class,String.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)创建实例对象</span></span><br><span class="line"><span class="comment">// T newInstance(Object... initargs)  这个Object...是在创建对象时，给有参构造的实参列表</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(<span class="number">2</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-3-3-操作任意类型的属性"><a href="#16-3-3-操作任意类型的属性" class="headerlink" title="16.3.3 操作任意类型的属性"></a>16.3.3 操作任意类型的属性</h3><p>（1）获取该类型的Class对象<br>Class clazz &#x3D; Class.forName(“com.atguigu.bean.User”);</p><p>（2）获取属性对象<br>Field field &#x3D; clazz.getDeclaredField(“username”);</p><p>（3）设置属性可访问</p><p>field.setAccessible(true);</p><p>（4）创建实例对象：如果操作的是非静态属性，需要创建实例对象<br>Object obj &#x3D; clazz.newInstance();</p><p>（4）设置属性值</p><p>field.set(obj,”chai”);<br>（5）获取属性值<br>Object value &#x3D; field.get(obj);</p><blockquote><p>如果操作静态变量，那么实例对象可以省略，用null表示</p></blockquote><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestField</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//1、获取Student的Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.test.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取属性对象，例如：id属性</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">idField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3、如果id是私有的等在当前类中不可访问access的，我们需要做如下操作</span></span><br><span class="line">idField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、创建实例对象，即，创建Student对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">stu</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、获取属性值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 以前：int 变量= 学生对象.getId()</span></span><br><span class="line"><span class="comment"> * 现在：Object id属性对象.get(学生对象)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> idField.get(stu);</span><br><span class="line">System.out.println(<span class="string">&quot;id = &quot;</span>+ value);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6、设置属性值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 以前：学生对象.setId(值)</span></span><br><span class="line"><span class="comment"> * 现在：id属性对象.set(学生对象,值)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">idField.set(stu, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">value = idField.get(stu);</span><br><span class="line">System.out.println(<span class="string">&quot;id = &quot;</span>+ value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-3-4-调用任意类型的方法"><a href="#16-3-4-调用任意类型的方法" class="headerlink" title="16.3.4 调用任意类型的方法"></a>16.3.4 调用任意类型的方法</h3><p>（1）获取该类型的Class对象<br>Class clazz &#x3D; Class.forName(“com.atguigu.service.UserService”);<br>（2）获取方法对象<br>Method method &#x3D; clazz.getDeclaredMethod(“login”,String.class,String.class);<br>（3）创建实例对象<br>Object obj &#x3D; clazz.newInstance();<br>（4）调用方法<br>Object result &#x3D; method.invoke(obj,”chai”,”123);</p><blockquote><p>如果方法的权限修饰符修饰的范围不可见，也可以调用setAccessible(true)</p><p>如果方法是静态方法，实例对象也可以省略，用null代替</p></blockquote><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 1、获取Student的Class对象</span></span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.atguigu.test.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取方法对象</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在一个类中，唯一定位到一个方法，需要：（1）方法名（2）形参列表，因为方法可能重载</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 例如：void setName(String name)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、创建实例对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">stu</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、调用方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 以前：学生对象.setName(值)</span></span><br><span class="line"><span class="comment"> * 现在：方法对象.invoke(学生对象，值)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">method.invoke(stu, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-3-5-获取泛型父类信息"><a href="#16-3-5-获取泛型父类信息" class="headerlink" title="16.3.5 获取泛型父类信息"></a>16.3.5 获取泛型父类信息</h3><p>示例代码获取泛型父类信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Type：</span></span><br><span class="line"><span class="comment"> * （1）Class</span></span><br><span class="line"><span class="comment"> * （2）ParameterizedType   </span></span><br><span class="line"><span class="comment"> * 例如：Father&lt;String,Integer&gt;</span></span><br><span class="line"><span class="comment"> * ArrayList&lt;String&gt;</span></span><br><span class="line"><span class="comment"> * （3）TypeVariable</span></span><br><span class="line"><span class="comment"> * 例如：T，U,E,K,V</span></span><br><span class="line"><span class="comment"> * （4）WildcardType</span></span><br><span class="line"><span class="comment"> * 例如：</span></span><br><span class="line"><span class="comment"> * ArrayList&lt;?&gt;</span></span><br><span class="line"><span class="comment"> * ArrayList&lt;? super 下限&gt;</span></span><br><span class="line"><span class="comment"> * ArrayList&lt;? extends 上限&gt;</span></span><br><span class="line"><span class="comment"> * （5）GenericArrayType</span></span><br><span class="line"><span class="comment"> * 例如：T[]</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//需求：在运行时，获取Son类型的泛型父类的泛型实参&lt;String,Integer&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//（1）还是先获取Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Son.class;<span class="comment">//四种形式任意一种都可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//（2）获取泛型父类</span></span><br><span class="line"><span class="comment">//Class sc = clazz.getSuperclass();</span></span><br><span class="line"><span class="comment">//System.out.println(sc);</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * getSuperclass()只能得到父类名，无法得到父类的泛型实参列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> clazz.getGenericSuperclass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Father&lt;String,Integer&gt;属于ParameterizedType</span></span><br><span class="line"><span class="type">ParameterizedType</span> <span class="variable">pt</span> <span class="operator">=</span> (ParameterizedType) type;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（3）获取泛型父类的泛型实参列表</span></span><br><span class="line">Type[] typeArray = pt.getActualTypeArguments();</span><br><span class="line"><span class="keyword">for</span> (Type type2 : typeArray) &#123;</span><br><span class="line">System.out.println(type2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//泛型形参：&lt;T,U&gt;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&lt;T,U&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//泛型实参：&lt;String,Integer&gt;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&lt;String,Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-3-6-读取注解信息"><a href="#16-3-6-读取注解信息" class="headerlink" title="16.3.6 读取注解信息"></a>16.3.6 读取注解信息</h3><p>示例代码读取注解信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAnnotation</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//需求：可以获取MyClass类型上面配置的注解@MyAnnotation的value值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取注解</span></span><br><span class="line"><span class="comment">//（1）获取Class对象</span></span><br><span class="line">Class&lt;MyClass&gt; clazz = MyClass.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（2）获取注解对象</span></span><br><span class="line"><span class="comment">//获取指定注解对象</span></span><br><span class="line"><span class="type">MyAnnotation</span> <span class="variable">my</span> <span class="operator">=</span> clazz.getAnnotation(MyAnnotation.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//（3）获取配置参数值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> my.value();</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">//说明这个注解可以保留到运行时</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span> <span class="comment">//说明这个注解只能用在类型上面，包括类，接口，枚举等</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line"><span class="comment">//配置参数，如果只有一个配置参数，并且名称是value，在赋值时可以省略value=</span></span><br><span class="line">String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用注解</span></span><br><span class="line"><span class="meta">@MyAnnotation(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-3-7-获取内部类或外部类信息"><a href="#16-3-7-获取内部类或外部类信息" class="headerlink" title="16.3.7 获取内部类或外部类信息"></a>16.3.7 获取内部类或外部类信息</h3><p>public Class&lt;?&gt;[] getClasses()：返回所有公共内部类和内部接口。包括从超类继承的公共类和接口成员以及该类声明的公共类和接口成员。</p><p>public Class&lt;?&gt;[] getDeclaredClasses()：返回 Class 对象的一个数组，这些对象反映声明为此 Class 对象所表示的类的成员的所有类和接口。包括该类所声明的公共、保护、默认（包）访问及私有类和接口，但不包括继承的类和接口。</p><p>public Class&lt;?&gt; getDeclaringClass()：如果此 Class 对象所表示的类或接口是一个内部类或内部接口，则返回它的外部类或外部接口，否则返回null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">Class&lt;?&gt; clazz = Map.class;</span><br><span class="line">Class&lt;?&gt;[] inners = clazz.getDeclaredClasses();</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; inner : inners) &#123;</span><br><span class="line">System.out.println(inner);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; ec = Map.Entry.class;</span><br><span class="line">Class&lt;?&gt; outer = ec.getDeclaringClass();</span><br><span class="line">System.out.println(outer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-3-8-动态创建和操作任意类型的数组"><a href="#16-3-8-动态创建和操作任意类型的数组" class="headerlink" title="16.3.8 动态创建和操作任意类型的数组"></a>16.3.8 动态创建和操作任意类型的数组</h3><p>在java.lang.reflect包下还提供了一个Array类，Array对象可以代表所有的数组。程序可以通过使用Array类来动态的创建数组，操作数组元素等。</p><p>Array类提供了如下几个方法：</p><p>public static Object newInstance(Class&lt;?&gt; componentType, int… dimensions)：创建一个具有指定的组件类型和维度的新数组。</p><p>public static void setXxx(Object array,int index,xxx value)：将array数组中[index]元素的值修改为value。此处的Xxx对应8种基本数据类型，如果该属性的类型是引用数据类型，则直接使用set(Object array,int index, Object value)方法。</p><p>public static xxx getXxx(Object array,int index,xxx value)：将array数组中[index]元素的值返回。此处的Xxx对应8种基本数据类型，如果该属性的类型是引用数据类型，则直接使用get(Object array,int index)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestArray</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">arr</span> <span class="operator">=</span> Array.newInstance(String.class, <span class="number">5</span>);</span><br><span class="line">Array.set(arr, <span class="number">0</span>, <span class="string">&quot;尚硅谷&quot;</span>);</span><br><span class="line">Array.set(arr, <span class="number">1</span>, <span class="string">&quot;佟刚&quot;</span>);</span><br><span class="line">System.out.println(Array.get(arr, <span class="number">0</span>));</span><br><span class="line">System.out.println(Array.get(arr, <span class="number">1</span>));</span><br><span class="line">System.out.println(Array.get(arr, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第16章-反射（Reflect）&quot;&gt;&lt;a href=&quot;#第16章-反射（Reflect）&quot; class=&quot;headerlink&quot; title=&quot;第16章 反射（Reflect）&quot;&gt;&lt;/a&gt;第16章 反射（Reflect）&lt;/h1&gt;&lt;h2 id=&quot;教学目标&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第15章 网络编程</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC15%E7%AB%A0-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC15%E7%AB%A0-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2022-07-28T05:08:24.000Z</published>
    <updated>2022-10-16T04:43:25.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第15章-网络编程"><a href="#第15章-网络编程" class="headerlink" title="第15章 网络编程"></a>第15章 网络编程</h1><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 了解网络通信协议参考模型</li><li><input disabled="" type="checkbox"> 能够理解IP地址和端口号的作用</li><li><input disabled="" type="checkbox"> 能够在程序中表示IP地址和端口号</li><li><input disabled="" type="checkbox"> 能够说出TCP和UDP网络协议的区别</li><li><input disabled="" type="checkbox"> 了解基于Socket的TCP网络编程</li><li><input disabled="" type="checkbox"> 了解基于Socket的UDP网络编程</li></ul><h1 id="第15章-网络编程-1"><a href="#第15章-网络编程-1" class="headerlink" title="第15章 网络编程"></a>第15章 网络编程</h1><h2 id="15-1-软件结构"><a href="#15-1-软件结构" class="headerlink" title="15.1 软件结构"></a>15.1 软件结构</h2><ul><li><strong>C&#x2F;S结构</strong> ：全称为Client&#x2F;Server结构，是指客户端和服务器结构。常见程序有ＱＱ、红蜘蛛、飞秋等软件。</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1_cs.jpg"></p><p><strong>B&#x2F;S结构</strong> ：全称为Browser&#x2F;Server结构，是指浏览器和服务器结构。常见浏览器有IE、谷歌、火狐等。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/2_bs.jpg"></p><p>两种架构各有优势，但是无论哪种架构，都离不开网络的支持。<strong>网络编程</strong>，就是在一定的协议下，实现两台计算机的通信的程序。</p><h2 id="15-2-网络通信协议"><a href="#15-2-网络通信协议" class="headerlink" title="15.2 网络通信协议"></a>15.2 网络通信协议</h2><h3 id="15-2-1-TCP-x2F-IP协议参考模型"><a href="#15-2-1-TCP-x2F-IP协议参考模型" class="headerlink" title="15.2.1 TCP&#x2F;IP协议参考模型"></a>15.2.1 TCP&#x2F;IP协议参考模型</h3><ul><li><p><strong>网络通信协议：</strong>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。</p></li><li><p><strong>TCP&#x2F;IP协议：</strong> 传输控制协议&#x2F;因特网互联协议( Transmission Control Protocol&#x2F;Internet Protocol)，是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</p></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1564019044385.png" alt="1564019044385"></p><p>上图中，OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广。 TCP&#x2F;IP参考模型(或TCP&#x2F;IP协议)：事实上的国际标准。</p><ul><li>TCP&#x2F;IP协议中的四层分别是应用层、传输层、网络层和链路层，每层分别负责不同的通信功能。<br>链路层：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。</li><li>网络层：网络层是整个TCP&#x2F;IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。而IP协议是一种非常重要的协议。IP（internet protocal）又称为互联网协议。IP的责任就是把数据从源传送到目的地。它在源地址和目的地址之间传送一种称之为数据包的东西，它还提供对数据大小的重新组装功能，以适应不同网络对包大小的要求。</li><li>传输层：主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。TCP（Transmission Control Protocol）协议，即传输控制协议，是一种面向连接的、可靠的、基于字节流的传输层通信协议。UDP(User Datagram Protocol，用户数据报协议)：是一个无连接的传输层协议、提供面向事务的简单不可靠的信息传送服务。</li><li>应用层：主要负责应用程序的协议，例如HTTP协议、FTP协议等。</li></ul><p>而通常我们说的TCP&#x2F;IP协议，其实是指TCP&#x2F;IP协议族，因为该协议家族的两个最核心协议：TCP（传输控制协议）和IP（网际协议），为该家族中最早通过的标准，所以简称为TCP&#x2F;IP协议。</p><h3 id="15-2-2-TCP与UDP协议"><a href="#15-2-2-TCP与UDP协议" class="headerlink" title="15.2.2 TCP与UDP协议"></a>15.2.2 TCP与UDP协议</h3><p>通信的协议还是比较复杂的，<code>java.net</code> 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。</p><p><code>java.net</code> 包中提供了两种常见的网络协议的支持：</p><ul><li><p><strong>UDP</strong>：用户数据报协议(User Datagram Protocol)。</p><ul><li><p><strong>非面向连的，不可靠的：</strong>UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</p><p>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输例如视频会议都使用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。</p><p>但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议。</p></li><li><p><strong>大小限制的</strong>：数据被限制在64kb以内，超出这个范围就不能发送了。</p></li><li><p>**数据报(Datagram)**：网络传输的基本单位</p></li></ul></li><li><p><strong>TCP</strong>：传输控制协议 (Transmission Control Protocol)。</p><ul><li><p><strong>面向连接的，可靠的</strong>：TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。是一种面向连接的、可靠的、基于字节流的传输层的通信协议，可以连续传输大量的数据。类似于打电话的效果。</p><p>这是因为它为当一台计算机需要与另一台远程计算机连接时，TCP协议会采用“三次握手”方式让它们建立一个连接，用于发送和接收数据的虚拟链路。数据传输完毕TCP协议会采用“四次挥手”方式断开连接。</p><p>TCP协议负责收集这些信息包，并将其按适当的次序放好传送，在接收端收到后再将其正确的还原。TCP协议保证了数据包在传送中准确无误。TCP协议使用重发机制，当一个通信实体发送一个消息给另一个通信实体后，需要收到另一个通信实体确认信息，如果没有收到另一个通信实体确认信息，则会再次重复刚才发送的消息。</p></li></ul></li><li><p><strong>三次握手：</strong>TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。</p><ul><li><p>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</p></li><li><p>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</p></li><li><p>第三次握手，客户端再次向服务器端发送确认信息，确认连接。</p></li></ul></li></ul><p> <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1564020243342.png" alt="1564020243342"></p><ul><li><strong>四次挥手：</strong>TCP协议中，在发送数据结束后，释放连接时需要经过四次挥手。<ul><li>第一次挥手：客户端向服务器端提出结束连接，让服务器做最后的准备工作。此时，客户端处于半关闭状态，即表示不再向服务器发送数据了，但是还可以接受数据。</li><li>第二次挥手：服务器接收到客户端释放连接的请求后，会将最后的数据发给客户端。并告知上层的应用进程不再接收数据。</li><li>第三次挥手：服务器发送完数据后，会给客户端发送一个释放连接的报文。那么客户端接收后就知道可以正式释放连接了。</li><li>第四次挥手：客户端接收到服务器最后的释放连接报文后，要回复一个彻底断开的报文。这样服务器收到后才会彻底释放连接。这里客户端，发送完最后的报文后，会等待2MSL，因为有可能服务器没有收到最后的报文，那么服务器迟迟没收到，就会再次给客户端发送释放连接的报文，此时客户端在等待时间范围内接收到，会重新发送最后的报文，并重新计时。如果等待2MSL后，没有收到，那么彻底断开。</li></ul></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1564021582928.png" alt="1564021582928"></p><p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p><h2 id="15-3-网络编程三要素"><a href="#15-3-网络编程三要素" class="headerlink" title="15.3 网络编程三要素"></a>15.3 网络编程三要素</h2><h3 id="1、协议"><a href="#1、协议" class="headerlink" title="1、协议"></a>1、协议</h3><ul><li><strong>协议：</strong>计算机网络通信必须遵守的规则，已经介绍过了，不再赘述。</li></ul><h3 id="2、IP地址"><a href="#2、IP地址" class="headerlink" title="2、IP地址"></a>2、IP地址</h3><p><strong>IP地址：指互联网协议地址（Internet Protocol Address）</strong>，俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</p><p><strong>IP地址分类方式一：</strong></p><ul><li><p>IPv4：是一个32位的二进制数，通常被分为4个字节，表示成<code>a.b.c.d</code> 的形式，例如<code>192.168.65.100</code> 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。</p></li><li><p>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。</p><p>为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，表示成<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code>，号称可以为全世界的每一粒沙子编上一个网址，这样就解决了网络地址资源数量不够的问题。</p></li></ul><p><strong>IP地址分类方式二：</strong></p><p>公网地址( 万维网使用)和 私有地址( 局域网使用)。192.168.开头的就是私有址址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用</p><p><strong>常用命令：</strong></p><ul><li>查看本机IP地址，在控制台输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><ul><li>检查网络是否连通，在控制台输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping 空格 IP地址</span><br><span class="line">ping <span class="number">220.181</span><span class="number">.57</span><span class="number">.216</span></span><br></pre></td></tr></table></figure><p><strong>特殊的IP地址：</strong></p><ul><li>本地回环地址(hostAddress)：<code>127.0.0.1</code>  </li><li>主机名(hostName)：<code>localhost</code></li></ul><p><strong>域名：</strong></p><p>因为IP地址数字不便于记忆，因此出现了域名，域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS)负责将域名转化成IP地址，这样才能和主机建立连接。 ——- 域名解析</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1564021975715.png" alt="1564021975715"></p><h3 id="3、端口号"><a href="#3、端口号" class="headerlink" title="3、端口号"></a>3、端口号</h3><p>网络的通信，本质上是两个进程（应用程序）的通信。每台计算机都有很多的进程，那么在网络通信时，如何区分这些进程呢？</p><p>如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）了。</p><ul><li><strong>端口号：用两个字节表示的整数，它的取值范围是0~65535</strong>。<ul><li>公认端口：0~1023。被预先定义的服务通信占用，如：HTTP（80），FTP（21），Telnet（23）</li><li>注册端口：1024~49151。分配给用户进程或应用程序。如：Tomcat（8080），MySQL（3306），Oracle（1521）。</li><li>动态&#x2F; 私有端口：49152~65535。</li></ul></li></ul><p>如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</p><p>利用<code>协议</code>+<code>IP地址</code>+<code>端口号</code> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p><h2 id="15-4-InetAddress类"><a href="#15-4-InetAddress类" class="headerlink" title="15.4 InetAddress类"></a>15.4 InetAddress类</h2><p>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p><p>Internet上的主机有两种方式表示地址：</p><ul><li>域名(hostName)：<a href="http://www.atguigu.com/">www.atguigu.com</a></li><li>IP 地址(hostAddress)：202.108.35.210</li></ul><p>lInetAddress 类没有提供公共的构造器，而是提供 了 如下几个 静态方法来获取InetAddress 实例</p><ul><li>public static InetAddress getLocalHost()</li><li>public static InetAddress getByName(String host)</li><li>public static InetAddress getByAddress(byte[] addr)</li></ul><p>InetAddress 提供了如下几个常用的方法</p><ul><li>public String getHostAddress() ：返回 IP 地址字符串（以文本表现形式）。</li><li>public String getHostName() ：获取此 IP 地址的主机名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInetAddress</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException&#123;</span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">System.out.println(localHost);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span><span class="keyword">throws</span> UnknownHostException&#123;</span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">atguigu</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.atguigu.com&quot;</span>);</span><br><span class="line">System.out.println(atguigu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span><span class="keyword">throws</span> UnknownHostException&#123;</span><br><span class="line"><span class="comment">//byte[] addr = &#123;112,54,108,98&#125;;</span></span><br><span class="line"><span class="type">byte</span>[] addr = &#123;(<span class="type">byte</span>)<span class="number">192</span>,(<span class="type">byte</span>)<span class="number">168</span>,<span class="number">24</span>,<span class="number">56</span>&#125;;</span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">atguigu</span> <span class="operator">=</span> InetAddress.getByAddress(addr);</span><br><span class="line">System.out.println(atguigu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1564024137998.png" alt="1564024137998"></p><h2 id="15-5-Socket"><a href="#15-5-Socket" class="headerlink" title="15.5 Socket"></a>15.5 Socket</h2><p>通信的两端都要有Socket（也可以叫“套接字”），是两台机器间通信的端点。网络通信其实就是Socket间的通信。Socket可以分为：</p><ul><li>流套接字（stream socket）：使用TCP提供可依赖的字节流服务<ul><li>ServerSocket：此类实现TCP服务器套接字。服务器套接字等待请求通过网络传入。</li><li>Socket：此类实现客户端套接字（也可以就叫“套接字”）。套接字是两台机器间通信的端点。</li></ul></li><li>数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务<ul><li>DatagramSocket：此类表示用来发送和接收UDP数据报包的套接字。</li></ul></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1564024229499.png" alt="1564024229499"></p><h2 id="15-6-TCP网络编程"><a href="#15-6-TCP网络编程" class="headerlink" title="15.6 TCP网络编程"></a>15.6 TCP网络编程</h2><h3 id="15-6-1-通信模型"><a href="#15-6-1-通信模型" class="headerlink" title="15.6.1 通信模型"></a>15.6.1 通信模型</h3><p>Java语言的基于套接字TCP编程分为服务端编程和客户端编程，其通信模型如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1564025942044.png" alt="1564025942044"></p><h3 id="15-6-2-开发步骤"><a href="#15-6-2-开发步骤" class="headerlink" title="15.6.2 开发步骤"></a>15.6.2 开发步骤</h3><h4 id="1、服务器端"><a href="#1、服务器端" class="headerlink" title="1、服务器端"></a>1、服务器端</h4><p>服务器 程序的工作过程包含以下四个基本的 步骤：</p><ul><li>调用 ServerSocket(int port)  ：创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。</li><li>调用 accept() ：监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象。</li><li>调用  该Socket 类对象的 getOutputStream()  和 getInputStream () ：获取输出流和输入流，开始网络数据的发送和接收。</li><li>关闭Socket 对象：客户端访问结束，关闭通信套接字。</li></ul><h4 id="2、客户端"><a href="#2、客户端" class="headerlink" title="2、客户端"></a>2、客户端</h4><p>客户端Socket 的工作过程包含以下四个基本的步骤 ：</p><ul><li>创建 Socket ：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</li><li>打开连接到 Socket  的输入&#x2F; 出流： 使用 getInputStream()方法获得输入流，使用getOutputStream()方法获得输出流，进行数据传输</li><li>按照一定的协议对 Socket 进行读&#x2F; 写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线路。</li><li>关闭 Socket ：断开客户端到服务器的连接，释放线路</li></ul><h3 id="15-6-3-相关API"><a href="#15-6-3-相关API" class="headerlink" title="15.6.3 相关API"></a>15.6.3 相关API</h3><p><strong>ServerSocket类的构造方法：</strong></p><ul><li>ServerSocket(int port) ：创建绑定到特定端口的服务器套接字。</li></ul><p><strong>ServerSocket类的常用方法：</strong></p><ul><li>Socket accept()：侦听并接受到此套接字的连接。</li></ul><p><strong>Socket类的常用构造方法</strong>：</p><ul><li>public Socket(InetAddress address,int port)：创建一个流套接字并将其连接到指定 IP 地址的指定端口号。</li><li>public Socket(String host,int port)：创建一个流套接字并将其连接到指定主机上的指定端口号。</li></ul><p><strong>Socket类的常用方法</strong>：</p><ul><li>public InputStream getInputStream()：返回此套接字的输入流，可以用于接收消息</li><li>public OutputStream getOutputStream()：返回此套接字的输出流，可以用于发送消息</li><li>public InetAddress getInetAddress()：此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。</li><li>public InetAddress getLocalAddress()：获取套接字绑定的本地地址。</li><li>public int getPort()：此套接字连接到的远程端口号；如果尚未连接套接字，则返回 0。</li><li>public int getLocalPort()：返回此套接字绑定到的本地端口。如果尚未绑定套接字，则返回 -1。</li><li>public void close()：关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和 OutputStream。 </li><li>public void shutdownInput()：如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。 即不能在从此套接字的输入流中接收任何数据。</li><li>public void shutdownOutput()：禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。</li></ul><p><strong>注意：</strong>先后调用Socket的shutdownInput()和shutdownOutput()方法，仅仅关闭了输入流和输出流，并不等于调用Socket的close()方法。在通信结束后，仍然要调用Scoket的close()方法，因为只有该方法才会释放Socket占用的资源，比如占用的本地端口号等。</p><h3 id="15-6-4-示例一：单个客户端与服务器单次通信"><a href="#15-6-4-示例一：单个客户端与服务器单次通信" class="headerlink" title="15.6.4 示例一：单个客户端与服务器单次通信"></a>15.6.4 示例一：单个客户端与服务器单次通信</h3><p>需求：客户端连接服务器，连接成功后给服务发送“lalala”，服务器收到消息后，给客户端返回“欢迎登录”，客户端接收消息后，断开连接</p><h4 id="客户端示例代码"><a href="#客户端示例代码" class="headerlink" title="客户端示例代码"></a>客户端示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 1、准备Socket，连接服务器，需要指定服务器的IP地址和端口号</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、获取输出流，用来发送数据给服务器</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">out.write(<span class="string">&quot;lalala&quot;</span>.getBytes());</span><br><span class="line"><span class="comment">//会在流末尾写入一个“流的末尾”标记，对方才能读到-1，否则对方的读取方法会一致阻塞</span></span><br><span class="line">socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、获取输入流，用来接收服务器发送给该客户端的数据</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line"><span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = input.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">s.append(<span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, len));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;服务器返回的消息是：&quot;</span> + s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、关闭socket，不再与服务器通信，即断开与服务器的连接</span></span><br><span class="line"><span class="comment">//socket关闭，意味着InputStream和OutputStream也关闭了</span></span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务器端示例代码"><a href="#服务器端示例代码" class="headerlink" title="服务器端示例代码"></a>服务器端示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//1、准备一个ServerSocket对象，并绑定8888端口</span></span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;等待连接....&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、在8888端口监听客户端的连接，该方法是个阻塞的方法，如果没有客户端连接，将一直等待</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">System.out.println(<span class="string">&quot;一个客户端连接成功！！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、获取输入流，用来接收该客户端发送给服务器的数据</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = input.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">s.append(<span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, len));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;客户端发送的消息是：&quot;</span> + s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、获取输出流，用来发送数据给该客户端</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line">out.write(<span class="string">&quot;欢迎登录&quot;</span>.getBytes());</span><br><span class="line">out.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、关闭socket，不再与该客户端通信</span></span><br><span class="line"><span class="comment">//socket关闭，意味着InputStream和OutputStream也关闭了</span></span><br><span class="line">socket.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//6、如果不再接收任何客户端通信，可以关闭ServerSocket</span></span><br><span class="line">server.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15-6-5-示例二：多个客户端与服务器之间的多次通信"><a href="#15-6-5-示例二：多个客户端与服务器之间的多次通信" class="headerlink" title="15.6.5 示例二：多个客户端与服务器之间的多次通信"></a>15.6.5 示例二：多个客户端与服务器之间的多次通信</h3><p>通常情况下，服务器不应该只接受一个客户端请求，而应该不断地接受来自客户端的所有请求，所以Java程序通常会通过循环，不断地调用ServerSocket的accept()方法。</p><p>如果服务器端要“同时”处理多个客户端的请求，因此服务器端需要为<strong>每一个客户端单独分配一个线程</strong>来处理，否则无法实现“同时”。</p><p>咱们之前学习IO流的时候，提到过装饰者设计模式，该设计使得不管底层IO流是怎样的节点流：文件流也好，网络Socket产生的流也好，程序都可以将其包装成处理流，甚至可以多层包装，从而提供更多方便的处理。</p><p>案例需求：多个客户端连接服务器，并进行多次通信</p><ul><li>每一个客户端连接成功后，从键盘输入英文单词或中国成语，并发送给服务器</li><li>服务器收到客户端的消息后，把词语“反转”后返回给客户端</li><li>客户端接收服务器返回的“词语”，打印显示</li><li>当客户端输入“stop”时断开与服务器的连接</li><li>多个客户端可以同时给服务器发送“词语”，服务器可以“同时”处理多个客户端的请求</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1564027041074.png" alt="1564027041074"></p><h4 id="客户端示例代码-1"><a href="#客户端示例代码-1" class="headerlink" title="客户端示例代码"></a>客户端示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 1、准备Socket，连接服务器，需要指定服务器的IP地址和端口号</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、获取输出流，用来发送数据给服务器</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(out);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、获取输入流，用来接收服务器发送给该客户端的数据</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(input));</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;输入发送给服务器的单词或成语：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"><span class="keyword">if</span>(message.equals(<span class="string">&quot;stop&quot;</span>))&#123;</span><br><span class="line">socket.shutdownOutput();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、 发送数据</span></span><br><span class="line">ps.println(message);</span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">feedback</span>  <span class="operator">=</span> br.readLine();</span><br><span class="line">System.out.println(<span class="string">&quot;从服务器收到的反馈是：&quot;</span> + feedback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、关闭socket，断开与服务器的连接</span></span><br><span class="line">scanner.close();</span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="服务器端示例代码-1"><a href="#服务器端示例代码-1" class="headerlink" title="服务器端示例代码"></a>服务器端示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">// 1、准备一个ServerSocket</span></span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;等待连接...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">// 2、监听一个客户端的连接</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span> + ++count + <span class="string">&quot;个客户端&quot;</span>+socket.getInetAddress().getHostAddress()+<span class="string">&quot;连接成功！！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ClientHandlerThread</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientHandlerThread</span>(socket);</span><br><span class="line">ct.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里没有关闭server，永远监听</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ClientHandlerThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ClientHandlerThread</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.socket = socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//（1）获取输入流，用来接收该客户端发送给服务器的数据</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line"><span class="comment">//（2）获取输出流，用来发送数据给该客户端</span></span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(socket.getOutputStream());</span><br><span class="line">String str;</span><br><span class="line"><span class="comment">// （3）接收数据</span></span><br><span class="line"><span class="keyword">while</span> ((str = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//（4）反转</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">word</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str);</span><br><span class="line">word.reverse();</span><br><span class="line"></span><br><span class="line"><span class="comment">//（5）返回给客户端</span></span><br><span class="line">ps.println(word);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(socket.getInetAddress().getHostAddress()+<span class="string">&quot;正常退出&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception  e)&#123;</span><br><span class="line">System.out.println(socket.getInetAddress().getHostAddress()+<span class="string">&quot;意外退出&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//（6）断开连接</span></span><br><span class="line">socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-7-UDP网络编程"><a href="#15-7-UDP网络编程" class="headerlink" title="15.7 UDP网络编程"></a>15.7 UDP网络编程</h2><p>UDP(User Datagram Protocol，用户数据报协议)：是一个无连接的传输层协议、提供面向事务的简单不可靠的信息传送服务，类似于短信。</p><p>UDP协议是一种<strong>面向非连接</strong>的协议，面向非连接指的是在正式通信前不必与对方先建立连接，不管对方状态就直接发送，至于对方是否可以接收到这些数据内容，UDP协议无法控制，因此说，UDP协议是一种<strong>不可靠的</strong>协议。无连接的好处就是快，省内存空间和流量，因为维护连接需要创建大量的数据结构。UDP会尽最大努力交付数据，但不保证可靠交付，没有TCP的确认机制、重传机制，如果因为网络原因没有传送到对端，UDP也不会给应用层返回错误信息。</p><p>UDP协议是面向数据报文的信息传送服务。UDP在发送端没有缓冲区，对于应用层交付下来的报文在添加了首部之后就直接交付于ip层，不会进行合并，也不会进行拆分，而是一次交付一个完整的报文。比如我们要发送100个字节的报文，我们调用一次send()方法就会发送100字节，接收方也需要用receive()方法一次性接收100字节，不能使用循环每次获取10个字节，获取十次这样的做法。</p><p>UDP协议没有拥塞控制，所以当网络出现的拥塞不会导致主机发送数据的速率降低。虽然UDP的接收端有缓冲区，但是这个缓冲区只负责接收，并不会保证UDP报文的到达顺序是否和发送的顺序一致。因为网络传输的时候，由于网络拥塞的存在是很大的可能导致先发的报文比后发的报文晚到达。如果此时缓冲区满了，后面到达的报文将直接被丢弃。这个对实时应用来说很重要，比如：视频通话、直播等应用。</p><p>因此UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境，数据报大小限制在64K以下。</p><h3 id="15-7-1-相关API"><a href="#15-7-1-相关API" class="headerlink" title="15.7.1 相关API"></a>15.7.1 相关API</h3><p>基于UDP协议的网络编程仍然需要在通信实例的两端各建立一个Socket，但这两个Socket之间并没有虚拟链路，这两个Socket只是发送、接收数据报的对象，Java提供了DatagramSocket对象作为基于UDP协议的Socket，使用DatagramPacket代表DatagramSocket发送、接收的数据报。</p><p><strong>DatagramSocket 类的常用方法：</strong></p><ul><li>public DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被绑定到通配符地址，IP 地址由内核来选择。</li><li>public DatagramSocket(int port,InetAddress laddr)创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。 </li><li>public void close()关闭此数据报套接字。 </li><li>public void send(DatagramPacket p)从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的 IP 地址和远程主机的端口号。 </li><li>public void receive(DatagramPacket p)从此套接字接收数据报包。当此方法返回时，DatagramPacket 的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。</li></ul><p><strong>DatagramPacket类的常用方法：</strong></p><ul><li>public DatagramPacket(byte[] buf,int length)构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。</li><li>public DatagramPacket(byte[] buf,int length,InetAddress address,int port)构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length 参数必须小于等于 buf.length。</li><li>public int getLength()返回将要发送或接收到的数据的长度。</li></ul><h3 id="15-7-2-示例代码"><a href="#15-7-2-示例代码" class="headerlink" title="15.7.2 示例代码"></a>15.7.2 示例代码</h3><h4 id="发送端："><a href="#发送端：" class="headerlink" title="发送端："></a>发送端：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//1、建立发送端的DatagramSocket</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//要发送的数据</span></span><br><span class="line">ArrayList&lt;String&gt; all = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">all.add(<span class="string">&quot;尚硅谷让天下没有难学的技术！&quot;</span>);</span><br><span class="line">all.add(<span class="string">&quot;学高端前沿的IT技术来尚硅谷！&quot;</span>);</span><br><span class="line">all.add(<span class="string">&quot;尚硅谷让你的梦想变得更具体！&quot;</span>);</span><br><span class="line">all.add(<span class="string">&quot;尚硅谷让你的努力更有价值！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收方的IP地址</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">ip</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="comment">//接收方的监听端口号</span></span><br><span class="line"><span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">         <span class="comment">//发送多个数据报</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; all.size(); i++) &#123;</span><br><span class="line"><span class="comment">//2、建立数据包DatagramPacket</span></span><br><span class="line"><span class="type">byte</span>[] data = all.get(i).getBytes();</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, ip, port);</span><br><span class="line"><span class="comment">//3、调用Socket的发送方法</span></span><br><span class="line">ds.send(dp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、关闭Socket</span></span><br><span class="line">ds.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收端："><a href="#接收端：" class="headerlink" title="接收端："></a>接收端：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receive</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//1、建立接收端的DatagramSocket，需要指定本端的监听端口号</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//一直监听数据</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//2、建立数据包DatagramPacket</span></span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">64</span>];</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer , buffer.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、调用Socket的接收方法</span></span><br><span class="line">ds.receive(dp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、拆封数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer,<span class="number">0</span>,dp.getLength());</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第15章-网络编程&quot;&gt;&lt;a href=&quot;#第15章-网络编程&quot; class=&quot;headerlink&quot; title=&quot;第15章 网络编程&quot;&gt;&lt;/a&gt;第15章 网络编程&lt;/h1&gt;&lt;h2 id=&quot;教学目标&quot;&gt;&lt;a href=&quot;#教学目标&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第14章 File类与IO流</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC14%E7%AB%A0-File%E7%B1%BB%E4%B8%8EIO%E6%B5%81/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC14%E7%AB%A0-File%E7%B1%BB%E4%B8%8EIO%E6%B5%81/</id>
    <published>2022-07-28T05:08:10.000Z</published>
    <updated>2022-10-16T04:43:25.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第14章-File类与IO流"><a href="#第14章-File类与IO流" class="headerlink" title="第14章 File类与IO流"></a>第14章 File类与IO流</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>File类</li><li>字节流</li><li>字符流</li><li>文件流</li><li>缓冲流</li><li>转换流</li><li>数据流</li><li>对象流</li><li>打印流</li><li>Scanner与System与IO流</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><p><input disabled="" type="checkbox"> 使用File类对象表示文件或目录</p></li><li><p><input disabled="" type="checkbox"> 能够辨别相对路径和绝对路径</p></li><li><p><input disabled="" type="checkbox"> 能够说出IO流的分类和功能</p></li><li><p><input disabled="" type="checkbox"> 能够使用字节输出流写出数据到文件</p></li><li><p><input disabled="" type="checkbox"> 能够使用字节输入流读取数据到程序</p></li><li><p><input disabled="" type="checkbox"> 能够理解读取数据read(byte[])方法的原理</p></li><li><p><input disabled="" type="checkbox"> 能够使用字节流完成文件的复制</p></li><li><p><input disabled="" type="checkbox"> 能够使用FileWirter写数据到文件</p></li><li><p><input disabled="" type="checkbox"> 能够说出FileWriter中关闭和刷新方法的区别</p></li><li><p><input disabled="" type="checkbox"> 能够使用FileWriter写数据的5个方法</p></li><li><p><input disabled="" type="checkbox"> 能够使用FileWriter写数据实现换行和追加写</p></li><li><p><input disabled="" type="checkbox"> 能够使用FileReader读数据</p></li><li><p><input disabled="" type="checkbox"> 能够使用FileReader读数据一次一个字符数组</p></li><li><p><input disabled="" type="checkbox"> 能够使用字节缓冲流读取数据到程序</p></li><li><p><input disabled="" type="checkbox"> 能够使用字节缓冲流写出数据到文件</p></li><li><p><input disabled="" type="checkbox"> 能够明确字符缓冲流的作用和基本用法</p></li><li><p><input disabled="" type="checkbox"> 能够使用缓冲流的特殊功能</p></li><li><p><input disabled="" type="checkbox"> 能够阐述编码表的意义</p></li><li><p><input disabled="" type="checkbox"> 能够使用转换流读取指定编码的文本文件</p></li><li><p><input disabled="" type="checkbox"> 能够使用转换流写入指定编码的文本文件</p></li><li><p><input disabled="" type="checkbox"> 能够说出打印流的特点</p></li><li><p><input disabled="" type="checkbox"> 能够使用序列化流写出对象到文件</p></li><li><p><input disabled="" type="checkbox"> 能够使用反序列化流读取文件到程序中</p></li></ul><h1 id="第十四章-File类与IO流"><a href="#第十四章-File类与IO流" class="headerlink" title="第十四章 File类与IO流"></a>第十四章 File类与IO流</h1><h2 id="14-1-java-io-File类"><a href="#14-1-java-io-File类" class="headerlink" title="14.1 java.io.File类"></a>14.1 java.io.File类</h2><h3 id="14-1-1-概述"><a href="#14-1-1-概述" class="headerlink" title="14.1.1 概述"></a>14.1.1 概述</h3><p>File类是java.io包下代表与平台无关的文件和目录，也就是说如果希望在程序中操作文件和目录都可以通过File类来完成，File类能新建、删除、重命名文件和目录。</p><p>在API中File的解释是文件和目录路径名的抽象表示形式，即File类是文件或目录的路径，而不是文件本身，因此File类不能直接访问文件内容本身，如果需要访问文件内容本身，则需要使用输入&#x2F;输出流。 </p><blockquote><p>File类代表磁盘或网络中某个文件或目录的路径名称，如：&#x2F;atguigu&#x2F;javase&#x2F;io&#x2F;佟刚.jpg</p><p>但不能直接通过File对象读取和写入数据，如果要操作数据，需要IO流。File对象好比是到水库的“路线地址”，要“存取”里面的水到你“家里”，需要“管道”。</p></blockquote><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563809289418.png" alt="1563809289418"></p><h3 id="14-1-2-构造方法"><a href="#14-1-2-构造方法" class="headerlink" title="14.1.2 构造方法"></a>14.1.2 构造方法</h3><ul><li><p><code>public File(String pathname) </code> ：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的 File实例。  </p></li><li><p><code>public File(String parent, String child) </code> ：从<strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例。</p></li><li><p><code>public File(File parent, String child)</code> ：从<strong>父抽象路径名和子路径名字符串</strong>创建新的 File实例。  </p></li><li><p>构造举例，代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pathname</span> <span class="operator">=</span> <span class="string">&quot;D:\\aaa.txt&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathname); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件路径名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pathname2</span> <span class="operator">=</span> <span class="string">&quot;D:\\aaa\\bbb.txt&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathname2); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过父路径和子路径字符串</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="string">&quot;d:\\aaa&quot;</span>;</span><br><span class="line"> <span class="type">String</span> <span class="variable">child</span> <span class="operator">=</span> <span class="string">&quot;bbb.txt&quot;</span>;</span><br><span class="line"> <span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent, child);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过父级File对象和子路径字符串</span></span><br><span class="line"><span class="type">File</span> <span class="variable">parentDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\aaa&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">child</span> <span class="operator">=</span> <span class="string">&quot;bbb.txt&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentDir, child);</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>一个File对象代表硬盘中实际存在的一个文件或者目录。</li><li>无论该路径下是否存在文件或者目录，都不影响File对象的创建。</li></ol></blockquote><h3 id="14-1-3-常用方法（了解）"><a href="#14-1-3-常用方法（了解）" class="headerlink" title="14.1.3 常用方法（了解）"></a>14.1.3 常用方法（了解）</h3><h4 id="1、获取文件和目录基本信息的方法"><a href="#1、获取文件和目录基本信息的方法" class="headerlink" title="1、获取文件和目录基本信息的方法"></a>1、获取文件和目录基本信息的方法</h4><ul><li><p><code>public String getName()</code>  ：返回由此File表示的文件或目录的名称。  </p></li><li><p><code>public long length()</code>  ：返回由此File表示的文件的长度。 </p></li><li><p><code>public String getPath()</code> ：将此File转换为路径名字符串。 </p></li><li><p><code>public long lastModified()</code>：返回File对象对应的文件或目录的最后修改时间（毫秒值）</p><p>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFile</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/aaa/bbb.txt&quot;</span>);     </span><br><span class="line">        System.out.println(<span class="string">&quot;文件构造路径:&quot;</span>+f.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名称:&quot;</span>+f.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件长度:&quot;</span>+f.length()+<span class="string">&quot;字节&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件最后修改时间：&quot;</span> + LocalDateTime.ofInstant(Instant.ofEpochMilli(f.lastModified()),ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/aaa&quot;</span>);     </span><br><span class="line">        System.out.println(<span class="string">&quot;目录构造路径:&quot;</span>+f2.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录名称:&quot;</span>+f2.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录长度:&quot;</span>+f2.length()+<span class="string">&quot;字节&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件最后修改时间：&quot;</span> + LocalDateTime.ofInstant(Instant.ofEpochMilli(f.lastModified()),ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">文件构造路径:d:\aaa\bbb.java</span><br><span class="line">文件名称:bbb.java</span><br><span class="line">文件长度:<span class="number">636</span>字节</span><br><span class="line">文件最后修改时间：<span class="number">2019</span>-<span class="number">07</span>-23T22:<span class="number">01</span>:<span class="number">32.065</span></span><br><span class="line"></span><br><span class="line">目录构造路径:d:\aaa</span><br><span class="line">目录名称:aaa</span><br><span class="line">目录长度:<span class="number">4096</span>字节</span><br><span class="line">文件最后修改时间：<span class="number">2019</span>-<span class="number">07</span>-23T22:<span class="number">01</span>:<span class="number">32.065</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>API中说明：length()，表示文件的长度。但是File对象表示目录，则返回值未指定。</p></blockquote><h4 id="2、各种路径问题"><a href="#2、各种路径问题" class="headerlink" title="2、各种路径问题"></a>2、各种路径问题</h4><ul><li><code>public String getPath()</code> ：将此File转换为路径名字符串。 </li><li><code>public String getAbsolutePath() </code> ：返回此File的绝对路径名字符串。</li><li><code>String getCanonicalPath()</code>：返回此File对象所对应的规范路径名。</li></ul><p>File类可以使用文件路径字符串来创建File实例，该文件路径字符串既可以是绝对路径，也可以是相对路径。</p><p>默认情况下，系统总是依据用户的工作路径来解释相对路径，这个路径由系统属性“user.dir”指定，通常也就是运行Java虚拟机时所作的路径。</p><ul><li><strong>绝对路径</strong>：从盘符开始的路径，这是一个完整的路径。</li><li><strong>相对路径</strong>：相对于<strong>项目目录</strong>的路径，这是一个便捷的路径，开发中经常使用。</li><li><strong>规范路径</strong>：所谓规范路径名，即对路径中的“..”等进行解析后的路径名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\atguigu\\javase\\HelloIO.java&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的名称：&quot;</span> + f1.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的构造路径名：&quot;</span> + f1.getPath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的绝对路径名：&quot;</span> + f1.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的规范路径名：&quot;</span> + f1.getCanonicalPath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的父目录名：&quot;</span> + f1.getParent());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;HelloIO.java&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;user.dir =&quot;</span> + System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的名称：&quot;</span> + f2.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的构造路径名：&quot;</span> + f2.getPath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的绝对路径名：&quot;</span> + f2.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的规范路径名：&quot;</span> + f2.getCanonicalPath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的父目录名：&quot;</span> + f2.getParent());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;../../HelloIO.java&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;user.dir =&quot;</span> + System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的名称：&quot;</span> + f3.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的构造路径名：&quot;</span> + f3.getPath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的绝对路径名：&quot;</span> + f3.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的规范路径名：&quot;</span> + f3.getCanonicalPath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件/目录的父目录名：&quot;</span> + f3.getParent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>window的路径分隔符使用“\”，而Java程序中的“\”表示转义字符，所以在Windows中表示路径，需要用“\”。或者直接使用“&#x2F;”也可以，Java程序支持将“&#x2F;”当成平台无关的路径分隔符。或者直接使用File.separator常量值表示。</p></li><li><p>把构造File对象指定的文件或目录的路径名，称为构造路径，它可以是绝对路径，也可以是相对路径</p></li><li><p>当构造路径是绝对路径时，那么getPath和getAbsolutePath结果一样</p></li><li><p>当构造路径是相对路径时，那么getAbsolutePath的路径 &#x3D; user.dir的路径 + 构造路径</p></li><li><p>当路径中不包含”..”和”&#x2F;开头”等形式的路径，那么规范路径和绝对路径一样，否则会将..等进行解析。路径中如果出现“..”表示上一级目录，路径名如果以“&#x2F;”开头，表示从“根目录”下开始导航。</p></li></ul><h4 id="3、判断功能的方法"><a href="#3、判断功能的方法" class="headerlink" title="3、判断功能的方法"></a>3、判断功能的方法</h4><ul><li><code>public boolean exists()</code> ：此File表示的文件或目录是否实际存在。</li><li><code>public boolean isDirectory()</code> ：此File表示的是否为目录。</li><li><code>public boolean isFile()</code> ：此File表示的是否为文件。</li></ul><p>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileIs</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\aaa\\bbb.java&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\aaa&quot;</span>);</span><br><span class="line">      <span class="comment">// 判断是否存在</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d:\\aaa\\bbb.java 是否存在:&quot;</span>+f.exists());</span><br><span class="line">        System.out.println(<span class="string">&quot;d:\\aaa 是否存在:&quot;</span>+f2.exists());</span><br><span class="line">      <span class="comment">// 判断是文件还是目录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d:\\aaa 文件?:&quot;</span>+f2.isFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;d:\\aaa 目录?:&quot;</span>+f2.isDirectory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">d:\aaa\bbb.java 是否存在:<span class="literal">true</span></span><br><span class="line">d:\aaa 是否存在:<span class="literal">true</span></span><br><span class="line">d:\aaa 文件?:<span class="literal">false</span></span><br><span class="line">d:\aaa 目录?:<span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>如果文件或目录不存在，那么exists()、isFile()和isDirectory()都是返回true</p></blockquote><h4 id="4、创建删除功能的方法"><a href="#4、创建删除功能的方法" class="headerlink" title="4、创建删除功能的方法"></a>4、创建删除功能的方法</h4><ul><li><code>public boolean createNewFile()</code> ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。 </li><li><code>public boolean delete()</code> ：删除由此File表示的文件或目录。  只能删除空目录。</li><li><code>public boolean mkdir()</code> ：创建由此File表示的目录。</li><li><code>public boolean mkdirs()</code> ：创建由此File表示的目录，包括任何必需但不存在的父目录。</li></ul><p>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCreateDelete</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 文件的创建</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;aaa.txt&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在:&quot;</span>+f.exists()); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否创建:&quot;</span>+f.createNewFile()); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在:&quot;</span>+f.exists()); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 目录的创建</span></span><br><span class="line">      File f2= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;newDir&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在:&quot;</span>+f2.exists());<span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否创建:&quot;</span>+f2.mkdir());<span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在:&quot;</span>+f2.exists());<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建多级目录</span></span><br><span class="line">      File f3= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;newDira\\newDirb&quot;</span>);</span><br><span class="line">        System.out.println(f3.mkdir());<span class="comment">// false</span></span><br><span class="line">        File f4= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;newDira\\newDirb&quot;</span>);</span><br><span class="line">        System.out.println(f4.mkdirs());<span class="comment">// true</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 文件的删除</span></span><br><span class="line">       System.out.println(f.delete());<span class="comment">// true</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 目录的删除</span></span><br><span class="line">        System.out.println(f2.delete());<span class="comment">// true</span></span><br><span class="line">        System.out.println(f4.delete());<span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>API中说明：delete方法，如果此File表示目录，则目录必须为空才能删除。</p></blockquote><h3 id="14-1-4-递归实现多级目录操作（了解，有时间作为复习递归练习用）"><a href="#14-1-4-递归实现多级目录操作（了解，有时间作为复习递归练习用）" class="headerlink" title="14.1.4 递归实现多级目录操作（了解，有时间作为复习递归练习用）"></a>14.1.4 递归实现多级目录操作（了解，有时间作为复习递归练习用）</h3><ul><li><p><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</p></li><li><p><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。  </p></li><li><p><code>public File[] listFiles(FileFilter filter)</code>：返回所有满足指定过滤器的文件和目录。如果给定 filter 为 null，则接受所有路径名。否则，当且仅当在路径名上调用过滤器的 FileFilter.accept(java.io.File) 方法返回 true 时，该路径名才满足过滤器。如果当前File对象不表示一个目录，或者发生 I&#x2F;O 错误，则返回 null。</p></li></ul><h4 id="1、递归打印多级目录"><a href="#1、递归打印多级目录" class="headerlink" title="1、递归打印多级目录"></a>1、递归打印多级目录</h4><p><strong>分析</strong>：多级目录的打印。遍历之前，无从知道到底有多少级目录，所以我们可以使用递归实现。</p><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/atguigu&quot;</span>);</span><br><span class="line"> listSubFiles(dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listSubFiles</span><span class="params">(File dir)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (dir != <span class="literal">null</span> &amp;&amp; dir.isDirectory()) &#123;</span><br><span class="line">File[] listFiles = dir.listFiles();</span><br><span class="line"><span class="keyword">if</span> (listFiles != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (File sub : listFiles) &#123;</span><br><span class="line">listSubFiles(sub);<span class="comment">//递归调用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(dir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、递归打印某目录下（包括子目录）中所有满足条件的文件"><a href="#2、递归打印某目录下（包括子目录）中所有满足条件的文件" class="headerlink" title="2、递归打印某目录下（包括子目录）中所有满足条件的文件"></a>2、递归打印某目录下（包括子目录）中所有满足条件的文件</h4><p>示例代码：列出”D:&#x2F;atguigu”下所有”.java”文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/atguigu&quot;</span>);</span><br><span class="line"> listByFileFilter(dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listByFileFilter</span><span class="params">(File file)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (file != <span class="literal">null</span> &amp;&amp; file.isDirectory()) &#123;</span><br><span class="line">File[] listFiles = file.listFiles(<span class="keyword">new</span> <span class="title class_">FilenameFilter</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File dir, String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name.endsWith(<span class="string">&quot;.java&quot;</span>) || <span class="keyword">new</span> <span class="title class_">File</span>(dir,name).isDirectory();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (listFiles != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (File sub : listFiles) &#123;</span><br><span class="line"><span class="keyword">if</span>(sub.isFile())&#123;</span><br><span class="line">System.out.println(sub);</span><br><span class="line">&#125;</span><br><span class="line">listByFileFilter(sub);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、递归求目录总大小"><a href="#3、递归求目录总大小" class="headerlink" title="3、递归求目录总大小"></a>3、递归求目录总大小</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/atguigu&quot;</span>);</span><br><span class="line"> <span class="type">long</span> <span class="variable">length</span> <span class="operator">=</span> getLength(dir);</span><br><span class="line"> System.out.println(<span class="string">&quot;大小：&quot;</span> + length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getLength</span><span class="params">(File dir)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dir != <span class="literal">null</span> &amp;&amp; dir.isDirectory()) &#123;</span><br><span class="line">File[] listFiles = dir.listFiles();</span><br><span class="line"><span class="keyword">if</span>(listFiles!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (File sub : listFiles) &#123;</span><br><span class="line">sum += getLength(sub);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dir != <span class="literal">null</span> &amp;&amp; dir.isFile())&#123;</span><br><span class="line"><span class="keyword">return</span> dir.length();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、递归删除非空目录"><a href="#4、递归删除非空目录" class="headerlink" title="4、递归删除非空目录"></a>4、递归删除非空目录</h4><p>如果目录非空，连同目录下的文件和文件夹一起删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/atguigu/javase&quot;</span>);</span><br><span class="line"> forceDeleteDir(dir);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forceDeleteDir</span><span class="params">(File dir)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (dir != <span class="literal">null</span> &amp;&amp; dir.isDirectory()) &#123;</span><br><span class="line">File[] listFiles = dir.listFiles();</span><br><span class="line"><span class="keyword">if</span>(listFiles!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (File sub : listFiles) &#123;</span><br><span class="line">forceDeleteDir(sub);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dir.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-2-IO概述"><a href="#14-2-IO概述" class="headerlink" title="14.2 IO概述"></a>14.2 IO概述</h2><h3 id="1、什么是IO"><a href="#1、什么是IO" class="headerlink" title="1、什么是IO"></a>1、什么是IO</h3><p>生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了<code>ctrl+s</code> ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。</p><p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> ，即流向内存是输入流，流出内存的输出流。</p><p>Java中I&#x2F;O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p><h3 id="2、IO的分类"><a href="#2、IO的分类" class="headerlink" title="2、IO的分类"></a>2、IO的分类</h3><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 <ul><li>以InputStream,Reader结尾</li></ul></li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。<ul><li>以OutputStream、Writer结尾</li></ul></li></ul><p>根据数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。<ul><li>以InputStream和OutputStream结尾</li></ul></li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。<ul><li>以Reader和Writer结尾</li></ul></li></ul><p>根据IO流的角色不同分为：<strong>节点流</strong>和<strong>处理流</strong>。</p><ul><li><p><strong>节点流</strong>：可以从或向一个特定的地方（节点）读写数据。如FileReader.</p></li><li><p><strong>处理流</strong>：是对一个已存在的流进行连接和封装，通过所封装的流的功能调用实现数据读写。如BufferedReader.处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。</p></li></ul><blockquote><p>这种设计是装饰模式（Decorator Pattern）也称为包装模式（Wrapper Pattern），其使用一种对客户端透明的方式来动态地扩展对象的功能，它是通过继承扩展功能的替代方案之一。在现实生活中你也有很多装饰者的例子，例如：人需要各种各样的衣着，不管你穿着怎样，但是，对于你个人本质来说是不变的，充其量只是在外面加上了一些装饰，有，“遮羞的”、“保暖的”、“好看的”、“防雨的”….</p></blockquote><p><strong>常用的节点流：</strong> 　</p><ul><li>文 件 FileInputStream FileOutputStrean FileReader FileWriter 文件进行处理的节点流。</li><li>字符串 StringReader StringWriter 对字符串进行处理的节点流。</li><li>数 组 ByteArrayInputStream ByteArrayOutputStream CharArrayReader CharArrayWriter 对数组进行处理的节点流（对应的不再是文件，而是内存中的一个数组）。</li><li>管 道 PipedInputStream、PipedOutputStream、PipedReader、PipedWriter对管道进行处理的节点流。</li></ul><p><strong>常用处理流：</strong></p><ul><li><p>缓冲流：BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter—增加缓冲功能，避免频繁读写硬盘。</p></li><li><p>转换流：InputStreamReader、OutputStreamReader—实现字节流和字符流之间的转换。</p></li><li><p>数据流：DataInputStream、DataOutputStream -提供读写Java基础数据类型功能</p></li><li><p>对象流：ObjectInputStream、ObjectOutputStream–提供直接读写Java对象功能</p></li></ul><h3 id="3、4大顶级抽象父类们"><a href="#3、4大顶级抽象父类们" class="headerlink" title="3、4大顶级抽象父类们"></a>3、4大顶级抽象父类们</h3><table><thead><tr><th align="center"></th><th align="center"><strong>输入流</strong></th><th align="center">输出流</th></tr></thead><tbody><tr><td align="center"><strong>字节流</strong></td><td align="center">字节输入流<strong>InputStream</strong></td><td align="center">字节输出流<strong>OutputStream</strong></td></tr><tr><td align="center"><strong>字符流</strong></td><td align="center">字符输入流<strong>Reader</strong></td><td align="center">字符输出流<strong>Writer</strong></td></tr></tbody></table><h2 id="14-3-字节流"><a href="#14-3-字节流" class="headerlink" title="14.3 字节流"></a>14.3 字节流</h2><h3 id="14-3-1-一切皆为字节"><a href="#14-3-1-一切皆为字节" class="headerlink" title="14.3.1  一切皆为字节"></a>14.3.1  一切皆为字节</h3><p>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p><h3 id="14-3-2-字节输出流【OutputStream】"><a href="#14-3-2-字节输出流【OutputStream】" class="headerlink" title="14.3.2 字节输出流【OutputStream】"></a>14.3.2 字节输出流【OutputStream】</h3><p><code>java.io.OutputStream </code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li><li><code>public void flush() </code> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </li><li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。  </li><li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  </li><li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li></ul><blockquote><p>小贴士：</p><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h3 id="14-3-3-FileOutputStream类"><a href="#14-3-3-FileOutputStream类" class="headerlink" title="14.3.3 FileOutputStream类"></a>14.3.3 FileOutputStream类</h3><p><code>OutputStream</code>有很多子类，我们从最简单的一个子类开始。</p><p><code>java.io.FileOutputStream </code>类是文件输出流，用于将数据写出到文件。</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。 </li><li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStreamConstructor</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写出字节数据"><a href="#写出字节数据" class="headerlink" title="写出字节数据"></a>写出字节数据</h4><ol><li><strong>写出字节</strong>：<code>write(int b)</code> 方法，每次可以写出一个字节数据，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">      fos.write(<span class="number">97</span>); <span class="comment">// 写出第1个字节</span></span><br><span class="line">      fos.write(<span class="number">98</span>); <span class="comment">// 写出第2个字节</span></span><br><span class="line">      fos.write(<span class="number">99</span>); <span class="comment">// 写出第3个字节</span></span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li></ol></blockquote><ol start="2"><li><strong>写出字节数组</strong>：<code>write(byte[] b)</code>，每次可以写出数组中的数据，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="type">byte</span>[] b = <span class="string">&quot;尚硅谷&quot;</span>.getBytes();</span><br><span class="line">      <span class="comment">// 写出字节数组数据</span></span><br><span class="line">      fos.write(b);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">尚硅谷</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>写出指定长度字节数组</strong>：<code>write(byte[] b, int off, int len)</code> ,每次写出从off索引开始，len个字节，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="type">byte</span>[] b = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">cd</span><br></pre></td></tr></table></figure><h4 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h4><p>经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？</p><ul><li><code>public FileOutputStream(File file, boolean append)</code>： 创建文件输出流以写入由指定的 File对象表示的文件。  </li><li><code>public FileOutputStream(String name, boolean append)</code>： 创建文件输出流以指定的名称写入文件。</li></ul><p>这两个构造方法，参数中都需要传入一个boolean类型的值，<code>true</code> 表示追加数据，<code>false</code> 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>，<span class="literal">true</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="type">byte</span>[] b = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">文件操作前：cd</span><br><span class="line">文件操作后：cdabcde</span><br></pre></td></tr></table></figure><h4 id="写出换行"><a href="#写出换行" class="headerlink" title="写出换行"></a>写出换行</h4><p>Windows系统里，换行符号是<code>\r\n</code> 。把</p><p>以指定是否追加续写了，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);  </span><br><span class="line">      <span class="comment">// 定义字节数组</span></span><br><span class="line">      <span class="type">byte</span>[] words = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">      <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">          <span class="comment">// 写出一个字节</span></span><br><span class="line">            fos.write(words[i]);</span><br><span class="line">          <span class="comment">// 写出一个换行, 换行符号转成数组写出</span></span><br><span class="line">            fos.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><blockquote><ul><li>回车符<code>\r</code>和换行符<code>\n</code> ：<ul><li>回车符：回到一行的开头（return）。</li><li>换行符：下一行（newline）。</li></ul></li><li>系统中的换行：<ul><li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\r\n</code>；</li><li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\n</code>；</li><li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\r</code>。从 Mac OS X开始与Linux统一。</li></ul></li></ul></blockquote><h3 id="14-3-4-字节输入流【InputStream】"><a href="#14-3-4-字节输入流【InputStream】" class="headerlink" title="14.3.4 字节输入流【InputStream】"></a>14.3.4 字节输入流【InputStream】</h3><p><code>java.io.InputStream </code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。    </li><li><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。 </li><li><code>public int read(byte[] b)</code>： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</li></ul><blockquote><p>小贴士：</p><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h3 id="14-3-5-FileInputStream类"><a href="#14-3-5-FileInputStream类" class="headerlink" title="14.3.5 FileInputStream类"></a>14.3.5 FileInputStream类</h3><p><code>java.io.FileInputStream </code>类是文件输入流，从文件中读取字节。</p><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 </li><li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code> 。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStreamConstructor</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a>读取字节数据</h4><ol><li><strong>读取字节</strong>：<code>read</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 读取数据，返回一个字节</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> fis.read();</span><br><span class="line">        System.out.println((<span class="type">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="type">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="type">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="type">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="type">char</span>) read);</span><br><span class="line">      <span class="comment">// 读取到末尾,返回-1</span></span><br><span class="line">       read = fis.read();</span><br><span class="line">        System.out.println( read);</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>循环改进读取方式，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="type">int</span> b ；</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>虽然读取了一个字节，但是会自动提升为int类型。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li></ol></blockquote><ol start="2"><li><strong>使用字节数组读取</strong>：<code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;read.txt&quot;</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">      <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="type">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器   </span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">// 每次读取后,把数组变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">ab</span><br><span class="line">cd</span><br><span class="line">ed</span><br></pre></td></tr></table></figure><p>错误数据<code>d</code>，是由于最后一次读取时，只读取一个字节<code>e</code>，数组中，上次读取的数据没有被完全替换，所以要通过<code>len</code> ，获取有效的字节，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;read.txt&quot;</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">      <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="type">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器   </span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">// 每次读取后,把数组的有效字节部分，变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b，<span class="number">0</span>，len));<span class="comment">//  len 每次读取的有效字节个数</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">ab</span><br><span class="line">cd</span><br><span class="line">e</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。</p></blockquote><h3 id="14-3-6-字节流练习：图片复制"><a href="#14-3-6-字节流练习：图片复制" class="headerlink" title="14.3.6 字节流练习：图片复制"></a>14.3.6 字节流练习：图片复制</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/2_copy.jpg"></p><p>复制图片文件，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Copy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 1.1 指定数据源</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\test.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2 指定目的地</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test_copy.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.读写数据</span></span><br><span class="line">        <span class="comment">// 2.1 定义数组</span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 2.2 定义长度</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">// 2.3 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 2.4 写出数据</span></span><br><span class="line">            fos.write(b, <span class="number">0</span> , len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>流的关闭原则：先开后关，后开先关。</p></blockquote><h2 id="14-4-字符流"><a href="#14-4-字符流" class="headerlink" title="14.4 字符流"></a>14.4 字符流</h2><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><h3 id="14-4-1-字符输入流【Reader】"><a href="#14-4-1-字符输入流【Reader】" class="headerlink" title="14.4.1 字符输入流【Reader】"></a>14.4.1 字符输入流【Reader】</h3><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。    </li><li><code>public int read()</code>： 从输入流读取一个字符。 </li><li><code>public int read(char[] cbuf)</code>： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</li></ul><h3 id="14-4-2-FileReader类"><a href="#14-4-2-FileReader类" class="headerlink" title="14.4.2 FileReader类"></a>14.4.2 FileReader类</h3><p><code>java.io.FileReader </code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><blockquote><p>小贴士：</p><ol><li>字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。</li></ol><p>eclipse中默认GBK，idea中默认UTF-8</p><ol start="2"><li>字节缓冲区：一个字节数组，用来临时存储字节数据。</li></ol></blockquote><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的File对象。   </li><li><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的名称。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径。类似于FileInputStream 。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReaderConstructor</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读取字符数据"><a href="#读取字符数据" class="headerlink" title="读取字符数据"></a>读取字符数据</h4><ol><li><strong>读取字符</strong>：<code>read</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FRRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="type">int</span> b ；</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fr.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">尚</span><br><span class="line">硅</span><br><span class="line">谷</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：虽然读取了一个字符，但是会自动提升为int类型。</p></blockquote><ol start="2"><li><strong>使用字符数组读取</strong>：<code>read(char[] cbuf)</code>，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FRRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存有效字符个数</span></span><br><span class="line">        <span class="type">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字符数组，作为装字符数据的容器</span></span><br><span class="line">         <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(cbuf));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">尚硅</span><br><span class="line">谷硅</span><br></pre></td></tr></table></figure><p>获取有效的字符改进，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存有效字符个数</span></span><br><span class="line">        <span class="type">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字符数组，作为装字符数据的容器</span></span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(cbuf,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">尚硅</span><br><span class="line">谷</span><br></pre></td></tr></table></figure><h3 id="14-4-3-字符输出流【Writer】"><a href="#14-4-3-字符输出流【Writer】" class="headerlink" title="14.4.3 字符输出流【Writer】"></a>14.4.3 字符输出流【Writer】</h3><p><code>java.io.Writer </code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>void write(int c)</code> 写入单个字符。</li><li><code>void write(char[] cbuf) </code>写入字符数组。 </li><li><code>abstract  void write(char[] cbuf, int off, int len) </code>写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 </li><li><code>void write(String str) </code>写入字符串。 </li><li><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li><li><code>void flush() </code>刷新该流的缓冲。  </li><li><code>void close()</code> 关闭此流，但要先刷新它。</li></ul><h3 id="14-4-4-FileWriter类"><a href="#14-4-4-FileWriter类" class="headerlink" title="14.4.4 FileWriter类"></a>14.4.4 FileWriter类</h3><p><code>java.io.FileWriter </code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。   </li><li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriterConstructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基本写出数据"><a href="#基本写出数据" class="headerlink" title="基本写出数据"></a>基本写出数据</h4><p><strong>写出字符</strong>：<code>write(int b)</code> 方法，每次可以写出一个字符数据，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">      fw.write(<span class="number">97</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">      fw.write(<span class="string">&#x27;b&#x27;</span>); <span class="comment">// 写出第2个字符</span></span><br><span class="line">      fw.write(<span class="string">&#x27;C&#x27;</span>); <span class="comment">// 写出第3个字符</span></span><br><span class="line">      fw.write(<span class="number">30000</span>); <span class="comment">// 写出第4个字符，中文编码表中30000对应一个汉字。</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        【注意】关闭资源时,与FileOutputStream不同。</span></span><br><span class="line"><span class="comment">       如果不关闭,数据只是保存到缓冲区，并未保存到文件。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// fw.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">abC田</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。</li><li>未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</li></ol></blockquote><h4 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h4><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code> 方法了。</p><ul><li><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</li><li><code>close </code>:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><p>代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 写出数据，通过flush</span></span><br><span class="line">        fw.write(<span class="string">&#x27;刷&#x27;</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        fw.write(<span class="string">&#x27;新&#x27;</span>); <span class="comment">// 继续写出第2个字符，写出成功</span></span><br><span class="line">        fw.flush();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出数据，通过close</span></span><br><span class="line">        fw.write(<span class="string">&#x27;关&#x27;</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fw.write(<span class="string">&#x27;闭&#x27;</span>); <span class="comment">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p></blockquote><h4 id="写出其他数据"><a href="#写出其他数据" class="headerlink" title="写出其他数据"></a>写出其他数据</h4><ol><li><strong>写出字符数组</strong> ：<code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> ，每次可以写出字符数组中的数据，用法类似FileOutputStream，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="type">char</span>[] chars = <span class="string">&quot;尚硅谷&quot;</span>.toCharArray();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出字符数组</span></span><br><span class="line">      fw.write(chars); <span class="comment">// 尚硅谷</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 写出从索引1开始，2个字节。索引1是&#x27;硅&#x27;，两个字节，也就是&#x27;硅谷&#x27;。</span></span><br><span class="line">        fw.write(b,<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// 硅谷</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>写出字符串</strong>：<code>write(String str)</code> 和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;尚硅谷&quot;</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出字符数组</span></span><br><span class="line">      fw.write(msg); <span class="comment">//尚硅谷</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">// 写出从索引1开始，2个字节。索引1是&#x27;硅&#x27;，两个字节，也就是&#x27;硅谷&#x27;。</span></span><br><span class="line">        fw.write(msg,<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// 尚硅谷</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>续写和换行</strong>：操作类似于FileOutputStream。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象，可以续写数据</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>，<span class="literal">true</span>);     </span><br><span class="line">      <span class="comment">// 写出字符串</span></span><br><span class="line">        fw.write(<span class="string">&quot;尚&quot;</span>);</span><br><span class="line">      <span class="comment">// 写出换行</span></span><br><span class="line">      fw.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">      <span class="comment">// 写出字符串</span></span><br><span class="line">  fw.write(<span class="string">&quot;硅谷&quot;</span>);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">尚</span><br><span class="line">硅谷</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</p><p>当我们单纯读或者写文本文件时  使用字符流 其他情况使用字节流</p></blockquote><h2 id="14-5-缓冲流"><a href="#14-5-缓冲流" class="headerlink" title="14.5 缓冲流"></a>14.5 缓冲流</h2><p>缓冲流,也叫高效流，按照数据类型分类：</p><ul><li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code> </li><li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li></ul><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><h3 id="14-5-1-字节缓冲流"><a href="#14-5-1-字节缓冲流" class="headerlink" title="14.5.1 字节缓冲流"></a>14.5.1 字节缓冲流</h3><h4 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public BufferedInputStream(InputStream in)</code> ：创建一个 新的缓冲输入流。 </li><li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字节缓冲输入流</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;bis.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 创建字节缓冲输出流</span></span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;bos.txt&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h4><p>查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375MB），测试它的效率。</p><ol><li>基本流，代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdk9.exe&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.exe&quot;</span>);</span><br><span class="line">        <span class="comment">// 读写数据</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;普通流复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">十几分钟过去了...</span><br></pre></td></tr></table></figure><ol start="2"><li>缓冲流，代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdk9.exe&quot;</span>));</span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.exe&quot;</span>));</span><br><span class="line">        <span class="comment">// 读写数据</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;缓冲流复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">缓冲流复制时间:<span class="number">8016</span> 毫秒</span><br></pre></td></tr></table></figure><p>如何更快呢？</p><p>使用数组的方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdk9.exe&quot;</span>));</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.exe&quot;</span>));</span><br><span class="line">          <span class="comment">// 读写数据</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>*<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bytes, <span class="number">0</span> , len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;缓冲流使用数组复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">缓冲流使用数组复制时间:<span class="number">666</span> 毫秒</span><br></pre></td></tr></table></figure><h3 id="14-5-2-字符缓冲流"><a href="#14-5-2-字符缓冲流" class="headerlink" title="14.5.2 字符缓冲流"></a>14.5.2 字符缓冲流</h3><h4 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public BufferedReader(Reader in)</code> ：创建一个 新的缓冲输入流。 </li><li><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符缓冲输入流</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;br.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 创建字符缓冲输出流</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;bw.txt&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h4><p>字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。</p><ul><li>BufferedReader：<code>public String readLine()</code>: 读一行文字。 </li><li>BufferedWriter：<code>public void newLine()</code>: 写一行行分隔符,由系统属性定义符号。</li></ul><p><code>readLine</code>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReaderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;in.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 定义字符串,保存读取的一行文字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// 循环读取,读取到最后返回null</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(line);</span><br><span class="line">            System.out.println(<span class="string">&quot;------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newLine</code>方法演示，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedWriterDemo</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  &#123;</span><br><span class="line">      <span class="comment">// 创建流对象</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;out.txt&quot;</span>));</span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">        bw.write(<span class="string">&quot;尚&quot;</span>);</span><br><span class="line">      <span class="comment">// 写出换行</span></span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">&quot;硅&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">&quot;谷&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出效果:</span><br><span class="line">尚</span><br><span class="line">硅</span><br><span class="line">谷</span><br></pre></td></tr></table></figure><h2 id="14-6-转换流"><a href="#14-6-转换流" class="headerlink" title="14.6 转换流"></a>14.6 转换流</h2><h3 id="14-6-1-字符编码和字符集"><a href="#14-6-1-字符编码和字符集" class="headerlink" title="14.6.1 字符编码和字符集"></a>14.6.1 字符编码和字符集</h3><h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><p>编码:字符(能看懂的)–字节(看不懂的)</p><p>解码:字节(看不懂的)–&gt;字符(能看懂的)</p><ul><li><p><strong>字符编码<code>Character Encoding</code></strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p><p>编码表:生活中文字和计算机中二进制的对应规则</p></li></ul><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><ul><li>**字符集 <code>Charset</code>**：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li></ul><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1_charset.jpg"></p><p>可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p><ul><li><strong>ASCII字符集</strong> ：<ul><li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。</li><li>ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</li></ul></li><li><strong>ISO-8859-1字符集</strong>：<ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul></li><li><strong>GBxxx字符集</strong>：<ul><li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul></li><li><strong>Unicode字符集</strong> ：<ul><li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li><li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li><li>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul></li></ul><h3 id="14-6-2-编码引出的问题"><a href="#14-6-2-编码引出的问题" class="headerlink" title="14.6.2 编码引出的问题"></a>14.6.2 编码引出的问题</h3><p>在Eclipse中，使用<code>FileReader</code> 读取项目中的文本文件。由于Eclipse的设置UTF-8编码但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReaderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;E:\\File_GBK.txt&quot;</span>);</span><br><span class="line">        <span class="type">int</span> read;</span><br><span class="line">        <span class="keyword">while</span> ((read = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read);</span><br><span class="line">        &#125;</span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">���</span><br></pre></td></tr></table></figure><p>那么如何读取GBK编码的文件呢？ </p><h3 id="14-6-3-InputStreamReader类"><a href="#14-6-3-InputStreamReader类" class="headerlink" title="14.6.3 InputStreamReader类"></a>14.6.3 InputStreamReader类</h3><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h4 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造举例，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;in.txt&quot;</span>));</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;in.txt&quot;</span>) , <span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="指定编码读取"><a href="#指定编码读取" class="headerlink" title="指定编码读取"></a>指定编码读取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReaderDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 定义文件路径,文件为gbk编码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">FileName</span> <span class="operator">=</span> <span class="string">&quot;E:\\file_gbk.txt&quot;</span>;</span><br><span class="line">      <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FileName));</span><br><span class="line">      <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FileName) , <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"><span class="comment">// 定义变量,保存字符</span></span><br><span class="line">        <span class="type">int</span> read;</span><br><span class="line">      <span class="comment">// 使用默认编码字符流读取,乱码</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read); <span class="comment">// ��Һ�</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 使用指定编码字符流读取,正常解析</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr2.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read);<span class="comment">// 大家好</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-6-4-OutputStreamWriter类"><a href="#14-6-4-OutputStreamWriter类" class="headerlink" title="14.6.4 OutputStreamWriter类"></a>14.6.4 OutputStreamWriter类</h3><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h4 id="构造方法-7"><a href="#构造方法-7" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造举例，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.txt&quot;</span>));</span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.txt&quot;</span>) , <span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="指定编码写出"><a href="#指定编码写出" class="headerlink" title="指定编码写出"></a>指定编码写出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 定义文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">FileName</span> <span class="operator">=</span> <span class="string">&quot;E:\\out.txt&quot;</span>;</span><br><span class="line">      <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FileName));</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw.write(<span class="string">&quot;你好&quot;</span>); <span class="comment">// 保存为6个字节</span></span><br><span class="line">        osw.close();</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 定义文件路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">FileName2</span> <span class="operator">=</span> <span class="string">&quot;E:\\out2.txt&quot;</span>;</span><br><span class="line">     <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FileName2),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw2.write(<span class="string">&quot;你好&quot;</span>);<span class="comment">// 保存为4个字节</span></span><br><span class="line">        osw2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-6-5-转换流理解图解"><a href="#14-6-5-转换流理解图解" class="headerlink" title="14.6.5 转换流理解图解"></a>14.6.5 转换流理解图解</h3><p><strong>转换流是字节与字符间的桥梁！</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/2_zhuanhuan.jpg"></p><h3 id="14-6-6-练习：转换文件编码"><a href="#14-6-6-练习：转换文件编码" class="headerlink" title="14.6.6 练习：转换文件编码"></a>14.6.6 练习：转换文件编码</h3><p>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><ol><li>指定GBK编码的转换流，读取文本文件。</li><li>使用UTF-8编码的转换流，写出文本文件。</li></ol><h4 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;      </span><br><span class="line">    <span class="comment">// 1.定义文件路径</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="string">&quot;file_gbk.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="string">&quot;file_utf8.txt&quot;</span>;</span><br><span class="line"><span class="comment">// 2.创建流对象</span></span><br><span class="line">    <span class="comment">// 2.1 转换输入流,指定GBK编码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile) , <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.2 转换输出流,默认utf8编码</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile));</span><br><span class="line"><span class="comment">// 3.读写数据</span></span><br><span class="line">    <span class="comment">// 3.1 定义数组</span></span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// 3.2 定义长度</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">    <span class="comment">// 3.3 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 循环写出</span></span><br><span class="line">          osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 4.释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-7-数据流"><a href="#14-7-数据流" class="headerlink" title="14.7 数据流"></a>14.7 数据流</h2><p>前面学习的IO流，在程序代码中，要么将数据直接按照字节处理，要么按照字符处理。那么，如果要在程序中直接处理Java的基础数据类型，怎么办呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> “巫师”;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> ‘男’;</span><br><span class="line"><span class="type">int</span> <span class="variable">energy</span> <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">75.5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">relive</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>完成这个需求，可以使用DataOutputStream进行写，随后用DataInputStream进行读取，而且顺序要一致。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestData</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;巫师&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">energy</span> <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">75.5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">relive</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;game.dat&quot;</span>));</span><br><span class="line">dos.writeUTF(name);</span><br><span class="line">dos.writeInt(age);</span><br><span class="line">dos.writeChar(gender);</span><br><span class="line">dos.writeInt(energy);</span><br><span class="line">dos.writeDouble(price);</span><br><span class="line">dos.writeBoolean(relive);</span><br><span class="line">dos.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reload</span><span class="params">()</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;game.dat&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> dis.readInt();</span><br><span class="line"><span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> dis.readChar();</span><br><span class="line"><span class="type">int</span> <span class="variable">energy</span> <span class="operator">=</span> dis.readInt();</span><br><span class="line"><span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> dis.readDouble();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">relive</span> <span class="operator">=</span> dis.readBoolean();</span><br><span class="line"></span><br><span class="line">System.out.println(name+<span class="string">&quot;,&quot;</span> + age + <span class="string">&quot;,&quot;</span> + gender + <span class="string">&quot;,&quot;</span> + energy + <span class="string">&quot;,&quot;</span> + price + <span class="string">&quot;,&quot;</span> + relive);</span><br><span class="line"></span><br><span class="line">dis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-8-序列化"><a href="#14-8-序列化" class="headerlink" title="14.8 序列化"></a>14.8 序列化</h2><h3 id="14-8-1-概述"><a href="#14-8-1-概述" class="headerlink" title="14.8.1 概述"></a>14.8.1 概述</h3><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。看图理解序列化： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/3_xuliehua.jpg"></p><h3 id="14-8-2-ObjectOutputStream类"><a href="#14-8-2-ObjectOutputStream类" class="headerlink" title="14.8.2 ObjectOutputStream类"></a>14.8.2 ObjectOutputStream类</h3><p><code>java.io.ObjectOutputStream </code> 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p><h4 id="构造方法-8"><a href="#构造方法-8" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public ObjectOutputStream(OutputStream out) </code>： 创建一个指定OutputStream的ObjectOutputStream。</li></ul><p>构造举例，代码如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;employee.txt&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);</span><br></pre></td></tr></table></figure><h4 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h4><ul><li>该类必须实现<code>java.io.Serializable </code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。<ul><li>如果对象的某个属性也是引用数据类型，那么如果该属性也要序列化的话，也要实现<code>Serializable</code> 接口</li></ul></li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</li><li>静态变量的值不会序列化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">company</span> <span class="operator">=</span> <span class="string">&quot;尚硅谷&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="type">int</span> age; <span class="comment">// transient瞬态修饰成员,不会被序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addressCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Address  check : &quot;</span> + name + <span class="string">&quot; -- &quot;</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.写出对象方法</p><ul><li><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializeDemo</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>   &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    e.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    e.address = <span class="string">&quot;beiqinglu&quot;</span>;</span><br><span class="line">    e.age = <span class="number">20</span>; </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 创建序列化流对象</span></span><br><span class="line">          <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;employee.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 写出对象</span></span><br><span class="line">        out.writeObject(e);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        out.close();</span><br><span class="line">        fileOut.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;Serialized data is saved&quot;</span>); <span class="comment">// 姓名，地址被序列化，年龄没有被序列化。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException i)   &#123;</span><br><span class="line">            i.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">Serialized data is saved</span><br></pre></td></tr></table></figure><h3 id="14-8-3-ObjectInputStream类"><a href="#14-8-3-ObjectInputStream类" class="headerlink" title="14.8.3 ObjectInputStream类"></a>14.8.3 ObjectInputStream类</h3><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。 </p><h4 id="构造方法-9"><a href="#构造方法-9" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public ObjectInputStream(InputStream in) </code>： 创建一个指定InputStream的ObjectInputStream。</li></ul><h4 id="反序列化操作1"><a href="#反序列化操作1" class="headerlink" title="反序列化操作1"></a>反序列化操作1</h4><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p><ul><li><code>public final Object readObject ()</code> : 读取一个对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializeDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>   &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 创建反序列化流</span></span><br><span class="line">             <span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;employee.txt&quot;</span>);</span><br><span class="line">             <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn);</span><br><span class="line">             <span class="comment">// 读取一个对象</span></span><br><span class="line">             e = (Employee) in.readObject();</span><br><span class="line">             <span class="comment">// 释放资源</span></span><br><span class="line">             in.close();</span><br><span class="line">             fileIn.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException i) &#123;</span><br><span class="line">             <span class="comment">// 捕获其他异常</span></span><br><span class="line">             i.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ClassNotFoundException c)  &#123;</span><br><span class="line">        <span class="comment">// 捕获类找不到异常</span></span><br><span class="line">             System.out.println(<span class="string">&quot;Employee class not found&quot;</span>);</span><br><span class="line">             c.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 无异常,直接打印输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + e.name);<span class="comment">// zhangsan</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Address: &quot;</span> + e.address); <span class="comment">// beiqinglu</span></span><br><span class="line">        System.out.println(<span class="string">&quot;age: &quot;</span> + e.age); <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。</strong>  </p><h4 id="反序列化操作2"><a href="#反序列化操作2" class="headerlink" title="反序列化操作2"></a><strong>反序列化操作2</strong></h4><p><strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。</strong>发生这个异常的原因如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </li><li>该类包含未知数据类型</li></ul><p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">     <span class="comment">// 加入序列版本号</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">     <span class="keyword">public</span> String name;</span><br><span class="line">     <span class="keyword">public</span> String address;</span><br><span class="line">     <span class="comment">// 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.</span></span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> eid; </span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addressCheck</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Address  check : &quot;</span> + name + <span class="string">&quot; -- &quot;</span> + address);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-8-4-练习：序列化集合"><a href="#14-8-4-练习：序列化集合" class="headerlink" title="14.8.4 练习：序列化集合"></a>14.8.4 练习：序列化集合</h3><ol><li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li><li>反序列化<code>list.txt</code> ，并遍历集合，打印对象信息。</li></ol><h4 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h4><ol><li>把若干学生对象 ，保存到集合中。</li><li>把集合序列化。</li><li>反序列化读取时，只需要读取一次，转换为集合类型。</li><li>遍历集合，可以打印所有的学生信息</li></ol><h4 id="案例实现-1"><a href="#案例实现-1" class="headerlink" title="案例实现"></a>案例实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 创建 学生对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;老王&quot;</span>, <span class="string">&quot;laow&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;老张&quot;</span>, <span class="string">&quot;laoz&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;老李&quot;</span>, <span class="string">&quot;laol&quot;</span>);</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Student&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">arrayList.add(student);</span><br><span class="line">arrayList.add(student2);</span><br><span class="line">arrayList.add(student3);</span><br><span class="line"><span class="comment">// 序列化操作</span></span><br><span class="line"><span class="comment">// serializ(arrayList);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化  </span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;list.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 读取对象,强转为ArrayList类型</span></span><br><span class="line">ArrayList&lt;Student&gt; list  = (ArrayList&lt;Student&gt;)ois.readObject();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++ )&#123;</span><br><span class="line">          <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">        System.out.println(s.getName()+<span class="string">&quot;--&quot;</span>+ s.getPwd());</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializ</span><span class="params">(ArrayList&lt;Student&gt; arrayList)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 创建 序列化流 </span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;list.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 写出对象</span></span><br><span class="line">oos.writeObject(arrayList);</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">oos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-8-5-java-io-Externalizable接口"><a href="#14-8-5-java-io-Externalizable接口" class="headerlink" title="14.8.5 java.io.Externalizable接口"></a>14.8.5 java.io.Externalizable接口</h3><p>除了Serializable接口之外，还可以实现java.io.Externalizable接口，但是要求重写：</p><p>void readExternal(ObjectInput in)<br>void writeExternal(ObjectOutput out)</p><p>  关于哪些属性序列化和反序列化，由程序员自己定。<strong>虽然可以自己决定任意属性的输出和读取，但是还是建议不要输出静态的和transient属性。</strong></p><p>学生类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Externalizable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Externalizable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">school</span> <span class="operator">=</span> <span class="string">&quot;atguigu&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> score)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSchool</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> school;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setSchool</span><span class="params">(String school)</span> &#123;</span><br><span class="line">Student.school = school;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">int</span> score)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Student [name=&quot;</span> + name +<span class="string">&quot;,age =&quot;</span> +age + <span class="string">&quot;, score=&quot;</span> + score +<span class="string">&quot;,schoool = &quot;</span> + school+ <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一下两个方法不是程序员手动调用，而是在对象被序列化和反序列时，IO流自动调用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//在这个方法中，程序员自己定，哪些属性需要序列化，及其顺序</span></span><br><span class="line">out.writeUTF(school);</span><br><span class="line">out.writeUTF(name);</span><br><span class="line">out.writeInt(score);</span><br><span class="line">out.writeInt(age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"><span class="comment">//读取的顺序要与写的顺序一致</span></span><br><span class="line">school = in.readUTF();</span><br><span class="line">name = in.readUTF();</span><br><span class="line">score = in.readInt();</span><br><span class="line">age = in.readInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 类通过实现 java.io.Serializable 接口以启用其序列化功能。未实现此接口的类将无法使其任何状态序列化或反序列化。</span></span><br><span class="line"><span class="comment"> * 序列化接口没有方法或字段，仅用于标识可序列化的语义。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * java.io.Externalizable 实例类的唯一特性是可以被写入序列化流中，该类负责保存和恢复实例内容。 </span></span><br><span class="line"><span class="comment"> * 则它要实现 Externalizable 接口的 writeExternal 和 readExternal 方法。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  void readExternal(ObjectInput in) </span></span><br><span class="line"><span class="comment"> *  void writeExternal(ObjectOutput out)  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  虽然可以自己决定任意属性的输出和读取，但是还是建议不要输出静态的和transient属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExternalizable</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span><span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;stu.dat&quot;</span>);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line"></span><br><span class="line">System.out.println(obj);</span><br><span class="line"></span><br><span class="line">ois.close();</span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="number">89</span>);</span><br><span class="line">Student.setSchool(<span class="string">&quot;尚硅谷&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;stu.dat&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">oos.writeObject(student);</span><br><span class="line"></span><br><span class="line">oos.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="14-9-重新认识PrintStream和Scanner、System-in和out"><a href="#14-9-重新认识PrintStream和Scanner、System-in和out" class="headerlink" title="14.9 重新认识PrintStream和Scanner、System.in和out"></a>14.9 重新认识PrintStream和Scanner、System.in和out</h2><h3 id="14-9-1-PrintStream类"><a href="#14-9-1-PrintStream类" class="headerlink" title="14.9.1 PrintStream类"></a>14.9.1 PrintStream类</h3><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><h4 id="构造方法-10"><a href="#构造方法-10" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public PrintStream(String fileName)  </code>： 使用指定的文件名创建一个新的打印流。</li></ul><p>构造举例，代码如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;ps.txt&quot;</span>)；</span><br></pre></td></tr></table></figure><h4 id="改变打印流向"><a href="#改变打印流向" class="headerlink" title="改变打印流向"></a>改变打印流向</h4><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个”小把戏”，改变它的流向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">// 调用系统的打印流,控制台直接输出97</span></span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 创建打印流,指定文件的名称</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;ps.txt&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 设置系统的打印流流向,输出到ps.txt</span></span><br><span class="line">        System.setOut(ps);</span><br><span class="line">      <span class="comment">// 调用系统的打印流,ps.txt中输出97</span></span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-9-2-Scanner类"><a href="#14-9-2-Scanner类" class="headerlink" title="14.9.2 Scanner类"></a>14.9.2 Scanner类</h3><h4 id="构造方法-11"><a href="#构造方法-11" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li>Scanner(File source) ：构造一个新的 Scanner，它生成的值是从指定文件扫描的。 </li><li>Scanner(File source, String charsetName) ：构造一个新的 Scanner，它生成的值是从指定文件扫描的。 </li><li>Scanner(InputStream source) ：构造一个新的 Scanner，它生成的值是从指定的输入流扫描的。 </li><li>Scanner(InputStream source, String charsetName) ：构造一个新的 Scanner，它生成的值是从指定的输入流扫描的。</li></ul><h4 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li>boolean hasNextXxx()： 如果通过使用nextXxx()方法，此扫描器输入信息中的下一个标记可以解释为默认基数中的一个 Xxx 值，则返回 true。</li><li>Xxx nextXxx()： 将输入信息的下一个标记扫描为一个Xxx</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFile</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;请输入一个单词：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;stop&quot;</span>.equals(str))&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">list.add(str);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br><span class="line">input.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;1.txt&quot;</span>));</span><br><span class="line"><span class="keyword">while</span>(input.hasNextLine())&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">input.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line">System.setIn(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>));</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">while</span>(input.hasNextLine())&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">input.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-10-JDK1-7之后引入新try-catch"><a href="#14-10-JDK1-7之后引入新try-catch" class="headerlink" title="14.10 JDK1.7之后引入新try..catch"></a>14.10 JDK1.7之后引入新try..catch</h2><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(需要关闭的资源对象的声明)&#123;</span><br><span class="line">    业务逻辑代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 e)&#123;</span><br><span class="line">    处理异常代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 e)&#123;</span><br><span class="line">    处理异常代码</span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>它没有finally，也不需要程序员去关闭资源对象，无论是否发生异常，都会关闭资源对象</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//从d:/1.txt(GBK)文件中，读取内容，写到项目根目录下1.txt(UTF-8)文件中</span></span><br><span class="line"><span class="keyword">try</span>(</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:/1.txt&quot;</span>);</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line"></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line">)&#123;</span><br><span class="line">String str;</span><br><span class="line"><span class="keyword">while</span>((str = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">bw.write(str);</span><br><span class="line">bw.newLine();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第14章-File类与IO流&quot;&gt;&lt;a href=&quot;#第14章-File类与IO流&quot; class=&quot;headerlink&quot; title=&quot;第14章 File类与IO流&quot;&gt;&lt;/a&gt;第14章 File类与IO流&lt;/h1&gt;&lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第13章 数据结构与算法</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC13%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC13%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</id>
    <published>2022-07-28T05:07:52.000Z</published>
    <updated>2022-10-16T04:43:25.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第13章-数据结构与算法"><a href="#第13章-数据结构与算法" class="headerlink" title="第13章 数据结构与算法"></a>第13章 数据结构与算法</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>数据结构</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><input disabled="" type="checkbox"> 对数据结构有初步了解</li><li><input disabled="" type="checkbox"> 掌握动态数组的实现方式</li><li><input disabled="" type="checkbox"> 掌握单链表与双链表的实现方式</li><li><input disabled="" type="checkbox"> 掌握哈希表的实现方式</li></ul><h1 id="第十三章-数据结构与算法"><a href="#第十三章-数据结构与算法" class="headerlink" title="第十三章 数据结构与算法"></a>第十三章 数据结构与算法</h1><h2 id="13-1-数据结构"><a href="#13-1-数据结构" class="headerlink" title="13.1 数据结构"></a>13.1 数据结构</h2><p><strong>数据结构</strong>就是研究数据的<strong>逻辑结构和物理结构</strong>以及它们之间相互关系，并对这种结构定义<strong>相应的运算</strong>，而且确保经过这些运算后所得到的新结构仍然是原来的结构类型。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572588929059.png" alt="1572588929059"></p><p>数据的逻辑结构指反映数据元素之间的逻辑关系，而与他们在计算机中的存储位置无关：</p><ul><li>集合（数学中集合的概念）：数据结构中的元素之间除了“同属一个集合” 的相互关系外，别无其他关系；</li><li>线性结构：数据结构中的元素存在一对一的相互关系；</li><li>树形结构：数据结构中的元素存在一对多的相互关系；</li><li>图形结构：数据结构中的元素存在多对多的相互关系。</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572589085415.png" alt="1572589085415"></p><p>数据的物理结构&#x2F;存储结构：是描述数据具体在内存中的存储（如：顺序结构、链式结构、索引结构、哈希结构）等，一种数据逻辑结构可表示成一种或多种物理存储结构。</p><p>数据结构和算法是一门完整并且复杂的课程，那么我们今天只是简单的讨论常见的几种数据结构，让我们对数据结构与算法有一个初步的了解。</p><h2 id="13-2-动态数组"><a href="#13-2-动态数组" class="headerlink" title="13.2 动态数组"></a>13.2 动态数组</h2><h3 id="13-2-1-动态数组的特点"><a href="#13-2-1-动态数组的特点" class="headerlink" title="13.2.1 动态数组的特点"></a>13.2.1 动态数组的特点</h3><p>逻辑结构：线性的</p><p>物理结构：顺序结构</p><p>申请内存：一次申请一大段连续的空间，一旦申请到了，内存就固定了。</p><p>存储特点：所有数据存储在这个连续的空间中，数组中的每一个元素都是一个具体的数据（或对象），所有数据都紧密排布，不能有间隔。</p><p>例如：整型数组</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563432676234.png" alt="1563432676234"></p><p>例如：对象数组</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563432696340.png" alt="1563432696340"></p><h3 id="13-2-2-动态数组的基本操作"><a href="#13-2-2-动态数组的基本操作" class="headerlink" title="13.2.2 动态数组的基本操作"></a>13.2.2 动态数组的基本操作</h3><p>与数据结构相关的数据操作：</p><ul><li>插入</li><li>删除</li><li>修改</li><li>查找</li><li>遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Container</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Iterable</span>&lt;E&gt;&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> index,E value)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(E e)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line">E <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, E value)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(E old, E value)</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E e)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E e)</span>;</span><br><span class="line">E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line">Object[] getAll();</span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-2-3-动态数组实现"><a href="#13-2-3-动态数组实现" class="headerlink" title="13.2.3 动态数组实现"></a>13.2.3 动态数组实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrayList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Container</span>&lt;E&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> Object[] all;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> total;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyArrayList</span><span class="params">()</span>&#123;</span><br><span class="line">all = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">ensureCapacityEnough();</span><br><span class="line">all[total++] = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityEnough</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(total &gt;= all.length)&#123;</span><br><span class="line">all = Arrays.copyOf(all, all.length*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> index, E value)</span> &#123;</span><br><span class="line"><span class="comment">//是否需要扩容</span></span><br><span class="line">ensureCapacityEnough();</span><br><span class="line">addCheckIndex(index);</span><br><span class="line"><span class="keyword">if</span>(total-index&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.arraycopy(all, index, all, index+<span class="number">1</span>, total-index);</span><br><span class="line">&#125;</span><br><span class="line">all[index]=value;</span><br><span class="line">total++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addCheckIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;total)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(index+<span class="string">&quot;越界&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(E e)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> indexOf(e);</span><br><span class="line"><span class="keyword">if</span>(index==-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>(e+<span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">delete(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">checkIndex(index);</span><br><span class="line"><span class="keyword">if</span>(total-index-<span class="number">1</span>&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.arraycopy(all, index+<span class="number">1</span>, all, index, total-index-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">all[--total] = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;total)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(index+<span class="string">&quot;越界&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, E value)</span> &#123;</span><br><span class="line">checkIndex(index);</span><br><span class="line"><span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> get(index);</span><br><span class="line">all[index]=value;</span><br><span class="line"><span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(E old, E value)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> indexOf(old);</span><br><span class="line"><span class="keyword">if</span>(index!=-<span class="number">1</span>)&#123;</span><br><span class="line">update(index, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E e)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> indexOf(e) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E e)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(e==<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; total; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(e == all[i])&#123;</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; total; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(e.equals(all[i]))&#123;</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">checkIndex(index);</span><br><span class="line"><span class="keyword">return</span> (E) all[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object[] getAll() &#123;</span><br><span class="line"><span class="keyword">return</span> Arrays.copyOf(all, total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> cursor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cursor!=total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (E) all[cursor++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">MyArrayList.<span class="built_in">this</span>.delete(--cursor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-2-4-动态数组测试"><a href="#13-2-4-动态数组测试" class="headerlink" title="13.2.4  动态数组测试"></a>13.2.4  动态数组测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMyArrayList</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">MyArrayList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">MyArrayList</span>&lt;String&gt;();</span><br><span class="line">my.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + my.size());</span><br><span class="line">Object[] all = my.getAll();</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line"></span><br><span class="line">my.insert(<span class="number">2</span>, <span class="string">&quot;尚硅谷&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + my.size());</span><br><span class="line">all = my.getAll();</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">MyArrayList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">MyArrayList</span>&lt;String&gt;();</span><br><span class="line">my.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line">my.delete(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + my.size());</span><br><span class="line">Object[] all = my.getAll();</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line"></span><br><span class="line">my.delete(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + my.size());</span><br><span class="line">all = my.getAll();</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">MyArrayList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">MyArrayList</span>&lt;String&gt;();</span><br><span class="line">my.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">update</span> <span class="operator">=</span> my.update(<span class="number">3</span>, <span class="string">&quot;尚硅谷&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + my.size());</span><br><span class="line">System.out.println(<span class="string">&quot;被替换的是：&quot;</span> + update);</span><br><span class="line">Object[] all = my.getAll();</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line"></span><br><span class="line">my.update(<span class="string">&quot;java&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + my.size());</span><br><span class="line">System.out.println(<span class="string">&quot;被替换的是：java&quot;</span>);</span><br><span class="line">all = my.getAll();</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">MyArrayList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">MyArrayList</span>&lt;String&gt;();</span><br><span class="line">my.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(my.contains(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">System.out.println(my.indexOf(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">System.out.println(my.get(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line">MyArrayList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">MyArrayList</span>&lt;String&gt;();</span><br><span class="line">my.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String string : my) &#123;</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span>&#123;</span><br><span class="line">MyArrayList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">MyArrayList</span>&lt;String&gt;();</span><br><span class="line">my.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator = my.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"><span class="keyword">if</span>(next.length()&gt;<span class="number">4</span>) &#123;</span><br><span class="line">iterator.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String string : my) &#123;</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-2-5-Java核心类库中的动态数组"><a href="#13-2-5-Java核心类库中的动态数组" class="headerlink" title="13.2.5 Java核心类库中的动态数组"></a>13.2.5 Java核心类库中的动态数组</h3><p>Java的List接口的实现类中有两个动态数组的实现：Vector和ArrayList。</p><h4 id="1、ArrayList与Vector的区别？"><a href="#1、ArrayList与Vector的区别？" class="headerlink" title="1、ArrayList与Vector的区别？"></a>1、ArrayList与Vector的区别？</h4><p>它们的底层物理结构都是数组，我们称为动态数组。</p><ul><li>ArrayList是新版的动态数组，线程不安全，效率高，Vector是旧版的动态数组，线程安全，效率低。</li><li>动态数组的扩容机制不同，ArrayList扩容为原来的1.5倍，Vector扩容增加为原来的2倍。</li><li>数组的初始化容量，如果在构建ArrayList与Vector的集合对象时，没有显式指定初始化容量，那么Vector的内部数组的初始容量默认为10，而ArrayList在JDK1.6及之前的版本也是10，而JDK1.7之后的版本ArrayList初始化为长度为0的空数组，之后在添加第一个元素时，再创建长度为10的数组。</li><li>Vector因为版本古老，支持Enumeration 迭代器。但是该迭代器不支持快速失败。而Iterator和ListIterator迭代器支持快速失败。如果在迭代器创建后的任意时间从结构上修改了向量（通过迭代器自身的 remove 或 add 方法之外的任何其他方式），则迭代器将抛出 ConcurrentModificationException。因此，面对并发的修改，迭代器很快就完全失败，而不是冒着在将来不确定的时间任意发生不确定行为的风险。</li></ul><h4 id="2、源码分析"><a href="#2、源码分析" class="headerlink" title="2、源码分析"></a>2、源码分析</h4><h5 id="（1）Vector源码分析"><a href="#（1）Vector源码分析" class="headerlink" title="（1）Vector源码分析"></a>（1）Vector源码分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>(<span class="number">10</span>);<span class="comment">//指定初始容量initialCapacity为10</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>(initialCapacity, <span class="number">0</span>);<span class="comment">//指定capacityIncrement增量为0</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">int</span> capacityIncrement增量为<span class="number">0</span>)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>();</span><br><span class="line">       <span class="comment">//判断了形参初始容量initialCapacity的合法性</span></span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                              initialCapacity);</span><br><span class="line">       <span class="comment">//创建了一个Object[]类型的数组</span></span><br><span class="line">       <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];<span class="comment">//默认是10</span></span><br><span class="line">       <span class="comment">//增量，默认是0，如果是0，后面就按照2倍增加，如果不是0，后面就按照你指定的增量进行增量</span></span><br><span class="line">       <span class="built_in">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//synchronized意味着线程安全的   </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">    <span class="comment">//看是否需要扩容</span></span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//把新的元素存入[elementCount]，存入后，elementCount元素的个数增1</span></span><br><span class="line">        elementData[elementCount++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityHelper</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="comment">//看是否超过了当前数组的容量</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);<span class="comment">//扩容</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;<span class="comment">//获取目前数组的长度</span></span><br><span class="line">        <span class="comment">//如果capacityIncrement增量是0，新容量 = oldCapacity的2倍</span></span><br><span class="line">        <span class="comment">//如果capacityIncrement增量是不是0，新容量 = oldCapacity + capacityIncrement增量;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                         capacityIncrement : oldCapacity);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果按照上面计算的新容量还不够，就按照你指定的需要的最小容量来扩容minCapacity</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果新容量超过了最大数组限制，那么单独处理</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把旧数组中的数据复制到新数组中，新数组的长度为newCapacity</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> removeElement(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">removeElement</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//查找obj在当前Vector中的下标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexOf(obj);</span><br><span class="line">    <span class="comment">//如果i&gt;=0，说明存在，删除[i]位置的元素</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        removeElementAt(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;<span class="comment">//要查找的元素是null值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index ; i &lt; elementCount ; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)<span class="comment">//如果是null值，用==null判断</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//要查找的元素是非null值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index ; i &lt; elementCount ; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))<span class="comment">//如果是非null值，用equals判断</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">removeElementAt</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//判断下标的合法性</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= elementCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(index + <span class="string">&quot; &gt;= &quot;</span> +</span><br><span class="line">                                                 elementCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//j是要移动的元素的个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> elementCount - index - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//如果需要移动元素，就调用System.arraycopy进行移动</span></span><br><span class="line">    <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//把index+1位置以及后面的元素往前移动</span></span><br><span class="line">        <span class="comment">//index+1的位置的元素移动到index位置，依次类推</span></span><br><span class="line">        <span class="comment">//一共移动j个</span></span><br><span class="line">        System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//元素的总个数减少</span></span><br><span class="line">    elementCount--;</span><br><span class="line">    <span class="comment">//将elementData[elementCount]这个位置置空，用来添加新元素，位置的元素等着被GC回收</span></span><br><span class="line">    elementData[elementCount] = <span class="literal">null</span>; <span class="comment">/* to let gc do its work */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（2）ArrayList源码分析"><a href="#（2）ArrayList源码分析" class="headerlink" title="（2）ArrayList源码分析"></a>（2）ArrayList源码分析</h5><p>JDK1.6：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(<span class="number">10</span>);<span class="comment">//指定初始容量为10</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">      <span class="comment">//检查初始容量的合法性</span></span><br><span class="line">      <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                             initialCapacity);</span><br><span class="line">      <span class="comment">//数组初始化为长度为initialCapacity的数组</span></span><br><span class="line"><span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>JDK1.7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//默认初始容量10</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>();</span><br><span class="line">       <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;<span class="comment">//数组初始化为一个空数组</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">       <span class="comment">//查看当前数组是否够多存一个元素</span></span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;<span class="comment">//如果当前数组还是空数组</span></span><br><span class="line">           <span class="comment">//minCapacity按照 默认初始容量和minCapacity中的的最大值处理</span></span><br><span class="line">           minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//看是否需要扩容处理</span></span><br><span class="line">       ensureExplicitCapacity(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>JDK1.8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<span class="comment">//初始化为空数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="comment">//查看当前数组是否够多存一个元素</span></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//存入新元素到[size]位置，然后size自增1</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="comment">//如果当前数组还是空数组</span></span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            <span class="comment">//那么minCapacity取DEFAULT_CAPACITY与minCapacity的最大值</span></span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//查看是否需要扩容</span></span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        modCount++;<span class="comment">//修改次数加1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果需要的最小容量  比  当前数组的长度  大，即当前数组不够存，就扩容</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;<span class="comment">//当前数组容量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);<span class="comment">//新数组容量是旧数组容量的1.5倍</span></span><br><span class="line">        <span class="comment">//看旧数组的1.5倍是否够</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="comment">//看旧数组的1.5倍是否超过最大数组限制</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//复制一个新数组</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="comment">//先找到o在当前ArrayList的数组中的下标</span></span><br><span class="line">    <span class="comment">//分o是否为空两种情况讨论</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="literal">null</span>) &#123;<span class="comment">//null值用==比较</span></span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;<span class="comment">//非null值用equals比较</span></span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fastRemove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    modCount++;<span class="comment">//修改次数加1</span></span><br><span class="line">    <span class="comment">//需要移动的元素个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果需要移动元素，就用System.arraycopy移动元素</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将elementData[size-1]位置置空，让GC回收空间，元素个数减少</span></span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">      rangeCheck(index);<span class="comment">//检验index是否合法</span></span><br><span class="line"></span><br><span class="line">      modCount++;<span class="comment">//修改次数加1</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//取出[index]位置的元素，[index]位置的元素就是要被删除的元素，用于最后返回被删除的元素</span></span><br><span class="line">      <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">      </span><br><span class="line"><span class="comment">//需要移动的元素个数</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//如果需要移动元素，就用System.arraycopy移动元素</span></span><br><span class="line">      <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">          System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                           numMoved);</span><br><span class="line">      <span class="comment">//将elementData[size-1]位置置空，让GC回收空间，元素个数减少</span></span><br><span class="line">      elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> oldValue;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeCheck(index);<span class="comment">//检验index是否合法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//取出[index]位置的元素，[index]位置的元素就是要被替换的元素，用于最后返回被替换的元素</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">    <span class="comment">//用element替换[index]位置的元素</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeCheck(index);<span class="comment">//检验index是否合法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);<span class="comment">//返回[index]位置的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="comment">//分为o是否为空两种情况</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从前往后找</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">     <span class="comment">//分为o是否为空两种情况</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从后往前找</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-3-链式存储结构"><a href="#13-3-链式存储结构" class="headerlink" title="13.3 链式存储结构"></a>13.3 链式存储结构</h2><p>逻辑结构：有线性的和非线性的</p><p>物理结构：不要求连续的存储空间</p><p>存储特点：数据必须封装到“结点”中，结点包含多个数据项，数据值只是其中的一个数据项，其他的数据项用来记录与之有关的结点的地址。</p><p>例如：以下列出几种常见的链式存储结构（当然远不止这些）</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563448858180.png" alt="1563448858180"></p><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>单链表结点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">Object data;</span><br><span class="line">Node next;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object data, Node next)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单链表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneWayLinkedList</span>&lt;E&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; head;<span class="comment">//头结点</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> total;<span class="comment">//记录实际元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt;&#123;</span><br><span class="line">E data;</span><br><span class="line">Node&lt;E&gt; next;</span><br><span class="line">Node(E data, Node&lt;E&gt; next) &#123;</span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><p>双链表结点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">Node prev;</span><br><span class="line">Object data;</span><br><span class="line">Node next;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Node prev, Object data, Node next)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.prev = prev;</span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双向链表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; first;<span class="comment">//头结点</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;<span class="comment">//尾结点</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> total;<span class="comment">//记录实际元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt;&#123;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">E data;</span><br><span class="line">Node&lt;E&gt; next;</span><br><span class="line">Node(Node&lt;E&gt; prev, E data, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563449427345.png" alt="1563449427345"></p><h4 id="二叉树实现基本结构"><a href="#二叉树实现基本结构" class="headerlink" title="二叉树实现基本结构"></a>二叉树实现基本结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">Node parent;</span><br><span class="line">Node left;</span><br><span class="line">Object data;</span><br><span class="line">Node right;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Node parent,Node left, Object data, Node right)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.parent = parent;</span><br><span class="line"><span class="built_in">this</span>.left = left;</span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line"><span class="built_in">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span>&lt;E&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; root;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> total;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt;&#123;</span><br><span class="line">        Node&lt;E&gt; parent;</span><br><span class="line">        Node&lt;E&gt; left;</span><br><span class="line">        E data;</span><br><span class="line">        Node&lt;E&gt; right;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Node&lt;E&gt; parent, Node&lt;E&gt; left, E data, Node&lt;E&gt; right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树分类"><a href="#二叉树分类" class="headerlink" title="二叉树分类"></a>二叉树分类</h4><ul><li><p>满二叉树： 除最后一层无任何子节点外，每一层上的所有结点都有两个子结点的二叉树。 第n层的结点数是2的n-1次方，2的n次方-1</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1574575163883.png" alt="1574575163883"></p></li><li><p>完全二叉树： 叶结点只能出现在最底层的两层，且最底层叶结点均处于次底层叶结点的左侧。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1574575180247.png" alt="1574575180247"></p></li><li><p>平衡二叉树：平衡二叉树（Self-balancing binary search tree）又被称为AVL树（有别于AVL算法），且具有以下性质：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树， 但不要求非叶节点都有两个子结点 。平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。 最小二叉平衡树的节点的公式如下 F(n)&#x3D;F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci(斐波那契)数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。</p></li></ul><p>例如：斐波那契数列（Fibonacci）：1，1，2，3，5，8，13…..</p><p>规律：除了第一个和第二个数以外，后面的数等于前两个数之和，</p><p>​f(0) &#x3D;1，</p><p>​f(1) &#x3D; 1，</p><p>​f(2) &#x3D; f(0) + f(1) &#x3D;2，</p><p>​f(3) &#x3D; f(1) + f(2) &#x3D; 3, </p><p>​f(4) &#x3D; f(2) + f(3) &#x3D; 5</p><p>​…</p><p>​f(n) &#x3D; f(n-2) + f(n-1);</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1574575518730.png" alt="1574575518730"></p><h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><ul><li>前序遍历：中左右</li><li>中序遍历：左中右</li><li>后序遍历：左右中</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1574575739236.png" alt="1574575739236"></p><p>前序遍历：ABDHIECFG</p><p>中序遍历：HDIBEAFCG</p><p>后序遍历：HIDEBFGCA</p><h2 id="13-4-单链表"><a href="#13-4-单链表" class="headerlink" title="13.4 单链表"></a>13.4 单链表</h2><h3 id="13-4-1-单链表的实现"><a href="#13-4-1-单链表的实现" class="headerlink" title="13.4.1 单链表的实现"></a>13.4.1 单链表的实现</h3><p>逻辑结构：单向链表</p><p>物理结构：链式顺序结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneWayLinkedList</span>&lt;E&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; head;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> total;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt;&#123;</span><br><span class="line">E data;</span><br><span class="line">Node&lt;E&gt; next;</span><br><span class="line">Node(E data, Node&lt;E&gt; next) &#123;</span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(e,<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">null</span>)&#123;</span><br><span class="line">head = newNode;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Node&lt;E&gt; node = head;</span><br><span class="line"><span class="keyword">while</span>(node.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line">node.next = newNode;</span><br><span class="line">&#125;</span><br><span class="line">total++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(E e)</span> &#123;</span><br><span class="line">Node&lt;E&gt; node = head;</span><br><span class="line">Node&lt;E&gt; find = <span class="literal">null</span>;</span><br><span class="line">Node&lt;E&gt; last = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(e==<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(node.data==<span class="literal">null</span>)&#123;</span><br><span class="line">find = node;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">last = node;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(e.equals(node.data))&#123;</span><br><span class="line">find = node;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">last = node;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(find != <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(last==<span class="literal">null</span>)&#123;</span><br><span class="line">head = find.next;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">last.next = find.next;</span><br><span class="line">&#125;</span><br><span class="line">total--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(E old, E value)</span> &#123;</span><br><span class="line">Node&lt;E&gt; node = head;</span><br><span class="line">Node&lt;E&gt; find = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(old==<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(node.data==<span class="literal">null</span>)&#123;</span><br><span class="line">find = node;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(old.equals(node.data))&#123;</span><br><span class="line">find = node;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(find != <span class="literal">null</span>)&#123;</span><br><span class="line">find.data = value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E e)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> indexOf(e) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E e)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(e==<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Node&lt;E&gt; node = head; node!=<span class="literal">null</span>; node=node.next )&#123;</span><br><span class="line"><span class="keyword">if</span>(node.data==e)&#123;</span><br><span class="line">index=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Node&lt;E&gt; node = head; node!=<span class="literal">null</span>; node=node.next )&#123;</span><br><span class="line"><span class="keyword">if</span>(e.equals(node.data))&#123;</span><br><span class="line">index=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object[] getAll() &#123;</span><br><span class="line">Object[] all = <span class="keyword">new</span> <span class="title class_">Object</span>[total];</span><br><span class="line">Node&lt;E&gt; node = head;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; all.length; i++,node = node.next) &#123;</span><br><span class="line">all[i] = node.data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-4-2-单链表的测试"><a href="#13-4-2-单链表的测试" class="headerlink" title="13.4.2 单链表的测试"></a>13.4.2 单链表的测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOneWayLinkedList</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">OneWayLinkedList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">OneWayLinkedList</span>&lt;String&gt;();</span><br><span class="line">my.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + my.size());</span><br><span class="line">Object[] all = my.getAll();</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">OneWayLinkedList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">OneWayLinkedList</span>&lt;String&gt;();</span><br><span class="line">my.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line">my.delete(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + my.size());</span><br><span class="line">Object[] all = my.getAll();</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line"></span><br><span class="line">my.delete(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + my.size());</span><br><span class="line">all = my.getAll();</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line"></span><br><span class="line">my.delete(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + my.size());</span><br><span class="line">all = my.getAll();</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">OneWayLinkedList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">OneWayLinkedList</span>&lt;String&gt;();</span><br><span class="line">my.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line">my.update(<span class="string">&quot;java&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + my.size());</span><br><span class="line">Object[] all = my.getAll();</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">OneWayLinkedList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">OneWayLinkedList</span>&lt;String&gt;();</span><br><span class="line">my.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(my.contains(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">System.out.println(my.indexOf(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line">OneWayLinkedList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">OneWayLinkedList</span>&lt;String&gt;();</span><br><span class="line">my.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">my.add(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String string : my) &#123;</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-5-双链表"><a href="#13-5-双链表" class="headerlink" title="13.5 双链表"></a>13.5 双链表</h2><p>Java中有双链表的实现：LinkedList，它是List接口的实现类。</p><h3 id="LinkedList源码分析"><a href="#LinkedList源码分析" class="headerlink" title="LinkedList源码分析"></a>LinkedList源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">Node&lt;E&gt; first;<span class="comment">//记录第一个结点的位置</span></span><br><span class="line">Node&lt;E&gt; last;<span class="comment">//记录最后一个结点的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E item;<span class="comment">//元素数据</span></span><br><span class="line">        Node&lt;E&gt; next;<span class="comment">//下一个结点</span></span><br><span class="line">        Node&lt;E&gt; prev;<span class="comment">//前一个结点</span></span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = element;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    linkLast(e);<span class="comment">//默认把新元素链接到链表尾部</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;<span class="comment">//用l 记录原来的最后一个结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建新结点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//现在的新结点是最后一个结点了</span></span><br><span class="line">    last = newNode;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果l==null，说明原来的链表是空的</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">//那么新结点同时也是第一个结点</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//否则把新结点链接到原来的最后一个结点的next中</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    <span class="comment">//元素个数增加</span></span><br><span class="line">    size++;</span><br><span class="line">    <span class="comment">//修改次数增加</span></span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">      <span class="comment">//分o是否为空两种情况</span></span><br><span class="line">      <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">//找到o对应的结点x</span></span><br><span class="line">          <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">              <span class="keyword">if</span> (x.item == <span class="literal">null</span>) &#123;</span><br><span class="line">                  unlink(x);<span class="comment">//删除x结点</span></span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//找到o对应的结点x</span></span><br><span class="line">          <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">              <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                  unlink(x);<span class="comment">//删除x结点</span></span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  E <span class="title function_">unlink</span><span class="params">(Node&lt;E&gt; x)</span> &#123;<span class="comment">//x是要被删除的结点</span></span><br><span class="line">      <span class="comment">// assert x != null;</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> x.item;<span class="comment">//被删除结点的数据</span></span><br><span class="line">      <span class="keyword">final</span> Node&lt;E&gt; next = x.next;<span class="comment">//被删除结点的下一个结点</span></span><br><span class="line">      <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;<span class="comment">//被删除结点的上一个结点</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//如果被删除结点的前面没有结点，说明被删除结点是第一个结点</span></span><br><span class="line">      <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">//那么被删除结点的下一个结点变为第一个结点</span></span><br><span class="line">          first = next;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;<span class="comment">//被删除结点不是第一个结点</span></span><br><span class="line">          <span class="comment">//被删除结点的上一个结点的next指向被删除结点的下一个结点</span></span><br><span class="line">          prev.next = next;</span><br><span class="line">          <span class="comment">//断开被删除结点与上一个结点的链接</span></span><br><span class="line">          x.prev = <span class="literal">null</span>;<span class="comment">//使得GC回收</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//如果被删除结点的后面没有结点，说明被删除结点是最后一个结点</span></span><br><span class="line">      <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">//那么被删除结点的上一个结点变为最后一个结点</span></span><br><span class="line">          last = prev;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;<span class="comment">//被删除结点不是最后一个结点</span></span><br><span class="line">          <span class="comment">//被删除结点的下一个结点的prev执行被删除结点的上一个结点</span></span><br><span class="line">          next.prev = prev;</span><br><span class="line">          <span class="comment">//断开被删除结点与下一个结点的连接</span></span><br><span class="line">          x.next = <span class="literal">null</span>;<span class="comment">//使得GC回收</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//把被删除结点的数据也置空，使得GC回收</span></span><br><span class="line">      x.item = <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">//元素个数减少</span></span><br><span class="line">      size--;</span><br><span class="line">      <span class="comment">//修改次数增加</span></span><br><span class="line">      modCount++;</span><br><span class="line">      <span class="comment">//返回被删除结点的数据</span></span><br><span class="line">      <span class="keyword">return</span> element;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="链表与动态数组的区别"><a href="#链表与动态数组的区别" class="headerlink" title="链表与动态数组的区别"></a>链表与动态数组的区别</h3><p>动态数组底层的物理结构是数组，因此根据索引访问的效率非常高，但是根据索引的插入和删除效率不高，因为涉及到移动元素，而且添加操作时可能涉及到扩容问题，那么就会增加时空消耗。</p><p>链表底层的物理结构是链表，因此根据索引访问的效率不高，但是插入和删除的效率高，因为不需要移动元素，只需要修改前后元素的指向关系即可，而链表的添加不会涉及到扩容问题。</p><h2 id="13-3-栈和队列"><a href="#13-3-栈和队列" class="headerlink" title="13.3 栈和队列"></a>13.3 栈和队列</h2><p>堆栈是一种先进后出（FILO：first in last out）或后进先出（LIFI：last in first out）的结构。</p><p>队列是一种（但并非一定）先进先出（FIFO）的结构。</p><h3 id="13-3-1-Stack类"><a href="#13-3-1-Stack类" class="headerlink" title="13.3.1 Stack类"></a>13.3.1 Stack类</h3><p>java.util.Stack<E>是Vector<E>集合的子类。</p><p>比Vector多了几个方法</p><ul><li>(1)peek：查看栈顶元素，不弹出</li><li>(2)pop：弹出栈</li><li>(3)push：压入栈     即添加到链表的头</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">Stack&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">list.push(<span class="number">1</span>);</span><br><span class="line">list.push(<span class="number">2</span>);</span><br><span class="line">list.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*System.out.println(list.pop());</span></span><br><span class="line"><span class="comment">System.out.println(list.pop());</span></span><br><span class="line"><span class="comment">System.out.println(list.pop());</span></span><br><span class="line"><span class="comment">System.out.println(list.pop());//java.util.NoSuchElementException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">System.out.println(list.peek());</span><br><span class="line">System.out.println(list.peek());</span><br><span class="line">System.out.println(list.peek());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-3-2-Queue和Deque接口"><a href="#11-3-2-Queue和Deque接口" class="headerlink" title="11.3.2 Queue和Deque接口"></a>11.3.2 Queue和Deque接口</h3><p><code>Queue</code>除了基本的 <code>Collection</code>操作外，队列还提供其他的插入、提取和检查操作。每个方法都存在两种形式：一种抛出异常（操作失败时），另一种返回一个特殊值（<code>null</code> 或  <code>false</code>，具体取决于操作）。<code>Queue</code> 实现通常不允许插入  元素，尽管某些实现（如 ）并不禁止插入  。即使在允许 null 的实现中，也不应该将  插入到  中，因为  也用作  方法的一个特殊返回值，表明队列不包含元素。 </p><table><thead><tr><th></th><th><em>抛出异常</em></th><th><em>返回特殊值</em></th></tr></thead><tbody><tr><td>插入</td><td>add(e)</td><td>offer(e)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td></tr><tr><td>检查</td><td>element()</td><td>peek()</td></tr></tbody></table><p><code>Deque</code>，名称 <em>deque</em> 是“double ended queue（双端队列）”的缩写，通常读为“deck”。此接口定义在双端队列两端访问元素的方法。提供插入、移除和检查元素的方法。每种方法都存在两种形式：一种形式在操作失败时抛出异常，另一种形式返回一个特殊值（<code>null</code>  或 <code>false</code>，具体取决于操作）。</p><table><thead><tr><th></th><th><strong>第一个元素（头部）</strong></th><th></th><th><strong>最后一个元素（尾部）</strong></th><th></th></tr></thead><tbody><tr><td></td><td><em>抛出异常</em></td><td><em>特殊值</em></td><td><em>抛出异常</em></td><td><em>特殊值</em></td></tr><tr><td><strong>插入</strong></td><td>addFirst(e)</td><td>offerFirst(e)</td><td>addLast(e)</td><td>offerLast(e)</td></tr><tr><td><strong>移除</strong></td><td>removeFirst()</td><td>pollFirst()</td><td>removeLast()</td><td>pollLast()</td></tr><tr><td><strong>检查</strong></td><td>getFirst()</td><td>peekFirst()</td><td>getLast()</td><td>peekLast()</td></tr></tbody></table><p>此接口扩展了 <code>Queue</code>接口。在将双端队列用作队列时，将得到  FIFO（先进先出）行为。将元素添加到双端队列的末尾，从双端队列的开头移除元素。从 <code>Queue</code> 接口继承的方法完全等效于  <code>Deque</code> 方法，如下表所示：  </p><table><thead><tr><th><strong><code>Queue</code> 方法</strong></th><th><strong>等效 <code>Deque</code> 方法</strong></th></tr></thead><tbody><tr><td>add(e)</td><td>addLast(e)</td></tr><tr><td>offer(e)</td><td>offerLast(e)</td></tr><tr><td>remove()</td><td>removeFirst()</td></tr><tr><td>poll()</td><td>pollFirst()</td></tr><tr><td>element()</td><td>getFirst()</td></tr><tr><td>peek()</td><td>peekFirst()</td></tr></tbody></table><p>双端队列也可用作 LIFO（后进先出）堆栈。应优先使用此接口而不是遗留 <code>Stack</code> 类。在将双端队列用作堆栈时，元素被推入双端队列的开头并从双端队列开头弹出。堆栈方法完全等效于 <code>Deque</code> 方法，如下表所示：  </p><table><thead><tr><th><strong>堆栈方法</strong></th><th><strong>等效 <code>Deque</code> 方法</strong></th></tr></thead><tbody><tr><td>push(e)</td><td>addFirst(e)</td></tr><tr><td>pop()</td><td>removeFirst()</td></tr><tr><td>peek()</td><td>peekFirst()</td></tr></tbody></table><p>结论：Deque接口的实现类既可以用作FILO堆栈使用，又可以用作FIFO队列使用。</p><p>Deque接口的实现类有ArrayDeque和LinkedList，它们一个底层是使用数组实现，一个使用双向链表实现。</p><h2 id="13-4-哈希表"><a href="#13-4-哈希表" class="headerlink" title="13.4 哈希表"></a>13.4 哈希表</h2><p>HashMap和Hashtable都是哈希表。</p><h3 id="13-4-1-hashCode值"><a href="#13-4-1-hashCode值" class="headerlink" title="13.4.1 hashCode值"></a><strong>13.4.1 hashCode值</strong></h3><p>hash算法是一种可以从任何数据中提取出其“指纹”的数据摘要算法，它将任意大小的数据映射到一个固定大小的序列上，这个序列被称为hash code、数据摘要或者指纹。比较出名的hash算法有MD5、SHA。hash是具有唯一性且不可逆的，唯一性是指相同的“对象”产生的hash code永远是一样的。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563797150134.png" alt="1563797150134"></p><h3 id="13-4-2-哈希表的物理结构"><a href="#13-4-2-哈希表的物理结构" class="headerlink" title="13.4.2 哈希表的物理结构"></a><strong>13.4.2 哈希表的物理结构</strong></h3><p>HashMap和Hashtable是散列表，其中维护了一个长度为<strong>2的幂次方</strong>的Entry类型的数组table，数组的每一个元素被称为一个桶(bucket)，你添加的映射关系(key,value)最终都被封装为一个Map.Entry类型的对象，放到了某个table[index]桶中。使用数组的目的是查询和添加的效率高，可以根据索引直接定位到某个table[index]。</p><h4 id="1、数组元素类型：Map-Entry"><a href="#1、数组元素类型：Map-Entry" class="headerlink" title="1、数组元素类型：Map.Entry"></a><strong>1、数组元素类型：Map.Entry</strong></h4><p>JDK1.7：</p><p>映射关系被封装为HashMap.Entry类型，而这个类型实现了Map.Entry接口。</p><p>观察HashMap.Entry类型是个结点类型，即table[index]下的映射关系可能串起来一个链表。因此我们把table[index]称为“桶bucket”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt;&#123;</span><br><span class="line">    <span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">            <span class="keyword">final</span> K key;</span><br><span class="line">            V value;</span><br><span class="line">            Entry&lt;K,V&gt; next;</span><br><span class="line">            <span class="type">int</span> hash;</span><br><span class="line">            <span class="comment">//...省略</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563799072234.png" alt="1563799072234"></p><p>JDK1.8：</p><p>映射关系被封装为HashMap.Node类型或HashMap.TreeNode类型，它俩都直接或间接的实现了Map.Entry接口。</p><p>存储到table数组的可能是Node结点对象，也可能是TreeNode结点对象，它们也是Map.Entry接口的实现类。即table[index]下的映射关系可能串起来一个链表或一棵红黑树（自平衡的二叉树）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt;&#123;</span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">            <span class="keyword">final</span> K key;</span><br><span class="line">            V value;</span><br><span class="line">            Node&lt;K,V&gt; next;</span><br><span class="line">            <span class="comment">//...省略</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;</span><br><span class="line">        <span class="type">boolean</span> red;<span class="comment">//是红结点还是黑结点</span></span><br><span class="line">        <span class="comment">//...省略</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashMap</span>&lt;K,V&gt;&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">HashMap</span>.Node&lt;K,V&gt; &#123;</span><br><span class="line">        Entry&lt;K,V&gt; before, after;</span><br><span class="line">        Entry(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">super</span>(hash, key, value, next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563799238793.png" alt="1563799238793"></p><h4 id="2、数组的长度始终是2的n次幂"><a href="#2、数组的长度始终是2的n次幂" class="headerlink" title="2、数组的长度始终是2的n次幂"></a>2、数组的长度始终是2的n次幂</h4><p>table数组的默认初始化长度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>如果你手动指定的table长度不是2的n次幂，会通过如下方法给你纠正为2的n次幂</p><p>JDK1.7：</p><p>HashMap处理容量方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">roundUpToPowerOf2</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="comment">// assert number &gt;= 0 : &quot;number must be non-negative&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> number &gt;= MAXIMUM_CAPACITY</span><br><span class="line">            ? MAXIMUM_CAPACITY</span><br><span class="line">            : (number &gt; <span class="number">1</span>) ? Integer.highestOneBit((number - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Integer包装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">highestOneBit</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="comment">// HD, Figure 3-1</span></span><br><span class="line">    i |= (i &gt;&gt;  <span class="number">1</span>);</span><br><span class="line">    i |= (i &gt;&gt;  <span class="number">2</span>);</span><br><span class="line">    i |= (i &gt;&gt;  <span class="number">4</span>);</span><br><span class="line">    i |= (i &gt;&gt;  <span class="number">8</span>);</span><br><span class="line">    i |= (i &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> i - (i &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.8：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果数组不够了，扩容了怎么办？扩容了还是2的n次幂，因为每次数组扩容为原来的2倍</p><p>JDK1.7：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="literal">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        resize(<span class="number">2</span> * table.length);<span class="comment">//扩容为原来的2倍</span></span><br><span class="line">        hash = (<span class="literal">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.8：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">       <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;<span class="comment">//oldCap原来的容量</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">       <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">               threshold = Integer.MAX_VALUE;</span><br><span class="line">               <span class="keyword">return</span> oldTab;</span><br><span class="line">           &#125;<span class="comment">//newCap = oldCap &lt;&lt; 1  新容量=旧容量扩容为原来的2倍</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">               newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">       &#125;</span><br><span class="line">  <span class="comment">//......此处省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么为什么要保持table数组一直是2的n次幂呢？</p><h4 id="3、那么HashMap是如何决定某个映射关系存在哪个桶的呢？"><a href="#3、那么HashMap是如何决定某个映射关系存在哪个桶的呢？" class="headerlink" title="3、那么HashMap是如何决定某个映射关系存在哪个桶的呢？"></a>3、那么HashMap是如何决定某个映射关系存在哪个桶的呢？</h4><p>因为hash值是一个整数，而数组的长度也是一个整数，有两种思路：</p><p>①hash 值 % table.length会得到一个[0,table.length-1]范围的值，正好是下标范围，但是用%运算，不能保证均匀存放，可能会导致某些table[index]桶中的元素太多，而另一些太少，因此不合适。</p><p>②hash 值 &amp; (table.length-1)，因为table.length是2的幂次方，因此table.length-1是一个二进制低位全是1的数，所以&amp;操作完，也会得到一个[0,table.length-1]范围的值。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563800372286.png" alt="1563800372286"></p><p>JDK1.7：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexFor</span><span class="params">(<span class="type">int</span> h, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="comment">// assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>); <span class="comment">//此处h就是hash</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.8：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)  <span class="comment">// i = (n - 1) &amp; hash</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//....省略大量代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、hash是hashCode的再运算"><a href="#4、hash是hashCode的再运算" class="headerlink" title="4、hash是hashCode的再运算"></a>4、hash是hashCode的再运算</h4><p>不管是JDK1.7还是JDK1.8中，都不是直接用key的hashCode值直接与table.length-1计算求下标的，而是先对key的hashCode值进行了一个运算，JDK1.7和JDK1.8关于hash()的实现代码不一样，但是不管怎么样都是为了提高hash code值与 (table.length-1)的按位与完的结果，尽量的均匀分布。</p><p>JDK1.7：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.8：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">       <span class="type">int</span> h;</span><br><span class="line">       <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>虽然算法不同，但是思路都是将hashCode值的高位二进制与低位二进制值进行了异或，然高位二进制参与到index的计算中。</p><p>为什么要hashCode值的二进制的高位参与到index计算呢？</p><p>因为一个HashMap的table数组一般不会特别大，至少在不断扩容之前，那么table.length-1的大部分高位都是0，直接用hashCode和table.length-1进行&amp;运算的话，就会导致总是只有最低的几位是有效的，那么就算你的hashCode()实现的再好也难以避免发生碰撞，这时让高位参与进来的意义就体现出来了。它对hashcode的低位添加了随机性并且混合了高位的部分特征，显著减少了碰撞冲突的发生。</p><h4 id="5、解决-index-冲突问题"><a href="#5、解决-index-冲突问题" class="headerlink" title="5、解决[index]冲突问题"></a>5、解决[index]冲突问题</h4><p>虽然从设计hashCode()到上面HashMap的hash()函数，都尽量减少冲突，但是仍然存在两个不同的对象返回的hashCode值相同，或者hashCode值就算不同，通过hash()函数计算后，得到的index也会存在大量的相同，因此key分布完全均匀的情况是不存在的。那么发生碰撞冲突时怎么办？</p><p>JDK1.8之间使用：数组+链表的结构。</p><p>JDK1.8之后使用：数组+链表&#x2F;红黑树的结构。</p><p>即hash相同或hash&amp;(table.lengt-1)的值相同，那么就存入同一个“桶”table[index]中，使用链表或红黑树连接起来。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563802656661.png" alt="1563802656661"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563802665708.png" alt="1563802665708"></p><h4 id="6、为什么JDK1-8会出现红黑树和链表共存呢？"><a href="#6、为什么JDK1-8会出现红黑树和链表共存呢？" class="headerlink" title="6、为什么JDK1.8会出现红黑树和链表共存呢？"></a>6、为什么JDK1.8会出现红黑树和链表共存呢？</h4><p>因为当冲突比较严重时，table[index]下面的链表就会很长，那么会导致查找效率大大降低，而如果此时选用二叉树可以大大提高查询效率。</p><p>但是二叉树的结构又过于复杂，如果结点个数比较少的时候，那么选择链表反而更简单。</p><p>所以会出现红黑树和链表共存。</p><h4 id="7、什么时候树化？什么时候反树化？"><a href="#7、什么时候树化？什么时候反树化？" class="headerlink" title="7、什么时候树化？什么时候反树化？"></a>7、什么时候树化？什么时候反树化？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;<span class="comment">//树化阈值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;<span class="comment">//反树化阈值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;<span class="comment">//最小树化容量</span></span><br></pre></td></tr></table></figure><ul><li><p>当某table[index]下的链表的结点个数达到8，并且table.length&gt;&#x3D;64，那么如果新Entry对象还添加到该table[index]中，那么就会将table[index]的链表进行树化。</p></li><li><p>当某table[index]下的红黑树结点个数少于6个，此时，</p><ul><li>如果继续删除table[index]下树结点，一直删除到2个以下时就会变回链表。</li><li>如果继续添加映射关系到当前map中，如果添加导致了map的table重新resize，那么只要table[index]下的树结点仍然&lt;&#x3D;6个，那么会变回链表</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyKey</span>&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyKey</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(num&lt;=<span class="number">20</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">result = prime * result + num;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">MyKey</span> <span class="variable">other</span> <span class="operator">=</span> (MyKey) obj;</span><br><span class="line"><span class="keyword">if</span> (num != other.num)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestHashMap</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//这里为了演示的效果，我们造一个特殊的类，这个类的hashCode（）方法返回固定值1</span></span><br><span class="line"><span class="comment">//因为这样就可以造成冲突问题，使得它们都存到table[1]中</span></span><br><span class="line">HashMap&lt;MyKey, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">map.put(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i), <span class="string">&quot;value&quot;</span>+i);<span class="comment">//树化演示</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">HashMap&lt;MyKey, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">map.put(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i), <span class="string">&quot;value&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">11</span>; i++) &#123;</span><br><span class="line">map.remove(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i));<span class="comment">//反树化演示</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">HashMap&lt;MyKey, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">map.put(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i), <span class="string">&quot;value&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">map.remove(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i));</span><br><span class="line">&#125;<span class="comment">//table[1]下剩余6个结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">21</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">map.put(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i), <span class="string">&quot;value&quot;</span>+i);<span class="comment">//添加到扩容时，反树化</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-4-3-JDK1-7的put方法源码分析"><a href="#13-4-3-JDK1-7的put方法源码分析" class="headerlink" title="13.4.3 JDK1.7的put方法源码分析"></a>13.4.3 JDK1.7的put方法源码分析</h3><p>（1）几个关键的常量和变量值的作用：</p><p>初始化容量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>;<span class="comment">//16</span></span><br></pre></td></tr></table></figure><p>①默认负载因子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure><p>②阈值：扩容的临界值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> threshold;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threshold = table.length * loadFactor;</span><br></pre></td></tr></table></figure><p>③负载因子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">float</span> loadFactor;</span><br></pre></td></tr></table></figure><p>负载因子的值大小有什么关系？</p><p>如果太大，threshold就会很大，那么如果冲突比较严重的话，就会导致table[index]下面的结点个数很多，影响效率。</p><p>如果太小，threshold就会很小，那么数组扩容的频率就会提高，数组的使用率也会降低，那么会造成空间的浪费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">//DEFAULT_INITIAL_CAPACITY：默认初始容量16</span></span><br><span class="line">  <span class="comment">//DEFAULT_LOAD_FACTOR：默认加载因子0.75</span></span><br><span class="line">      <span class="built_in">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">      <span class="comment">//校验initialCapacity合法性</span></span><br><span class="line">      <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">      <span class="comment">//校验initialCapacity合法性                                       initialCapacity);</span></span><br><span class="line">      <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">          initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">      <span class="comment">//校验loadFactor合法性</span></span><br><span class="line">      <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                             loadFactor);</span><br><span class="line"><span class="comment">//加载因子，初始化为0.75</span></span><br><span class="line">      <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">      <span class="comment">// threshold 初始为初始容量                                  </span></span><br><span class="line">      threshold = initialCapacity;</span><br><span class="line">      init();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="comment">//如果table数组是空的，那么先创建数组</span></span><br><span class="line">        <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">            <span class="comment">//threshold一开始是初始容量的值</span></span><br><span class="line">            inflateTable(threshold);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果key是null，单独处理</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//对key的hashCode进行干扰，算出一个hash值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//计算新的映射关系应该存到table[i]位置，</span></span><br><span class="line">        <span class="comment">//i = hash &amp; table.length-1，可以保证i在[0,table.length-1]范围内</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//检查table[i]下面有没有key与我新的映射关系的key重复，如果重复替换value</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">//添加新的映射关系</span></span><br><span class="line">        addEntry(hash, key, value, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inflateTable</span><span class="params">(<span class="type">int</span> toSize)</span> &#123;</span><br><span class="line">        <span class="comment">// Find a power of 2 &gt;= toSize</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> roundUpToPowerOf2(toSize);<span class="comment">//容量是等于toSize值的最接近的2的n次方</span></span><br><span class="line"><span class="comment">//计算阈值 = 容量 * 加载因子</span></span><br><span class="line">        threshold = (<span class="type">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//创建Entry[]数组，长度为capacity</span></span><br><span class="line">        table = <span class="keyword">new</span> <span class="title class_">Entry</span>[capacity];</span><br><span class="line">        initHashSeedAsNeeded(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//如果key是null，直接存入[0]的位置</span></span><br><span class="line">    <span class="keyword">private</span> V <span class="title function_">putForNullKey</span><span class="params">(V value)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否有重复的key，如果有重复的，就替换value</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.key == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">//把新的映射关系存入[0]的位置，而且key的hash值用0表示</span></span><br><span class="line">        addEntry(<span class="number">0</span>, <span class="literal">null</span>, value, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否需要库容</span></span><br><span class="line">        <span class="comment">//扩容：（1）size达到阈值（2）table[i]正好非空</span></span><br><span class="line">        <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="literal">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">            <span class="comment">//table扩容为原来的2倍，并且扩容后，会重新调整所有映射关系的存储位置</span></span><br><span class="line">            resize(<span class="number">2</span> * table.length);</span><br><span class="line">            <span class="comment">//新的映射关系的hash和index也会重新计算</span></span><br><span class="line">            hash = (<span class="literal">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">            bucketIndex = indexFor(hash, table.length);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//存入table中</span></span><br><span class="line">        createEntry(hash, key, value, bucketIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">        <span class="comment">//原来table[i]下面的映射关系作为新的映射关系next</span></span><br><span class="line">        table[bucketIndex] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">        size++;<span class="comment">//个数增加</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>1、put(key,value)</p><p>（1）当第一次添加映射关系时，数组初始化为一个长度为<strong>16</strong>的<strong>HashMap$Entry</strong>的数组，这个HashMap$Entry类型是实现了java.util.<strong>Map.Entry</strong>接口</p><p>（2）特殊考虑：如果key为null，index直接是[0],hash也是0</p><p>（3）如果key不为null，在计算index之前，会对key的hashCode()值，做一个hash(key)再次哈希的运算，这样可以使得Entry对象更加散列的存储到table中</p><p>（4）计算index &#x3D; table.length-1 &amp; hash;</p><p>（5）如果table[index]下面，已经有映射关系的key与我要添加的新的映射关系的key相同了，会用新的value替换旧的value。</p><p>（6）如果没有相同的，会把新的映射关系添加到链表的头，原来table[index]下面的Entry对象连接到新的映射关系的next中。</p><p>（7）添加之前先判断if(size &gt;&#x3D; threshold  &amp;&amp;  table[index]!&#x3D;null)如果该条件为true，会扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(size &gt;= threshold  &amp;&amp;  table[index]!=<span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">①会扩容</span><br><span class="line"></span><br><span class="line">②会重新计算key的hash</span><br><span class="line"></span><br><span class="line">③会重新计算index</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（8）size++</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563804039202.png" alt="1563804039202"></p><p>2、get(key)</p><p>（1）计算key的hash值，用这个方法hash(key)</p><p>（2）找index &#x3D; table.length-1 &amp; hash;</p><p>（3）如果table[index]不为空，那么就挨个比较哪个Entry的key与它相同，就返回它的value</p><p>3、remove(key)</p><p>（1）计算key的hash值，用这个方法hash(key)</p><p>（2）找index &#x3D; table.length-1 &amp; hash;</p><p>（3）如果table[index]不为空，那么就挨个比较哪个Entry的key与它相同，就删除它，把它前面的Entry的next的值修改为被删除Entry的next</p><h3 id="13-4-4-JDK1-8的put方法源码分析"><a href="#13-4-4-JDK1-8的put方法源码分析" class="headerlink" title="13.4.4 JDK1.8的put方法源码分析"></a>13.4.4 JDK1.8的put方法源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">几个常量和变量：</span><br><span class="line">（<span class="number">1</span>）DEFAULT_INITIAL_CAPACITY：默认的初始容量 <span class="number">16</span></span><br><span class="line">（<span class="number">2</span>）MAXIMUM_CAPACITY：最大容量  <span class="number">1</span> &lt;&lt; <span class="number">30</span></span><br><span class="line">（<span class="number">3</span>）DEFAULT_LOAD_FACTOR：默认加载因子 <span class="number">0.75</span></span><br><span class="line">（<span class="number">4</span>）TREEIFY_THRESHOLD：默认树化阈值<span class="number">8</span>，当链表的长度达到这个值后，要考虑树化</span><br><span class="line">（<span class="number">5</span>）UNTREEIFY_THRESHOLD：默认反树化阈值<span class="number">6</span>，当树中的结点的个数达到这个阈值后，要考虑变为链表</span><br><span class="line">（<span class="number">6</span>）MIN_TREEIFY_CAPACITY：最小树化容量<span class="number">64</span></span><br><span class="line">当单个的链表的结点个数达到<span class="number">8</span>，并且table的长度达到<span class="number">64</span>，才会树化。</span><br><span class="line">当单个的链表的结点个数达到<span class="number">8</span>，但是table的长度未达到<span class="number">64</span>，会先扩容</span><br><span class="line">（<span class="number">7</span>）Node&lt;K,V&gt;[] table：数组</span><br><span class="line">（<span class="number">8</span>）size：记录有效映射关系的对数，也是Entry对象的个数</span><br><span class="line">（<span class="number">9</span>）<span class="type">int</span> threshold：阈值，当size达到阈值时，考虑扩容</span><br><span class="line">（<span class="number">10</span>）<span class="type">double</span> loadFactor：加载因子，影响扩容的频率</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; </span><br><span class="line">    <span class="comment">// all other fields defaulted，其他字段都是默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//目的：干扰hashCode值</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">       <span class="type">int</span> h;</span><br><span class="line"><span class="comment">//如果key是null，hash是0</span></span><br><span class="line"><span class="comment">//如果key非null，用key的hashCode值 与 key的hashCode值高16进行异或</span></span><br><span class="line"><span class="comment">//即就是用key的hashCode值高16位与低16位进行了异或的干扰运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">index = hash &amp; table.length-1</span></span><br><span class="line"><span class="comment">如果用key的原始的hashCode值  与 table.length-1 进行按位与，那么基本上高16没机会用上。</span></span><br><span class="line"><span class="comment">这样就会增加冲突的概率，为了降低冲突的概率，把高16位加入到hash信息中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">       <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; <span class="comment">//数组</span></span><br><span class="line">Node&lt;K,V&gt; p; <span class="comment">//一个结点</span></span><br><span class="line"><span class="type">int</span> n, i;<span class="comment">//n是数组的长度   i是下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//tab和table等价</span></span><br><span class="line"><span class="comment">//如果table是空的</span></span><br><span class="line">       <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)&#123;</span><br><span class="line">           n = (tab = resize()).length;</span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">tab = resize();</span></span><br><span class="line"><span class="comment">n = tab.length;*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果table是空的，resize()完成了①创建了一个长度为16的数组②threshold = 12</span></span><br><span class="line"><span class="comment">n = 16</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//i = (n - 1) &amp; hash ，下标 = 数组长度-1 &amp; hash</span></span><br><span class="line"><span class="comment">//p = tab[i] 第1个结点</span></span><br><span class="line"><span class="comment">//if(p==null) 条件满足的话说明 table[i]还没有元素</span></span><br><span class="line"><span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//把新的映射关系直接放入table[i]</span></span><br><span class="line">           tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//newNode（）方法就创建了一个Node类型的新结点，新结点的next是null</span></span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           Node&lt;K,V&gt; e; </span><br><span class="line">K k;</span><br><span class="line"><span class="comment">//p是table[i]中第一个结点</span></span><br><span class="line"><span class="comment">//if(table[i]的第一个结点与新的映射关系的key重复)</span></span><br><span class="line">           <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">               ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))&#123;</span><br><span class="line">               e = p;<span class="comment">//用e记录这个table[i]的第一个结点</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)&#123;<span class="comment">//如果table[i]第一个结点是一个树结点</span></span><br><span class="line">               <span class="comment">//单独处理树结点</span></span><br><span class="line">               <span class="comment">//如果树结点中，有key重复的，就返回那个重复的结点用e接收，即e!=null</span></span><br><span class="line">               <span class="comment">//如果树结点中，没有key重复的，就把新结点放到树中，并且返回null，即e=null</span></span><br><span class="line">e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//table[i]的第一个结点不是树结点，也与新的映射关系的key不重复</span></span><br><span class="line"><span class="comment">//binCount记录了table[i]下面的结点的个数</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line"><span class="comment">//如果p的下一个结点是空的，说明当前的p是最后一个结点</span></span><br><span class="line">                   <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//把新的结点连接到table[i]的最后</span></span><br><span class="line">                       p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果binCount&gt;=8-1，达到7个时</span></span><br><span class="line">                       <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)&#123; <span class="comment">// -1 for 1st</span></span><br><span class="line">                           <span class="comment">//要么扩容，要么树化</span></span><br><span class="line">treeifyBin(tab, hash);</span><br><span class="line">&#125;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line"><span class="comment">//如果key重复了，就跳出for循环，此时e结点记录的就是那个key重复的结点</span></span><br><span class="line">           <span class="keyword">if</span> (e.hash == hash &amp;&amp;((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))&#123;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">                   p = e;<span class="comment">//下一次循环，e=p.next，就类似于e=e.next，往链表下移动</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"><span class="comment">//如果这个e不是null，说明有key重复，就考虑替换原来的value</span></span><br><span class="line">           <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">               <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">               <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)&#123;</span><br><span class="line">                   e.value = value;</span><br><span class="line">&#125;</span><br><span class="line">               afterNodeAccess(e);<span class="comment">//什么也没干</span></span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       ++modCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素个数增加</span></span><br><span class="line"><span class="comment">//size达到阈值</span></span><br><span class="line">       <span class="keyword">if</span> (++size &gt; threshold)&#123;</span><br><span class="line">           resize();<span class="comment">//一旦扩容，重新调整所有映射关系的位置</span></span><br><span class="line">&#125;</span><br><span class="line">       afterNodeInsertion(evict);<span class="comment">//什么也没干</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] oldTab = table;<span class="comment">//oldTab原来的table</span></span><br><span class="line"><span class="comment">//oldCap：原来数组的长度</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//oldThr：原来的阈值</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;<span class="comment">//最开始threshold是0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//newCap，新容量</span></span><br><span class="line"><span class="comment">//newThr：新阈值</span></span><br><span class="line">       <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;<span class="comment">//说明原来不是空数组</span></span><br><span class="line">           <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class="comment">//是否达到数组最大限制</span></span><br><span class="line">               threshold = Integer.MAX_VALUE;</span><br><span class="line">               <span class="keyword">return</span> oldTab;</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)&#123;</span><br><span class="line"><span class="comment">//newCap = 旧的容量*2 ，新容量&lt;最大数组容量限制</span></span><br><span class="line"><span class="comment">//新容量：32,64，...</span></span><br><span class="line"><span class="comment">//oldCap &gt;= 初始容量16</span></span><br><span class="line"><span class="comment">//新阈值重新算 = 24，48 ....</span></span><br><span class="line">               newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">&#125;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>)&#123; <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">           newCap = oldThr;</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">           newCap = DEFAULT_INITIAL_CAPACITY;<span class="comment">//新容量是默认初始化容量16</span></span><br><span class="line"><span class="comment">//新阈值= 默认的加载因子 * 默认的初始化容量 = 0.75*16 = 12</span></span><br><span class="line">           newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">           newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                     (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">       &#125;</span><br><span class="line">       threshold = newThr;<span class="comment">//阈值赋值为新阈值12，24.。。。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建了一个新数组，长度为newCap，16，32,64.。。</span></span><br><span class="line">       <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">           Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">       table = newTab;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;<span class="comment">//原来不是空数组</span></span><br><span class="line"><span class="comment">//把原来的table中映射关系，倒腾到新的table中</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">               Node&lt;K,V&gt; e;</span><br><span class="line">               <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;<span class="comment">//e是table下面的结点</span></span><br><span class="line">                   oldTab[j] = <span class="literal">null</span>;<span class="comment">//把旧的table[j]位置清空</span></span><br><span class="line">                   <span class="keyword">if</span> (e.next == <span class="literal">null</span>)<span class="comment">//如果是最后一个结点</span></span><br><span class="line">                       newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;<span class="comment">//重新计算e的在新table中的存储位置，然后放入</span></span><br><span class="line">                   <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)<span class="comment">//如果e是树结点</span></span><br><span class="line"><span class="comment">//把原来的树拆解，放到新的table</span></span><br><span class="line">                       ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                   <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                       Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                       Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                       Node&lt;K,V&gt; next;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把原来table[i]下面的整个链表，重新挪到了新的table中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">                       <span class="keyword">do</span> &#123;</span><br><span class="line">                           next = e.next;</span><br><span class="line">                           <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                               <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                   loHead = e;</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   loTail.next = e;</span><br><span class="line">                               loTail = e;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">else</span> &#123;</span><br><span class="line">                               <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                   hiHead = e;</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   hiTail.next = e;</span><br><span class="line">                               hiTail = e;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                       <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                           loTail.next = <span class="literal">null</span>;</span><br><span class="line">                           newTab[j] = loHead;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                           hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                           newTab[j + oldCap] = hiHead;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> newTab;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Node&lt;K,V&gt; <span class="title function_">newNode</span><span class="params">(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> &#123;</span><br><span class="line"><span class="comment">//创建一个新结点</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(hash, key, value, next);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">       <span class="type">int</span> n, index; </span><br><span class="line">Node&lt;K,V&gt; e;</span><br><span class="line"><span class="comment">//MIN_TREEIFY_CAPACITY：最小树化容量64</span></span><br><span class="line"><span class="comment">//如果table是空的，或者  table的长度没有达到64</span></span><br><span class="line">       <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">           resize();<span class="comment">//先扩容</span></span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//用e记录table[index]的结点的地址</span></span><br><span class="line">           TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">do...while，把table[index]链表的Node结点变为TreeNode类型的结点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">           <span class="keyword">do</span> &#123;</span><br><span class="line">               TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">               <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                   hd = p;<span class="comment">//hd记录根结点</span></span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                   p.prev = tl;</span><br><span class="line">                   tl.next = p;</span><br><span class="line">               &#125;</span><br><span class="line">               tl = p;</span><br><span class="line">           &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//如果table[index]下面不是空</span></span><br><span class="line">           <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">               hd.treeify(tab);<span class="comment">//将table[index]下面的链表进行树化</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>1、添加过程</p><p>A. 先计算key的hash值，如果key是null，hash值就是0，如果为null，使用(h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16)得到hash值；</p><p>B. 如果table是空的，先初始化table数组；</p><p>C. 通过hash值计算存储的索引位置index &#x3D; hash &amp; (table.length-1)</p><p>D. 如果table[index]&#x3D;&#x3D;null，那么直接创建一个Node结点存储到table[index]中即可</p><p>E. 如果table[index]!&#x3D;null</p><p>​a) 判断table[index]的根结点的key是否与新的key“相同”（hash值相同并且(满足key的地址相同或key的equals返回true)），如果是那么用e记录这个根结点</p><p>​b) 如果table[index]的根结点的key与新的key“不相同”，而且table[index]是一个TreeNode结点，说明table[index]下是一棵红黑树，如果该树的某个结点的key与新的key“相同”（hash值相同并且(满足key的地址相同或key的equals返回true)），那么用e记录这个相同的结点，否则将(key,value)封装为一个TreeNode结点，连接到红黑树中</p><p>​c) 如果table[index]的根结点的key与新的key“不相同”，并且table[index]不是一个TreeNode结点，说明table[index]下是一个链表，如果该链表中的某个结点的key与新的key“相同”，那么用e记录这个相同的结点，否则将新的映射关系封装为一个Node结点直接链接到链表尾部，并且判断table[index]下结点个数达到**TREEIFY_THRESHOLD(8)<strong>个，如果table[index]下结点个数已经达到，那么再判断table.length是否达到</strong>MIN_TREEIFY_CAPACITY(64)<strong>，如果没达到，那么先扩容，扩容会导致所有元素重新计算index，并调整位置，如果table[index]下结点个数已经达到</strong>TREEIFY_THRESHOLD(8)<strong>个并table.length也已经达到</strong>MIN_TREEIFY_CAPACITY(64)**，那么会将该链表转成一棵自平衡的红黑树。</p><p>F. 如果在table[index]下找到了新的key“相同”的结点，即e不为空，那么用新的value替换原来的value，并返回旧的value，结束put方法</p><p>G. 如果新增结点而不是替换，那么size++，并且还要重新判断size是否达到threshold阈值，如果达到，还要扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(size &gt; threshold )&#123;</span><br><span class="line">①会扩容</span><br><span class="line"></span><br><span class="line">②会重新计算key的hash</span><br><span class="line"></span><br><span class="line">③会重新计算index</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572870448458.png" alt="1572870448458"></p><p>2、remove(key)</p><p>（1）计算key的hash值，用这个方法hash(key)</p><p>（2）找index &#x3D; table.length-1 &amp; hash;</p><p>（3）如果table[index]不为空，那么就挨个比较哪个Entry的key与它相同，就删除它，把它前面的Entry的next的值修改为被删除Entry的next</p><p>（4）如果table[index]下面原来是红黑树，结点删除后，个数小于等于6，会把红黑树变为链表</p><h3 id="13-4-5-关于映射关系的key是否可以修改？"><a href="#13-4-5-关于映射关系的key是否可以修改？" class="headerlink" title="13.4.5 关于映射关系的key是否可以修改？"></a>13.4.5 关于映射关系的key是否可以修改？</h3><p>映射关系存储到HashMap中会存储key的hash值，这样就不用在每次查找时重新计算每一个Entry或Node（TreeNode）的hash值了，因此如果已经put到Map中的映射关系，再修改key的属性，而这个属性又参与hashcode值的计算，那么会导致匹配不上。</p><p>这个规则也同样适用于LinkedHashMap、HashSet、LinkedHashSet、Hashtable等所有散列存储结构的集合。</p><p>JDK1.7：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt;&#123;</span><br><span class="line">    <span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">            <span class="keyword">final</span> K key;</span><br><span class="line">            V value;</span><br><span class="line">            Entry&lt;K,V&gt; next;</span><br><span class="line">            <span class="type">int</span> hash; <span class="comment">//记录Entry映射关系的key的hash(key.hashCode())值</span></span><br><span class="line">            <span class="comment">//...省略</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.8：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt;&#123;</span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> hash;<span class="comment">//记录Node映射关系的key的hash(key.hashCode())值</span></span><br><span class="line">            <span class="keyword">final</span> K key;</span><br><span class="line">            V value;</span><br><span class="line">            Node&lt;K,V&gt; next;</span><br><span class="line">            <span class="comment">//...省略</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestHashMap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">HashMap&lt;ID,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">ID</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ID</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">ID</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ID</span>(<span class="number">2</span>);</span><br><span class="line"><span class="type">ID</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ID</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">map.put(i1, <span class="string">&quot;haha&quot;</span>);</span><br><span class="line">map.put(i2, <span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">map.put(i3, <span class="string">&quot;xixi&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(map.get(i1));<span class="comment">//haha</span></span><br><span class="line">i1.setId(<span class="number">10</span>);</span><br><span class="line">System.out.println(map.get(i1));<span class="comment">//null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ID</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ID</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">result = prime * result + id;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">ID</span> <span class="variable">other</span> <span class="operator">=</span> (ID) obj;</span><br><span class="line"><span class="keyword">if</span> (id != other.id)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所以实际开发中，经常选用String，Integer等作为key，因为它们都是不可变对象。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第13章-数据结构与算法&quot;&gt;&lt;a href=&quot;#第13章-数据结构与算法&quot; class=&quot;headerlink&quot; title=&quot;第13章 数据结构与算法&quot;&gt;&lt;/a&gt;第13章 数据结构与算法&lt;/h1&gt;&lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; cla</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第12章 泛型</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC12%E7%AB%A0-%E6%B3%9B%E5%9E%8B/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC12%E7%AB%A0-%E6%B3%9B%E5%9E%8B/</id>
    <published>2022-07-28T05:07:38.000Z</published>
    <updated>2022-10-16T04:43:25.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第12章-泛型"><a href="#第12章-泛型" class="headerlink" title="第12章 泛型"></a>第12章 泛型</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><input disabled="" type="checkbox"> 能够使用泛型定义类、接口、方法</li><li><input disabled="" type="checkbox"> 能够理解泛型上限</li><li><input disabled="" type="checkbox"> 能够阐述泛型通配符的作用</li><li><input disabled="" type="checkbox"> 能够识别通配符的上下限</li></ul><h1 id="第十二章-泛型"><a href="#第十二章-泛型" class="headerlink" title="第十二章 泛型"></a>第十二章 泛型</h1><h2 id="12-1-泛型的概念"><a href="#12-1-泛型的概念" class="headerlink" title="12.1 泛型的概念"></a>12.1 泛型的概念</h2><h3 id="12-1-1-泛型的引入"><a href="#12-1-1-泛型的引入" class="headerlink" title="12.1.1 泛型的引入"></a>12.1.1 泛型的引入</h3><p>例如：生产瓶子的厂家，一开始并不知道我们将来会用瓶子装什么，我们什么都可以装，但是有的时候，我们在使用时，想要限定某个瓶子只能用来装什么，这样我们不会装错，而用的时候也可以放心的使用，无需再三思量。我们生活中是<strong>在使用这个瓶子时在瓶子上“贴标签”</strong>，这样就轻松解决了问题。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563412556491.png" alt="1563412556491"></p><p>还有，在Java中我们在声明方法时，当在完成方法功能时如果有未知的数据需要参与，这些未知的数据需要在调用方法时才能确定，那么我们把这样的数据通过形参表示。那么在方法体中，用这个形参名来代表那个未知的数据，而调用者在调用时，对应的传入值就可以了。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563414367674.png" alt="1563414367674"></p><p>受以上两点启发，JDK1.5设计了泛型的概念。泛型即为“类型参数”，这个类型参数在声明它的类、接口或方法中，代表未知的通用的类型。例如：</p><p>java.lang.Comparable接口和java.util.Comparator接口，是用于对象比较大小的规范接口，这两个接口只是限定了当一个对象大于另一个对象时返回正整数，小于返回负整数，等于返回0。但是并不确定是什么类型的对象比较大小，之前的时候只能用Object类型表示，使用时既麻烦又不安全，因此JDK1.5就给它们增加了泛型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparable</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(T o)</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparator</span>&lt;T&gt;&#123;</span><br><span class="line">     <span class="type">int</span> <span class="title function_">compare</span><span class="params">(T o1, T o2)</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<T>就是类型参数，即泛型。</p><h3 id="12-1-2-泛型的好处"><a href="#12-1-2-泛型的好处" class="headerlink" title="12.1.2 泛型的好处"></a>12.1.2 泛型的好处</h3><p>示例代码：</p><p>JavaBean：圆类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Circle [radius=&quot;</span> + radius + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="comment">//强制类型转换</span></span><br><span class="line"><span class="type">Circle</span> <span class="variable">c1</span> <span class="operator">=</span> (Circle) o1;</span><br><span class="line"><span class="type">Circle</span> <span class="variable">c2</span> <span class="operator">=</span> (Circle) o2;</span><br><span class="line"><span class="keyword">return</span> Double.compare(c1.getRadius(), c2.getRadius());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">CircleComparator</span> <span class="variable">com</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircleComparator</span>();</span><br><span class="line">System.out.println(com.compare(<span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line">System.out.println(com.compare(<span class="string">&quot;圆1&quot;</span>, <span class="string">&quot;圆2&quot;</span>));<span class="comment">//运行时异常：ClassCastException</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们在使用如上面这样的接口时，如果没有泛型或不指定泛型，很麻烦，而且有安全隐患。</p><p>因为在设计（编译）Comparator接口时，不知道它会用于哪种类型的对象比较，因此只能将compare方法的形参设计为Object类型，而实际在compare方法中需要向下转型为Circle，才能调用Circle类的getRadius()获取半径值进行比较。</p><p>使用泛型：</p><p>比较器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CircleComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Circle&gt;&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Circle o1, Circle o2)</span> &#123;</span><br><span class="line"><span class="comment">//不再需要强制类型转换，代码更简洁</span></span><br><span class="line"><span class="keyword">return</span> Double.compare(o1.getRadius(), o2.getRadius());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">CircleComparator</span> <span class="variable">com</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircleComparator</span>();</span><br><span class="line">System.out.println(com.compare(<span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(com.compare(&quot;圆1&quot;, &quot;圆2&quot;));//编译错误，因为&quot;圆1&quot;, &quot;圆2&quot;不是Circle类型，是String类型，编译器提前报错，而不是冒着风险在运行时再报错</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有了泛型并使用泛型，那么既能保证安全，又能简化代码。</p><p>因为把不安全的因素在编译期间就排除了；既然通过了编译，那么类型一定是符合要求的，就避免了类型转换。</p><h3 id="12-1-3-泛型的相关名词"><a href="#12-1-3-泛型的相关名词" class="headerlink" title="12.1.3 泛型的相关名词"></a>12.1.3 泛型的相关名词</h3><p>&lt;类型&gt;这种语法形式就叫泛型。</p><p>其中：</p><ul><li><p><T>是类型变量（Type Variables），而<T>是代表未知的数据类型，我们可以指定为<String>，<Integer>，<Circle>等，那么&lt;类型&gt;的形式我们成为类型参数；</p><ul><li>类比方法的参数的概念，我们可以把<T>，称为类型形参，将<Circle>称为类型实参，有助于我们理解泛型；</li></ul></li><li><p>Comparator<T>这种就称为参数化类型（Parameterized Types）。</p></li></ul><p>自从有了泛型之后，Java的数据类型就更丰富了：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200521081637509.png" alt="image-20200521081637509"></p><p>Class：<code>Class</code> 类的实例表示正在运行的 Java 应用程序中的类和接口。枚举是一种类，注释是一种接口。每个数组属于被映射为 Class  对象的一个类，所有具有相同元素类型和维数的数组都共享该 <code>Class</code> 对象。基本的 Java  类型（<code>boolean</code>、<code>byte</code>、<code>char</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>  和 <code>double</code>）和关键字 <code>void</code> 也表示为 <code>Class</code> 对象。 </p><ul><li>GenericArrayType：泛化的数组类型，即T[]</li><li>ParameterizedType：参数化类型，例如：Comparator<T>，Comparator<String></li><li>TypeVariable：类型变量，例如：Comparator<T>中的T，Map&lt;K,V&gt;中的K,V</li><li>WildcardType：通配符类型，例如：Comparator&lt;?&gt;等</li></ul><h3 id="12-1-4-在哪里可以声明类型变量-lt-T-gt"><a href="#12-1-4-在哪里可以声明类型变量-lt-T-gt" class="headerlink" title="12.1.4 在哪里可以声明类型变量&lt;T&gt;"></a>12.1.4 在哪里可以声明类型变量&lt;T&gt;</h3><ul><li>声明类或接口时，在类名或接口名后面声明类型变量，我们把这样的类或接口称为泛型类或泛型接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 class 类名&lt;类型变量列表&gt; 【extends 父类】 【implements 父接口们】&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">【修饰符】 interface 接口名&lt;类型变量列表&gt; 【implements 父接口们】&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt;    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K,V&gt;&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><ul><li>声明方法时，在【修饰符】与返回值类型之间声明类型变量，我们把声明（是<font color='red'><strong>声明</strong></font>不是单纯的使用）了类型变量的方法称为泛型方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 &lt;类型变量列表&gt; 返回值类型 方法名(【形参列表】)【<span class="keyword">throws</span> 异常列表】&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例如：java.util.Arrays类中的</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">asList</span><span class="params">(T... a)</span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-2-参数类型：泛型类与泛型接口"><a href="#12-2-参数类型：泛型类与泛型接口" class="headerlink" title="12.2 参数类型：泛型类与泛型接口"></a>12.2 参数类型：泛型类与泛型接口</h2><p>当我们在声明类或接口时，类或接口中定义某个成员时，该成员有些类型是不确定的，而这个类型需要在使用这个类或接口时才可以确定，那么我们可以使用泛型。</p><h3 id="12-2-1-声明泛型类与泛型接口"><a href="#12-2-1-声明泛型类与泛型接口" class="headerlink" title="12.2.1 声明泛型类与泛型接口"></a>12.2.1 声明泛型类与泛型接口</h3><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 class 类名&lt;类型变量列表&gt; 【extends 父类】 【implements 父接口们】&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">【修饰符】 interface 接口名&lt;类型变量列表&gt; 【implements 父接口们】&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>&lt;类型变量列表&gt;：可以是一个或多个类型变量，一般都是使用单个的大写字母表示。例如：<T>、&lt;K,V&gt;等。</li><li>&lt;类型变量列表&gt;中的类型变量不能用于静态成员上。</li></ul><p>什么时候使用泛型类或泛型接口呢？</p><ul><li>当某个类的非静态实例变量的类型不确定，需要在创建对象或子类继承时才能确定</li><li>当某个（些）类的非静态方法的形参类型不确定，需要在创建对象或子类继承时才能确定</li></ul><p>示例代码：</p><p>例如：我们要声明一个学生类，该学生包含姓名、成绩，而此时学生的成绩类型不确定，为什么呢，因为，语文老师希望成绩是“优秀”、“良好”、“及格”、“不及格”，数学老师希望成绩是89.5, 65.0，英语老师希望成绩是’A’,’B’,’C’,’D’,’E’。那么我们在设计这个学生类时，就可以使用泛型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> T score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, T score)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(T score)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;, 成绩：&quot;</span> + score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-2-2-使用泛型类与泛型接口"><a href="#12-2-2-使用泛型类与泛型接口" class="headerlink" title="12.2.2 使用泛型类与泛型接口"></a>12.2.2 使用泛型类与泛型接口</h3><p>在使用这种参数化的类与接口时，我们需要指定泛型变量的实际类型参数：</p><p>（1）实际类型参数必须是引用数据类型，不能是基本数据类型</p><p>（2）在创建类的对象时指定类型变量对应的实际类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//语文老师使用时：</span></span><br><span class="line">Student&lt;String&gt; stu1 = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;String&gt;(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;良好&quot;</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//数学老师使用时：</span></span><br><span class="line">        <span class="comment">//Student&lt;double&gt; stu2 = new Student&lt;double&gt;(&quot;张三&quot;, 90.5);//错误，必须是引用数据类型</span></span><br><span class="line">Student&lt;Double&gt; stu2 = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;Double&gt;(<span class="string">&quot;张三&quot;</span>, <span class="number">90.5</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//英语老师使用时：</span></span><br><span class="line">Student&lt;Character&gt; stu3 = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;Character&gt;(<span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//错误的指定</span></span><br><span class="line">        <span class="comment">//Student&lt;Object&gt; stu = new Student&lt;String&gt;();//错误的</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JDK1.7支持简写形式：Student<String> stu1 &#x3D; new Student&lt;&gt;(“张三”, “良好”);</p><p>指定泛型实参时，必须左右两边一致，不存在多态现象</p></blockquote><p>（3）在继承泛型类或实现泛型接口时，指定类型变量对应的实际类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChineseStudent</span> <span class="keyword">extends</span> <span class="title class_">Student</span>&lt;String&gt;&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ChineseStudent</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ChineseStudent</span><span class="params">(String name, String score)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name, score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//语文老师使用时：</span></span><br><span class="line"><span class="type">ChineseStudent</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseStudent</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;良好&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Circle&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Circle [radius=&quot;</span> + radius + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Circle c)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(radius,c.radius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-2-3-类型变量的上限"><a href="#12-2-3-类型变量的上限" class="headerlink" title="12.2.3 类型变量的上限"></a>12.2.3 类型变量的上限</h3><p>当在声明类型变量时，如果不希望这个类型变量代表任意引用数据类型，而是某个系列的引用数据类型，那么可以设定类型变量的上限。</p><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型变量  extends 上限&gt;</span><br></pre></td></tr></table></figure><p>如果有多个上限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型变量  extends 上限1 &amp; 上限2&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如果多个上限中有类有接口，那么只能有一个类，而且必须写在最左边。接口的话，可以多个。</p><p>如果在声明&lt;类型变量&gt;时没有指定任何上限，默认上限是java.lang.Object。</p></blockquote><p>例如：我们要声明一个两个数求和的工具类，要求两个加数必须是Number数字类型，并且实现Comparable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SumTools</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Number</span> &amp; Comparable&lt;T&gt;&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> T a;</span><br><span class="line"><span class="keyword">private</span> T b;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SumTools</span><span class="params">(T a, T b)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.a = a;</span><br><span class="line"><span class="built_in">this</span>.b = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getSum</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> BigInteger)&#123;</span><br><span class="line"><span class="keyword">return</span> (T) ((BigInteger) a).add((BigInteger)b);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> BigDecimal)&#123;</span><br><span class="line"><span class="keyword">return</span> (T) ((BigDecimal) a).add((BigDecimal)b);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Integer)&#123;</span><br><span class="line"><span class="keyword">return</span> (T)(Integer.valueOf((Integer)a+(Integer)b));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Long)&#123;</span><br><span class="line"><span class="keyword">return</span> (T)(Long.valueOf((Long)a+(Long)b));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Float)&#123;</span><br><span class="line"><span class="keyword">return</span> (T)(Float.valueOf((Float)a+(Float)b));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Double)&#123;</span><br><span class="line"><span class="keyword">return</span> (T)(Double.valueOf((Double)a+(Double)b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不支持该操作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SumTools&lt;Integer&gt; s = <span class="keyword">new</span> <span class="title class_">SumTools</span>&lt;Integer&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> s.getSum();</span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">//SumTools&lt;String&gt; s = new SumTools&lt;String&gt;(&quot;1&quot;,&quot;2&quot;);//错误，因为String类型不是extends Number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-2-4-泛型擦除"><a href="#12-2-4-泛型擦除" class="headerlink" title="12.2.4 泛型擦除"></a>12.2.4 泛型擦除</h3><p>当使用参数化类型的类或接口时，如果没有指定泛型，那么会怎么样呢？</p><p>会发生泛型擦除，自动按照最左边的第一个上限处理。如果没有指定上限，上限即为Object。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">SumTools</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SumTools</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="type">Number</span> <span class="variable">sum</span> <span class="operator">=</span> s.getSum();</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="comment">//强制类型转换</span></span><br><span class="line"><span class="type">Circle</span> <span class="variable">c1</span> <span class="operator">=</span> (Circle) o1;</span><br><span class="line"><span class="type">Circle</span> <span class="variable">c2</span> <span class="operator">=</span> (Circle) o2;</span><br><span class="line"><span class="keyword">return</span> Double.compare(c1.getRadius(), c2.getRadius());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-2-5-练习"><a href="#12-2-5-练习" class="headerlink" title="12.2.5 练习"></a>12.2.5 练习</h3><h4 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h4><p>1、声明一个坐标类Coordinate<T>，它有两个属性：x,y，都为T类型<br>2、在测试类中，创建两个不同的坐标类对象，<br>分别指定T类型为String和Double，并为x,y赋值，打印对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExer1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Coordinate&lt;String&gt; c1 = <span class="keyword">new</span> <span class="title class_">Coordinate</span>&lt;&gt;(<span class="string">&quot;北纬38.6&quot;</span>, <span class="string">&quot;东经36.8&quot;</span>);</span><br><span class="line">System.out.println(c1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Coordinate&lt;Double&gt; c2 = new Coordinate&lt;&gt;(38.6, 38);//自动装箱与拆箱只能与对应的类型 38是int，自动装为Integer</span></span><br><span class="line">Coordinate&lt;Double&gt; c2 = <span class="keyword">new</span> <span class="title class_">Coordinate</span>&lt;&gt;(<span class="number">38.6</span>, <span class="number">36.8</span>);</span><br><span class="line">System.out.println(c2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coordinate</span>&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> T x;</span><br><span class="line"><span class="keyword">private</span> T y;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Coordinate</span><span class="params">(T x, T y)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.x = x;</span><br><span class="line"><span class="built_in">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Coordinate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(T x)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.x = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(T y)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Coordinate [x=&quot;</span> + x + <span class="string">&quot;, y=&quot;</span> + y + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h4><p>1、声明一个Person类，包含姓名和伴侣属性，其中姓名是String类型，而伴侣的类型不确定，<br>因为伴侣可以是Person，可以是Animal（例如：金刚），可以是Ghost鬼（例如：倩女幽魂），<br>可以是Demon妖（例如：白娘子），可以是Robot机器人（例如：剪刀手爱德华）。。。</p><p>2、在测试类中，创建Person对象，并为它指定伴侣，打印显示信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExer3</span> &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Person&lt;Demon&gt; xu = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;Demon&gt;(<span class="string">&quot;许仙&quot;</span>,<span class="keyword">new</span> <span class="title class_">Demon</span>(<span class="string">&quot;白娘子&quot;</span>));</span><br><span class="line">System.out.println(xu);</span><br><span class="line"></span><br><span class="line">Person&lt;Person&gt; xie = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;Person&gt;(<span class="string">&quot;谢学建&quot;</span>,<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;徐余龙&quot;</span>));</span><br><span class="line"><span class="type">Person</span> <span class="variable">fere</span> <span class="operator">=</span> xie.getFere();</span><br><span class="line">fere.setFere(xie);</span><br><span class="line">System.out.println(xie);</span><br><span class="line">System.out.println(fere);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demon</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Demon</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Demon [name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> T fere;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, T fere)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.fere = fere;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getFere</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fere;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFere</span><span class="params">(T fere)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.fere = fere;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(fere <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) fere;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Person [name=&quot;</span> + name + <span class="string">&quot;, fere=&quot;</span> + p.getName() + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Person [name=&quot;</span> + name + <span class="string">&quot;, fere=&quot;</span> + fere + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h4><p>1、声明员工类型Employee，包含姓名（String），薪资（double），年龄（int）</p><p>2、员工类Employee实现java.lang.Comparable<T>接口，指定T为Employee类型，重写抽象方法，按照薪资比较大小，薪资相同的按照姓名的自然顺序比较大小。</p><p>3、在测试类中创建Employee数组，然后调用Arrays.sort(Object[] arr)方法进行排序，遍历显示员工信息</p><p>4、再次调用Arrays.sort(Object[] arr,Comparator<T> c)方法进行按照年龄排序，年龄相同的安装姓名自然顺序比较大小，遍历显示员工信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExer3</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">Employee[] arr = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Irene&quot;</span>, <span class="number">18000</span>, <span class="number">18</span>);</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">14000</span>, <span class="number">28</span>);</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">14000</span>, <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">Employee[] arr = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Irene&quot;</span>, <span class="number">18000</span>, <span class="number">18</span>);</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">14000</span>, <span class="number">28</span>);</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">14000</span>, <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Arrays.sort(T[] arr,Comparator&lt;T&gt; c)</span></span><br><span class="line">Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Employee&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照年龄排序，年龄相同的安装姓名自然顺序比较大小</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Employee o1, Employee o2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(o1.getAge() != o2.getAge()) &#123;</span><br><span class="line"><span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Employee&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">double</span> salary, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Employee [name=&quot;</span> + name + <span class="string">&quot;, salary=&quot;</span> + salary + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写抽象方法，按照薪资比较大小，薪资相同的按照姓名的自然顺序比较大小。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Employee o)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.salary != o.salary) &#123;</span><br><span class="line"><span class="keyword">return</span> Double.compare(<span class="built_in">this</span>.salary, o.salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name.compareTo(o.name);<span class="comment">//name是String类型，有compareTo方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-3-泛型方法"><a href="#12-3-泛型方法" class="headerlink" title="12.3 泛型方法"></a>12.3 泛型方法</h2><p>前面介绍了在定义类、接口时可以声明&lt;类型变量&gt;，在该类的方法和属性定义、接口的方法定义中，这些&lt;类型变量&gt;可被当成普通类型来用。但是，在另外一些情况下，</p><p>（1）如果我们定义类、接口时没有使用&lt;类型变量&gt;，但是某个方法形参类型不确定时，可以单独这个方法定义&lt;类型变量&gt;；</p><p>（2）另外我们之前说类和接口上的类型形参是不能用于静态方法中，那么当某个静态方法的形参类型不确定时，可以单独定义&lt;类型变量&gt;。</p><p>那么，JDK1.5之后，还提供了泛型方法的支持。</p><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 &lt;类型变量列表&gt; 返回值类型 方法名(【形参列表】)【<span class="keyword">throws</span> 异常列表】&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>&lt;类型变量列表&gt;：可以是一个或多个类型变量，一般都是使用单个的大写字母表示。例如：<T>、&lt;K,V&gt;等。</li><li>&lt;类型变量&gt;同样也可以指定上限</li></ul><p>示例代码：</p><p>我们编写一个数组工具类，包含可以给任意对象数组进行从小到大排序，要求数组元素类型必须实现Comparable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrays</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] arr)</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j].compareTo(arr[j+<span class="number">1</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">//MyArrays.sort(arr);//错误的，因为int[]不是对象数组</span></span><br><span class="line"></span><br><span class="line">String[] strings = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;chai&quot;</span>&#125;;</span><br><span class="line">MyArrays.sort(strings);</span><br><span class="line">System.out.println(Arrays.toString(strings));</span><br><span class="line"></span><br><span class="line">Circle[] circles = &#123;<span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2.0</span>),<span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">1.2</span>),<span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">3.0</span>)&#125;;</span><br><span class="line">MyArrays.sort(circles);</span><br><span class="line">System.out.println(Arrays.toString(circles));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-4-类型通配符"><a href="#12-4-类型通配符" class="headerlink" title="12.4 类型通配符"></a>12.4 类型通配符</h2><p>当我们声明一个变量&#x2F;形参时，这个变量&#x2F;形参的类型是一个泛型类或泛型接口，例如：Comparator<T>类型，但是我们仍然无法确定这个泛型类或泛型接口的类型变量<T>的具体类型，此时我们考虑使用类型通配符。</p><p>例如：</p><p>这个学生类是一个参数化的泛型类，代码如下（详细请看$12.2.1中的示例说明）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> T score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, T score)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(T score)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;, 成绩：&quot;</span> + score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-4-1-lt-gt-任意类型"><a href="#12-4-1-lt-gt-任意类型" class="headerlink" title="12.4.1 &lt;?&gt;任意类型"></a>12.4.1 &lt;?&gt;任意类型</h3><p>例如：我们要声明一个学生管理类，这个管理类要包含一个方法，可以遍历学生数组。</p><p>学生管理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Student&lt;?&gt;[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 语文老师使用时：</span></span><br><span class="line">Student&lt;String&gt; stu1 = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;String&gt;(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;良好&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数学老师使用时：</span></span><br><span class="line"><span class="comment">// Student&lt;double&gt; stu2 = new Student&lt;double&gt;(&quot;张三&quot;, 90.5);//错误，必须是引用数据类型</span></span><br><span class="line">Student&lt;Double&gt; stu2 = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;Double&gt;(<span class="string">&quot;张三&quot;</span>, <span class="number">90.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 英语老师使用时：</span></span><br><span class="line">Student&lt;Character&gt; stu3 = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;Character&gt;(<span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"></span><br><span class="line">Student&lt;?&gt;[] arr = <span class="keyword">new</span> <span class="title class_">Student</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>] = stu1;</span><br><span class="line">arr[<span class="number">1</span>] = stu2;</span><br><span class="line">arr[<span class="number">2</span>] = stu3;</span><br><span class="line"></span><br><span class="line">StudentService.print(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-4-2-lt-extends-上限-gt"><a href="#12-4-2-lt-extends-上限-gt" class="headerlink" title="12.4.2 &lt;? extends 上限&gt;"></a>12.4.2 &lt;? extends 上限&gt;</h3><p>例如：我们要声明一个学生管理类，这个管理类要包含一个方法，找出学生数组中成绩最高的学生对象。</p><p>要求学生的成绩的类型必须可比较大小，实现Comparable接口。</p><p>学生管理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Student&lt;? <span class="keyword">extends</span> <span class="title class_">Comparable</span>&gt; max(Student&lt;? <span class="keyword">extends</span> <span class="title class_">Comparable</span>&gt;[] arr)&#123;</span><br><span class="line">Student&lt;? <span class="keyword">extends</span> <span class="title class_">Comparable</span>&gt; max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i].getScore().compareTo(max.getScore())&gt;<span class="number">0</span>)&#123;</span><br><span class="line">max = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span> &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Student&lt;? <span class="keyword">extends</span> <span class="title class_">Double</span>&gt;[] arr = <span class="keyword">new</span> <span class="title class_">Student</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;Double&gt;(<span class="string">&quot;张三&quot;</span>, <span class="number">90.5</span>);</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;Double&gt;(<span class="string">&quot;李四&quot;</span>, <span class="number">80.5</span>);</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;Double&gt;(<span class="string">&quot;王五&quot;</span>, <span class="number">94.5</span>);</span><br><span class="line"></span><br><span class="line">Student&lt;? <span class="keyword">extends</span> <span class="title class_">Comparable</span>&gt; max = StudentService.max(arr);</span><br><span class="line">System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-4-3-lt-super-下限-gt"><a href="#12-4-3-lt-super-下限-gt" class="headerlink" title="12.4.3 &lt;? super 下限&gt;"></a>12.4.3 &lt;? super 下限&gt;</h3><p>现在要声明一个数组工具类，包含可以给任意对象数组进行从小到大排序，只要你指定定制比较器对象，而且这个定制比较器对象可以是当前数组元素类型自己或其父类的定制比较器对象</p><p>数组工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArrays</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] arr, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(c.compare(arr[j], arr[j+<span class="number">1</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：有如下JavaBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> score)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name, age);</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">int</span> score)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.toString() + <span class="string">&quot;,score=&quot;</span> + score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Student[] all = <span class="keyword">new</span> <span class="title class_">Student</span>[<span class="number">3</span>];</span><br><span class="line">all[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="number">89</span>);</span><br><span class="line">all[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">22</span>, <span class="number">99</span>);</span><br><span class="line">all[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">25</span>, <span class="number">67</span>);</span><br><span class="line"></span><br><span class="line">MyArrays.sort(all, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line"></span><br><span class="line">MyArrays.sort(all, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1.getScore() - o2.getScore();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-4-4-使用类型通配符来指定类型参数的问题"><a href="#12-4-4-使用类型通配符来指定类型参数的问题" class="headerlink" title="12.4.4 使用类型通配符来指定类型参数的问题"></a>12.4.4 使用类型通配符来指定类型参数的问题</h3><?>：不可变，因为<?><p>类型不确定，编译时，任意类型都是错</p><? extends 上限>：因为<? extends 上限>的?可能是上限或上限的子类，即类型不确定，编译按任意类型处理都是错。<? super 下限>：可以将值修改为下限或下限子类的对象，因为<? super 下限>?代表是下限或下限的父类，那么设置为下限或下限子类的对象是安全的。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Student&lt;?&gt; stu1 = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;&gt;();</span><br><span class="line">stu1.setScore(<span class="literal">null</span>);<span class="comment">//除了null，无法设置为其他值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student&lt;? <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; stu2 = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;&gt;();</span><br><span class="line">stu2.setScore(<span class="literal">null</span>);<span class="comment">//除了null，无法设置为其他值</span></span><br><span class="line"></span><br><span class="line">Student&lt;? <span class="built_in">super</span> Number&gt; stu3 = <span class="keyword">new</span> <span class="title class_">Student</span>&lt;&gt;();</span><br><span class="line">stu3.setScore(<span class="number">56</span>);<span class="comment">//可以设置Number或其子类的对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> T score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, T score)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(T score)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;, 成绩：&quot;</span> + score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>## 12.5 练习在数组工具类中声明如下泛型方法：（1）可以在任意类型的对象数组中，查找某个元素的下标，按照顺序查找，如果有重复的，就返回第一个找到的，如果没有返回-1（2）可以在任意类型的对象数组中，查找最大值，要求元素必须实现Comparable接口（3）可以在任意类型的对象数组中，查找最大值，按照指定定制比较器来比较元素大小（4）可以给任意对象数组进行从小到大排序，要求数组元素类型必须实现Comparable接口（5）可以给任意对象数组进行从小到大排序，只要你指定定制比较器对象，不要求数组元素实现Comparable接口（6）可以将任意对象数组的元素拼接为一个字符串返回<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrays</span> &#123;</span><br><span class="line"><span class="comment">//可以在任意类型的对象数组中，查找某个元素的下标，按照顺序查找，如果有重复的，就返回第一个找到的，如果没有返回-1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">int</span> <span class="title function_">find</span><span class="params">(T[] arr, T value)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i].equals(value)) &#123;<span class="comment">//使用==比较太严格，使用equals方法，因为任意对象都有equals方法</span></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以在任意类型的对象数组中，查找最大值，要求元素必须实现Comparable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> T&gt;&gt; T <span class="title function_">max</span><span class="params">(T[] arr)</span> &#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(max.compareTo(arr[i])&lt;<span class="number">0</span>) &#123;<span class="comment">//if(max &lt; arr[i]) &#123;</span></span><br><span class="line">max = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以在任意类型的对象数组中，查找最大值，按照指定定制比较器来比较元素大小</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">max</span><span class="params">(T[] arr, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(c.compare(max, arr[i])&lt;<span class="number">0</span>) &#123;<span class="comment">//if(max &lt; arr[i]) &#123;</span></span><br><span class="line">max = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以给任意对象数组进行从小到大排序，要求数组元素类型必须实现Comparable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> T&gt;&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[minIndex].compareTo(arr[j])&gt;<span class="number">0</span>) &#123;</span><br><span class="line">minIndex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(minIndex!=i) &#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">temp</span> <span class="operator">=</span> arr[minIndex];</span><br><span class="line">arr[minIndex] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以给任意对象数组进行从小到大排序，只要你指定定制比较器对象，不要求数组元素实现Comparable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] arr, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(c.compare(arr[minIndex],arr[j])&gt;<span class="number">0</span>) &#123;</span><br><span class="line">minIndex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(minIndex!=i) &#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">temp</span> <span class="operator">=</span> arr[minIndex];</span><br><span class="line">arr[minIndex] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以将任意对象数组的元素拼接为一个字符串返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; String <span class="title function_">toString</span><span class="params">(T[] arr)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;[&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>) &#123;</span><br><span class="line">str += arr[i];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">str += <span class="string">&quot;,&quot;</span> + arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">str += <span class="string">&quot;]&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第12章-泛型&quot;&gt;&lt;a href=&quot;#第12章-泛型&quot; class=&quot;headerlink&quot; title=&quot;第12章 泛型&quot;&gt;&lt;/a&gt;第12章 泛型&lt;/h1&gt;&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第11章 集合</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC11%E7%AB%A0-%E9%9B%86%E5%90%88/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC11%E7%AB%A0-%E9%9B%86%E5%90%88/</id>
    <published>2022-07-28T05:07:24.000Z</published>
    <updated>2022-10-16T04:43:25.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第11章-集合"><a href="#第11章-集合" class="headerlink" title="第11章 集合"></a>第11章 集合</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>List集合</li><li>Set集合</li><li>Map集合</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><input disabled="" type="checkbox"> 能够熟练使用Collection集合的API</li><li><input disabled="" type="checkbox"> 能够使用Iterator迭代器遍历Collection系列的集合</li><li><input disabled="" type="checkbox"> 能够使用foreach遍历Collection系列的集合</li><li><input disabled="" type="checkbox"> 能够说出List集合和Set集合的区别</li><li><input disabled="" type="checkbox"> 能够说出List集合各种实现类的区别</li><li><input disabled="" type="checkbox"> 能够说出Set集合各种实现类的区别</li><li><input disabled="" type="checkbox"> 能够说出Collection集合与Map集合的区别</li><li><input disabled="" type="checkbox"> 掌握Map集合的常用API</li><li><input disabled="" type="checkbox"> 能够遍历Map集合</li><li><input disabled="" type="checkbox"> 能够说出Map集合各种实现类的区别</li></ul><h1 id="第十一章-集合"><a href="#第十一章-集合" class="headerlink" title="第十一章 集合"></a>第十一章 集合</h1><p>集合是<code>Java</code>中提供的一种容器，可以用来存储多个数据。</p><p>集合和数组既然都是容器，它们有啥区别呢？</p><ul><li>数组的长度是固定的。集合的长度是可变的。</li><li>数组中可以存储基本数据类型值，也可以存储对象，而集合中只能存储对象</li></ul><p>集合主要分为两大系列：Collection和Map，Collection 表示一组对象，Map表示一组映射关系或键值对。</p><h2 id="11-1-Collection"><a href="#11-1-Collection" class="headerlink" title="11.1 Collection"></a>11.1 Collection</h2><p>Collection 层次结构中的根接口。Collection 表示一组对象，这些对象也称为 collection 的元素。一些 collection 允许有重复的元素，而另一些则不允许。一些 collection 是有序的，而另一些则是无序的。JDK 不提供此接口的任何直接实现：它提供更具体的子接口（如 Set 和 List、Queue）实现。此接口通常用来传递 collection，并在需要最大普遍性的地方操作这些 collection。 </p><p>Collection<E>是所有单列集合的父接口，因此在Collection中定义了单列集合(List和Set)通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p><p><strong>1、添加元素</strong></p><blockquote><p>（1）add(E obj)：添加元素对象到当前集合中</p><p>（2）addAll(Collection&lt;? extends E&gt; other)：添加other集合中的所有元素对象到当前集合中，即this &#x3D; this ∪ other</p></blockquote><p><strong>2、删除元素</strong></p><blockquote><p> （1） boolean remove(Object obj) ：从当前集合中删除第一个找到的与obj对象equals返回true的元素。</p><p> （2）boolean removeAll(Collection&lt;?&gt; coll)：从当前集合中删除所有与coll集合中相同的元素。即this &#x3D; this - this ∩ coll</p></blockquote><p><strong>3、判断</strong></p><blockquote><p>（1）boolean isEmpty()：判断当前集合是否为空集合。</p><p>（2）boolean contains(Object obj)：判断当前集合中是否存在一个与obj对象equals返回true的元素。</p><p>（3）boolean containsAll(Collection&lt;?&gt; c)：判断c集合中的元素是否在当前集合中都存在。即c集合是否是当前集合的“子集”。</p></blockquote><p><strong>4、获取元素个数</strong></p><blockquote><p>（1）int size()：获取当前集合中实际存储的元素个数</p></blockquote><p><strong>5、交集</strong></p><blockquote><p>（1）boolean retainAll(Collection&lt;?&gt; coll)：当前集合仅保留与c集合中的元素相同的元素，即当前集合中仅保留两个集合的交集，即this  &#x3D; this ∩ coll；</p></blockquote><p><strong>6、转为数组</strong></p><blockquote><p>（1）Object[] toArray()：返回包含当前集合中所有元素的数组</p></blockquote><p>方法演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1Collection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建集合对象 </span></span><br><span class="line">    <span class="comment">// 使用多态形式</span></span><br><span class="line">    Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    <span class="comment">// 使用方法</span></span><br><span class="line">    <span class="comment">// 添加功能  boolean  add(String s)</span></span><br><span class="line">    coll.add(<span class="string">&quot;小李广&quot;</span>);</span><br><span class="line">    coll.add(<span class="string">&quot;扫地僧&quot;</span>);</span><br><span class="line">    coll.add(<span class="string">&quot;石破天&quot;</span>);</span><br><span class="line">    System.out.println(coll);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// boolean contains(E e) 判断o是否在集合中存在</span></span><br><span class="line">    System.out.println(<span class="string">&quot;判断  扫地僧 是否在集合中&quot;</span>+coll.contains(<span class="string">&quot;扫地僧&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//boolean remove(E e) 删除在集合中的o元素</span></span><br><span class="line">    System.out.println(<span class="string">&quot;删除石破天：&quot;</span>+coll.remove(<span class="string">&quot;石破天&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;操作之后集合中元素:&quot;</span>+coll);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// size() 集合中有几个元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;集合中有&quot;</span>+coll.size()+<span class="string">&quot;个元素&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object[] toArray()转换成一个Object数组</span></span><br><span class="line">    Object[] objects = coll.toArray();</span><br><span class="line">    <span class="comment">// 遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">System.out.println(objects[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void  clear() 清空集合</span></span><br><span class="line">coll.clear();</span><br><span class="line">System.out.println(<span class="string">&quot;集合中内容为：&quot;</span>+coll);</span><br><span class="line"><span class="comment">// boolean  isEmpty()  判断是否为空</span></span><br><span class="line">System.out.println(coll.isEmpty());  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">coll.add(<span class="number">1</span>);</span><br><span class="line">coll.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;coll集合元素的个数：&quot;</span> + coll.size());</span><br><span class="line"></span><br><span class="line"><span class="type">Collection</span> <span class="variable">other</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">other.add(<span class="number">1</span>);</span><br><span class="line">other.add(<span class="number">2</span>);</span><br><span class="line">other.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">coll.addAll(other);</span><br><span class="line"><span class="comment">//coll.add(other);</span></span><br><span class="line">System.out.println(<span class="string">&quot;coll集合元素的个数：&quot;</span> + coll.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：coll.addAll(other);与coll.add(other);</p></blockquote><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563548078274.png" alt="1563548078274"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">coll.add(<span class="number">1</span>);</span><br><span class="line">coll.add(<span class="number">2</span>);</span><br><span class="line">coll.add(<span class="number">3</span>);</span><br><span class="line">coll.add(<span class="number">4</span>);</span><br><span class="line">coll.add(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;coll集合元素的个数：&quot;</span> + coll.size());<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="type">Collection</span> <span class="variable">other</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">other.add(<span class="number">1</span>);</span><br><span class="line">other.add(<span class="number">2</span>);</span><br><span class="line">other.add(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">coll.retainAll(other);<span class="comment">//保留交集</span></span><br><span class="line">System.out.println(<span class="string">&quot;coll集合元素的个数：&quot;</span> + coll.size());<span class="comment">//2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-2-Iterator迭代器"><a href="#11-2-Iterator迭代器" class="headerlink" title="11.2 Iterator迭代器"></a>11.2 Iterator迭代器</h2><h3 id="11-2-1-Iterator接口"><a href="#11-2-1-Iterator接口" class="headerlink" title="11.2.1 Iterator接口"></a>11.2.1 Iterator接口</h3><p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK专门提供了一个接口<code>java.util.Iterator</code>。<code>Iterator</code>接口也是Java集合中的一员，但它与<code>Collection</code>、<code>Map</code>接口有所不同，<code>Collection</code>接口与<code>Map</code>接口主要用于存储元素，而<code>Iterator</code>主要用于迭代访问（即遍历）<code>Collection</code>中的元素，因此<code>Iterator</code>对象也被称为迭代器。</p><p>想要遍历Collection集合，那么就要获取该集合迭代器完成迭代操作，下面介绍一下获取迭代器的方法：</p><ul><li><code>public Iterator iterator()</code>: 获取集合对应的迭代器，用来遍历集合中的元素的。</li></ul><p>下面介绍一下迭代的概念：</p><ul><li><strong>迭代</strong>：即Collection集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</li></ul><p>Iterator接口的常用方法如下：</p><ul><li><code>public E next()</code>:返回迭代的下一个元素。</li><li><code>public boolean hasNext()</code>:如果仍有元素可以迭代，则返回 true。</li></ul><p>接下来我们通过案例学习如何使用Iterator迭代集合中元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorDemo</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用多态方式 创建对象</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加元素到集合</span></span><br><span class="line">        coll.add(<span class="string">&quot;串串星人&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;吐槽星人&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;汪星人&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="comment">//使用迭代器 遍历   每个集合对象都有自己的迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">        <span class="comment">//  泛型指的是 迭代出 元素的数据类型</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123; <span class="comment">//判断是否有迭代元素</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();<span class="comment">//获取迭代出的元素</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips:：在进行集合元素取出时，如果集合中已经没有元素了，还继续使用迭代器的next方法，将会发生java.util.NoSuchElementException没有集合元素的错误。</p></blockquote><h3 id="11-2-2-迭代器的实现原理"><a href="#11-2-2-迭代器的实现原理" class="headerlink" title="11.2.2 迭代器的实现原理"></a>11.2.2 迭代器的实现原理</h3><p>我们在之前案例已经完成了Iterator遍历集合的整个过程。当遍历集合时，首先通过调用集合的iterator()方法获得迭代器对象，然后使用hashNext()方法判断集合中是否存在下一个元素，如果存在，则调用next()方法将元素取出，否则说明已到达了集合末尾，停止遍历元素。</p><p>Iterator迭代器对象在遍历集合时，内部采用指针的方式来跟踪集合中的元素，为了让初学者能更好地理解迭代器的工作原理，接下来通过一个图例来演示Iterator对象迭代元素的过程：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8E%9F%E7%90%86%E5%9B%BE.bmp"></p><p>在调用Iterator的next方法之前，迭代器的索引位于第一个元素之前，指向第一个元素，当第一次调用迭代器的next方法时，返回第一个元素，然后迭代器的索引会向后移动一位，指向第二个元素，当再次调用next方法时，返回第二个元素，然后迭代器的索引会再向后移动一位，指向第三个元素，依此类推，直到hasNext方法返回false，表示到达了集合的末尾，终止对元素的遍历。</p><h3 id="11-2-3-使用Iterator迭代器删除元素"><a href="#11-2-3-使用Iterator迭代器删除元素" class="headerlink" title="11.2.3 使用Iterator迭代器删除元素"></a>11.2.3 使用Iterator迭代器删除元素</h3><p>java.util.Iterator迭代器中有一个方法：</p><p>​void remove() ;</p><p>那么，既然Collection已经有remove(xx)方法了，为什么Iterator迭代器还要提供删除方法呢？</p><p>因为Collection的remove方法，无法根据条件删除。</p><p>例如：要删除以下集合元素中的偶数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">Collection&lt;Integer&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">coll.add(<span class="number">1</span>);</span><br><span class="line">coll.add(<span class="number">2</span>);</span><br><span class="line">coll.add(<span class="number">3</span>);</span><br><span class="line">coll.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//coll.remove(?)//无法编写</span></span><br><span class="line"></span><br><span class="line">Iterator&lt;Integer&gt; iterator = coll.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">element</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"><span class="keyword">if</span>(element%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//coll.remove(element);//错误的</span></span><br><span class="line">iterator.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(coll);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：不要在使用Iterator迭代器进行迭代时，调用Collection的remove(xx)方法，否则会报异常java.util.ConcurrentModificationException，或出现不确定行为。</p></blockquote><h3 id="11-2-4-增强for"><a href="#11-2-4-增强for" class="headerlink" title="11.2.4 增强for"></a>11.2.4 增强for</h3><p>增强for循环(也称for each循环)是<strong>JDK1.5</strong>以后出来的一个高级for循环，专门用来遍历数组和集合的。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素的数据类型  变量 : Collection集合or数组)&#123; </span><br><span class="line">  <span class="comment">//写操作代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习1：遍历数组"><a href="#练习1：遍历数组" class="headerlink" title="练习1：遍历数组"></a>练习1：遍历数组</h4><p>通常只进行遍历元素，<strong>不要在遍历的过程中对数组元素进行修改</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NBForDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">87</span>&#125;;</span><br><span class="line">       <span class="comment">//使用增强for遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> a : arr)&#123;<span class="comment">//a代表数组中的每个元素</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习2：遍历集合"><a href="#练习2：遍历集合" class="headerlink" title="练习2：遍历集合"></a>练习2：遍历集合</h4><p>通常只进行遍历元素，<strong>不要在遍历的过程中对集合元素进行增加、删除、替换操作</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NBFor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        </span><br><span class="line">    Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    coll.add(<span class="string">&quot;小河神&quot;</span>);</span><br><span class="line">    coll.add(<span class="string">&quot;老河神&quot;</span>);</span><br><span class="line">    coll.add(<span class="string">&quot;神婆&quot;</span>);</span><br><span class="line">    <span class="comment">//使用增强for遍历</span></span><br><span class="line">    <span class="keyword">for</span>(String s :coll)&#123;<span class="comment">//接收变量s代表 代表被遍历到的集合元素</span></span><br><span class="line">    System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-2-5-java-lang-Iterable接口"><a href="#11-2-5-java-lang-Iterable接口" class="headerlink" title="11.2.5 java.lang.Iterable接口"></a>11.2.5 java.lang.Iterable接口</h3><p><code>java.lang.Iterable</code> 接口，实现这个接口允许对象成为 “foreach” 语句的目标。 </p><p>Java 5时<code>Collection</code>接口继承了<code>java.lang.Iterable</code>接口，因此Collection系列的集合就可以直接使用foreach循环遍历。</p><p><code>java.lang.Iterable</code>接口的抽象方法：</p><ul><li><code>public Iterator iterator()</code>: 获取对应的迭代器，用来遍历数组或集合中的元素的。</li></ul><p>自定义某容器类型，实现<code>java.lang.Iterable</code>接口，发现就可以使用foreach进行迭代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMyArrayList</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">MyArrayList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">MyArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String obj : my) &#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyArrayList</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>foreach本质上就是使用Iterator迭代器进行遍历的。</p><p>我们在如下代码的for(Student student : coll)这行打断点，然后使用单步调试进入源码，发现foreach本质上是调用集合的iterator()方法，返回一个迭代器进行迭代的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestForeach</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">coll.add(<span class="string">&quot;陈琦&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;李晨&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;邓超&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;黄晓明&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用ArrayList里面的Iterator iterator()</span></span><br><span class="line"><span class="keyword">for</span> (String str : coll) &#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572594204643.png" alt="1572594204643"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572594284437.png" alt="1572594284437"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572594358046.png" alt="1572594358046"></p><blockquote><p>所以也不要在foreach遍历的过程使用Collection的remove()方法。否则，要么报异常java.util.ConcurrentModificationException，要么行为不确定。</p></blockquote><h3 id="11-2-6-Java中modCount的用法，快速失败（fail-fast）机制"><a href="#11-2-6-Java中modCount的用法，快速失败（fail-fast）机制" class="headerlink" title="11.2.6 Java中modCount的用法，快速失败（fail-fast）机制"></a>11.2.6 Java中modCount的用法，快速失败（fail-fast）机制</h3><p>当使用<code>foreach</code>或<code>Iterator</code>迭代器遍历集合时，同时调用迭代器自身以外的方法修改了集合的结构，例如调用集合的add和remove方法时，就会报ConcurrentModificationException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestForeach</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Collection&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">list.remove(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在<code>Iterator</code>、<code>ListIterator</code>迭代器创建后的任意时间从结构上修改了集合（通过迭代器自身的 remove 或 add 方法之外的任何其他方式），则迭代器将抛出 ConcurrentModificationException。因此，面对并发的修改，迭代器很快就完全失败，而不是冒着在将来不确定的时间任意发生不确定行为的风险。</p><p>这样设计是因为，迭代器代表集合中某个元素的位置，内部会存储某些能够代表该位置的信息。当集合发生改变时，该信息的含义可能会发生变化，这时操作迭代器就可能会造成不可预料的事情。因此，果断抛异常阻止，是最好的方法。这就是Iterator迭代器的快速失败（fail-fast）机制。</p><p>注意，迭代器的快速失败行为不能得到保证，一般来说，存在不同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 <code>ConcurrentModificationException</code>。因此，编写依赖于此异常的程序的方式是错误的，正确做法是：<strong>迭代器的快速失败行为应该仅用于检测 bug。</strong>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//以下代码没有发生ConcurrentModificationException异常</span></span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;atguigu&quot;</span>.equals(str))&#123;</span><br><span class="line">list.remove(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如何实现快速失败（fail-fast）机制的呢？</p><ul><li>在ArrayList等集合类中都有一个modCount变量。它用来记录集合的结构被修改的次数。</li><li>当我们给集合添加和删除操作时，会导致modCount++。</li><li>然后当我们用<code>Iterator</code>迭代器遍历集合时，创建集合迭代器的对象时，用一个变量记录当前集合的modCount。例如：<code>int expectedModCount = modCount;</code>，并且在迭代器每次next()迭代元素时，都要检查 <code>expectedModCount != modCount</code>，如果不相等了，那么说明你调用了Iterator迭代器以外的Collection的add,remove等方法，修改了集合的结构，使得modCount++，值变了，就会抛出ConcurrentModificationException。</li></ul><p>下面以AbstractList<E>和ArrayList.Itr迭代器为例进行源码分析：</p><p>AbstractList<E>类中声明了modCount变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;.</span></span><br><span class="line"><span class="comment"> * Structural modifications are those that change the size of the</span></span><br><span class="line"><span class="comment"> * list, or otherwise perturb it in such a fashion that iterations in</span></span><br><span class="line"><span class="comment"> * progress may yield incorrect results.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This field is used by the iterator and list iterator implementation</span></span><br><span class="line"><span class="comment"> * returned by the &#123;<span class="doctag">@code</span> iterator&#125; and &#123;<span class="doctag">@code</span> listIterator&#125; methods.</span></span><br><span class="line"><span class="comment"> * If the value of this field changes unexpectedly, the iterator (or list</span></span><br><span class="line"><span class="comment"> * iterator) will throw a &#123;<span class="doctag">@code</span> ConcurrentModificationException&#125; in</span></span><br><span class="line"><span class="comment"> * response to the &#123;<span class="doctag">@code</span> next&#125;, &#123;<span class="doctag">@code</span> remove&#125;, &#123;<span class="doctag">@code</span> previous&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> set&#125; or &#123;<span class="doctag">@code</span> add&#125; operations.  This provides</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;fail-fast&lt;/i&gt; behavior, rather than non-deterministic behavior in</span></span><br><span class="line"><span class="comment"> * the face of concurrent modification during iteration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Use of this field by subclasses is optional.&lt;/b&gt; If a subclass</span></span><br><span class="line"><span class="comment"> * wishes to provide fail-fast iterators (and list iterators), then it</span></span><br><span class="line"><span class="comment"> * merely has to increment this field in its &#123;<span class="doctag">@code</span> add(int, E)&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> remove(int)&#125; methods (and any other methods that it overrides</span></span><br><span class="line"><span class="comment"> * that result in structural modifications to the list).  A single call to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> add(int, E)&#125; or &#123;<span class="doctag">@code</span> remove(int)&#125; must add no more than</span></span><br><span class="line"><span class="comment"> * one to this field, or the iterators (and list iterators) will throw</span></span><br><span class="line"><span class="comment"> * bogus &#123;<span class="doctag">@code</span> ConcurrentModificationExceptions&#125;.  If an implementation</span></span><br><span class="line"><span class="comment"> * does not wish to provide fail-fast iterators, this field may be</span></span><br><span class="line"><span class="comment"> * ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>modCount是这个list被结构性修改的次数。结构性修改是指：改变list的size大小，或者，以其他方式改变他导致正在进行迭代时出现错误的结果。</p><p>这个字段用于迭代器和列表迭代器的实现类中，由迭代器和列表迭代器方法返回。如果这个值被意外改变，这个迭代器将会抛出 ConcurrentModificationException的异常来响应：next,remove,previous,set,add 这些操作。在迭代过程中，他提供了fail-fast行为而不是不确定行为来处理并发修改。</p><p>子类使用这个字段是可选的，如果子类希望提供fail-fast迭代器，它仅仅需要在add(int, E),remove(int)方法（或者它重写的其他任何会结构性修改这个列表的方法）中添加这个字段。调用一次add(int,E)或者remove(int)方法时必须且仅仅给这个字段加1，否则迭代器会抛出伪装的ConcurrentModificationExceptions错误。如果一个实现类不希望提供fail-fast迭代器，则可以忽略这个字段。</p><p>Arraylist的Itr迭代器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">        <span class="type">int</span> cursor;      </span><br><span class="line">        <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; </span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;<span class="comment">//在创建迭代器时，expectedModCount初始化为当前集合的modCount的值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            checkForComodification();<span class="comment">//校验expectedModCount与modCount是否相等</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)<span class="comment">//校验expectedModCount与modCount是否相等</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();<span class="comment">//不相等，抛异常</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-2-7-练习"><a href="#11-2-7-练习" class="headerlink" title="11.2.7 练习"></a>11.2.7 练习</h3><h4 id="1、练习1"><a href="#1、练习1" class="headerlink" title="1、练习1"></a>1、练习1</h4><ul><li>添加100以内的质数到Collection的某个集合中</li><li>使用foreach遍历</li><li>使用Iterator遍历，并删除个位数是3个质数</li><li>删除11</li><li>查看最后剩下几个元素</li><li>添加10个100以内的随机整数到另一个Collection的集合中</li><li>求它们的交集</li></ul><h4 id="2、练习2"><a href="#2、练习2" class="headerlink" title="2、练习2"></a>2、练习2</h4><p>声明学员类型Student，包含属性：姓名，成绩</p><p>添加本组学员Student对象到Collection的某个集合中</p><ul><li>使用foreach遍历</li><li>使用Iterator遍历，并删除成绩低于60分的</li></ul><h2 id="11-3-List集合"><a href="#11-3-List集合" class="headerlink" title="11.3 List集合"></a>11.3 List集合</h2><p>我们掌握了Collection接口的使用后，再来看看Collection接口中的子接口，他们都具备那些特性呢？</p><h3 id="11-3-1-List接口介绍"><a href="#11-3-1-List接口介绍" class="headerlink" title="11.3.1 List接口介绍"></a>11.3.1 List接口介绍</h3><p><code>java.util.List</code>接口继承自<code>Collection</code>接口，是单列集合的一个重要分支，习惯性地会将实现了<code>List</code>接口的对象称为List集合。</p><p>List接口特点：</p><blockquote><ol><li>List集合所有的元素是以一种线性方式进行存储的，例如，存元素的顺序是11、22、33。那么集合中，元素的存储就是按照11、22、33的顺序完成的）</li><li>它是一个元素存取有序的集合。即元素的存入顺序和取出顺序有保证。</li><li>它是一个带有索引的集合，通过索引就可以精确的操作集合中的元素（与数组的索引是一个道理）。</li><li>集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素。</li></ol></blockquote><p><code>List</code>集合类中元素有序、且可重复。这就像银行门口客服，给每一个来办理业务的客户分配序号：第一个来的是“张三”，客服给他分配的是0；第二个来的是“李四”，客服给他分配的1；以此类推，最后一个序号应该是“总人数-1”。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563549818689.png" alt="1563549818689"></p><p>注意：</p><p>List集合关心元素是否有序，而不关心是否重复，请大家记住这个原则。例如“张三”可以领取两个号。</p><h3 id="11-3-2-List接口中常用方法"><a href="#11-3-2-List接口中常用方法" class="headerlink" title="11.3.2 List接口中常用方法"></a>11.3.2 List接口中常用方法</h3><p><code>List</code>作为Collection集合的子接口，不但继承了Collection接口中的全部方法，而且还增加了一些根据元素索引来操作集合的特有方法，如下：</p><p>List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。</p><p>1、添加元素</p><blockquote><ul><li>void add(int index, E ele)</li><li>boolean addAll(int index, Collection&lt;? extends E&gt; eles)</li></ul></blockquote><p>2、获取元素</p><blockquote><ul><li>E get(int index)</li><li>List subList(int fromIndex, int toIndex)</li></ul></blockquote><p>3、获取元素索引</p><blockquote><ul><li>int indexOf(Object obj)</li><li>int lastIndexOf(Object obj)</li></ul></blockquote><p>4、删除和替换元素</p><blockquote><ul><li>E remove(int index)</li><li>E set(int index, E ele)</li></ul></blockquote><p>List集合特有的方法都是跟索引相关：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建List集合对象</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 往 尾部添加 指定元素</span></span><br><span class="line">    list.add(<span class="string">&quot;图图&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;小美&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;不高兴&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(list);</span><br><span class="line">    <span class="comment">// add(int index,String s) 往指定位置添加</span></span><br><span class="line">    list.add(<span class="number">1</span>,<span class="string">&quot;没头脑&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(list);</span><br><span class="line">    <span class="comment">// String remove(int index) 删除指定位置元素  返回被删除元素</span></span><br><span class="line">    <span class="comment">// 删除索引位置为2的元素 </span></span><br><span class="line">    System.out.println(<span class="string">&quot;删除索引位置为2的元素&quot;</span>);</span><br><span class="line">    System.out.println(list.remove(<span class="number">2</span>));</span><br><span class="line">    </span><br><span class="line">    System.out.println(list);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// String set(int index,String s)</span></span><br><span class="line">    <span class="comment">// 在指定位置 进行 元素替代（改） </span></span><br><span class="line">    <span class="comment">// 修改指定位置元素</span></span><br><span class="line">    list.set(<span class="number">0</span>, <span class="string">&quot;三毛&quot;</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// String get(int index)  获取指定位置元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 跟size() 方法一起用  来 遍历的 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//还可以使用增强for</span></span><br><span class="line">    <span class="keyword">for</span> (String string : list) &#123;</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在JavaSE中List名称的类型有两个，一个是java.util.List集合接口，一个是java.awt.List图形界面的组件，别导错包了。</p></blockquote><h3 id="11-3-3-List接口的实现类们"><a href="#11-3-3-List接口的实现类们" class="headerlink" title="11.3.3 List接口的实现类们"></a>11.3.3 List接口的实现类们</h3><p>List接口的实现类有很多，常见的有：</p><blockquote><p>ArrayList：动态数组</p><p>Vector：动态数组</p><p>LinkedList：双向链表</p><p>Stack：栈</p></blockquote><p>它们的区别我们在数据结构部分再详细讲解</p><h3 id="11-3-4-ListIterator"><a href="#11-3-4-ListIterator" class="headerlink" title="11.3.4 ListIterator"></a>11.3.4 ListIterator</h3><p>List 集合额外提供了一个 listIterator() 方法，该方法返回一个 ListIterator 对象， ListIterator 接口继承了 Iterator 接口，提供了专门操作 List 的方法：</p><ul><li>void add()：通过迭代器添加元素到对应集合</li><li>void set(Object obj)：通过迭代器替换正迭代的元素</li><li>void remove()：通过迭代器删除刚迭代的元素</li><li>boolean hasPrevious()：如果以逆向遍历列表，往前是否还有元素。</li><li>Object previous()：返回列表中的前一个元素。</li><li>int previousIndex()：返回列表中的前一个元素的索引</li><li>boolean hasNext()</li><li>Object next()</li><li>int nextIndex()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">List&lt;Student&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">c.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">c.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>));</span><br><span class="line">c.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>));</span><br><span class="line">c.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">4</span>,<span class="string">&quot;赵六&quot;</span>));</span><br><span class="line">c.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">5</span>,<span class="string">&quot;钱七&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//从指定位置往前遍历</span></span><br><span class="line">ListIterator&lt;Student&gt; listIterator = c.listIterator(c.size());</span><br><span class="line"><span class="keyword">while</span>(listIterator.hasPrevious())&#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">previous</span> <span class="operator">=</span> listIterator.previous();</span><br><span class="line">System.out.println(previous);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-4-Set集合"><a href="#11-4-Set集合" class="headerlink" title="11.4 Set集合"></a>11.4 Set集合</h2><p>Set 接口是Collection的子接口，set接口没有提供额外的方法。但是比<code>Collection</code>接口更加严格了。</p><p>Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。</p><p>Set 集合支持的遍历方式和Collection集合一样：foreach和Iterator。</p><p>Set 的常用实现类有：HashSet、TreeSet、LinkedHashSet。</p><h3 id="11-6-1-HashSet"><a href="#11-6-1-HashSet" class="headerlink" title="11.6.1 HashSet"></a>11.6.1 HashSet</h3><p>HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。</p><p><code>java.util.HashSet</code>底层的实现其实是一个<code>java.util.HashMap</code>支持，然后HashMap的底层物理实现是一个Hash表。（什么是哈希表，下一节在HashMap小节在细讲，这里先不展开）</p><p>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取和查找性能。HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。因此，存储到HashSet的元素要重写hashCode和equals方法。</p><p>示例代码：定义一个Employee类，该类包含属性：name, birthday，其中 birthday 为 MyDate类的对象；MyDate为自定义类型，包含年、月、日属性。要求 name和birthday一样的视为同一个员工。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> MyDate birthday;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, MyDate birthday)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> MyDate <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(MyDate birthday)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">result = prime * result + ((birthday == <span class="literal">null</span>) ? <span class="number">0</span> : birthday.hashCode());</span><br><span class="line">result = prime * result + ((name == <span class="literal">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">other</span> <span class="operator">=</span> (Employee) obj;</span><br><span class="line"><span class="keyword">if</span> (birthday == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.birthday != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!birthday.equals(other.birthday))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.name != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;, 生日：&quot;</span> + birthday;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDate</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.year = year;</span><br><span class="line"><span class="built_in">this</span>.month = month;</span><br><span class="line"><span class="built_in">this</span>.day = day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> year;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.year = year;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> month;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonth</span><span class="params">(<span class="type">int</span> month)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.month = month;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDay</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDay</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.day = day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">result = prime * result + day;</span><br><span class="line">result = prime * result + month;</span><br><span class="line">result = prime * result + year;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">MyDate</span> <span class="variable">other</span> <span class="operator">=</span> (MyDate) obj;</span><br><span class="line"><span class="keyword">if</span> (day != other.day)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (month != other.month)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (year != other.year)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestHashSet</span> &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">HashSet&lt;Employee&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">set.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;张三&quot;</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1990</span>,<span class="number">1</span>,<span class="number">1</span>)));</span><br><span class="line"><span class="comment">//重复元素无法添加，因为MyDate和Employee重写了hashCode和equals方法</span></span><br><span class="line">set.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;张三&quot;</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1990</span>,<span class="number">1</span>,<span class="number">1</span>)));</span><br><span class="line">set.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;李四&quot;</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1992</span>,<span class="number">2</span>,<span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Employee object : set) &#123;</span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-6-2-LinkedHashSet"><a href="#11-6-2-LinkedHashSet" class="headerlink" title="11.6.2 LinkedHashSet"></a>11.6.2 LinkedHashSet</h3><p>LinkedHashSet是HashSet的子类，它在HashSet的基础上，在结点中增加两个属性before和after维护了结点的前后添加顺序。<code>java.util.LinkedHashSet</code>，它是链表和哈希表组合的一个数据存储结构。LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">set.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + set.size());</span><br><span class="line"><span class="keyword">for</span> (String name : set) &#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">元素个数：3</span><br><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">王五</span><br></pre></td></tr></table></figure><h3 id="11-6-2-TreeSet"><a href="#11-6-2-TreeSet" class="headerlink" title="11.6.2 TreeSet"></a>11.6.2 TreeSet</h3><p>底层结构：里面维护了一个TreeMap，都是基于红黑树实现的！</p><p>特点：<br>    1、不允许重复<br>    2、实现排序<br>        自然排序或定制排序</p><p>如何实现去重的？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果使用的是自然排序，则通过调用实现的compareTo方法</span><br><span class="line">如果使用的是定制排序，则通过调用比较器的compare方法</span><br></pre></td></tr></table></figure><p>如何排序？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方式一：自然排序</span><br><span class="line">让待添加的元素类型实现Comparable接口，并重写compareTo方法</span><br><span class="line"></span><br><span class="line">方式二：定制排序</span><br><span class="line">创建Set对象时，指定Comparator比较器接口，并实现compare方法</span><br></pre></td></tr></table></figure><h4 id="自然顺序"><a href="#自然顺序" class="headerlink" title="自然顺序"></a>自然顺序</h4><p>如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable 接口。实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过 compareTo(Object obj) 方法的返回值来比较大小。对于 TreeSet 集合而言，它判断两个对象是否相等的唯一标准是：两个对象通过 compareTo(Object obj) 方法比较返回值为0。</p><p>代码示例一：按照字符串Unicode编码值排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">TreeSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">set.add(<span class="string">&quot;zhangsan&quot;</span>);  <span class="comment">//String它实现了java.lang.Comparable接口</span></span><br><span class="line">set.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + set.size());</span><br><span class="line"><span class="keyword">for</span> (String str : set) &#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定制排序"><a href="#定制排序" class="headerlink" title="定制排序"></a>定制排序</h4><p>如果放到TreeSet中的元素的自然排序（Comparable）规则不符合当前排序需求时，或者元素的类型没有实现Comparable接口。那么在创建TreeSet时，可以单独指定一个Comparator的对象。使用定制排序判断两个元素相等的标准是：通过Comparator比较两个元素返回了0。</p><p>代码示例：学生类型未实现Comparable接口，单独指定Comparator比较器，按照学生的学号排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//......这里省略了name属性的get/set</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Student [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">TreeSet&lt;Student&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1.getId() - o2.getId();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">set.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">3</span>,<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;李四&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">2</span>,<span class="string">&quot;王五&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">3</span>,<span class="string">&quot;张三风&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;元素个数：&quot;</span> + set.size());</span><br><span class="line"><span class="keyword">for</span> (Student stu : set) &#123;</span><br><span class="line">System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-5-Collection系列的集合框架图"><a href="#11-5-Collection系列的集合框架图" class="headerlink" title="11.5 Collection系列的集合框架图"></a>11.5 Collection系列的集合框架图</h2><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563547137571.png"></p><h2 id="11-6-Map"><a href="#11-6-Map" class="headerlink" title="11.6 Map"></a>11.6 Map</h2><h3 id="11-6-1-概述"><a href="#11-6-1-概述" class="headerlink" title="11.6.1 概述"></a>11.6.1 概述</h3><p>现实生活中，我们常会看到这样的一种集合：IP地址与主机名，身份证号与个人，系统用户名与系统用户对象等，这种一一对应的关系，就叫做映射。Java提供了专门的集合类用来存放这种对象关系的对象，即<code>java.util.Map&lt;K,V&gt;</code>接口。</p><p>我们通过查看<code>Map</code>接口描述，发现<code>Map&lt;K,V&gt;</code>接口下的集合与<code>Collection&lt;E&gt;</code>接口下的集合，它们存储数据的形式不同。</p><ul><li><code>Collection</code>中的集合，元素是孤立存在的（理解为单身），向集合中存储元素采用一个个元素的方式存储。</li><li><code>Map</code>中的集合，元素是成对存在的(理解为夫妻)。每个元素由键与值两部分组成，通过键可以找对所对应的值。</li><li><code>Collection</code>中的集合称为单列集合，<code>Map</code>中的集合称为双列集合。</li><li>需要注意的是，<code>Map</code>中的集合不能包含重复的键，值可以重复；每个键只能对应一个值（这个值可以是单个值，也可以是个数组或集合值）。</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/Collection%E4%B8%8EMap.bmp"></p><h3 id="11-6-2-Map常用方法"><a href="#11-6-2-Map常用方法" class="headerlink" title="11.6.2 Map常用方法"></a>11.6.2 Map常用方法</h3><p>1、添加操作</p><ul><li>V put(K key,V value)</li><li>void putAll(Map&lt;? extends K,? extends V&gt; m)</li></ul><p>2、删除</p><ul><li>void clear()</li><li>V remove(Object key)</li></ul><p> 3、元素查询的操作</p><ul><li>V get(Object key)</li><li>boolean containsKey(Object key)</li><li>boolean containsValue(Object value)</li><li>boolean isEmpty()</li></ul><p> 4、元视图操作的方法：</p><ul><li>Set<K> keySet()</li><li>Collection<V> values()</li><li>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</li></ul><p> 5、其他方法</p><ul><li>int size()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建 map对象</span></span><br><span class="line">        HashMap&lt;String, String&gt;  map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素到集合</span></span><br><span class="line">        map.put(<span class="string">&quot;黄晓明&quot;</span>, <span class="string">&quot;杨颖&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;文章&quot;</span>, <span class="string">&quot;马伊琍&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;邓超&quot;</span>, <span class="string">&quot;孙俪&quot;</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String remove(String key)</span></span><br><span class="line">        System.out.println(map.remove(<span class="string">&quot;邓超&quot;</span>));</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 想要查看 黄晓明的媳妇 是谁</span></span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;黄晓明&quot;</span>));</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;邓超&quot;</span>));    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips:</p><p>使用put方法时，若指定的键(key)在集合中没有，则没有这个键对应的值，返回null，并把指定的键值添加到集合中； </p><p>若指定的键(key)在集合中存在，则返回值为集合中键对应的值（该值为替换前的值），并把指定键所对应的值，替换成指定的新值。 </p></blockquote><h3 id="11-6-3-Map集合的遍历"><a href="#11-6-3-Map集合的遍历" class="headerlink" title="11.6.3  Map集合的遍历"></a>11.6.3  Map集合的遍历</h3><p>Collection集合的遍历：（1）foreach（2）通过Iterator对象遍历</p><p>Map的遍历，不能支持foreach，因为Map接口没有继承java.lang.Iterable<T>接口，也没有实现Iterator iterator()方法。只能用如下方式遍历：</p><p>（1）分开遍历：</p><ul><li>单独遍历所有key</li><li>单独遍历所有value</li></ul><p>（2）成对遍历：</p><ul><li>遍历的是映射关系Map.Entry类型的对象，Map.Entry是Map接口的内部接口。每一种Map内部有自己的Map.Entry的实现类。在Map中存储数据，实际上是将Key—-&gt;value的数据存储在Map.Entry接口的实例中，再在Map集合中插入Map.Entry的实例化对象，如图示：</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563725601891.png" alt="1563725601891"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;许仙&quot;</span>, <span class="string">&quot;白娘子&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;董永&quot;</span>, <span class="string">&quot;七仙女&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;牛郎&quot;</span>, <span class="string">&quot;织女&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;许仙&quot;</span>, <span class="string">&quot;小青&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;所有的key:&quot;</span>);</span><br><span class="line">Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line"><span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;所有的value：&quot;</span>);</span><br><span class="line">Collection&lt;String&gt; values = map.values();</span><br><span class="line"><span class="keyword">for</span> (String value : values) &#123;</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;所有的映射关系&quot;</span>);</span><br><span class="line">Set&lt;Map.Entry&lt;String,String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String,String&gt; entry : entrySet) &#123;</span><br><span class="line"><span class="comment">//System.out.println(entry);</span></span><br><span class="line">System.out.println(entry.getKey()+<span class="string">&quot;-&gt;&quot;</span>+entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-6-4-Map的实现类们"><a href="#11-6-4-Map的实现类们" class="headerlink" title="11.6.4 Map的实现类们"></a>11.6.4 Map的实现类们</h3><p>Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和Properties。其中HashMap是 Map 接口使用频率最高的实现类。</p><h4 id="1、HashMap和Hashtable的区别与联系"><a href="#1、HashMap和Hashtable的区别与联系" class="headerlink" title="1、HashMap和Hashtable的区别与联系"></a><strong>1、HashMap和Hashtable的区别与联系</strong></h4><ul><li><p>HashMap和Hashtable都是哈希表。</p></li><li><p>HashMap和Hashtable判断两个 key 相等的标准是：两个 key 的hashCode 值相等，并且 equals() 方法也返回 true。因此，为了成功地在哈希表中存储和获取对象，用作键的对象必须实现 hashCode 方法和 equals 方法。</p></li><li><p>Hashtable是线程安全的，任何非 null 对象都可以用作键或值。</p></li><li><p>HashMap是线程不安全的，并允许使用 null 值和 null 键。</p></li></ul><p>示例代码：添加员工姓名为key，薪资为value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">HashMap&lt;String,Double&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;张三&quot;</span>, <span class="number">10000.0</span>);</span><br><span class="line"><span class="comment">//key相同，新的value会覆盖原来的value</span></span><br><span class="line"><span class="comment">//因为String重写了hashCode和equals方法</span></span><br><span class="line">map.put(<span class="string">&quot;张三&quot;</span>, <span class="number">12000.0</span>);</span><br><span class="line">map.put(<span class="string">&quot;李四&quot;</span>, <span class="number">14000.0</span>);</span><br><span class="line"><span class="comment">//HashMap支持key和value为null值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">salary</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">map.put(name, salary);</span><br><span class="line"></span><br><span class="line">Set&lt;Entry&lt;String, Double&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, Double&gt; entry : entrySet) &#123;</span><br><span class="line">System.out.println(entry);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、LinkedHashMap"><a href="#2、LinkedHashMap" class="headerlink" title="2、LinkedHashMap"></a><strong>2、LinkedHashMap</strong></h4><p>LinkedHashMap 是 HashMap 的子类。此实现与 HashMap 的不同之处在于，后者维护着一个运行于所有条目的双重链接列表。此链接列表定义了迭代顺序，该迭代顺序通常就是将键插入到映射中的顺序（插入顺序）。</p><p>示例代码：添加员工姓名为key，薪资为value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">LinkedHashMap&lt;String,Double&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;张三&quot;</span>, <span class="number">10000.0</span>);</span><br><span class="line"><span class="comment">//key相同，新的value会覆盖原来的value</span></span><br><span class="line"><span class="comment">//因为String重写了hashCode和equals方法</span></span><br><span class="line">map.put(<span class="string">&quot;张三&quot;</span>, <span class="number">12000.0</span>);</span><br><span class="line">map.put(<span class="string">&quot;李四&quot;</span>, <span class="number">14000.0</span>);</span><br><span class="line"><span class="comment">//HashMap支持key和value为null值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">salary</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">map.put(name, salary);</span><br><span class="line"></span><br><span class="line">Set&lt;Entry&lt;String, Double&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, Double&gt; entry : entrySet) &#123;</span><br><span class="line">System.out.println(entry);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、TreeMap"><a href="#3、TreeMap" class="headerlink" title="3、TreeMap"></a><strong>3、TreeMap</strong></h4><p>基于红黑树（Red-Black tree）的 NavigableMap 实现。该映射根据其键的自然顺序进行排序，或者根据创建映射时提供的 Comparator 进行排序，具体取决于使用的构造方法。</p><p>代码示例：添加员工姓名为key，薪资为value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTreeMap</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">TreeMap&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;Jack&quot;</span>, <span class="number">11000</span>);</span><br><span class="line">map.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">12000</span>);</span><br><span class="line">map.put(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">13000</span>);</span><br><span class="line">map.put(<span class="string">&quot;baitao&quot;</span>, <span class="number">14000</span>);</span><br><span class="line">map.put(<span class="string">&quot;Lucy&quot;</span>, <span class="number">15000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String实现了Comparable接口，默认按照Unicode编码值排序</span></span><br><span class="line">Set&lt;Entry&lt;String, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, Integer&gt; entry : entrySet) &#123;</span><br><span class="line">System.out.println(entry);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//指定定制比较器Comparator，按照Unicode编码值排序，但是忽略大小写</span></span><br><span class="line">TreeMap&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1.compareToIgnoreCase(o2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">map.put(<span class="string">&quot;Jack&quot;</span>, <span class="number">11000</span>);</span><br><span class="line">map.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">12000</span>);</span><br><span class="line">map.put(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">13000</span>);</span><br><span class="line">map.put(<span class="string">&quot;baitao&quot;</span>, <span class="number">14000</span>);</span><br><span class="line">map.put(<span class="string">&quot;Lucy&quot;</span>, <span class="number">15000</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;Entry&lt;String, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, Integer&gt; entry : entrySet) &#123;</span><br><span class="line">System.out.println(entry);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、Properties"><a href="#4、Properties" class="headerlink" title="4、Properties"></a><strong>4、Properties</strong></h4><p>Properties 类是 Hashtable 的子类，Properties 可保存在流中或从流中加载。属性列表中每个键及其对应值都是一个字符串。</p><p>存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> System.getProperties();</span><br><span class="line"><span class="type">String</span> <span class="variable">p2</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;file.encoding&quot;</span>);<span class="comment">//当前源文件字符编码</span></span><br><span class="line">System.out.println(p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-6-5-Set集合与Map集合的关系"><a href="#11-6-5-Set集合与Map集合的关系" class="headerlink" title="11.6.5 Set集合与Map集合的关系"></a>11.6.5 Set集合与Map集合的关系</h3><p>Set的内部实现其实是一个Map。即HashSet的内部实现是一个HashMap，TreeSet的内部实现是一个TreeMap，LinkedHashSet的内部实现是一个LinkedHashMap。</p><p>部分源代码摘要：</p><p>HashSet源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">       map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">       map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(Math.max((<span class="type">int</span>) (c.size()/<span class="number">.75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">       addAll(c);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">       map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">       map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个构造器是给子类LinkedHashSet调用的</span></span><br><span class="line">   HashSet(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> dummy) &#123;</span><br><span class="line">       map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>LinkedHashSet源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, loadFactor, <span class="literal">true</span>);<span class="comment">//调用HashSet的某个构造器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, <span class="number">.75f</span>, <span class="literal">true</span>);<span class="comment">//调用HashSet的某个构造器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="number">16</span>, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(Math.max(<span class="number">2</span>*c.size(), <span class="number">11</span>), <span class="number">.75f</span>, <span class="literal">true</span>);<span class="comment">//调用HashSet的某个构造器</span></span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeSet源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;E,Object&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(comparator));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(SortedSet&lt;E&gt; s)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(s.comparator());</span><br><span class="line">    addAll(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，咱们存到Set中只有一个元素，又是怎么变成(key,value)的呢？</p><p>以HashSet中的源码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.keySet().iterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来是，把添加到Set中的元素作为内部实现map的key，然后用一个常量对象PRESENT对象，作为value。</p><p>这是因为Set的元素不可重复和Map的key不可重复有相同特点。Map有一个方法keySet()可以返回所有key。</p><h2 id="11-7-集合框架"><a href="#11-7-集合框架" class="headerlink" title="11.7 集合框架"></a>11.7 集合框架</h2><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/20200423210229.png"></p><h2 id="11-8-Collections工具类"><a href="#11-8-Collections工具类" class="headerlink" title="11.8 Collections工具类"></a>11.8 Collections工具类</h2><p>参考操作数组的工具类：Arrays。</p><p>Collections 是一个操作 Set、List 和 Map 等集合的工具类。Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法：</p><blockquote><ul><li>public static <T> boolean addAll(Collection&lt;? super T&gt; c,T… elements)将所有指定元素添加到指定 collection 中。</li><li>public static <T> int binarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list,T key)在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且必须是可比较大小的，即支持自然排序的。而且集合也事先必须是有序的，否则结果不确定。</li><li>public static <T> int binarySearch(List&lt;? extends T&gt; list,T key,Comparator&lt;? super T&gt; c)在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且集合也事先必须是按照c比较器规则进行排序过的，否则结果不确定。</li><li>public static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T max(Collection&lt;? extends T&gt; coll)在coll集合中找出最大的元素，集合中的对象必须是T或T的子类对象，而且支持自然排序</li><li>public static <T> T max(Collection&lt;? extends T&gt; coll,Comparator&lt;? super T&gt; comp)在coll集合中找出最大的元素，集合中的对象必须是T或T的子类对象，按照比较器comp找出最大者</li><li>public static void reverse(List&lt;?&gt; list)反转指定列表List中元素的顺序。</li><li>public static void shuffle(List&lt;?&gt; list) List 集合元素进行随机排序，类似洗牌</li><li>public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List<T> list)根据元素的自然顺序对指定 List 集合元素按升序排序</li><li>public static <T> void sort(List<T> list,Comparator&lt;? super T&gt; c)根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li><li>public static void swap(List&lt;?&gt; list,int i,int j)将指定 list 集合中的 i 处元素和 j 处元素进行交换</li><li>public static int frequency(Collection&lt;?&gt; c,Object o)返回指定集合中指定元素的出现次数</li><li>public static <T> void copy(List&lt;? super T&gt; dest,List&lt;? extends T&gt; src)将src中的内容复制到dest中</li><li>public static <T> boolean replaceAll(List<T> list，T oldVal，T newVal)：使用新值替换 List 对象的所有旧值</li><li>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题</li><li>Collections类中提供了多个unmodifiableXxx()方法，该方法返回指定 Xxx的不可修改的视图。</li></ul></blockquote><h2 id="11-9-集合练习"><a href="#11-9-集合练习" class="headerlink" title="11.9 集合练习"></a>11.9 集合练习</h2><h3 id="1、练习1-1"><a href="#1、练习1-1" class="headerlink" title="1、练习1"></a>1、练习1</h3><p>随机产生10个100以内的偶数，存放到一个List中，并且遍历显示它们</p><h3 id="2、练习2-1"><a href="#2、练习2-1" class="headerlink" title="2、练习2"></a>2、练习2</h3><p>随机产生10个100以内的偶数，存放到一个Set中，并且遍历显示它们</p><h3 id="3、练习3"><a href="#3、练习3" class="headerlink" title="3、练习3"></a>3、练习3</h3><p>随机产生几个100以内的偶数，存放到一个Set中，并且遍历显示它们，保证最后Set中有10个元素</p><h3 id="4、练习4"><a href="#4、练习4" class="headerlink" title="4、练习4"></a>4、练习4</h3><p>（1）声明一个圆类型，包含半径，实现Comparable接口，按照半径大小排序</p><p>（2）存储几个圆对象到TreeSet中，并且遍历显示</p><h3 id="5、练习5"><a href="#5、练习5" class="headerlink" title="5、练习5"></a>5、练习5</h3><p>（1）从键盘输入本组学员的姓名和他的手机号码，存放到map中，姓名为key,手机号码为value，并且遍历显示</p><p>（2）再从键盘输入姓名，查询他的手机号码</p><h3 id="6、练习6"><a href="#6、练习6" class="headerlink" title="6、练习6"></a>6、练习6</h3><p>（1）存储咱们班每组学员信息，组长姓名为key，组员包括组长自己为value</p><p>（2）遍历显示</p><p>（3）从键盘输入一个学员姓名，查找这个学员是否咱们班</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第11章-集合&quot;&gt;&lt;a href=&quot;#第11章-集合&quot; class=&quot;headerlink&quot; title=&quot;第11章 集合&quot;&gt;&lt;/a&gt;第11章 集合&lt;/h1&gt;&lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第10章 基础API与常见算法</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC10%E7%AB%A0-%E5%9F%BA%E7%A1%80API%E4%B8%8E%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC10%E7%AB%A0-%E5%9F%BA%E7%A1%80API%E4%B8%8E%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/</id>
    <published>2022-07-28T05:07:08.000Z</published>
    <updated>2022-10-16T04:43:25.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第10章-基础API与常见算法"><a href="#第10章-基础API与常见算法" class="headerlink" title="第10章 基础API与常见算法"></a>第10章 基础API与常见算法</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><input disabled="" type="checkbox"> 了解数学相关API</li><li><input disabled="" type="checkbox"> 了解日期时间API</li><li><input disabled="" type="checkbox"> 了解系统类API</li><li><input disabled="" type="checkbox"> 掌握数组基础算法</li><li><input disabled="" type="checkbox"> 掌握数组工具类的使用</li><li><input disabled="" type="checkbox"> 熟练掌握String类的API</li><li><input disabled="" type="checkbox"> 熟练掌握StringBuilder和StringBuffer类的API</li><li><input disabled="" type="checkbox"> 能够处理字符串相关的算法处理</li></ul><h1 id="第十章-基础API与常见算法"><a href="#第十章-基础API与常见算法" class="headerlink" title="第十章 基础API与常见算法"></a>第十章 基础API与常见算法</h1><h2 id="10-1-和数学相关的类"><a href="#10-1-和数学相关的类" class="headerlink" title="10.1 和数学相关的类"></a>10.1 和数学相关的类</h2><h3 id="10-1-1-java-lang-Math"><a href="#10-1-1-java-lang-Math" class="headerlink" title="10.1.1 java.lang.Math"></a>10.1.1 java.lang.Math</h3><p><code>java.lang.Math</code> 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。类似这样的工具类，其所有方法均为静态方法，并且不会创建对象，调用起来非常简单。</p><ul><li><code>public static double abs(double a) </code> ：返回 double 值的绝对值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> Math.abs(-<span class="number">5</span>); <span class="comment">//d1的值为5</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> Math.abs(<span class="number">5</span>); <span class="comment">//d2的值为5</span></span><br></pre></td></tr></table></figure><ul><li><code>public static double ceil(double a)</code> ：返回大于等于参数的最小的整数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> Math.ceil(<span class="number">3.3</span>); <span class="comment">//d1的值为 4.0</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> Math.ceil(-<span class="number">3.3</span>); <span class="comment">//d2的值为 -3.0</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> Math.ceil(<span class="number">5.1</span>); <span class="comment">//d3的值为 6.0</span></span><br></pre></td></tr></table></figure><ul><li><code>public static double floor(double a) </code> ：返回小于等于参数最大的整数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> Math.floor(<span class="number">3.3</span>); <span class="comment">//d1的值为3.0</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> Math.floor(-<span class="number">3.3</span>); <span class="comment">//d2的值为-4.0</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> Math.floor(<span class="number">5.1</span>); <span class="comment">//d3的值为 5.0</span></span><br></pre></td></tr></table></figure><ul><li><code>public static long round(double a)</code> ：返回最接近参数的 long。(相当于四舍五入方法)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">d1</span> <span class="operator">=</span> Math.round(<span class="number">5.5</span>); <span class="comment">//d1的值为6.0</span></span><br><span class="line"><span class="type">long</span> <span class="variable">d2</span> <span class="operator">=</span> Math.round(<span class="number">5.4</span>); <span class="comment">//d2的值为5.0</span></span><br></pre></td></tr></table></figure><ul><li>public static double pow(double a,double b)：返回a的b幂次方法</li><li>public static double sqrt(double a)：返回a的平方根</li><li>public static double random()：返回[0,1)的随机值</li><li>public static final double PI：返回圆周率</li><li>public static double max(double x, double y)：返回x,y中的最大值</li><li>public static double min(double x, double y)：返回x,y中的最小值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> Math.pow(<span class="number">2</span>,<span class="number">31</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">sqrt</span> <span class="operator">=</span> Math.sqrt(<span class="number">256</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">rand</span> <span class="operator">=</span> Math.random();</span><br><span class="line"><span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> Math.PI;</span><br></pre></td></tr></table></figure><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><p>请使用<code>Math</code> 相关的API，计算在 <code>-10.8</code>  到<code>5.9</code>  之间，绝对值大于<code>6</code>  或者小于<code>2.1</code> 的整数有多少个？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义最小值</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">min</span> <span class="operator">=</span> -<span class="number">10.8</span>;</span><br><span class="line">    <span class="comment">// 定义最大值</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">5.9</span>;</span><br><span class="line">    <span class="comment">// 定义变量计数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 范围内循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">double</span> <span class="variable">i</span> <span class="operator">=</span> Math.ceil(min); i &lt;= max; i++) &#123;</span><br><span class="line">      <span class="comment">// 获取绝对值并判断</span></span><br><span class="line">      <span class="keyword">if</span> (Math.abs(i) &gt; <span class="number">6</span> || Math.abs(i) &lt; <span class="number">2.1</span>) &#123;</span><br><span class="line">        <span class="comment">// 计数</span></span><br><span class="line">        count++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;个数为: &quot;</span> + count + <span class="string">&quot; 个&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-1-2-java-math包"><a href="#10-1-2-java-math包" class="headerlink" title="10.1.2 java.math包"></a>10.1.2 java.math包</h3><h4 id="（1）BigInteger"><a href="#（1）BigInteger" class="headerlink" title="（1）BigInteger"></a>（1）BigInteger</h4><p>不可变的任意精度的整数。</p><ul><li>BigInteger(String val) </li><li>BigInteger add(BigInteger val)  </li><li>BigInteger subtract(BigInteger val)</li><li>BigInteger multiply(BigInteger val) </li><li>BigInteger divide(BigInteger val) </li><li>BigInteger remainder(BigInteger val)</li><li>….</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//long bigNum = 123456789123456789123456789L;</span></span><br><span class="line"></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;123456789123456789123456789&quot;</span>);</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;78923456789123456789123456789&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(&quot;和：&quot; + (b1+b2));//错误的，无法直接使用+进行求和</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;和：&quot;</span> + b1.add(b2));</span><br><span class="line">System.out.println(<span class="string">&quot;减：&quot;</span> + b1.subtract(b2));</span><br><span class="line">System.out.println(<span class="string">&quot;乘：&quot;</span> + b1.multiply(b2));</span><br><span class="line">System.out.println(<span class="string">&quot;除：&quot;</span> + b2.divide(b1));</span><br><span class="line">System.out.println(<span class="string">&quot;余：&quot;</span> + b2.remainder(b1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）RoundingMode枚举类"><a href="#（2）RoundingMode枚举类" class="headerlink" title="（2）RoundingMode枚举类"></a>（2）RoundingMode枚举类</h4><p>CEILING ：向正无限大方向舍入的舍入模式。<br>DOWN ：向零方向舍入的舍入模式。<br>FLOOR：向负无限大方向舍入的舍入模式。<br>HALF_DOWN ：向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向下舍入。<br>HALF_EVEN：向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。<br>HALF_UP：向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向上舍入。<br>UNNECESSARY：用于断言请求的操作具有精确结果的舍入模式，因此不需要舍入。<br>UP：远离零方向舍入的舍入模式。 </p><h4 id="（3）BigDecimal"><a href="#（3）BigDecimal" class="headerlink" title="（3）BigDecimal"></a>（3）BigDecimal</h4><p>不可变的、任意精度的有符号十进制数。</p><ul><li>BigDecimal(String val) </li><li>BigDecimal add(BigDecimal val) </li><li>BigDecimal subtract(BigDecimal val)</li><li>BigDecimal multiply(BigDecimal val) </li><li>BigDecimal divide(BigDecimal val) </li><li>BigDecimal divide(BigDecimal divisor, int roundingMode) </li><li>BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode) </li><li>BigDecimal remainder(BigDecimal val) </li><li>….</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">/*double big = 12.123456789123456789123456789;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;big = &quot; + big);*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;123.45678912345678912345678912345678&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;7.8923456789123456789123456789998898888&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(&quot;和：&quot; + (b1+b2));//错误的，无法直接使用+进行求和</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;和：&quot;</span> + b1.add(b2));</span><br><span class="line">System.out.println(<span class="string">&quot;减：&quot;</span> + b1.subtract(b2));</span><br><span class="line">System.out.println(<span class="string">&quot;乘：&quot;</span> + b1.multiply(b2));</span><br><span class="line">System.out.println(<span class="string">&quot;除：&quot;</span> + b1.divide(b2,<span class="number">20</span>,RoundingMode.UP));<span class="comment">//divide(BigDecimal divisor, int scale, int roundingMode)</span></span><br><span class="line">System.out.println(<span class="string">&quot;除：&quot;</span> + b1.divide(b2,<span class="number">20</span>,RoundingMode.DOWN));<span class="comment">//divide(BigDecimal divisor, int scale, int roundingMode)</span></span><br><span class="line">System.out.println(<span class="string">&quot;余：&quot;</span> + b1.remainder(b2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-1-3-java-util-Random"><a href="#10-1-3-java-util-Random" class="headerlink" title="10.1.3 java.util.Random"></a>10.1.3 java.util.Random</h3><p>用于产生随机数</p><ul><li><p>boolean nextBoolean():返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的 boolean 值。 </p></li><li><p>void nextBytes(byte[] bytes):生成随机字节并将其置于用户提供的 byte 数组中。 </p></li><li><p>double nextDouble():返回下一个伪随机数，它是取自此随机数生成器序列的、在 0.0 和 1.0 之间均匀分布的 double 值。 </p></li><li><p>float nextFloat():返回下一个伪随机数，它是取自此随机数生成器序列的、在 0.0 和 1.0 之间均匀分布的 float 值。 </p></li><li><p>double nextGaussian():返回下一个伪随机数，它是取自此随机数生成器序列的、呈高斯（“正态”）分布的 double 值，其平均值是 0.0，标准差是 1.0。 </p></li><li><p>int nextInt():返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 int 值。 </p></li><li><p>int nextInt(int n):返回一个伪随机数，它是取自此随机数生成器序列的、在 0（包括）和指定值（不包括）之间均匀分布的 int 值。 </p></li><li><p>long nextLong():返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的 long 值。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;随机整数：&quot;</span> + r.nextInt());</span><br><span class="line">System.out.println(<span class="string">&quot;随机小数：&quot;</span> + r.nextDouble());</span><br><span class="line">System.out.println(<span class="string">&quot;随机布尔值：&quot;</span> + r.nextBoolean());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-2-日期时间API"><a href="#10-2-日期时间API" class="headerlink" title="10.2 日期时间API"></a>10.2 日期时间API</h2><h3 id="10-2-1-JDK1-8之前"><a href="#10-2-1-JDK1-8之前" class="headerlink" title="10.2.1 JDK1.8之前"></a>10.2.1 JDK1.8之前</h3><h4 id="1、java-util-Date"><a href="#1、java-util-Date" class="headerlink" title="1、java.util.Date"></a>1、java.util.Date</h4><p>new  Date()：当前系统时间</p><p>long  getTime()：返回该日期时间对象距离1970-1-1 0.0.0 0毫秒之间的毫秒值</p><p>new Date(long 毫秒)：把该毫秒值换算成日期时间对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line"><span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(time);</span><br><span class="line">System.out.println(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">1559807047979L</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(time);</span><br><span class="line">System.out.println(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> d.getTime();</span><br><span class="line">System.out.println(time);<span class="comment">//1559807047979</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(time);<span class="comment">//1559806982971</span></span><br><span class="line"><span class="comment">//当前系统时间距离1970-1-1 0:0:0 0毫秒的时间差，毫秒为单位</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">System.out.println(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、java-util-TimeZone"><a href="#2、java-util-TimeZone" class="headerlink" title="2、java.util.TimeZone"></a>2、java.util.TimeZone</h4><p>通常，使用 <code>getDefault</code> 获取 <code>TimeZone</code>，<code>getDefault</code>  基于程序运行所在的时区创建 <code>TimeZone</code>。</p><p>也可以用 <code>getTimeZone</code> 及时区 ID 获取 <code>TimeZone</code> 。例如美国太平洋时区的时区 ID 是  “America&#x2F;Los_Angeles”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">()</span>&#123;</span><br><span class="line">String[] all = TimeZone.getAvailableIDs();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; all.length; i++) &#123;</span><br><span class="line">System.out.println(all[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">TimeZone</span> <span class="variable">t</span> <span class="operator">=</span> TimeZone.getTimeZone(<span class="string">&quot;America/Los_Angeles&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见时区ID：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Asia/Shanghai</span><br><span class="line">UTC</span><br><span class="line">America/New_York</span><br></pre></td></tr></table></figure><h4 id="3、java-util-Calendar"><a href="#3、java-util-Calendar" class="headerlink" title="3、java.util.Calendar"></a>3、java.util.Calendar</h4><p><code>Calendar</code> 类是一个抽象类，它为特定瞬间与一组诸如  <code>YEAR</code>、<code>MONTH</code>、<code>DAY_OF_MONTH</code>、<code>HOUR</code>  等 <a href="../../java/util/Calendar.html#fields"><code>日历字段</code></a>之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。瞬间可用毫秒值来表示，它是距<em>历元</em>（即格林威治标准时间 1970 年 1 月 1 日的 00:00:00.000，格里高利历）的偏移量。与其他语言环境敏感类一样，<code>Calendar</code> 提供了一个类方法  <code>getInstance</code>，以获得此类型的一个通用的对象。</p><p>（1）getInstance()：得到Calendar的对象</p><p>（2）get(常量)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">System.out.println(c);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> c.get(Calendar.YEAR);</span><br><span class="line">System.out.println(year);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> c.get(Calendar.MONTH)+<span class="number">1</span>;</span><br><span class="line">System.out.println(month);</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">TimeZone</span> <span class="variable">t</span> <span class="operator">=</span> TimeZone.getTimeZone(<span class="string">&quot;America/Los_Angeles&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//getInstance(TimeZone zone)</span></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance(t);</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、java-text-SimpleDateFormat"><a href="#4、java-text-SimpleDateFormat" class="headerlink" title="4、java.text.SimpleDateFormat"></a>4、java.text.SimpleDateFormat</h4><p>SimpleDateFormat用于日期时间的格式化。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572599023197.png" alt="1572599023197"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span> <span class="keyword">throws</span> ParseException&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2019年06月06日 16时03分14秒 545毫秒  星期四 +0800&quot;</span>;</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 HH时mm分ss秒 SSS毫秒  E Z&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> sf.parse(str);</span><br><span class="line">System.out.println(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test9</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 HH时mm分ss秒 SSS毫秒  E Z&quot;</span>);</span><br><span class="line"><span class="comment">//把Date日期转成字符串，按照指定的格式转</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sf.format(d);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-2-2-JDK1-8之后"><a href="#10-2-2-JDK1-8之后" class="headerlink" title="10.2.2 JDK1.8之后"></a>10.2.2 JDK1.8之后</h3><p>Java1.0中包含了一个Date类，但是它的大多数方法已经在Java 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：</p><ul><li>可变性：象日期和时间这样的类对象应该是不可变的。Calendar类中可以使用三种方法更改日历字段：set()、add() 和 roll()。</li><li>偏移性：Date中的年份是从1900开始的，而月份都是从0开始的。</li><li>格式化：格式化只对Date有用，Calendar则不行。</li><li>此外，它们也不是线程安全的，不能处理闰秒等。</li></ul><p>可以说，对日期和时间的操作一直是Java程序员最痛苦的地方之一。第三次引入的API是成功的，并且java 8中引入的java.time API 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。</p><p>Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。</p><ul><li>java.time – 包含值对象的基础包</li><li>java.time.chrono – 提供对不同的日历系统的访问。</li><li>java.time.format – 格式化和解析时间和日期</li><li>java.time.temporal – 包括底层框架和扩展特性</li><li>java.time.zone – 包含时区支持的类</li></ul><p>Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。新的 java.time 中包含了所有关于时钟（Clock），本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。</p><h4 id="1、本地日期时间：LocalDate、LocalTime、LocalDateTime"><a href="#1、本地日期时间：LocalDate、LocalTime、LocalDateTime" class="headerlink" title="1、本地日期时间：LocalDate、LocalTime、LocalDateTime"></a>1、本地日期时间：LocalDate、LocalTime、LocalDateTime</h4><table><thead><tr><th>方法</th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>now() &#x2F; now(ZoneId zone)</td><td>静态方法，根据当前时间创建对象&#x2F;指定时区的对象</td></tr><tr><td>of()</td><td>静态方法，根据指定日期&#x2F;时间创建对象</td></tr><tr><td>getDayOfMonth()&#x2F;getDayOfYear()</td><td>获得月份天数(1-31) &#x2F;获得年份天数(1-366)</td></tr><tr><td>getDayOfWeek()</td><td>获得星期几(返回一个 DayOfWeek 枚举值)</td></tr><tr><td>getMonth()</td><td>获得月份, 返回一个 Month 枚举值</td></tr><tr><td>getMonthValue() &#x2F; getYear()</td><td>获得月份(1-12) &#x2F;获得年份</td></tr><tr><td>getHours()&#x2F;getMinute()&#x2F;getSecond()</td><td>获得当前对象对应的小时、分钟、秒</td></tr><tr><td>withDayOfMonth()&#x2F;withDayOfYear()&#x2F;withMonth()&#x2F;withYear()</td><td>将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象</td></tr><tr><td>with(TemporalAdjuster  t)</td><td>将当前日期时间设置为校对器指定的日期时间</td></tr><tr><td>plusDays(), plusWeeks(), plusMonths(), plusYears(),plusHours()</td><td>向当前对象添加几天、几周、几个月、几年、几小时</td></tr><tr><td>minusMonths() &#x2F; minusWeeks()&#x2F;minusDays()&#x2F;minusYears()&#x2F;minusHours()</td><td>从当前对象减去几月、几周、几天、几年、几小时</td></tr><tr><td>plus(TemporalAmount t)&#x2F;minus(TemporalAmount t)</td><td>添加或减少一个 Duration 或 Period</td></tr><tr><td>isBefore()&#x2F;isAfter()</td><td>比较两个 LocalDate</td></tr><tr><td>isLeapYear()</td><td>判断是否是闰年（在LocalDate类中声明）</td></tr><tr><td>format(DateTimeFormatter  t)</td><td>格式化本地日期、时间，返回一个字符串</td></tr><tr><td>parse(Charsequence text)</td><td>将指定格式的字符串解析为日期、时间</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">before</span> <span class="operator">=</span> now.minusDays(<span class="number">100</span>);</span><br><span class="line">System.out.println(before);<span class="comment">//2019-02-26</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">lai</span> <span class="operator">=</span> LocalDate.of(<span class="number">2019</span>, <span class="number">5</span>, <span class="number">13</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">go</span> <span class="operator">=</span> lai.plusDays(<span class="number">160</span>);</span><br><span class="line">System.out.println(go);<span class="comment">//2019-10-20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">lai</span> <span class="operator">=</span> LocalDate.of(<span class="number">2019</span>, <span class="number">5</span>, <span class="number">13</span>);</span><br><span class="line">System.out.println(lai.getDayOfYear());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">lai</span> <span class="operator">=</span> LocalDate.of(<span class="number">2019</span>, <span class="number">5</span>, <span class="number">13</span>);</span><br><span class="line">System.out.println(lai);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">System.out.println(now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">System.out.println(now);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、指定时区日期时间：ZonedDateTime"><a href="#2、指定时区日期时间：ZonedDateTime" class="headerlink" title="2、指定时区日期时间：ZonedDateTime"></a>2、指定时区日期时间：ZonedDateTime</h4><p>常见时区ID：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Asia/Shanghai</span><br><span class="line">UTC</span><br><span class="line">America/New_York</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestZonedDateTime</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">t</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">System.out.println(t);</span><br><span class="line"></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">t1</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>));</span><br><span class="line">System.out.println(t1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、持续日期-x2F-时间：Period和Duration"><a href="#3、持续日期-x2F-时间：Period和Duration" class="headerlink" title="3、持续日期&#x2F;时间：Period和Duration"></a>3、持续日期&#x2F;时间：Period和Duration</h4><p>Period:用于计算两个“日期”间隔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">t1</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">t2</span> <span class="operator">=</span> LocalDate.of(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">31</span>);</span><br><span class="line"><span class="type">Period</span> <span class="variable">between</span> <span class="operator">=</span> Period.between(t1, t2);</span><br><span class="line">System.out.println(between);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;相差的年数：&quot;</span>+between.getYears());<span class="comment">//1年</span></span><br><span class="line">System.out.println(<span class="string">&quot;相差的月数：&quot;</span>+between.getMonths());<span class="comment">//又7个月</span></span><br><span class="line">System.out.println(<span class="string">&quot;相差的天数：&quot;</span>+between.getDays());<span class="comment">//零25天</span></span><br><span class="line">System.out.println(<span class="string">&quot;相差的总数：&quot;</span>+between.toTotalMonths());<span class="comment">//总共19个月</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Duration:用于计算两个“时间”间隔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">t1</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">t2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2017</span>, <span class="number">8</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="type">Duration</span> <span class="variable">between</span> <span class="operator">=</span> Duration.between(t1, t2);</span><br><span class="line">System.out.println(between);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;相差的总天数：&quot;</span>+between.toDays());</span><br><span class="line">System.out.println(<span class="string">&quot;相差的总小时数：&quot;</span>+between.toHours());</span><br><span class="line">System.out.println(<span class="string">&quot;相差的总分钟数：&quot;</span>+between.toMinutes());</span><br><span class="line">System.out.println(<span class="string">&quot;相差的总秒数：&quot;</span>+between.getSeconds());</span><br><span class="line">System.out.println(<span class="string">&quot;相差的总毫秒数：&quot;</span>+between.toMillis());</span><br><span class="line">System.out.println(<span class="string">&quot;相差的总纳秒数：&quot;</span>+between.toNanos());</span><br><span class="line">System.out.println(<span class="string">&quot;不够一秒的纳秒数：&quot;</span>+between.getNano());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、DateTimeFormatter：日期时间格式化"><a href="#4、DateTimeFormatter：日期时间格式化" class="headerlink" title="4、DateTimeFormatter：日期时间格式化"></a>4、DateTimeFormatter：日期时间格式化</h4><p>该类提供了三种格式化方法：</p><p>预定义的标准格式。如：ISO_DATE_TIME;ISO_DATE</p><p>本地化相关的格式。如：ofLocalizedDate(FormatStyle.MEDIUM)</p><p>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">//DateTimeFormatter df = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);//2019年6月6日 下午04时40分03秒</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">df</span> <span class="operator">=</span> DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);<span class="comment">//19-6-6 下午4:40</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> df.format(now);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test9</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">df</span> <span class="operator">=</span> DateTimeFormatter.ISO_DATE_TIME;<span class="comment">//2019-06-06T16:38:23.756</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> df.format(now);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">df</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH时mm分ss秒  SSS毫秒  E 是这一年的D天&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> df.format(now);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3-系统相关类"><a href="#10-3-系统相关类" class="headerlink" title="10.3 系统相关类"></a>10.3 系统相关类</h2><h3 id="10-3-1-java-lang-System类"><a href="#10-3-1-java-lang-System类" class="headerlink" title="10.3.1 java.lang.System类"></a>10.3.1 java.lang.System类</h3><p>系统类中很多好用的方法，其中几个如下：</p><ul><li><p>static long currentTimeMillis() ：返回当前系统时间距离1970-1-1 0:0:0的毫秒值</p></li><li><p>static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)： </p><p>从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。常用于数组的插入和删除</p></li><li><p>static void exit(int status) ：退出当前系统</p></li><li><p>static void gc() ：运行垃圾回收器。</p></li><li><p>static String getProperty(String key)：获取某个系统属性</p></li><li><p>…</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;现在的系统时间距离1970年1月1日凌晨：&quot;</span> + time + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.exit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;over&quot;</span>);<span class="comment">//不会执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-3-3-java-lang-Runtime类"><a href="#10-3-3-java-lang-Runtime类" class="headerlink" title="10.3.3 java.lang.Runtime类"></a>10.3.3 java.lang.Runtime类</h3><p>每个 Java 应用程序都有一个 <code>Runtime</code> 类实例，使应用程序能够与其运行的环境相连接。可以通过  <code>getRuntime</code> 方法获取当前运行时。  应用程序不能创建自己的 Runtime 类实例。</p><p>public static Runtime getRuntime()： 返回与当前 Java 应用程序相关的运行时对象。</p><p>public long totalMemory()：返回 Java 虚拟机中的内存总量。此方法返回的值可能随时间的推移而变化，这取决于主机环境。</p><p>public long freeMemory()：回 Java 虚拟机中的空闲内存量。调用 gc 方法可能导致 freeMemory 返回值的增加。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-4-数组的算法升华"><a href="#10-4-数组的算法升华" class="headerlink" title="10.4 数组的算法升华"></a>10.4 数组的算法升华</h2><h3 id="10-4-1-数组的算法升华"><a href="#10-4-1-数组的算法升华" class="headerlink" title="10.4.1 数组的算法升华"></a>10.4.1 数组的算法升华</h3><h4 id="1、数组的反转"><a href="#1、数组的反转" class="headerlink" title="1、数组的反转"></a>1、数组的反转</h4><p>方法有两种：</p><p>1、借助一个新数组</p><p>2、首尾对应位置交换</p><p>第一种方式示例代码：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572828418996.png" alt="1572828418996"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(1)先创建一个新数组</span></span><br><span class="line"><span class="type">int</span>[] newArr = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)复制元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;newArr.length; i++)&#123;</span><br><span class="line">    newArr[i] = arr[len -<span class="number">1</span> - i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)舍弃旧的，让arr指向新数组</span></span><br><span class="line">arr = newArr;<span class="comment">//这里把新数组的首地址赋值给了arr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(4)遍历显示</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>缺点：需要借助一个数组，浪费额外空间，原数组需要垃圾回收</p></blockquote><p>第二种方式示例代码：</p><p><strong>实现思想：</strong>数组对称位置的元素互换。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561469467316.png" alt="1561469467316"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(1)计算要交换的次数：  次数 = arr.length/2</span></span><br><span class="line"><span class="comment">//(2)首尾对称位置交换</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length/<span class="number">2</span>; i++)&#123;<span class="comment">//循环的次数就是交换的次数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[arr.length-<span class="number">1</span>-i];</span><br><span class="line">arr[arr.length-<span class="number">1</span>-i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（3）遍历显示</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561469087319.png" alt="1561469087319"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左右对称位置交换</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> left=<span class="number">0</span>,right=arr.length-<span class="number">1</span>; left&lt;right; left++,right--)&#123;</span><br><span class="line">    <span class="comment">//首  与  尾交换</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">    arr[left] = arr[right];</span><br><span class="line">arr[right] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（3）遍历显示</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、数组的扩容"><a href="#2、数组的扩容" class="headerlink" title="2、数组的扩容"></a>2、数组的扩容</h4><p>示例：当原来的数组长度不够了需要扩容，例如需要新增位置来存储10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要把arr数组扩容，增加1个位置</span></span><br><span class="line"><span class="comment">//(1)先创建一个新数组，它的长度 = 旧数组的长度+1，或者也可以扩大为原来数组长度的1.5倍，2倍等</span></span><br><span class="line"><span class="type">int</span>[] newArr = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)复制元素</span></span><br><span class="line"><span class="comment">//注意：i&lt;arr.length   因位arr比newArr短，避免下标越界</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    newArr[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)把新元素添加到newArr的最后</span></span><br><span class="line">newArr[newArr.length-<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(4)如果下面继续使用arr，可以让arr指向新数组</span></span><br><span class="line">arr = newArr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(4)遍历显示</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>（1）至于新数组的长度定义多少合适，看实际情况，如果新增的元素个数确定，那么可以增加指定长度，如果新增元素个数不确定，那么可以扩容为原来的1.5倍、2倍等</p><p>（2）数组扩容太多会造成浪费，太少会导致频繁扩容，效率低下</p></blockquote><h4 id="3、数组元素的插入"><a href="#3、数组元素的插入" class="headerlink" title="3、数组元素的插入"></a>3、数组元素的插入</h4><p>示例：在原数组的某个[index]插入一个元素</p><p>情形一：原数组未满</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">0</span>]=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="string">&quot;李四&quot;</span>;</span><br><span class="line">arr[<span class="number">2</span>]=<span class="string">&quot;王五&quot;</span>;</span><br><span class="line"></span><br><span class="line">那么目前数组的长度是<span class="number">5</span>，而数组的实际元素个数是<span class="number">3</span>，如果此时需要在“张三”和“李四”之间插入一个“赵六”，即在[index=<span class="number">1</span>]的位置插入“赵六”，需要怎么做呢？</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">0</span>]=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="string">&quot;李四&quot;</span>;</span><br><span class="line">arr[<span class="number">2</span>]=<span class="string">&quot;王五&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（1）移动2个元素，需要移动的起始元素下标是[1]，它需要移动到[2]，一共一共2个</span></span><br><span class="line">System.arraycopy(arr,<span class="number">1</span>,arr,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//（2）插入新元素</span></span><br><span class="line">arr[<span class="number">1</span>]=<span class="string">&quot;赵六&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)遍历显示</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情形二：原数组已满</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>]=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="string">&quot;李四&quot;</span>;</span><br><span class="line">arr[<span class="number">2</span>]=<span class="string">&quot;王五&quot;</span>;</span><br><span class="line"></span><br><span class="line">那么目前数组的长度是<span class="number">3</span>，而数组的实际元素个数是<span class="number">3</span>，如果此时需要在“张三”和“李四”之间插入一个“赵六”，即在[index=<span class="number">1</span>]的位置插入“赵六”，需要怎么做呢？</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>]=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="string">&quot;李四&quot;</span>;</span><br><span class="line">arr[<span class="number">2</span>]=<span class="string">&quot;王五&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（1）先扩容</span></span><br><span class="line">String[] newArr = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">newArr[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">arr=newArr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（2）移动2个元素，需要移动的起始元素下标是[1]，它需要移动到[2]，一共一共2个</span></span><br><span class="line">System.arraycopy(arr,<span class="number">1</span>,arr,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//（3）插入新元素</span></span><br><span class="line">arr[<span class="number">1</span>]=<span class="string">&quot;赵六&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(4)遍历显示</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、数组元素的删除"><a href="#4、数组元素的删除" class="headerlink" title="4、数组元素的删除"></a>4、数组元素的删除</h4><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>]=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="string">&quot;李四&quot;</span>;</span><br><span class="line">arr[<span class="number">2</span>]=<span class="string">&quot;王五&quot;</span>;</span><br><span class="line"></span><br><span class="line">现在需要删除“李四”，我们又不希望数组中间空着元素，该如何处理呢？</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>]=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="string">&quot;李四&quot;</span>;</span><br><span class="line">arr[<span class="number">2</span>]=<span class="string">&quot;王五&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（1）移动元素，需要移动元素的起始下标[2]，该元素需要移动到[1]，一共需要移动1个元素</span></span><br><span class="line">System.arraycopy(arr,<span class="number">2</span>,arr,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//（2）因为数组元素整体往左移动，这里本质上是复制，原来最后一个元素需要置空</span></span><br><span class="line">arr[<span class="number">2</span>]=<span class="literal">null</span>;<span class="comment">//使得垃圾回收尽快回收对应对象的内存</span></span><br></pre></td></tr></table></figure><h4 id="5、数组的二分查找"><a href="#5、数组的二分查找" class="headerlink" title="5、数组的二分查找"></a>5、数组的二分查找</h4><p>二分查找：对折对折再对折</p><p>要求：要求数组元素必须支持比较大小，并且数组中的元素已经按大小排好序</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Exam2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">25</span>,<span class="number">28</span>&#125;;<span class="comment">//数组是有序的</span></span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="comment">//找到结束</span></span><br><span class="line">            <span class="keyword">if</span>(value == arr[mid])&#123;</span><br><span class="line">                index = mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="comment">//没找到</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(value &gt; arr[mid])&#123;<span class="comment">//往右继续查找</span></span><br><span class="line">                <span class="comment">//移动左边界，使得mid往右移动</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value &lt; arr[mid])&#123;<span class="comment">//往左边继续查找</span></span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(index==-<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(value + <span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(value + <span class="string">&quot;的下标是&quot;</span> + index);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%9B%BE%E8%A7%A3%EF%BC%881%EF%BC%89.png"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/2%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%9B%BE%E8%A7%A3%EF%BC%882%EF%BC%89.png"></p><h4 id="6、数组的直接选择排序"><a href="#6、数组的直接选择排序" class="headerlink" title="6、数组的直接选择排序"></a>6、数组的直接选择排序</h4><p>示例代码：简单的直接选择排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;<span class="comment">//外循环的次数 = 轮数 = 数组的长度-1</span></span><br><span class="line">    <span class="comment">//（1）找出本轮未排序元素中的最值</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    未排序元素：</span></span><br><span class="line"><span class="comment">    第1轮：i=1,未排序，[0,7]，本轮未排序元素第一个元素是[0]</span></span><br><span class="line"><span class="comment">    第2轮：i=2,未排序，[1,7]，本轮未排序元素第一个元素是[1]</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">    第7轮：i=7,未排序，[6,7]，本轮未排序元素第一个元素是[6]</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    每一轮未排序元素的起始下标：0,1,2,3,4,5,6，正好是i-1的</span></span><br><span class="line"><span class="comment">    未排序的后面的元素依次：</span></span><br><span class="line"><span class="comment">    第1轮：[1,7]  j=1,2,3,4,5,6,7</span></span><br><span class="line"><span class="comment">    第2轮：[2,4]  j=2,3,4,5,6,7</span></span><br><span class="line"><span class="comment">    。。。。</span></span><br><span class="line"><span class="comment">    第7轮：[7]    j=7</span></span><br><span class="line"><span class="comment">    j的起点是i，终点都是7</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[i-<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=i; j&lt;arr.length; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; max)&#123;</span><br><span class="line">            max = arr[j];</span><br><span class="line">            index = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//（2）如果这个最值没有在它应该在的位置，就与这个位置的元素交换</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    第1轮，最大值应该在[0]</span></span><br><span class="line"><span class="comment">    第2轮，最大值应该在[1]</span></span><br><span class="line"><span class="comment">    ....</span></span><br><span class="line"><span class="comment">    第7轮，最大值应该在[6]</span></span><br><span class="line"><span class="comment">    正好是i-1的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(index != i-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//交换arr[i-1]与arr[index]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i-<span class="number">1</span>];</span><br><span class="line">        arr[i-<span class="number">1</span>] = arr[index];</span><br><span class="line">        arr[index] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示结果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">System.out.print(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561513135868.png" alt="1561513135868"></p><h3 id="10-4-2-数组工具类"><a href="#10-4-2-数组工具类" class="headerlink" title="10.4.2 数组工具类"></a>10.4.2 数组工具类</h3><p>java.util.Arrays数组工具类，提供了很多静态方法来对数组进行操作，而且如下每一个方法都有各种重载形式，以下只列出int[]类型的，其他类型的数组类推：</p><ul><li><p>static int binarySearch(int[] a, int key) ：要求数组有序，在数组中查找key是否存在，如果存在返回第一次找到的下标，不存在返回负数</p></li><li><p>static int[] copyOf(int[] original, int newLength)  ：根据original原数组复制一个长度为newLength的新数组，并返回新数组</p></li><li><p>static int[] copyOfRange(int[] original, int from, int to) ：复制original原数组的[from,to)构成新数组，并返回新数组</p></li><li><p>static boolean equals(int[] a, int[] a2) ：比较两个数组的长度、元素是否完全相同</p></li><li><p>static void fill(int[] a, int val) ：用val填充整个a数组</p></li><li><p>static void fill(int[] a, int fromIndex, int toIndex, int val)：将a数组[fromIndex,toIndex)部分填充为val </p></li><li><p>static void sort(int[] a) ：将a数组按照从小到大进行排序</p></li><li><p>static void sort(int[] a, int fromIndex, int toIndex) ：将a数组的[fromIndex, toIndex)部分按照升序排列</p></li><li><p>static String toString(int[] a) ：把a数组的元素，拼接为一个字符串，形式为：[元素1，元素2，元素3。。。]</p></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">// 打印数组,输出地址值</span></span><br><span class="line">  System.out.println(arr); <span class="comment">// [I@2ac1fdc4</span></span><br><span class="line">  <span class="comment">// 数组内容转为字符串</span></span><br><span class="line">    System.out.println(<span class="string">&quot;arr数组初始状态：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">    </span><br><span class="line">    Arrays.fill(arr, <span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;arr数组现在状态：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">    </span><br><span class="line">    <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i] = rand.nextInt(<span class="number">100</span>);<span class="comment">//赋值为100以内的随机整数</span></span><br><span class="line">&#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;arr数组现在状态：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[] arr2 = Arrays.copyOf(arr, <span class="number">10</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;新数组：&quot;</span> + Arrays.toString(arr2));</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;两个数组的比较结果：&quot;</span> + Arrays.equals(arr, arr2));</span><br><span class="line">    </span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">    System.out.println(<span class="string">&quot;arr数组现在状态：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-4-3-数组面试题"><a href="#10-4-3-数组面试题" class="headerlink" title="10.4.3 数组面试题"></a>10.4.3 数组面试题</h3><h4 id="1、编程题1"><a href="#1、编程题1" class="headerlink" title="1、编程题1"></a>1、编程题1</h4><p>找出数组中一个值，使其左侧值的加和等于右侧值的加和，</p><p>​例如：[1,2,5,3,2,4,2]，结果为：第4个值3</p><p>​    [9, 6, 8, 8, 7, 6, 9, 5, 2, 5]，结果是没有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> leftSumEqualsRightSum(arr);</span><br><span class="line"><span class="keyword">if</span>(index!=-<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(arr[index]);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;没有&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">leftSumEqualsRightSum</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>; mid &lt; arr.length; mid++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">leftSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">rightSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;mid; i++) &#123;</span><br><span class="line">leftSum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mid+<span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">rightSum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(leftSum==rightSum) &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、编程题2"><a href="#2、编程题2" class="headerlink" title="2、编程题2"></a>2、编程题2</h4><ul><li><p>左奇右偶</p><ul><li>10个整数的数组{26,67,49,38,52,66,7,71,56,87}。</li><li>元素重新排列，所有的奇数保存到数组左边，所有的偶数保存到数组右边。</li></ul></li><li><p>代码实现，效果如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/9.jpg"></p></li><li><p>开发提示：</p><ul><li>左边的偶数与右边的奇数换位置：</li><li>定义两个变量left和right，从左边开始查找偶数的位置，找到后用left记录，从右边开始找奇数的位置，找到后用right记录，如果left&lt;right，那么就交换，然后在上一次的基础上继续查找，直到left与right擦肩。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//效率最高</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">order2</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>,right = arr.length-<span class="number">1</span>; left &lt; right; )&#123;</span><br><span class="line">        <span class="comment">//left代表左边需要交换的数的下标，偶数的下标</span></span><br><span class="line">        <span class="comment">//如果arr[left]此时是奇数，说明此时left不是我们要找的下标，left++往后移动</span></span><br><span class="line">        <span class="keyword">while</span>(arr[left]%<span class="number">2</span>!=<span class="number">0</span>)&#123;<span class="comment">//当arr[left]是偶数时，结束while循环</span></span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果arr[right]此时是偶数，说明此时right不是我们要找的下标，right--往前移动</span></span><br><span class="line">        <span class="keyword">while</span>(arr[right]%<span class="number">2</span>==<span class="number">0</span>)&#123;<span class="comment">//当arr[right]是奇数时，结束while循环</span></span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">            arr[left] = arr[right];</span><br><span class="line">            arr[right]= temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">order3</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">while</span> (len&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j&lt;len-<span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="comment">//左边的元素是偶数，就和它相邻的元素交换</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j]%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">order</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="comment">//从左边往右边找偶数，记录下标，evenIndex，这个是错误的数字的下标</span></span><br><span class="line">        <span class="comment">//从右边往左边找奇数，记录下标，oddIndex，这个是错误的数字的下标</span></span><br><span class="line">        <span class="comment">//交换arr[oddIndex]与arr[evenIndex]，调整之后就可以了</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">evenIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oddIndex</span> <span class="operator">=</span> arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(evenIndex &lt; oddIndex)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    evenIndex = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=arr.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                    oddIndex = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(evenIndex &lt; oddIndex) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[evenIndex];</span><br><span class="line">                arr[evenIndex] = arr[oddIndex];</span><br><span class="line">                arr[oddIndex] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3、编程题3"><a href="#3、编程题3" class="headerlink" title="3、编程题3"></a>3、编程题3</h4><ul><li><p>数组去重</p><ul><li>10个整数{9,10,6,6,1,9,3,5,6,4}，范围1-10，保存到数组中。</li><li>去除数组中重复的内容，只保留唯一的元素。</li></ul></li><li><p>按步骤编写代码，效果如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/10.jpg"></p></li><li><p>开发提示：</p><ul><li>定义一个变量count，初始化为数组的长度</li><li>遍历每一个元素，如果该元素与前面的某个元素相等，那么通过移动数组，把该元素覆盖掉，并修改count–。</li><li>最后创建一个新数组，长度为count，并从原数组把前count个元素复制过来</li></ul></li></ul><h4 id="4、编程题4"><a href="#4、编程题4" class="headerlink" title="4、编程题4"></a>4、编程题4</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1573715386032.png" alt="1573715386032"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExer4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] arr = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">arr[i] = Math.random() * <span class="number">100</span>;<span class="comment">//[0,100)之间的小数</span></span><br><span class="line">&#125;</span><br><span class="line">arr[arr.length-<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;直线上每一个点距离下一个点的距离：&quot;</span>+Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">150.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">sum += arr[i];</span><br><span class="line"><span class="keyword">if</span>(sum&lt;=length) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;长度为：&quot;</span> + length + <span class="string">&quot;的绳子最多能覆盖&quot;</span> +count+<span class="string">&quot;个点&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、编程题5"><a href="#5、编程题5" class="headerlink" title="5、编程题5"></a>5、编程题5</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1573715429966.png" alt="1573715429966"></p><p>冒泡排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接选择排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[minIndex] &gt; arr[j]) &#123;</span><br><span class="line">minIndex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(minIndex!=i) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[minIndex];</span><br><span class="line">arr[minIndex] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-4-4-附加（有能力同学）"><a href="#10-4-4-附加（有能力同学）" class="headerlink" title="10.4.4 附加（有能力同学）"></a>10.4.4 附加（有能力同学）</h3><h4 id="1、折半插入排序"><a href="#1、折半插入排序" class="headerlink" title="1、折半插入排序"></a>1、折半插入排序</h4><p>例如：数组{12,2,6,1,5}</p><p>第一次：在[0,1)之间找插入2的位置&#x3D;&#x3D;&gt;left &#x3D; [0] &#x3D;&#x3D;&gt; {2,12,6,1,5}</p><p>第二次：在[0,2)之间找插入6的位置&#x3D;&#x3D;&gt;left &#x3D; [1] &#x3D;&#x3D;&gt; {2,6,12,1,5}</p><p>第三次：在[0,3)之间找插入1的位置&#x3D;&#x3D;&gt;left &#x3D; [0] &#x3D;&#x3D;&gt;{1,2,6,12,5}</p><p>第四次：在[0,4)之间找插入5的位置&#x3D;&#x3D;&gt;left &#x3D; [2] &#x3D;&#x3D;&gt;{1,2,5,6,12}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">12</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    sort(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">        <span class="comment">//找到[0,i)之间插入arr[i]的位置</span></span><br><span class="line">        <span class="comment">//使用二分查找法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=i-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;=arr[mid])&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//在[0,i)插入arr[i]</span></span><br><span class="line">        <span class="keyword">if</span>(left &lt; i)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            System.arraycopy(arr,left,arr,left+<span class="number">1</span>,i-left);</span><br><span class="line">            arr[left] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E6%8A%98%E5%8D%8A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90.png"></p><h4 id="2、快速排序"><a href="#2、快速排序" class="headerlink" title="2、快速排序"></a>2、快速排序</h4><p>例如：数组{5, 2, 6, 12, 1,7,9}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    sort(arr,<span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将[start+1,end]之间的元素分为两拨，左边的所有元素比arr[start]小，右边的所有元素比arr[start]大</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &lt; end)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> start+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> end;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="comment">//从左往右，从[start+1]开始找比arr[start]大的数arr[left]，让它与arr[right]交换</span></span><br><span class="line">            <span class="comment">//当arr[left]大于arr[start]就停止循环，因为此时找到了比arr[start]大的数arr[left]</span></span><br><span class="line">            <span class="keyword">while</span>(arr[left]&lt;=arr[start] &amp;&amp; left&lt;=end)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//从右往左，从[end]开始找比比arr[start]小的数arr[right]，让它与arr[left]交换</span></span><br><span class="line">           <span class="comment">//当arr[right]小于arr[start]就停止循环，因为此时找到了比arr[start]小的数arr[right]</span></span><br><span class="line">            <span class="keyword">while</span>(arr[right]&gt;=arr[start] &amp;&amp; right&gt;start)&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">                arr[left] = arr[right];</span><br><span class="line">                arr[right] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//经过上面的while，//如果right&gt;start+1，那么说明在[start+1,end]之间的数分为两拨</span></span><br><span class="line">        <span class="comment">//[start+1,right]之间的是比arr[start]小的数</span></span><br><span class="line">        <span class="comment">//[right,end]之间的是比arr[start]大的数</span></span><br><span class="line">        <span class="comment">//交换arr[start]与arr[right]</span></span><br><span class="line">        <span class="keyword">if</span>(right &gt; start + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            arr[start] = arr[right];</span><br><span class="line">            arr[right] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时[start,right-1]之间都是比arr[start]小的数据了，但是它们还未排序</span></span><br><span class="line">        <span class="comment">//此时[right+1,end]之间都是比arr[start]大的数据了，但是它们还未排序</span></span><br><span class="line">        <span class="comment">//所以需要分别对[start,right-1]、[right+1,end]之间元素重复上面的操作继续排序</span></span><br><span class="line">        sort(arr,start,right-<span class="number">1</span>);</span><br><span class="line">        sort(arr,right+<span class="number">1</span>,end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第1次调用sort(arr,0,6)<br>交换arr[left&#x3D;2]与arr[right&#x3D;4]：[5, 2, 1, 12, 6, 7, 9]<br>交换基准位置的元素与分界位置的元素：arr[start&#x3D;0]与arr[right&#x3D;2]：[1, 2, 5, 12, 6, 7, 9]<br>第2次调用sort(arr,0,1)<br>第3次调用sort(arr,0,0)<br>第4次调用sort(arr,2,1)<br>第5次调用sort(arr,3,6)<br>交换基准位置的元素与分界位置的元素：arr[start&#x3D;3]与arr[right&#x3D;6]：[1, 2, 5, 9, 6, 7, 12]<br>第6次调用sort(arr,3,5)<br>交换基准位置的元素与分界位置的元素：arr[start&#x3D;3]与arr[right&#x3D;5]：[1, 2, 5, 7, 6, 9, 12]<br>第7次调用sort(arr,3,4)<br>第8次调用sort(arr,3,3)<br>第9次调用sort(arr,5,4)<br>第10次调用sort(arr,6,5)<br>第11次调用sort(arr,7,6)</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90.png"></p><h2 id="10-5-字符串"><a href="#10-5-字符串" class="headerlink" title="10.5 字符串"></a>10.5 字符串</h2><p><code>java.lang.String</code> 类代表字符串。Java程序中所有的字符串文字（例如<code>&quot;abc&quot;</code> ）都可以被看作是实现此类的实例。字符串是常量；它们的值在创建之后不能更改。字符串缓冲区支持可变的字符串。因为 String 对象是不可变的，所以可以共享。</p><p><code>String</code> 类包括的方法可用于检查序列的单个字符、比较字符串、搜索字符串、提取子字符串、创建字符串副本并将所有字符全部转换为大写或小写。 </p><p>Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持（toString()方法）。</p><h3 id="10-5-1-字符串的特点"><a href="#10-5-1-字符串的特点" class="headerlink" title="10.5.1 字符串的特点"></a>10.5.1 字符串的特点</h3><p>1、字符串String类型本身是final声明的，意味着我们不能继承String。</p><p>2、字符串的对象也是不可变对象，意味着一旦进行修改，就会产生新对象</p><blockquote><p>我们修改了字符串后，如果想要获得新的内容，必须重新接受。</p><p>如果程序中涉及到大量的字符串的修改操作，那么此时的时空消耗比较高。可能需要考虑使用StringBuilder或StringBuffer的可变字符序列。</p></blockquote><p>3、String对象内部是用字符数组进行保存的</p><blockquote><p>JDK1.9之前有一个char[] value数组，JDK1.9之后byte[]数组</p></blockquote><p><code>&quot;abc&quot;</code> 等效于 <code>char[] data=&#123; &#39;a&#39; , &#39;b&#39; , &#39;c&#39; &#125;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如： </span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">相当于： </span><br><span class="line"><span class="type">char</span> data[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;     </span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data);</span><br><span class="line"><span class="comment">// String底层是靠字符数组实现的。</span></span><br></pre></td></tr></table></figure><p>4、String类中这个char[] values数组也是final修饰的，意味着这个数组不可变，然后它是private修饰，外部不能直接操作它，String类型提供的所有的方法都是用新对象来表示修改后内容的，所以保证了String对象的不可变。</p><p>5、就因为字符串对象设计为不可变，那么所以字符串有常量池来保存很多常量对象</p><p>常量池在方法区。</p><p>如果细致的划分：</p><p>（1）JDK1.6及其之前：方法区</p><p>（2）JDK1.7：堆</p><p>（3）JDK1.8：元空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2);</span><br><span class="line"><span class="comment">// 内存中只有一个&quot;abc&quot;对象被创建，同时被s1和s2共享。</span></span><br></pre></td></tr></table></figure><h3 id="10-5-2-构造字符串对象"><a href="#10-5-2-构造字符串对象" class="headerlink" title="10.5.2 构造字符串对象"></a>10.5.2 构造字符串对象</h3><h4 id="1、使用构造方法"><a href="#1、使用构造方法" class="headerlink" title="1、使用构造方法"></a>1、使用构造方法</h4><ul><li><code>public String() </code> ：初始化新创建的 String对象，以使其表示空字符序列。</li><li><code> String(String original)</code>： 初始化一个新创建的 <code>String</code> 对象，使其表示一个与参数相同的字符序列；换句话说，新创建的字符串是该参数字符串的副本。</li><li><code>public String(char[] value) </code> ：通过当前参数中的字符数组来构造新的String。</li><li><code>public String(char[] value,int offset, int count) </code> ：通过字符数组的一部分来构造新的String。</li><li><code>public String(byte[] bytes) </code> ：通过使用平台的默认字符集解码当前参数中的字节数组来构造新的String。</li><li><code>public String(byte[] bytes,String charsetName) </code> ：通过使用指定的字符集解码当前参数中的字节数组来构造新的String。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串常量对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参构造</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>（）；</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建&quot;hello&quot;字符串常量的副本</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过字符数组构造</span></span><br><span class="line"><span class="type">char</span> chars[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;     </span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过字节数组构造</span></span><br><span class="line"><span class="type">byte</span> bytes[] = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span> &#125;;     </span><br><span class="line"><span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line"><span class="type">String</span> <span class="variable">str6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="2、使用静态方法"><a href="#2、使用静态方法" class="headerlink" title="2、使用静态方法"></a>2、使用静态方法</h4><ul><li>static String copyValueOf(char[] data)： 返回指定数组中表示该字符序列的 String</li><li>static String copyValueOf(char[] data, int offset, int count)：返回指定数组中表示该字符序列的 String</li><li>static String valueOf(char[] data)  ： 返回指定数组中表示该字符序列的 String</li><li>static String valueOf(char[] data, int offset, int count) ： 返回指定数组中表示该字符序列的 String</li><li>static String valueOf(xx  value)：xx支持各种数据类型，返回各种数据类型的value参数的字符串表示形式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">char</span>[] data = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> String.copyValueOf(data);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> String.copyValueOf(data,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">123456</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> String.valueOf(num);</span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s2);</span><br><span class="line">System.out.println(s3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、使用””"><a href="#3、使用””" class="headerlink" title="3、使用””+"></a>3、使用””+</h4><p>任意数据类型与”字符串”进行拼接，结果都是字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">123456</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> num + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> stu + <span class="string">&quot;&quot;</span>;<span class="comment">//自动调用对象的toString()，然后与&quot;&quot;进行拼接</span></span><br><span class="line">System.out.println(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-5-3-字符串的对象的个数"><a href="#10-5-3-字符串的对象的个数" class="headerlink" title="10.5.3 字符串的对象的个数"></a>10.5.3 字符串的对象的个数</h3><p>1、字符串常量对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;<span class="comment">//1个，在常量池中</span></span><br></pre></td></tr></table></figure><p>2、字符串的普通对象和常量对象一起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//str3首先指向堆中的一个字符串对象，然后堆中字符串的value数组指向常量池中常量对象的value数组</span></span><br></pre></td></tr></table></figure><h3 id="10-5-4-字符串对象的内存分析"><a href="#10-5-4-字符串对象的内存分析" class="headerlink" title="10.5.4 字符串对象的内存分析"></a>10.5.4 字符串对象的内存分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">String s;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>[] arr = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>[] arr = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr,<span class="number">0</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562945799274.png" alt="1562945799274"></p><h3 id="10-5-5-字符串拼接问题"><a href="#10-5-5-字符串拼接问题" class="headerlink" title="10.5.5 字符串拼接问题"></a>10.5.5 字符串拼接问题</h3><h4 id="1、拼接结果的存储和比较问题"><a href="#1、拼接结果的存储和比较问题" class="headerlink" title="1、拼接结果的存储和比较问题"></a>1、拼接结果的存储和比较问题</h4><p>原则：</p><p>（1）常量+常量：结果是常量池</p><p>（2）常量与变量 或 变量与变量：结果是堆</p><p>（3）拼接后调用intern方法：结果在常量池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> (s1 + <span class="string">&quot;world&quot;</span>).intern();<span class="comment">//把拼接的结果放到常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> (s1 + s2).intern();</span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">System.out.println(s3 == s5);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s1 + <span class="string">&quot;world&quot;</span>;<span class="comment">//s4字符串内容也helloworld，s1是常量，&quot;world&quot;常量，常量+ 常量 结果在常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s1 + s2;<span class="comment">//s5字符串内容也helloworld，s1和s2都是常量，常量+ 常量 结果在常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;world&quot;</span>;<span class="comment">//常量+ 常量 结果在常量池中，因为编译期间就可以确定结果</span></span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">System.out.println(s3 == s5);<span class="comment">//true</span></span><br><span class="line">System.out.println(s3 == s6);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s1 + <span class="string">&quot;world&quot;</span>;<span class="comment">//s4字符串内容也helloworld，s1是变量，&quot;world&quot;常量，变量 + 常量的结果在堆中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s1 + s2;<span class="comment">//s5字符串内容也helloworld，s1和s2都是变量，变量 + 变量的结果在堆中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;world&quot;</span>;<span class="comment">//常量+ 常量 结果在常量池中，因为编译期间就可以确定结果</span></span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s5);<span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s6);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562946547647.png" alt="1562946547647"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562946558630.png" alt="1562946558630"></p><h4 id="2、拼接效率问题"><a href="#2、拼接效率问题" class="headerlink" title="2、拼接效率问题"></a>2、拼接效率问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">str += i;  </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562946595771.png" alt="1562946595771"></p><p>不过现在的JDK版本，都会使用可变字符序列对如上代码进行优化，我们反编译查看字节码：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -c TestString.class</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563106868437.png" alt="1563106868437"></p><h4 id="3、两种拼接"><a href="#3、两种拼接" class="headerlink" title="3、两种拼接"></a>3、两种拼接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span><span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>.concat(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>+<span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(str3 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str3 == str5);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>concat方法拼接，哪怕是两个常量对象拼接，结果也是在堆。</p></blockquote><h3 id="10-5-6-字符串对象的比较"><a href="#10-5-6-字符串对象的比较" class="headerlink" title="10.5.6  字符串对象的比较"></a>10.5.6  字符串对象的比较</h3><p>1、&#x3D;&#x3D;：比较是对象的地址</p><blockquote><p>只有两个字符串变量都是指向字符串的常量对象时，才会返回true</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(str1 == str2);<span class="comment">//true</span></span><br><span class="line">    </span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(str1 == str4); <span class="comment">//false</span></span><br><span class="line">System.out.println(str3 == str4); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>2、equals：比较是对象的内容，因为String类型重写equals，区分大小写</p><p>只要两个字符串的字符内容相同，就会返回true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(str1.equals(str2));<span class="comment">//true</span></span><br><span class="line">    </span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(str1.equals(str3));<span class="comment">//true</span></span><br><span class="line">System.out.println(str3.equals(str4));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>3、equalsIgnoreCase：比较的是对象的内容，不区分大小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;HELLO&quot;</span>);</span><br><span class="line">System.out.println(str1.equalsIgnoreCase(strs)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>4、compareTo：String类型重写了Comparable接口的抽象方法，自然排序，按照字符的Unicode编码值进行比较大小的，严格区分大小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">str1.compareTo(str2) <span class="comment">//小于0的值</span></span><br></pre></td></tr></table></figure><p>5、compareToIgnoreCase：不区分大小写，其他按照字符的Unicode编码值进行比较大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;HELLO&quot;</span>);</span><br><span class="line">str1.compareToIgnoreCase(str2)  <span class="comment">//等于0</span></span><br></pre></td></tr></table></figure><h3 id="10-5-7-空字符的比较"><a href="#10-5-7-空字符的比较" class="headerlink" title="10.5.7 空字符的比较"></a>10.5.7 空字符的比较</h3><p>1、哪些是空字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>空字符串：长度为0</p><p>2、如何判断某个字符串是否是空字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&quot;&quot;</span>.equals(str))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(str!=<span class="literal">null</span>  &amp;&amp; str.isEmpty())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(str!=<span class="literal">null</span> &amp;&amp; str.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(str!=<span class="literal">null</span> &amp;&amp; str.length()==<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="10-5-8-字符串的常用方法"><a href="#10-5-8-字符串的常用方法" class="headerlink" title="10.5.8 字符串的常用方法"></a>10.5.8 字符串的常用方法</h3><h4 id="1、系列1"><a href="#1、系列1" class="headerlink" title="1、系列1"></a>1、系列1</h4><p>（1）boolean isEmpty()：字符串是否为空</p><p>（2）int length()：返回字符串的长度</p><p>（3）String concat(xx)：拼接，等价于+</p><p>（4）boolean equals(Object obj)：比较字符串是否相等，区分大小写</p><p>（5）boolean equalsIgnoreCase(Object obj)：比较字符串是否相等，区分大小写</p><p>（6）int compareTo(String other)：比较字符串大小，区分大小写，按照Unicode编码值比较大小</p><p>（7）int compareToIgnoreCase(String other)：比较字符串大小，不区分大小写</p><p>（8）String toLowerCase()：将字符串中大写字母转为小写</p><p>（9）String toUpperCase()：将字符串中小写字母转为大写</p><p>（10）String trim()：去掉字符串前后空白符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//将用户输入的单词全部转为小写，如果用户没有输入单词，重新输入</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">String word;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;请输入单词：&quot;</span>);</span><br><span class="line">word = input.nextLine();</span><br><span class="line"><span class="keyword">if</span>(word.trim().length()!=<span class="number">0</span>)&#123;</span><br><span class="line">word = word.toLowerCase();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//随机生成验证码，验证码由0-9，A-Z,a-z的字符组成</span></span><br><span class="line"><span class="type">char</span>[] array = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">26</span>*<span class="number">2</span>+<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">array[i] = (<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>,j=<span class="number">0</span>; i &lt; <span class="number">10</span>+<span class="number">26</span>; i++,j++) &#123;</span><br><span class="line">array[i] = (<span class="type">char</span>)(<span class="string">&#x27;A&#x27;</span> + j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>+<span class="number">26</span>,j=<span class="number">0</span>; i &lt; array.length; i++,j++) &#123;</span><br><span class="line">array[i] = (<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span> + j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">code += array[rand.nextInt(array.length)];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;验证码：&quot;</span> + code);</span><br><span class="line"><span class="comment">//将用户输入的单词全部转为小写，如果用户没有输入单词，重新输入</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;请输入验证码：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">inputCode</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!code.equalsIgnoreCase(inputCode))&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;验证码输入不正确&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、系列2：查找"><a href="#2、系列2：查找" class="headerlink" title="2、系列2：查找"></a>2、系列2：查找</h4><p>（11）boolean contains(xx)：是否包含xx</p><p>（12）int indexOf(xx)：从前往后找当前字符串中xx，即如果有返回第一次出现的下标，要是没有返回-1</p><p>（13）int lastIndexOf(xx)：从后往前找当前字符串中xx，即如果有返回最后一次出现的下标，要是没有返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;尚硅谷是一家靠谱的培训机构，尚硅谷可以说是IT培训的小清华，JavaEE是尚硅谷的当家学科，尚硅谷的大数据培训是行业独角兽。尚硅谷的前端和运维专业一样独领风骚。&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;是否包含清华：&quot;</span> + str.contains(<span class="string">&quot;清华&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;培训出现的第一次下标：&quot;</span> + str.indexOf(<span class="string">&quot;培训&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;培训出现的最后一次下标：&quot;</span> + str.lastIndexOf(<span class="string">&quot;培训&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、系列3：字符串截取"><a href="#3、系列3：字符串截取" class="headerlink" title="3、系列3：字符串截取"></a>3、系列3：字符串截取</h4><p>（14）String substring(int beginIndex) ：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。 </p><p>（15）String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;helloworldjavaatguigu&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sub1</span> <span class="operator">=</span> str.substring(<span class="number">5</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">sub2</span> <span class="operator">=</span> str.substring(<span class="number">5</span>,<span class="number">10</span>);</span><br><span class="line">System.out.println(sub1);</span><br><span class="line">System.out.println(sub2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;快速学习Java的秘诀.dat&quot;</span>;</span><br><span class="line"><span class="comment">//截取文件名</span></span><br><span class="line">System.out.println(<span class="string">&quot;文件名：&quot;</span> + fileName.substring(<span class="number">0</span>,fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>)));</span><br><span class="line"><span class="comment">//截取后缀名</span></span><br><span class="line">System.out.println(<span class="string">&quot;后缀名：&quot;</span> + fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、系列4：和字符相关"><a href="#4、系列4：和字符相关" class="headerlink" title="4、系列4：和字符相关"></a>4、系列4：和字符相关</h4><p>（16）char charAt(index)：返回[index]位置的字符</p><p>（17）char[] toCharArray()： 将此字符串转换为一个新的字符数组返回</p><p>（18）String(char[] value)：返回指定数组中表示该字符序列的 String。 </p><p>（19）String(char[] value, int offset, int count)：返回指定数组中表示该字符序列的 String。</p><p>（20）static String copyValueOf(char[] data)： 返回指定数组中表示该字符序列的 String</p><p>（21）static String copyValueOf(char[] data, int offset, int count)：返回指定数组中表示该字符序列的 String</p><p>（22）static String valueOf(char[] data, int offset, int count) ： 返回指定数组中表示该字符序列的 String</p><p>（23）static String valueOf(char[] data)  ：返回指定数组中表示该字符序列的 String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//将字符串中的字符按照大小顺序排列</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;helloworldjavaatguigu&quot;</span>;</span><br><span class="line"><span class="type">char</span>[] array = str.toCharArray();</span><br><span class="line">Arrays.sort(array);</span><br><span class="line">str = <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//将首字母转为大写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">str = Character.toUpperCase(str.charAt(<span class="number">0</span>))+str.substring(<span class="number">1</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、系列5：编码与解码"><a href="#5、系列5：编码与解码" class="headerlink" title="5、系列5：编码与解码"></a>5、系列5：编码与解码</h4><p>（24）byte[] getBytes()：编码，把字符串变为字节数组，按照平台默认的字符编码进行编码</p><p>​byte[] getBytes(字符编码方式)：按照指定的编码方式进行编码</p><p>（25）new String(byte[] ) 或 new String(byte[], int, int)：解码，按照平台默认的字符编码进行解码</p><p>​           new String(byte[]，字符编码方式 ) 或 new String(byte[], int, int，字符编码方式)：解码，按照指定的编码方式进行解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * GBK，UTF-8，ISO8859-1所有的字符编码都向下兼容ASCII码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">System.out.println(str.getBytes(<span class="string">&quot;ISO8859-1&quot;</span>).length);<span class="comment">// 2</span></span><br><span class="line"><span class="comment">// ISO8859-1把所有的字符都当做一个byte处理，处理不了多个字节</span></span><br><span class="line">System.out.println(str.getBytes(<span class="string">&quot;GBK&quot;</span>).length);<span class="comment">// 4 每一个中文都是对应2个字节</span></span><br><span class="line">System.out.println(str.getBytes(<span class="string">&quot;UTF-8&quot;</span>).length);<span class="comment">// 6 常规的中文都是3个字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 不乱码：（1）保证编码与解码的字符集名称一样（2）不缺字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(str.getBytes(<span class="string">&quot;ISO8859-1&quot;</span>), <span class="string">&quot;ISO8859-1&quot;</span>));<span class="comment">// 乱码</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(str.getBytes(<span class="string">&quot;GBK&quot;</span>), <span class="string">&quot;GBK&quot;</span>));<span class="comment">// 中国</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(str.getBytes(<span class="string">&quot;UTF-8&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>));<span class="comment">// 中国</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="字符编码发展"><a href="#字符编码发展" class="headerlink" title="字符编码发展"></a>字符编码发展</h5><h5 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a><strong>ASCII码</strong></h5><p>计算机一开始发明的时候是用来解决数字计算的问题，后来人们发现，计算机还可以做更多的事，例如文本处理。但由于计算机只识“数”，因此人们必须告诉计算机哪个数字来代表哪个特定字符，例如65代表字母‘A’，66代表字母‘B’，以此类推。但是计算机之间字符-数字的对应关系必须得一致，否则就会造成同一段数字在不同计算机上显示出来的字符不一样。因此美国国家标准协会ANSI制定了一个标准，规定了常用字符的集合以及每个字符对应的编号，这就是ASCII字符集（Character Set），也称ASCII码。</p><p>那时候的字符编解码系统非常简单，就是简单的查表过程。其中：</p><ul><li>0～31及127(共33个)是控制字符或通信专用字符（其余为可显示字符），如控制符：LF（换行）、CR（回车）、FF（换页）、DEL（删除）、BS（退格)</li><li>32～126(共95个)是字符(32是空格），其中48～57为0到9十个阿拉伯数字。</li><li>65～90为26个大写英文字母，97～122号为26个小写英文字母，其余为一些标点符号、运算符号等。</li></ul><h5 id="OEM字符集的衍生"><a href="#OEM字符集的衍生" class="headerlink" title="OEM字符集的衍生"></a><strong>OEM字符集的衍生</strong></h5><p>当计算机开始发展起来的时候，人们逐渐发现，ASCII字符集里那可怜的128个字符已经不能再满足他们的需求了。人们就在想，一个字节能够表示的数字（编号）有256个，而ASCII字符只用到了0x00~0x7F，也就是占用了前128个，后面128个数字不用白不用，因此很多人打起了后面这128个数字的主意。可是问题在于，很多人同时有这样的想法，但是大家对于0x80-0xFF这后面的128个数字分别对应什么样的字符，却有各自的想法。这就导致了当时销往世界各地的机器上出现了大量各式各样的OEM字符集。不同的OEM字符集导致人们无法跨机器交流各种文档。例如职员甲发了一封简历résumés给职员乙，结果职员乙看到的却是r?sum?s，因为é字符在职员甲机器上的OEM字符集中对应的字节是0x82，而在职员乙的机器上，由于使用的OEM字符集不同，对0x82字节解码后得到的字符却是?。</p><h5 id="多字节字符集（MBCS）和中文字符集"><a href="#多字节字符集（MBCS）和中文字符集" class="headerlink" title="多字节字符集（MBCS）和中文字符集"></a><strong>多字节字符集（MBCS）和中文字符集</strong></h5><p>上面我们提到的字符集都是基于单字节编码，也就是说，一个字节翻译成一个字符。这对于拉丁语系国家来说可能没有什么问题，因为他们通过扩展第8个比特，就可以得到256个字符了，足够用了。但是对于亚洲国家来说，256个字符是远远不够用的。因此这些国家的人为了用上电脑，又要保持和ASCII字符集的兼容，就发明了多字节编码方式，相应的字符集就称为多字节字符集（Muilti-Bytes Charecter Set）。例如中国使用的就是双字节字符集编码。</p><p>例如目前最常用的中文字符集GB2312，涵盖了所有简体字符以及一部分其他字符；GBK（K代表扩展的意思）则在GB2312的基础上加入了对繁体字符等其他非简体字符。这两个字符集的字符都是使用1-2个字节来表示。Windows系统采用936代码页来实现对GBK字符集的编解码。在解析字节流的时候，如果遇到字节的最高位是0的话，那么就使用936代码页中的第1张码表进行解码，这就和单字节字符集的编解码方式一致了。如果遇到字节的最高位是1的话，那么就表示需要两个字节值才能对应一个字符。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563199557136.png" alt="1563199557136"></p><h5 id="ANSI标准、国家标准、ISO标准"><a href="#ANSI标准、国家标准、ISO标准" class="headerlink" title="ANSI标准、国家标准、ISO标准"></a><strong>ANSI标准、国家标准、ISO标准</strong></h5><p>不同ASCII衍生字符集的出现，让文档交流变得非常困难，因此各种组织都陆续进行了标准化流程。例如美国ANSI组织制定了ANSI标准字符编码（注意，我们现在通常说到ANSI编码，通常指的是平台的默认编码，例如英文操作系统中是ISO-8859-1，中文系统是GBK），ISO组织制定的各种ISO标准字符编码，还有各国也会制定一些国家标准字符集，例如中国的GBK，GB2312和GB18030。</p><p>操作系统在发布的时候，通常会往机器里预装这些标准的字符集还有平台专用的字符集，这样只要你的文档是使用标准字符集编写的，通用性就比较高了。例如你用GB2312字符集编写的文档，在中国大陆内的任何机器上都能正确显示。同时，我们也可以在一台机器上阅读多个国家不同语言的文档了，前提是本机必须安装该文档使用的字符集。</p><h5 id="Unicode的出现"><a href="#Unicode的出现" class="headerlink" title="Unicode的出现"></a><strong>Unicode的出现</strong></h5><p>虽然通过使用不同字符集，我们可以在一台机器上查阅不同语言的文档，但是我们仍然<strong>无法解决一个问题：如果一份文档中含有不同国家的不同语言的字符，那么无法在一份文档中显示所有字符</strong>。为了解决这个问题，我们需要一个全人类达成共识的巨大的字符集，这就是Unicode字符集。</p><p>Unicode字符集涵盖了目前人类使用的所有字符，并为每个字符进行统一编号，分配唯一的字符码（Code Point）。Unicode字符集将所有字符按照使用上的频繁度划分为17个层面（Plane），每个层面上有216&#x3D;65536个字符码空间。其中第0个层面BMP，基本涵盖了当今世界用到的所有字符。其他的层面要么是用来表示一些远古时期的文字，要么是留作扩展。我们平常用到的Unicode字符，一般都是位于BMP层面上的。目前Unicode字符集中尚有大量字符空间未使用。</p><p>Unicode同样也不完美，这里就有三个的问题，一个是，我们已经知道，英文字母只用一个字节表示就够了，第二个问题是如何才能区别Unicode和ASCII？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？第三个，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，不够表示所有字符。Unicode在很长一段时间内无法推广，直到互联网的出现，为解决Unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。UTF-8就是在互联网上使用最广的一种Unicode的实现方式，这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。</p><p>UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号。从unicode到uft-8并不是直接的对应，而是要过一些算法和规则来转换（<strong>即Uncidoe字符集≠UTF-8编码方式</strong>）。</p><p>并不是直接的对应，而是要过一些算法和规则来转换（<strong>即Uncidoe字符集≠UTF-8编码方式</strong>）。</p><p>Unicode符号范围         | UTF-8编码方式</p><p>(十六进制)                      |        （二进制）</p><p>—————————————————————–</p><p>0000 0000-0000 007F | 0xxxxxxx（兼容原来的ASCII）</p><p>0000 0080-0000 07FF | 110xxxxx 10xxxxxx</p><p>0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</p><p>0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563199860263.png" alt="1563199860263"></p><p>因此，Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-16和UTF-8。</p><p>早期字符编码、字符集和代码页等概念都是表达同一个意思。例如GB2312字符集、GB2312编码，936代码页，实际上说的是同个东西。</p><p>但是对于Unicode则不同，Unicode字符集只是定义了字符的集合和唯一编号，Unicode编码，则是对UTF-8、UCS-2&#x2F;UTF-16等具体编码方案的统称而已，并不是具体的编码方案。所以当需要用到字符编码的时候，你可以写gb2312，codepage936，utf-8，utf-16，但请不要写Unicode。</p><h4 id="6、系列6：开头与结尾"><a href="#6、系列6：开头与结尾" class="headerlink" title="6、系列6：开头与结尾"></a>6、系列6：开头与结尾</h4><p>（26）boolean startsWith(xx)：是否以xx开头</p><p>（27）boolean endsWith(xx)：是否以xx结尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">System.out.println(name.startsWith(<span class="string">&quot;张&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="string">&quot;Hello.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(file.endsWith(<span class="string">&quot;.java&quot;</span>))&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Java源文件&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(file.endsWith(<span class="string">&quot;.class&quot;</span>))&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Java字节码文件&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;其他文件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、系列8：替换"><a href="#8、系列8：替换" class="headerlink" title="8、系列8：替换"></a>8、系列8：替换</h4><p>（29）String replace(xx,xx)：不支持正则</p><p>（30）String replaceFirst(正则，value)：替换第一个匹配部分</p><p>（31）String repalceAll(正则， value)：替换所有匹配部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello244world.java;887&quot;</span>;</span><br><span class="line"><span class="comment">//把其中的非字母去掉</span></span><br><span class="line">str = str.replaceAll(<span class="string">&quot;[^a-zA-Z]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、系列9：拆分"><a href="#9、系列9：拆分" class="headerlink" title="9、系列9：拆分"></a>9、系列9：拆分</h4><p>（32）String[] split(正则)：按照某种规则进行拆分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;张三.23|李四.24|王五.25&quot;</span>;</span><br><span class="line"><span class="comment">//|在正则中是有特殊意义，我这里要把它当做普通的|</span></span><br><span class="line">String[] all = str.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//转成一个一个学生对象</span></span><br><span class="line">Student[] students = <span class="keyword">new</span> <span class="title class_">Student</span>[all.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line"><span class="comment">//.在正则中是特殊意义，我这里想要表示普通的.</span></span><br><span class="line">String[] strings = all[i].split(<span class="string">&quot;\\.&quot;</span>);<span class="comment">//张三,  23</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> strings[<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(strings[<span class="number">1</span>]);</span><br><span class="line">students[i] = <span class="keyword">new</span> <span class="title class_">Student</span>(name,age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line">System.out.println(students[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;1Hello2World3java4atguigu5&quot;</span>;</span><br><span class="line">str = str.replaceAll(<span class="string">&quot;^\\d|\\d$&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">String[] all = str.split(<span class="string">&quot;\\d&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; all.length; i++) &#123;</span><br><span class="line">System.out.println(all[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;1Hello2World3java4atguigu&quot;</span>;</span><br><span class="line">str = str.replaceFirst(<span class="string">&quot;\\d&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">String[] all = str.split(<span class="string">&quot;\\d&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; all.length; i++) &#123;</span><br><span class="line">System.out.println(all[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World java atguigu&quot;</span>;</span><br><span class="line">String[] all = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; all.length; i++) &#123;</span><br><span class="line">System.out.println(all[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-6-可变字符序列"><a href="#10-6-可变字符序列" class="headerlink" title="10.6 可变字符序列"></a>10.6 可变字符序列</h2><h3 id="10-6-1-String与可变字符序列的区别"><a href="#10-6-1-String与可变字符序列的区别" class="headerlink" title="10.6.1 String与可变字符序列的区别"></a>10.6.1 String与可变字符序列的区别</h3><p>因为String对象是不可变对象，虽然可以共享常量对象，但是对于频繁字符串的修改和拼接操作，效率极低。因此，JDK又在java.lang包提供了可变字符序列StringBuilder和StringBuffer类型。</p><p>StringBuffer：老的，线程安全的（因为它的方法有synchronized修饰）</p><p>StringBuilder：线程不安全的</p><h3 id="10-6-2-StringBuilder、StringBuffer的API"><a href="#10-6-2-StringBuilder、StringBuffer的API" class="headerlink" title="10.6.2 StringBuilder、StringBuffer的API"></a>10.6.2 StringBuilder、StringBuffer的API</h3><p>常用的API，StringBuilder、StringBuffer的API是完全一致的</p><p>（1）StringBuffer append(xx)：拼接，追加</p><p>（2）StringBuffer insert(int index, xx)：在[index]位置插入xx</p><p>（3）StringBuffer delete(int start, int end)：删除[start,end)之间字符</p><p>StringBuffer deleteCharAt(int index)：删除[index]位置字符</p><p>（4）void setCharAt(int index, xx)：替换[index]位置字符</p><p>（5）StringBuffer reverse()：反转</p><p>（6）void setLength(int newLength) ：设置当前字符序列长度为newLength</p><p>（7）StringBuffer replace(int start, int end, String str)：替换[start,end)范围的字符序列为str</p><p>（8）int indexOf(String str)：在当前字符序列中查询str的第一次出现下标</p><p>​          int indexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的第一次出现下标</p><p>​         int lastIndexOf(String str)：在当前字符序列中查询str的最后一次出现下标</p><p>​         int lastIndexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的最后一次出现下标</p><p>（9）String substring(int start)：截取当前字符序列[start,最后]</p><p>（10）String substring(int start, int end)：截取当前字符序列[start,end)</p><p>（11）String toString()：返回此序列中数据的字符串表示形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">s.setLength(<span class="number">30</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">s.setCharAt(<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">s.reverse();</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">s.delete(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">s.deleteCharAt(<span class="number">4</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">s.insert(<span class="number">5</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">s.insert(<span class="number">5</span>, <span class="string">&quot;chailinyan&quot;</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">s.append(<span class="string">&quot;hello&quot;</span>).append(<span class="literal">true</span>).append(<span class="string">&#x27;a&#x27;</span>).append(<span class="number">12</span>).append(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line">System.out.println(s.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-6-3-效率测试"><a href="#10-6-3-效率测试" class="headerlink" title="10.6.3 效率测试"></a>10.6.3 效率测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Runtime：JVM运行时环境</span></span><br><span class="line"><span class="comment"> * Runtime是一个单例的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTime</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//testStringBuilder();</span></span><br><span class="line">testStringBuffer();</span><br><span class="line"><span class="comment">//testString();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)&#123;</span><br><span class="line">s += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;String拼接+用时：&quot;</span>+(end-start));<span class="comment">//444</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">memory</span> <span class="operator">=</span> Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">        System.out.println(<span class="string">&quot;String拼接+memory占用内存: &quot;</span> + memory);<span class="comment">//53185144字节</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testStringBuilder</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)&#123;</span><br><span class="line">s.append(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;StringBuilder拼接+用时：&quot;</span>+(end-start));<span class="comment">//4</span></span><br><span class="line"><span class="type">long</span> <span class="variable">memory</span> <span class="operator">=</span> Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">        System.out.println(<span class="string">&quot;StringBuilder拼接+memory占用内存: &quot;</span> + memory);<span class="comment">//1950488</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testStringBuffer</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)&#123;</span><br><span class="line">s.append(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;StringBuffer拼接+用时：&quot;</span>+(end-start));<span class="comment">//7</span></span><br><span class="line"><span class="type">long</span> <span class="variable">memory</span> <span class="operator">=</span> Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">        System.out.println(<span class="string">&quot;StringBuffer拼接+memory占用内存: &quot;</span> + memory);<span class="comment">//1950488</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-7-字符串特点相关面试题"><a href="#10-7-字符串特点相关面试题" class="headerlink" title="10.7 字符串特点相关面试题"></a>10.7 字符串特点相关面试题</h2><h3 id="1、面试题：字符串的length和数组的length有什么不同？"><a href="#1、面试题：字符串的length和数组的length有什么不同？" class="headerlink" title="1、面试题：字符串的length和数组的length有什么不同？"></a>1、面试题：字符串的length和数组的length有什么不同？</h3><p>字符串的length()，数组的length属性</p><h3 id="2、字符串对象不可变"><a href="#2、字符串对象不可变" class="headerlink" title="2、字符串对象不可变"></a>2、字符串对象不可变</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TEXT</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> num;</span><br><span class="line"><span class="keyword">public</span> String str;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TEXT</span><span class="params">(<span class="type">int</span> num, String str)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.num = num;</span><br><span class="line"><span class="built_in">this</span>.str = str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class4</span> &#123;</span><br><span class="line">    <span class="comment">//tIn是传对象的地址，修改形参的属性，会影响实参</span></span><br><span class="line">    <span class="comment">//intIn是传数据，基本数据类型的形参修改和实参无关</span></span><br><span class="line">    <span class="comment">//Integer和String对象不可变</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(TEXT tIn, <span class="type">int</span> intIn, Integer integerIn, String strIn)</span>&#123;</span><br><span class="line">tIn.num =<span class="number">200</span>;</span><br><span class="line">tIn.str = <span class="string">&quot;bcd&quot;</span>;<span class="comment">//形参和实参指向的是同一个TEXT的对象，修改了属性，就相当于修改实参对象的属性</span></span><br><span class="line">intIn = <span class="number">200</span>;<span class="comment">//基本数据类型的形参是实参的“副本”，无论怎么修改和实参都没关系</span></span><br><span class="line">integerIn = <span class="number">200</span>;<span class="comment">//Integer对象和String对象一样都是不可变，一旦修改都是新对象，和实参无关</span></span><br><span class="line">strIn = <span class="string">&quot;bcd&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TEXT</span> <span class="variable">tIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TEXT</span>(<span class="number">100</span>, <span class="string">&quot;abc&quot;</span>);<span class="comment">//tIn.num = 100, tIn.str=&quot;abc&quot;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">intIn</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integerIn</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">strIn</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">f1(tIn,intIn,integerIn,strIn);</span><br><span class="line"></span><br><span class="line">System.out.println(tIn.num + tIn.str + intIn + integerIn + strIn);</span><br><span class="line"><span class="comment">//200 + bcd + 100 + 100 + abc</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572834610162.png" alt="1572834610162"></p><h3 id="3、字符串对象个数"><a href="#3、字符串对象个数" class="headerlink" title="3、字符串对象个数"></a>3、字符串对象个数</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572834413234.png" alt="1572834413234"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572835014847.png" alt="1572835014847"></p><h3 id="4、字符串对象比较"><a href="#4、字符串对象比较" class="headerlink" title="4、字符串对象比较"></a>4、字符串对象比较</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572834430257.png" alt="1572834430257"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572834653725.png" alt="1572834653725"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572834908977.png" alt="1572834908977"></p><h3 id="5、空字符串"><a href="#5、空字符串" class="headerlink" title="5、空字符串"></a>5、空字符串</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572834804165.png" alt="1572834804165"></p><h2 id="10-8-字符串算法相关面试题"><a href="#10-8-字符串算法相关面试题" class="headerlink" title="10.8 字符串算法相关面试题"></a>10.8 字符串算法相关面试题</h2><h3 id="1、编程题"><a href="#1、编程题" class="headerlink" title="1、编程题"></a>1、编程题</h3><p>在字符串中找出连续最长数字串，返回这个串的长度，并打印这个最长数字串。</p><p>例如：abcd12345cd125se123456789，返回9，打印出123456789</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1573715990196.png" alt="1573715990196"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExer1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcd12345cd125se123456789&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去掉最前和最后的字母</span></span><br><span class="line">str =str.replaceAll(<span class="string">&quot;^[a-zA-Z]+&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//[a-zA-Z]：表示字母范围</span></span><br><span class="line"><span class="comment">//+：一次或多次</span></span><br><span class="line">String[] strings = str.split(<span class="string">&quot;[a-zA-Z]+&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">max</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line"><span class="keyword">if</span>(string.length() &gt; max.length()) &#123;</span><br><span class="line">max = string;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;最长的数字串：&quot;</span> + max + <span class="string">&quot;，它的长度为：&quot;</span> + max.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、编程题"><a href="#2、编程题" class="headerlink" title="2、编程题"></a>2、编程题</h3><p>不能使用trim()，实现去除字符串两端的空格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span><span class="string">&quot;    he   llo   &quot;</span>;</span><br><span class="line">System.out.println(myTrim(str));</span><br><span class="line">System.out.println(myTrim2(str));</span><br><span class="line">System.out.println(myTrim3(str));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">myTrim3</span><span class="params">(String str)</span>&#123;</span><br><span class="line"><span class="comment">//利用正则表达式</span></span><br><span class="line"><span class="comment">//^表示开头    \s表示  空白符   *表示0次或多次     |表示或者    $表示结尾</span></span><br><span class="line"><span class="keyword">return</span> str.replaceAll(<span class="string">&quot;(^\\s*)|(\\s*$)&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">myTrim2</span><span class="params">(String str)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(str.startsWith(<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">str = str.replaceFirst(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(str.endsWith(<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">str = str.substring(<span class="number">0</span>, str.length()-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">myTrim</span><span class="params">(String str)</span>&#123;</span><br><span class="line"><span class="type">char</span>[] array = str.toCharArray();</span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(array[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">start++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> array.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=end;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(array[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">end--;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str.substring(start,end+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、编程题"><a href="#3、编程题" class="headerlink" title="3、编程题"></a>3、编程题</h3><p>将字符串中指定部分进行反转。比如将“abcdefgho”反转为”abfedcgho”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span><span class="string">&quot;abcdefgho&quot;</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line">System.out.println(reverse(str,<span class="number">2</span>,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从第start个字符，到第end个字符</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line"><span class="type">char</span>[] array = str.toCharArray();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start,j=end;i&lt; j;i++,j--)&#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span>array[i];</span><br><span class="line">array[i]=array[j];</span><br><span class="line">array[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从第start个字符，到第end个字符</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">left</span> <span class="operator">=</span> str.substring(<span class="number">0</span>,start);</span><br><span class="line"><span class="type">String</span> <span class="variable">middle</span> <span class="operator">=</span> str.substring(start,end+<span class="number">1</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">left</span> <span class="operator">=</span> str.substring(end+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> left+<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(middle).reverse()+right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、编程题"><a href="#4、编程题" class="headerlink" title="4、编程题"></a>4、编程题</h3><p>获取一个字符串在另一个字符串中出现的次数。</p><p>​     比如：获取”ab”在 “abababkkcadkabkebfkabkskab”中出现的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String str1=<span class="string">&quot;ab&quot;</span>;</span><br><span class="line">String str2=<span class="string">&quot;abababkkcadkabkebfkabkskab&quot;</span>;</span><br><span class="line">System.out.println(count(str1,str2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(String str1,String str2)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str2.indexOf(str1);</span><br><span class="line"><span class="keyword">if</span>(index !=-<span class="number">1</span>)&#123;</span><br><span class="line">count++;</span><br><span class="line">str2 = str2.substring(index + str1.length());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、编程题"><a href="#5、编程题" class="headerlink" title="5、编程题"></a>5、编程题</h3><p>获取两个字符串中最大相同子串。</p><p>比如：str1 &#x3D; “abcwerthelloyuiodef“;str2 &#x3D; “cvhellobnm”</p><p>   提示：将短的那个串进行长度依次递减的子串与较长的串比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String str=findMaxSubString(<span class="string">&quot;abcwerthelloyuiodef&quot;</span>,<span class="string">&quot;cvhellobnm&quot;</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提示：将短的那个串进行长度依次递减的子串与较长的串比较。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">findMaxSubString</span><span class="params">(String str1,String str2)</span>&#123;</span><br><span class="line">String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">mixStr</span> <span class="operator">=</span> str1.length()&lt;str2.length()?str1:str2;</span><br><span class="line"><span class="type">String</span> <span class="variable">maxStr</span> <span class="operator">=</span> str1.length()&gt;str2.length()?str1:str2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外循环控制从左到右的下标，内循环控制从右到左的下标</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mixStr.length();i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=mixStr.length();j&gt;=i;j--)&#123;</span><br><span class="line">String str=mixStr.substring(i, j);</span><br><span class="line"><span class="keyword">if</span>(maxStr.contains(str))&#123;</span><br><span class="line"><span class="comment">//找出最大相同子串</span></span><br><span class="line"><span class="keyword">if</span>(result.length()&lt;str.length())&#123;</span><br><span class="line">result = str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、编程题"><a href="#6、编程题" class="headerlink" title="6、编程题"></a>6、编程题</h3><p>编写代码完成如下功能</p><p>public static String replace(String text, String target, String replace){</p><p>….</p><p>}</p><p>示例：replace(“aabbccbb”, “bb”, “dd”);  结果：aaddccdd</p><p>注意：不能使用String及StringBuffer等类的replace等现成的替换API方法。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1573716569424.png" alt="1573716569424"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(replace(<span class="string">&quot;aabbcbcbb&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;dd&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replace</span><span class="params">(String text, String target, String replace)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> text.indexOf(target);</span><br><span class="line"><span class="keyword">if</span>(index!=-<span class="number">1</span>) &#123;</span><br><span class="line">text = text.substring(<span class="number">0</span>,index) + replace + text.substring(index+target.length());</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、编程题"><a href="#7、编程题" class="headerlink" title="7、编程题"></a>7、编程题</h3><p>1个字符串中可能包含a-z中的多个字符，字符也可能重复，例如：String data &#x3D; “aabcexmkduyruieiopxzkkkkasdfjxjdsds”;写一个程序，对于给定一个这样的字符串求出字符串出现次数最多的那个字母以及出现的次数（若次数最多的字母有多个，则全部求出）</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1574169374414.png" alt="1574169374414"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;aabbyolhljlhlxxmnbwyteuhfhjloiqqbhrg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统计每个字母的次数</span></span><br><span class="line"><span class="type">int</span>[] counts = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"><span class="type">char</span>[] letters = str.toCharArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; letters.length; i++) &#123;</span><br><span class="line">counts[letters[i]-<span class="number">97</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找出最多次数值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> counts[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; counts.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(max &lt; counts[i]) &#123;</span><br><span class="line">max = counts[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找出所有最多次数字母</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; counts.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(counts[i] == max) &#123;</span><br><span class="line">System.out.println((<span class="type">char</span>)(i+<span class="number">97</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果学习完集合之后，该题还可以使用Map集合写出不同的答案</p></blockquote><h3 id="8、编程题"><a href="#8、编程题" class="headerlink" title="8、编程题"></a>8、编程题</h3><p>假设日期段用两个6位长度的正整数表示，例如：(201401，201406)用来表示2014年1月到2014年6月，求两个日期段的重叠月份数。例如：输入：时间段1：201401和201406，时间段2：201403和201409，输出：4</p><p>解释：重叠月份：3,4,5,6月共4个月</p><p>情形1：两个时间段都是同一年内的，实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">date1Start</span> <span class="operator">=</span> <span class="string">&quot;201401&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">date1End</span> <span class="operator">=</span> <span class="string">&quot;201406&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">date2Start</span> <span class="operator">=</span> <span class="string">&quot;201403&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">date2End</span> <span class="operator">=</span> <span class="string">&quot;201409&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">date1StartMonth</span> <span class="operator">=</span> Integer.parseInt(date1Start.substring(<span class="number">4</span>));</span><br><span class="line"><span class="type">int</span> <span class="variable">date1EndMonth</span> <span class="operator">=</span> Integer.parseInt(date1End.substring(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">date2StartMonth</span> <span class="operator">=</span> Integer.parseInt(date2Start.substring(<span class="number">4</span>));</span><br><span class="line"><span class="type">int</span> <span class="variable">date2EndMonth</span> <span class="operator">=</span> Integer.parseInt(date2End.substring(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> date1StartMonth &gt;= date2StartMonth ? date1StartMonth : date2StartMonth;</span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> date1EndMonth &lt;= date2EndMonth ? date1EndMonth : date2EndMonth;</span><br><span class="line">       System.out.println(<span class="string">&quot;重叠月份数：&quot;</span>+(end-start+<span class="number">1</span>));</span><br><span class="line">       </span><br><span class="line">System.out.println(<span class="string">&quot;重叠的月份有：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情形2：两个时间段可能不在同一年内的，实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">date1Start</span> <span class="operator">=</span> <span class="string">&quot;201401&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">date1End</span> <span class="operator">=</span> <span class="string">&quot;201506&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">date2Start</span> <span class="operator">=</span> <span class="string">&quot;201403&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">date2End</span> <span class="operator">=</span> <span class="string">&quot;201505&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">date1</span> <span class="operator">=</span> handleDate(date1Start,date1End);</span><br><span class="line"><span class="type">String</span> <span class="variable">date2</span> <span class="operator">=</span> handleDate(date2Start,date2End);</span><br><span class="line">System.out.println(date1);</span><br><span class="line">System.out.println(date2);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sameDate</span> <span class="operator">=</span> findMaxSubString(date1,date2);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;重叠的月份数：&quot;</span> + sameDate.length()/<span class="number">6</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(sameDate)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;重叠的月份有：&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (sameDate.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">sameMonth</span> <span class="operator">=</span> sameDate.substring(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">System.out.println(sameMonth);</span><br><span class="line">sameDate = sameDate.substring(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">findMaxSubString</span><span class="params">(String str1,String str2)</span>&#123;</span><br><span class="line">String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">mixStr</span> <span class="operator">=</span> str1.length()&lt;str2.length()?str1:str2;</span><br><span class="line"><span class="type">String</span> <span class="variable">maxStr</span> <span class="operator">=</span> str1.length()&gt;str2.length()?str1:str2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外循环控制从左到右的下标，内循环控制从右到左的下标</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mixStr.length();i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=mixStr.length();j&gt;=i;j--)&#123;</span><br><span class="line">String str=mixStr.substring(i, j);</span><br><span class="line"><span class="keyword">if</span>(maxStr.contains(str))&#123;</span><br><span class="line"><span class="comment">//找出最大相同子串</span></span><br><span class="line"><span class="keyword">if</span>(result.length()&lt;str.length())&#123;</span><br><span class="line">result = str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">handleDate</span><span class="params">(String dateStart, String dateEnd)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">dateStartYear</span> <span class="operator">=</span> Integer.parseInt(dateStart.substring(<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line"><span class="type">int</span> <span class="variable">dateEndYear</span> <span class="operator">=</span> Integer.parseInt(dateEnd.substring(<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line"><span class="type">int</span> <span class="variable">dateStartMonth</span> <span class="operator">=</span> Integer.parseInt(dateStart.substring(<span class="number">4</span>));</span><br><span class="line"><span class="type">int</span> <span class="variable">dateEndMonth</span> <span class="operator">=</span> Integer.parseInt(dateEnd.substring(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(dateStartYear == dateEndYear) &#123;<span class="comment">//一年之内</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dateStartMonth; i &lt;=dateEndMonth; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">10</span>) &#123;</span><br><span class="line">date += dateStartYear+<span class="string">&quot;0&quot;</span>+i;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">date += dateStartYear+<span class="string">&quot;&quot;</span>+i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//跨年</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dateStartMonth; i &lt;=<span class="number">12</span>; i++) &#123;<span class="comment">//date1StartYear起始年</span></span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">10</span>) &#123;</span><br><span class="line">date += dateStartYear+<span class="string">&quot;0&quot;</span>+i;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">date += dateStartYear+<span class="string">&quot;&quot;</span>+i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dateStartYear+<span class="number">1</span>; i &lt; dateEndYear; i++) &#123;<span class="comment">//中间间隔年</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">12</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(j&lt;<span class="number">10</span>) &#123;</span><br><span class="line">date += i+<span class="string">&quot;0&quot;</span>+j;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">date += i+<span class="string">&quot;&quot;</span>+j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= dateEndMonth; i++) &#123;<span class="comment">//date1EndYear结束年</span></span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">10</span>) &#123;</span><br><span class="line">date += dateEndYear+<span class="string">&quot;0&quot;</span>+i;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">date += dateEndYear+<span class="string">&quot;&quot;</span>+i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第10章-基础API与常见算法&quot;&gt;&lt;a href=&quot;#第10章-基础API与常见算法&quot; class=&quot;headerlink&quot; title=&quot;第10章 基础API与常见算法&quot;&gt;&lt;/a&gt;第10章 基础API与常见算法&lt;/h1&gt;&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第9章 多线程</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC9%E7%AB%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC9%E7%AB%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-07-28T05:06:52.000Z</published>
    <updated>2022-10-16T04:43:25.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第9章-多线程"><a href="#第9章-多线程" class="headerlink" title="第9章 多线程"></a>第9章 多线程</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><input disabled="" type="checkbox"> 说出进程的概念</li><li><input disabled="" type="checkbox"> 说出线程的概念</li><li><input disabled="" type="checkbox"> 能够理解并发与并行的区别</li><li><input disabled="" type="checkbox"> 能够开启新线程</li><li><input disabled="" type="checkbox"> 能够描述Java中多线程运行原理</li><li><input disabled="" type="checkbox"> 能够使用继承类的方式创建多线程</li><li><input disabled="" type="checkbox"> 能够使用实现接口的方式创建多线程</li><li><input disabled="" type="checkbox"> 能够说出实现接口方式的好处</li><li><input disabled="" type="checkbox"> 能够解释安全问题的出现的原因</li><li><input disabled="" type="checkbox"> 能够使用同步代码块解决线程安全问题</li><li><input disabled="" type="checkbox"> 能够使用同步方法解决线程安全问题</li><li><input disabled="" type="checkbox"> 能够说出线程6个状态的名称</li><li><input disabled="" type="checkbox"> 能够理解线程通信概念</li><li><input disabled="" type="checkbox"> 能够理解等待唤醒机制</li><li><input disabled="" type="checkbox"> 能够说出线程的生命周期</li></ul><h1 id="第九章-多线程"><a href="#第九章-多线程" class="headerlink" title="第九章 多线程"></a>第九章 多线程</h1><p>我们在之前，学习的程序在没有跳转语句的前提下，都是由上至下依次执行，那现在想要设计一个程序，边打游戏边听歌，怎么设计？</p><p>要解决上述问题,咱们得使用多进程或者多线程来解决.</p><h2 id="9-1-相关概念"><a href="#9-1-相关概念" class="headerlink" title="9.1 相关概念"></a>9.1 相关概念</h2><h3 id="9-1-1-并发与并行（了解）"><a href="#9-1-1-并发与并行（了解）" class="headerlink" title="9.1.1 并发与并行（了解）"></a>9.1.1 并发与并行（了解）</h3><ul><li><strong>并行</strong>（parallel）：指两个或多个事件在<strong>同一时刻</strong>发生（同时发生）。指在同一时刻，有多条指令在多个处理器上同时执行。</li><li><strong>并发</strong>（concurrency）：指两个或多个事件在<strong>同一个时间段内</strong>发生。指在同一个时刻只能有一条指令执行，但多个进程的指令被快速轮换执行，使得在宏观上具有多个进程同时执行的效果。</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%B9%B6%E5%8F%91.bmp"></p><p>在操作系统中，安装了多个程序，并发指的是在一段时间内宏观上有多个程序同时运行，这在单 CPU 系统中，每一时刻只能有一个程序执行，即微观上这些程序是分时的交替运行，只不过是给人的感觉是同时运行，那是因为分时交替运行的时间是非常短的。</p><p>而在多个 CPU 系统中，则这些可以并发执行的程序便可以分配到多个处理器上（CPU），实现多任务并行执行，即利用每个处理器来处理一个可以并发执行的程序，这样多个程序便可以同时执行。目前电脑市场上说的多核 CPU，便是多核处理器，核越多，<strong>并行</strong>处理的程序越多，能大大的提高电脑运行的效率。</p><blockquote><p>注意：<strong>单核</strong>处理器的计算机肯定是<strong>不能并行</strong>的处理多个任务的，只能是多个任务在单个CPU上并发运行。同理，线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个线程一个线程的去运行，当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为线程调度。</p></blockquote><p>单核CPU：只能并发</p><p>多核CPU：并行+并发</p><p>例子：</p><ul><li><p>并行：多项工作一起执行，之后再汇总，例如：泡方便面，电水壶烧水，一边撕调料倒入桶中</p></li><li><p>并发：同一时刻多个线程在访问同一个资源，多个线程对一个点，例如：春运抢票、电商秒杀…</p></li></ul><h3 id="9-1-2-线程与进程"><a href="#9-1-2-线程与进程" class="headerlink" title="9.1.2 线程与进程"></a>9.1.2 线程与进程</h3><ul><li><p><strong>程序</strong>：为了完成某个任务和功能，选择一种编程语言编写的一组指令的集合。</p></li><li><p><strong>软件</strong>：<strong>1个或多个</strong>应用程序+相关的素材和资源文件等构成一个软件系统。</p></li><li><p><strong>进程</strong>：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p></li><li><p><strong>线程</strong>：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。 </p><p>简而言之：一个软件中至少有一个应用程序，应用程序的一次运行就是一个进程，一个进程中至少有一个线程。</p></li><li><p>面试题：进程是操作系统调度和分配资源的最小单位，线程是CPU调度的最小单位。不同的进程之间是不共享内存的。进程之间的数据交换和通信的成本是很高。不同的线程是共享同一个进程的内存的。当然不同的线程也有自己独立的内存空间。对于方法区，堆中中的同一个对象的内存，线程之间是可以共享的，但是栈的局部变量永远是独立的。</p></li></ul><p>例如：</p><h4 id="每个应用程序的运行都是一个进程"><a href="#每个应用程序的运行都是一个进程" class="headerlink" title="每个应用程序的运行都是一个进程"></a>每个应用程序的运行都是一个进程</h4><p>我们可以再电脑底部任务栏，右键—–&gt;打开任务管理器,可以查看当前任务的进程：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E8%BF%9B%E7%A8%8B%E6%A6%82%E5%BF%B5.png"></p><h4 id="一个应用程序的多次运行，就是多个进程"><a href="#一个应用程序的多次运行，就是多个进程" class="headerlink" title="一个应用程序的多次运行，就是多个进程"></a>一个应用程序的多次运行，就是多个进程</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563267431480.png" alt="1563267431480"></p><h4 id="一个进程中包含多个线程"><a href="#一个进程中包含多个线程" class="headerlink" title="一个进程中包含多个线程"></a>一个进程中包含多个线程</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563270525077.png" alt="1563270525077"></p><h3 id="9-1-3-线程调度"><a href="#9-1-3-线程调度" class="headerlink" title="9.1.3 线程调度"></a>9.1.3 线程调度</h3><ul><li><p>分时调度</p><p>所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</p></li><li><p>抢占式调度</p><p>优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。</p><ul><li><p>抢占式调度详解</p><p>大部分操作系统都支持多进程并发运行，现在的操作系统几乎都支持同时运行多个程序。比如：现在我们上课一边使用编辑器，一边使用录屏软件，同时还开着画图板，dos窗口等软件。此时，这些程序是在同时运行，”感觉这些软件好像在同一时刻运行着“。</p><p>实际上，CPU(中央处理器)使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核而言，某个时刻，只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是在同一时刻运行。<br>其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让CPU的使用率更高。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E6%8A%A2%E5%8D%A0%E5%BC%8F%E8%B0%83%E5%BA%A6.bmp" alt="抢占式调度"></p></li></ul></li></ul><h2 id="9-2-另行创建和启动线程"><a href="#9-2-另行创建和启动线程" class="headerlink" title="9.2 另行创建和启动线程"></a>9.2 另行创建和启动线程</h2><p>当运行Java程序时，其实已经有一个线程了，那就是main线程。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563281796505.png" alt="1563281796505"></p><p>那么如何创建和启动main线程以外的线程呢？</p><h3 id="9-2-1-继承Thread类"><a href="#9-2-1-继承Thread类" class="headerlink" title="9.2.1 继承Thread类"></a>9.2.1 继承Thread类</h3><p>Java使用<code>java.lang.Thread</code>类代表<strong>线程</strong>，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。Java中通过继承Thread类来<strong>创建</strong>并<strong>启动多线程</strong>的步骤如下：</p><ol><li>定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。</li><li>创建Thread子类的实例，即创建了线程对象</li><li>调用线程对象的start()方法来启动该线程</li></ol><p>代码如下：</p><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建自定义线程对象</span></span><br><span class="line"><span class="type">MyThread</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;新的线程！&quot;</span>);</span><br><span class="line"><span class="comment">//开启新线程</span></span><br><span class="line">mt.start();</span><br><span class="line"><span class="comment">//在主方法中执行for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;main线程！&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="comment">//定义指定线程名称的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="comment">//调用父类的String参数的构造方法，指定线程的名称</span></span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重写run方法，完成该线程执行的逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(getName()+<span class="string">&quot;：正在执行！&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-2-实现Runnable接口"><a href="#9-2-2-实现Runnable接口" class="headerlink" title="9.2.2 实现Runnable接口"></a>9.2.2 实现Runnable接口</h3><p>Java有单继承的限制，当我们无法继承Thread类时，那么该如何做呢？在核心类库中提供了Runnable接口，我们可以实现Runnable接口，重写run()方法，然后再通过Thread类的对象代理启动和执行我们的线程体run()方法</p><p>步骤如下：</p><ol><li>定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正<br>的线程对象。</li><li>调用线程对象的start()方法来启动线程。<br>代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);         </span><br><span class="line">&#125;       </span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建自定义类对象  线程任务对象</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr, <span class="string">&quot;小强&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;旺财 &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 通过实现Runnable接口，使得该类有了多线程类的特征。run()方法是多线程程序的一个执行目标。所有的多线程<br>代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。</p><p>在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread对象的start()方法来运行多线程代码。</p><p>实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是继承Thread类还是实现<br>Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础。</p><p>tips:Runnable对象仅仅作为Thread对象的target，Runnable实现类里包含的run()方法仅作为线程执行体。<br>而实际的线程对象依然是Thread实例，只是该Thread线程负责执行其target的run()方法。</p><h3 id="9-2-3-使用匿名内部类对象来实现线程的创建和启动"><a href="#9-2-3-使用匿名内部类对象来实现线程的创建和启动" class="headerlink" title="9.2.3 使用匿名内部类对象来实现线程的创建和启动"></a>9.2.3 使用匿名内部类对象来实现线程的创建和启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;新的线程！&quot;</span>)&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(getName()+<span class="string">&quot;：正在执行！&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot;：&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h2 id="9-3-Thread类"><a href="#9-3-Thread类" class="headerlink" title="9.3 Thread类"></a>9.3 Thread类</h2><h3 id="9-3-1-构造方法"><a href="#9-3-1-构造方法" class="headerlink" title="9.3.1 构造方法"></a>9.3.1 构造方法</h3><p>public Thread() :分配一个新的线程对象。<br>public Thread(String name) :分配一个指定名字的新的线程对象。<br>public Thread(Runnable target) :分配一个带有指定目标新的线程对象。<br>public Thread(Runnable target,String name) :分配一个带有指定目标新的线程对象并指定名字。</p><h3 id="9-3-2-常用方法系列1"><a href="#9-3-2-常用方法系列1" class="headerlink" title="9.3.2 常用方法系列1"></a>9.3.2 常用方法系列1</h3><ul><li><p>public void run() :此线程要执行的任务在此处定义代码。</p></li><li><p>public String getName() :获取当前线程名称。</p></li><li><p>public static Thread currentThread() :返回对当前正在执行的线程对象的引用。</p></li><li><p>public final boolean isAlive()：测试线程是否处于活动状态。如果线程已经启动且尚未终止，则为活动状态。 </p></li><li><p>public final int getPriority() ：返回线程优先级 </p></li><li><p>public final void setPriority(int newPriority) ：改变线程的优先级</p><ul><li>每个线程都有一定的优先级，优先级高的线程将获得较多的执行机会。每个线程默认的优先级都与创建它的父线程具有相同的优先级。Thread类提供了setPriority(int newPriority)和getPriority()方法类设置和获取线程的优先级，其中setPriority方法需要一个整数，并且范围在[1,10]之间，通常推荐设置Thread类的三个优先级常量：</li><li>MAX_PRIORITY（10）：最高优先级 </li><li>MIN _PRIORITY （1）：最低优先级</li><li>NORM_PRIORITY （5）：普通优先级，默认情况下main线程具有普通优先级。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(getName() + <span class="string">&quot;的优先级：&quot;</span> + getPriority());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">t.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">t.start();</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName() +<span class="string">&quot;的优先级：&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-3-常用方法系列2"><a href="#9-3-3-常用方法系列2" class="headerlink" title="9.3.3 常用方法系列2"></a>9.3.3 常用方法系列2</h3><ul><li><p>public void start() :导致此线程开始执行; Java虚拟机调用此线程的run方法。</p></li><li><p>public static void sleep(long millis) :使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</p></li><li><p>public static void yield()：yield只是让当前线程暂停一下，让系统的线程调度器重新调度一次，希望优先级与当前线程相同或更高的其他线程能够获得执行机会，但是这个不能保证，完全有可能的情况是，当某个线程调用了yield方法暂停之后，线程调度器又将其调度出来重新执行。</p></li><li><p>void join() ：等待该线程终止。 </p><p>void join(long millis) ：等待该线程终止的时间最长为 millis 毫秒。如果millis时间到，将不再等待。 </p><p>void join(long millis, int nanos) ：等待该线程终止的时间最长为 millis 毫秒 + nanos 纳秒。 </p></li><li><p>public final void stop()：强迫线程停止执行。 该方法具有固有的不安全性，已经标记为@Deprecated不建议再使用，那么我们就需要通过其他方式来停止线程了，其中一种方式是使用变量的值的变化来控制线程是否结束。</p></li></ul><h4 id="示例代码：倒计时"><a href="#示例代码：倒计时" class="headerlink" title="示例代码：倒计时"></a>示例代码：倒计时</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;新年快乐！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例代码：强行加塞"><a href="#示例代码：强行加塞" class="headerlink" title="示例代码：强行加塞"></a>示例代码：强行加塞</h4><p>主线程：打印[1,10]，每隔10毫秒打印一个数字，</p><p>自定义线程类：不停的问是否结束，输入Y或N，</p><p>现在当主线程打印完5之后，就让自定义线程类加塞，直到自定义线程类结束，主线程再继续。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJoin</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ChatThread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChatThread</span>();</span><br><span class="line">t.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;main:&quot;</span> + i);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">         <span class="comment">//当main打印到5之后，需要等join进来的线程停止后才会继续了。</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">t.join();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;是否结束？（Y、N）&quot;</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">confirm</span> <span class="operator">=</span> input.next().charAt(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(confirm == <span class="string">&#x27;Y&#x27;</span> || confirm == <span class="string">&#x27;y&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">input.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-4-volatile保证线程间的数据的可见性"><a href="#9-3-4-volatile保证线程间的数据的可见性" class="headerlink" title="9.3.4 volatile保证线程间的数据的可见性"></a>9.3.4 volatile保证线程间的数据的可见性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVolatile</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//保证</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个线程并启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                    <span class="comment">// System.out.println(&quot;=============&quot;);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1597137316744.png" alt="1597137316744"></p><blockquote><p>volatile的作用是确保不会因编译器的优化而省略某些指令，volatile的变量是说这变量可能会被意想不到地改变，每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份，这样，编译器就不会去假设这个变量的值了。</p></blockquote><h3 id="9-3-5守护线程（了解）"><a href="#9-3-5守护线程（了解）" class="headerlink" title="9.3.5守护线程（了解）"></a>9.3.5守护线程（了解）</h3><p>有一种线程，它是在后台运行的，它的任务是为其他线程提供服务的，这种线程被称为“守护线程”。JVM的垃圾回收线程就是典型的守护线程。</p><p>守护线程有个特点，就是如果所有非守护线程都死亡，那么守护线程自动死亡。</p><p>调用setDaemon(true)方法可将指定线程设置为守护线程。必须在线程启动之前设置，否则会报IllegalThreadStateException异常。</p><p>调用isDaemon()可以判断线程是否是守护线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyDaemon</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDaemon</span>();</span><br><span class="line">m.setDaemon(<span class="literal">true</span>);</span><br><span class="line">m.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;main:&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDaemon</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我一直守护者你...&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-4-线程安全"><a href="#9-4-线程安全" class="headerlink" title="9.4 线程安全"></a>9.4 线程安全</h2><p>当我们使用多个线程访问<strong>同一资源</strong>（可以是同一个变量、同一个文件、同一条记录等）的时候，若多个线程只有读操作，那么不会发生线程安全问题，但是如果多个线程中对资源有读和写的操作，就容易出现线程安全问题。</p><p>我们通过一个案例，演示线程的安全问题：<br>电影院要卖票，我们模拟电影院的卖票过程。假设要播放的电影是 “葫芦娃大战奥特曼”，本次电影的座位共100个<br>(本场电影只能卖100张票)。<br>我们来模拟电影院的售票窗口，实现多个窗口同时卖 “葫芦娃大战奥特曼”这场电影票(多个窗口一起卖这100张票)</p><h3 id="9-4-1-同一个资源问题"><a href="#9-4-1-同一个资源问题" class="headerlink" title="9.4.1 同一个资源问题"></a>9.4.1 同一个资源问题</h3><h4 id="1、局部变量不能共享"><a href="#1、局部变量不能共享" class="headerlink" title="1、局部变量不能共享"></a>1、局部变量不能共享</h4><p>示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.<span class="property">atguigu</span>.<span class="property">safe</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">SaleTicketDemo1</span> &#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line"><span class="title class_">Window</span> w1 = <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line"><span class="title class_">Window</span> w2 = <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line"><span class="title class_">Window</span> w3 = <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line"></span><br><span class="line">w1.<span class="title function_">start</span>();</span><br><span class="line">w2.<span class="title function_">start</span>();</span><br><span class="line">w3.<span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Thread</span>&#123;</span><br><span class="line">public <span class="keyword">void</span> <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">int total = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(total&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="title function_">getName</span>() + <span class="string">&quot;卖出一张票，剩余:&quot;</span> + --total);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：发现卖出300张票。</p><p>问题：局部变量是每次调用方法都是独立的，那么每个线程的run()的total是独立的，不是共享数据。</p><h4 id="2、不同对象的实例变量不共享"><a href="#2、不同对象的实例变量不共享" class="headerlink" title="2、不同对象的实例变量不共享"></a>2、不同对象的实例变量不共享</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.safe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketDemo2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TicketSaleThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketSaleThread</span>();</span><br><span class="line"><span class="type">TicketSaleThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketSaleThread</span>();</span><br><span class="line"><span class="type">TicketSaleThread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketSaleThread</span>();</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketSaleThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(total&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">&quot;卖出一张票，剩余:&quot;</span> + --total);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：发现卖出300张票。</p><p>问题：不同的实例对象的实例变量是独立的。</p><h4 id="3、静态变量是共享的"><a href="#3、静态变量是共享的" class="headerlink" title="3、静态变量是共享的"></a>3、静态变量是共享的</h4><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.safe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketDemo3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TicketThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketThread</span>();</span><br><span class="line"><span class="type">TicketThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketThread</span>();</span><br><span class="line"><span class="type">TicketThread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketThread</span>();</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(total&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//加入这个，使得问题暴露的更明显</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(getName() + <span class="string">&quot;卖出一张票，剩余:&quot;</span> + --total);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：发现卖出近100张票。</p><p>问题（1）：但是有重复票或负数票问题。</p><p>原因：线程安全问题</p><p>问题（2）：如果要考虑有两场电影，各卖100张票等</p><p>原因：TicketThread类的静态变量，是所有TicketThread类的对象共享</p><h4 id="4、同一个对象的实例变量共享"><a href="#4、同一个对象的实例变量共享" class="headerlink" title="4、同一个对象的实例变量共享"></a>4、同一个对象的实例变量共享</h4><p>示例代码：多个Thread线程使用同一个Runnable对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.safe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketDemo3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TicketSaleRunnable</span> <span class="variable">tr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketSaleRunnable</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketSaleRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(total&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//加入这个，使得问题暴露的更明显</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出一张票，剩余:&quot;</span> + --total);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：发现卖出近100张票。</p><p>问题：但是有重复票或负数票问题。</p><p>原因：线程安全问题</p><h4 id="5、抽取资源类，共享同一个资源对象"><a href="#5、抽取资源类，共享同一个资源对象" class="headerlink" title="5、抽取资源类，共享同一个资源对象"></a>5、抽取资源类，共享同一个资源对象</h4><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread.resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketDemo5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//2、创建资源对象</span></span><br><span class="line"><span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、启动多个线程操作资源类的对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;窗口一&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;窗口二&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1、编写资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(total&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出一张票，剩余:&quot;</span> + --total);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;没有票了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现程序出现了两个问题：</p><ol><li>相同的票数,比如某张票被卖了两回。</li><li>不存在的票，比如0票与-1票，是不存在的。</li></ol><p>这种问题，几个窗口(线程)票数不同步了，这种问题称为线程不安全。</p><h3 id="9-4-2-尝试解决线程安全问题"><a href="#9-4-2-尝试解决线程安全问题" class="headerlink" title="9.4.2 尝试解决线程安全问题"></a>9.4.2 尝试解决线程安全问题</h3><p>要解决上述多线程并发访问一个资源的安全性问题:也就是解决重复票与不存在票问题，Java中提供了同步机制<br>(synchronized)来解决。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563372934332.png" alt="1563372934332"></p><p>根据案例简述：</p><p>窗口1线程进入操作的时候，窗口2和窗口3线程只能在外等着，窗口1操作结束，窗口1和窗口2和窗口3才有机会进入代码去执行。也就是说在某个线程修改共享资源的时候，其他线程不能修改该资源，等待修改完毕同步之后，才能去抢夺CPU资源，完成对应的操作，保证了数据的同步性，解决了线程不安全的现象。</p><p>为了保证每个线程都能正常执行原子操作，Java引入了线程同步机制。注意:在任何时候,最多允许一个线程拥有同步锁，谁拿到锁就进入代码块，其他的线程只能在外等着(BLOCKED)。</p><p>同步方法：synchronized 关键字直接修饰方法，表示同一时刻只有一个线程能进入这个方法，其他线程在外面等着。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    可能会产生线程安全问题的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步代码块：synchronized 关键字可以用于某个区块前面，表示只对这个区块的资源实行互斥访问。<br>格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁)&#123;</span><br><span class="line">     需要同步操作的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-4-3-锁对象选择"><a href="#9-4-3-锁对象选择" class="headerlink" title="9.4.3 锁对象选择"></a>9.4.3 锁对象选择</h3><p>同步锁对象：</p><ul><li>锁对象可以是任意类型。</li><li>多个线程对象  要使用同一把锁。</li></ul><h4 id="1、同步方法的锁对象问题"><a href="#1、同步方法的锁对象问题" class="headerlink" title="1、同步方法的锁对象问题"></a>1、同步方法的锁对象问题</h4><p>（1）静态方法：当前类的Class对象</p><p>（2）非静态方法：this</p><h5 id="示例代码一："><a href="#示例代码一：" class="headerlink" title="示例代码一："></a>示例代码一：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread2.safemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketSafeDemo1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 2、创建资源对象</span></span><br><span class="line"><span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、启动多个线程操作资源类的对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;窗口一&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">// 加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;窗口二&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">// 加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">// 加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、编写资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非静态方法隐含的锁对象就是this</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出一张票，剩余:&quot;</span> + --total);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(Thread.currentThread().getName() + <span class="string">&quot;发现没有票了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="示例代码二："><a href="#示例代码二：" class="headerlink" title="示例代码二："></a>示例代码二：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread2.safemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketSafeDemo2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TicketRunnable</span> <span class="variable">tr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketRunnable</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">sellTicket();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非静态方法隐含的锁对象就是this</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sellTicket</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在卖:&quot;</span> + ticket--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="示例代码三："><a href="#示例代码三：" class="headerlink" title="示例代码三："></a>示例代码三：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread2.safemethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketSafeDemo3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TicketThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketThread</span>();</span><br><span class="line"><span class="type">TicketThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketThread</span>();</span><br><span class="line"><span class="type">TicketThread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketThread</span>();</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (ticket&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">sellTicket();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里必须是静态方法，因为如果是非静态方法，隐含的锁对象是this，那么多个线程就不是同一个锁对象了</span></span><br><span class="line"><span class="comment">//而静态方法隐含的锁对象是当前类的Class对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sellTicket</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;<span class="comment">//有票可以卖 </span></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在卖：&quot;</span> + ticket--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、同步代码块的锁对象"><a href="#2、同步代码块的锁对象" class="headerlink" title="2、同步代码块的锁对象"></a>2、同步代码块的锁对象</h4><p>同步锁对象：</p><ul><li>锁对象可以是任意类型。</li><li>多个线程对象  要使用同一把锁。</li><li>习惯上先考虑this，但是要注意是否同一个this</li></ul><h5 id="示例代码一：this对象"><a href="#示例代码一：this对象" class="headerlink" title="示例代码一：this对象"></a>示例代码一：this对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread2.safeblock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketSafeDemo1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 2、创建资源对象</span></span><br><span class="line"><span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、启动多个线程操作资源类的对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;窗口一&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">// 加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;窗口二&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">// 加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">// 加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、编写资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出一张票，剩余:&quot;</span> + --total);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(Thread.currentThread().getName() + <span class="string">&quot;发现没有票了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="示例代码二：this对象"><a href="#示例代码二：this对象" class="headerlink" title="示例代码二：this对象"></a>示例代码二：this对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread2.safeblock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketSafeDemo2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TicketRunnable</span> <span class="variable">tr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketRunnable</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在卖:&quot;</span> + ticket--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="示例代码三：其他对象"><a href="#示例代码三：其他对象" class="headerlink" title="示例代码三：其他对象"></a>示例代码三：其他对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread2.safeblock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketSafeDemo3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TicketThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketThread</span>();</span><br><span class="line"><span class="type">TicketThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketThread</span>();</span><br><span class="line"><span class="type">TicketThread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketThread</span>();</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">myLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(total&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//加入这个，使得问题暴露的更明显</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//synchronized (this) &#123;//此处不能选this对象作为锁，因为this对于上面的三个线程来说是不同的</span></span><br><span class="line"><span class="comment">//synchronized (TicketThread.class) &#123;//可以，因为在JVM中TicketThread类的Class对象只有一个</span></span><br><span class="line"><span class="comment">//synchronized (&quot;&quot;) &#123;//可以，因为在JVM中&quot;&quot;字符串对象只有一个</span></span><br><span class="line"><span class="keyword">synchronized</span> (myLock) &#123;<span class="comment">//可以，因为在JVM中myLock对象只有一个</span></span><br><span class="line"><span class="keyword">if</span>(total&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(getName() + <span class="string">&quot;卖出一张票，剩余:&quot;</span> + --total);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-4-4-锁的范围问题"><a href="#9-4-4-锁的范围问题" class="headerlink" title="9.4.4 锁的范围问题"></a>9.4.4 锁的范围问题</h3><p>锁的范围太小：不能解决安全问题</p><p>锁的范围太大：因为一旦某个线程抢到锁，其他线程就只能等待，所以范围太大，效率会降低，不能合理利用CPU资源。</p><h4 id="示例代码一：锁范围太小"><a href="#示例代码一：锁范围太小" class="headerlink" title="示例代码一：锁范围太小"></a>示例代码一：锁范围太小</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread3.lockrange;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketSafeDemo1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//2、创建资源对象</span></span><br><span class="line"><span class="type">Ticket2</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket2</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、启动多个线程操作资源类的对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;窗口一&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;窗口二&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1、编写资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket2</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(total&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//锁的范围太小</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出一张票，剩余:&quot;</span> + --total);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(Thread.currentThread().getName() + <span class="string">&quot;发现没有票了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="示例代码二：锁范围太小"><a href="#示例代码二：锁范围太小" class="headerlink" title="示例代码二：锁范围太小"></a>示例代码二：锁范围太小</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread3.lockrange;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketSafeDemo2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TicketRunnable</span> <span class="variable">tr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketRunnable</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line"><span class="comment">//if (ticket &gt; 0) &#123;//条件没有锁进去</span></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在卖:&quot;</span> + ticket--);</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例代码三：锁范围太大"><a href="#示例代码三：锁范围太大" class="headerlink" title="示例代码三：锁范围太大"></a>示例代码三：锁范围太大</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread3.lockrange;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketSafeDemo3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TicketRunnableDemo</span> <span class="variable">tr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketRunnableDemo</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tr,<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketRunnableDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在卖:&quot;</span> + ticket--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="示例代码四：锁范围太大"><a href="#示例代码四：锁范围太大" class="headerlink" title="示例代码四：锁范围太大"></a>示例代码四：锁范围太大</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread3.lockrange;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketSafeDemo1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//2、创建资源对象</span></span><br><span class="line"><span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、启动多个线程操作资源类的对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;窗口一&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="comment">//问题：一旦某个线程占了ticket锁，就要等它把票全部卖完，才会释放锁了</span></span><br><span class="line"><span class="keyword">synchronized</span> (ticket) &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;窗口二&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (ticket) &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (ticket) &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1、编写资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(total&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出一张票，剩余:&quot;</span> + --total);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(Thread.currentThread().getName() + <span class="string">&quot;发现没有票了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-4-5-如何编写多线程的程序呢？"><a href="#9-4-5-如何编写多线程的程序呢？" class="headerlink" title="9.4.5 如何编写多线程的程序呢？"></a>9.4.5 如何编写多线程的程序呢？</h3><ul><li><p>原则：</p><ul><li>线程操作资源类</li><li>高内聚低耦合</li></ul></li><li><p>步骤：</p><ul><li>编写资源类</li><li>考虑线程安全问题，在资源类中考虑使用同步代码块或同步方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSynchronized</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 2、创建资源对象</span></span><br><span class="line"><span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、启动多个线程操作资源类的对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;窗口一&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">// 加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;窗口二&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">// 加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">// 加入这个，使得问题暴露的更明显</span></span><br><span class="line">ticket.sale();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、编写资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(total&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(Thread.currentThread().getName() + <span class="string">&quot;发现没有票了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出一张票，剩余:&quot;</span> + --total);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-4-6-单例设计模式的线程安全问题"><a href="#9-4-6-单例设计模式的线程安全问题" class="headerlink" title="9.4.6 单例设计模式的线程安全问题"></a>9.4.6 单例设计模式的线程安全问题</h3><h4 id="1、饿汉式没有线程安全问题"><a href="#1、饿汉式没有线程安全问题" class="headerlink" title="1、饿汉式没有线程安全问题"></a>1、饿汉式没有线程安全问题</h4><p>饿汉式：上来就创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnlyOneDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">OnlyOne</span> <span class="variable">o1</span> <span class="operator">=</span> OnlyOne.INSTANCE;</span><br><span class="line"><span class="type">OnlyOne</span> <span class="variable">o2</span> <span class="operator">=</span> OnlyOne.INSTANCE;</span><br><span class="line"></span><br><span class="line">System.out.println(o1);</span><br><span class="line">System.out.println(o2);</span><br><span class="line">System.out.println(o1==o2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OnlyOne</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">OnlyOne</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OnlyOne</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">OnlyOne</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、懒汉式线程安全问题"><a href="#2、懒汉式线程安全问题" class="headerlink" title="2、懒汉式线程安全问题"></a>2、懒汉式线程安全问题</h4><p>延迟创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Single</span> <span class="variable">s1</span> <span class="operator">=</span> Single.getInstance();</span><br><span class="line">        <span class="type">Single</span> <span class="variable">s2</span> <span class="operator">=</span> Single.getInstance();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Single s1;</span><br><span class="line">    Single s2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                s1 = Single.getInstance();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                s2 = Single.getInstance();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(s1 + <span class="string">&quot; : &quot;</span> + s2);</span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-5-等待唤醒机制"><a href="#9-5-等待唤醒机制" class="headerlink" title="9.5 等待唤醒机制"></a>9.5 等待唤醒机制</h2><h3 id="9-5-1-线程间通信"><a href="#9-5-1-线程间通信" class="headerlink" title="9.5.1 线程间通信"></a>9.5.1 线程间通信</h3><p><strong>为什么要处理线程间通信：</strong></p><p>多个线程在处理同一个资源，但是处理的动作（线程的任务）却不相同。而多个线程并发执行时, 在默认情况下CPU是随机切换线程的，当我们需要多个线程来共同完成一件任务，并且我们希望他们有规律的执行, 那么多线程之间需要一些通信机制，可以协调它们的工作，以此来帮我们达到多线程共同操作一份数据。</p><p>比如：线程A用来生成包子的，线程B用来吃包子的，包子可以理解为同一资源，线程A与线程B处理的动作，一个是生产，一个是消费，此时B线程必须等到A线程完成后才能执行，那么线程A与线程B之间就需要线程通信，即—— <strong>等待唤醒机制。</strong></p><h3 id="9-5-2-等待唤醒机制"><a href="#9-5-2-等待唤醒机制" class="headerlink" title="9.5.2 等待唤醒机制"></a>9.5.2 等待唤醒机制</h3><p><strong>什么是等待唤醒机制</strong></p><p>这是多个线程间的一种<strong>协作</strong>机制。谈到线程我们经常想到的是线程间的<strong>竞争（race）</strong>，比如去争夺锁，但这并不是故事的全部，线程间也会有协作机制。</p><p>就是在一个线程满足某个条件时，就进入等待状态（<strong>wait()</strong>&#x2F;**wait(time)<strong>）， 等待其他线程执行完他们的指定代码过后再将其唤醒（</strong>notify()**）;或可以指定wait的时间，等时间到了自动唤醒；在有多个线程进行等待时，如果需要，可以使用 notifyAll()来唤醒所有的等待线程。wait&#x2F;notify 就是线程间的一种协作机制。</p><ol><li>wait：线程不再活动，不再参与调度，进入 wait set 中，因此不会浪费 CPU 资源，也不会去竞争锁了，这时的线程状态即是 WAITING或TIMED_WAITING。它还要等着别的线程执行一个<strong>特别的动作</strong>，也即是“<strong>通知（notify）</strong>”或者等待时间到，在这个对象上等待的线程从wait set 中释放出来，重新进入到调度队列（ready queue）中</li><li>notify：则选取所通知对象的 wait set 中的一个线程释放；</li><li>notifyAll：则释放所通知对象的 wait set 上的全部线程。</li></ol><blockquote><p>注意：</p><p>被通知线程被唤醒后也不一定能立即恢复执行，因为它当初中断的地方是在同步块内，而此刻它已经不持有锁，所以她需要再次尝试去获取锁（很可能面临其它线程的竞争），成功后才能在当初调用 wait 方法之后的地方恢复执行。</p><p>总结如下：</p><ul><li>如果能获取锁，线程就从 WAITING 状态变成 RUNNABLE（可运行） 状态；</li><li>否则，线程就从 WAITING 状态又变成 BLOCKED（等待锁） 状态</li></ul></blockquote><p><strong>调用wait和notify方法需要注意的细节</strong></p><ol><li>wait方法与notify方法必须要由同一个锁对象调用。因为：对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</li><li>wait方法与notify方法是属于Object类的方法的。因为：锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</li><li>wait方法与notify方法必须要在同步代码块或者是同步函数中使用。因为：必须要通过锁对象调用这2个方法。</li></ol><h3 id="9-5-3-生产者与消费者问题"><a href="#9-5-3-生产者与消费者问题" class="headerlink" title="9.5.3 生产者与消费者问题"></a>9.5.3 生产者与消费者问题</h3><p>等待唤醒机制可以解决经典的“生产者与消费者”的问题。</p><p>生产者与消费者问题（英语：Producer-consumer problem），也称有限缓冲问题（英语：Bounded-buffer problem），是一个多线程同步问题的经典案例。该问题描述了两个（多个）共享固定大小缓冲区的线程——即所谓的“生产者”和“消费者”——在实际运行时会发生的问题。生产者的主要作用是生成一定量的数据放到缓冲区中，然后重复此过程。与此同时，消费者也在缓冲区消耗这些数据。该问题的关键就是要保证生产者不会在缓冲区满时加入数据，消费者也不会在缓冲区中空时消耗数据。</p><p>生产者与消费者问题中其实隐含了两个问题：</p><ul><li>线程安全问题：因为生产者与消费者共享数据缓冲区，不过这个问题可以使用同步解决。</li><li>线程的协调工作问题：<ul><li>要解决该问题，就必须让生产者线程在缓冲区满时等待(wait)，暂停进入阻塞状态，等到下次消费者消耗了缓冲区中的数据的时候，通知(notify)正在等待的线程恢复到就绪状态，重新开始往缓冲区添加数据。同样，也可以让消费者线程在缓冲区空时进入等待(wait)，暂停进入阻塞状态，等到生产者往缓冲区添加数据之后，再通知(notify)正在等待的线程恢复到就绪状态。通过这样的通信机制来解决此类问题。</li></ul></li></ul><h4 id="一个厨师一个服务员问题"><a href="#一个厨师一个服务员问题" class="headerlink" title="一个厨师一个服务员问题"></a>一个厨师一个服务员问题</h4><p>案例：有家餐馆的取餐口比较小，只能放10份快餐，厨师做完快餐放在取餐口的工作台上，服务员从这个工作台取出快餐给顾客。现在有1个厨师和1个服务员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCommunicate</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 1、创建资源类对象</span></span><br><span class="line"><span class="type">Workbench</span> <span class="variable">workbench</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Workbench</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、创建和启动厨师线程</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;厨师&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">workbench.put();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、创建和启动服务员线程</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;服务员&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">workbench.take();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、定义资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Workbench</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_VALUE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (num &gt;= MAX_VALUE) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">num++;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;制作了一份快餐，现在工作台上有：&quot;</span> + num + <span class="string">&quot;份快餐&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.notify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">take</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">num--;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;取走了一份快餐，现在工作台上有：&quot;</span> + num + <span class="string">&quot;份快餐&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.notify();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="多个厨师多个服务员问题"><a href="#多个厨师多个服务员问题" class="headerlink" title="多个厨师多个服务员问题"></a>多个厨师多个服务员问题</h4><p>案例：有家餐馆的取餐口比较小，只能放10份快餐，厨师做完快餐放在取餐口的工作台上，服务员从这个工作台取出快餐给顾客。现在有多个厨师和多个服务员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCommunicate2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 1、创建资源类对象</span></span><br><span class="line"><span class="type">WindowBoard</span> <span class="variable">windowBoard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WindowBoard</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、创建和启动厨师线程</span></span><br><span class="line"><span class="comment">// 3、创建和启动服务员线程</span></span><br><span class="line"><span class="type">Cook</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cook</span>(<span class="string">&quot;张三&quot;</span>,windowBoard);</span><br><span class="line"><span class="type">Cook</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cook</span>(<span class="string">&quot;李四&quot;</span>,windowBoard);</span><br><span class="line"><span class="type">Waiter</span> <span class="variable">w1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Waiter</span>(<span class="string">&quot;小红&quot;</span>,windowBoard);</span><br><span class="line"><span class="type">Waiter</span> <span class="variable">w2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Waiter</span>(<span class="string">&quot;小绿&quot;</span>,windowBoard);</span><br><span class="line"></span><br><span class="line">c1.start();</span><br><span class="line">c2.start();</span><br><span class="line">w1.start();</span><br><span class="line">w2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1、定义资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowBoard</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_VALUE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (num &gt;= MAX_VALUE) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">num++;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;制作了一份快餐，现在工作台上有：&quot;</span> + num + <span class="string">&quot;份快餐&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">take</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">num--;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;取走了一份快餐，现在工作台上有：&quot;</span> + num + <span class="string">&quot;份快餐&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、定义厨师类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cook</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="keyword">private</span> WindowBoard windowBoard;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">(String name,WindowBoard windowBoard)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line"><span class="built_in">this</span>.windowBoard = windowBoard;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">windowBoard.put();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、定义服务员类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Waiter</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="keyword">private</span> WindowBoard windowBoard;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Waiter</span><span class="params">(String name,WindowBoard windowBoard)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line"><span class="built_in">this</span>.windowBoard = windowBoard;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">windowBoard.take();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-5-4-练习"><a href="#9-5-4-练习" class="headerlink" title="9.5.4 练习"></a>9.5.4 练习</h3><p>1、要求两个线程，同时打印字母，每个线程都能连续打印3个字母。两个线程交替打印，一个线程打印字母的小写形式，一个线程打印字母的大写形式，但是字母是连续的。当字母循环到z之后，回到a。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%BB%83%E4%B9%A02.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.thread7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintLetterDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 2、创建资源对象</span></span><br><span class="line"><span class="type">PrintLetter</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintLetter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、创建两个线程打印</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;小写字母&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">p.printLower();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);<span class="comment">// 控制节奏</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;大写字母&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">p.printUpper();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);<span class="comment">// 控制节奏</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、定义资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrintLetter</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">char</span> <span class="variable">letter</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">printLower</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&gt;&quot;</span> + letter);</span><br><span class="line">letter++;</span><br><span class="line"><span class="keyword">if</span> (letter &gt; <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">letter = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.notify();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">printUpper</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&gt;&quot;</span> + (<span class="type">char</span>) (letter - <span class="number">32</span>));</span><br><span class="line">letter++;</span><br><span class="line"><span class="keyword">if</span> (letter &gt; <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">letter = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.notify();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-6-线程生命周期"><a href="#9-6-线程生命周期" class="headerlink" title="9.6 线程生命周期"></a>9.6 线程生命周期</h2><h3 id="9-6-1-观点1：5种状态"><a href="#9-6-1-观点1：5种状态" class="headerlink" title="9.6.1 观点1：5种状态"></a>9.6.1 观点1：5种状态</h3><p>简单来说，线程的生命周期有五种状态：新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）、死亡（Dead）。CPU需要在多条线程之间切换，于是线程状态会多次在运行、阻塞、就绪之间切换。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1563282798989.png"></p><p><strong>1.</strong> <strong>新建</strong></p><p>当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状。此时它和其他Java对象一样，仅仅由JVM为其分配了内存，并初始化了实例变量的值。此时的线程对象并没有任何线程的动态特征，程序也不会执行它的线程体run()。</p><p><strong>2.</strong> <strong>就绪</strong></p><p>但是当线程对象调用了start()方法之后，就不一样了，线程就从新建状态转为就绪状态。JVM会为其创建方法调用栈和程序计数器，当然，处于这个状态中的线程并没有开始运行，只是表示已具备了运行的条件，随时可以被调度。至于什么时候被调度，取决于JVM里线程调度器的调度。</p><blockquote><p>注意：</p><p>程序只能对新建状态的线程调用start()，并且只能调用一次，如果对非新建状态的线程，如已启动的线程或已死亡的线程调用start()都会报错IllegalThreadStateException异常。</p></blockquote><p><strong>3.</strong> <strong>运行</strong></p><p>如果处于就绪状态的线程获得了CPU，开始执行run()方法的线程体代码，则该线程处于运行状态。如果计算机只有一个CPU，在任何时刻只有一个线程处于运行状态，如果计算机有多个处理器，将会有多个线程并行(Parallel)执行。</p><p>当然，美好的时光总是短暂的，而且CPU讲究雨露均沾。对于抢占式策略的系统而言，系统会给每个可执行的线程一个小时间段来处理任务，当该时间用完，系统会剥夺该线程所占用的资源，让其回到就绪状态等待下一次被调度。此时其他线程将获得执行机会，而在选择下一个线程时，系统会适当考虑线程的优先级。</p><p><strong>4.</strong> <strong>阻塞</strong></p><p>当在运行过程中的线程遇到如下情况时，线程会进入阻塞状态：</p><ul><li>线程调用了sleep()方法，主动放弃所占用的CPU资源；</li><li>线程试图获取一个同步监视器，但该同步监视器正被其他线程持有；</li><li>线程执行过程中，同步监视器调用了wait()，让它等待某个通知（notify）；</li><li>线程执行过程中，同步监视器调用了wait(time)</li><li>线程执行过程中，遇到了其他线程对象的加塞（join）；</li><li>线程被调用suspend方法被挂起（已过时，因为容易发生死锁）；</li></ul><p>当前正在执行的线程被阻塞后，其他线程就有机会执行了。针对如上情况，当发生如下情况时会解除阻塞，让该线程重新进入就绪状态，等待线程调度器再次调度它：</p><ul><li>线程的sleep()时间到；</li><li>线程成功获得了同步监视器；</li><li>线程等到了通知(notify)；</li><li>线程wait的时间到了</li><li>加塞的线程结束了；</li><li>被挂起的线程又被调用了resume恢复方法（已过时，因为容易发生死锁）；</li></ul><p><strong>5.</strong> <strong>死亡</strong></p><p>线程会以以下三种方式之一结束，结束后的线程就处于死亡状态：</p><ul><li>run()方法执行完成，线程正常结束</li><li>线程执行过程中抛出了一个未捕获的异常（Exception）或错误（Error）</li><li>直接调用该线程的stop()来结束该线程（已过时，因为容易发生死锁）</li></ul><h3 id="9-6-2-观点2：6种状态"><a href="#9-6-2-观点2：6种状态" class="headerlink" title="9.6.2 观点2：6种状态"></a>9.6.2 观点2：6种状态</h3><p>在java.lang.Thread.State的枚举类中这样定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    NEW,</span><br><span class="line">    RUNNABLE,</span><br><span class="line">    BLOCKED,</span><br><span class="line">    WAITING,</span><br><span class="line">    TIMED_WAITING,</span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先它没有区分：就绪和运行状态，因为对于Java对象来说，只能标记为可运行，至于什么时候运行，不是JVM来控制的了，是OS来进行调度的，而且时间非常短暂，因此对于Java对象的状态来说，无法区分。只能我们人为的进行想象和理解。</p><p>其次根据Thread.State的定义，阻塞状态是分为三种的：BLOCKED、WAITING、TIMED_WAITING。</p><ul><li>BLOCKED：是指互有竞争关系的几个线程，其中一个线程占有锁对象时，其他线程只能等待锁。只有获得锁对象的线程才能有执行机会。</li><li>TIMED_WAITING：当前线程执行过程中遇到Thread类的sleep或join，Object类的wait，LockSupport类的park方法，并且在调用这些方法时，设置了时间，那么当前线程会进入TIMED_WAITING，直到时间到，或被中断。</li><li>WAITING：当前线程执行过程中遇到遇到Object类的wait，Thread类的join，LockSupport类的park方法，并且在调用这些方法时，没有指定时间，那么当前线程会进入WAITING状态，直到被唤醒。<ul><li>通过Object类的wait进入WAITING状态的要有Object的notify&#x2F;notifyAll唤醒；</li><li>通过Condition的await进入WAITING状态的要有Conditon的signal方法唤醒；</li><li>通过LockSupport类的park方法进入WAITING状态的要有LockSupport类的unpark方法唤醒</li><li>通过Thread类的join进入WAITING状态，只有调用join方法的线程对象结束才能让当前线程恢复；</li></ul></li></ul><p>说明：当从WAITING或TIMED_WAITING恢复到Runnable状态时，如果发现当前线程没有得到监视器锁，那么会立刻转入BLOCKED状态。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200521184149034.png" alt="image-20200521184149034"></p><h2 id="9-7-释放锁操作与死锁"><a href="#9-7-释放锁操作与死锁" class="headerlink" title="9.7 释放锁操作与死锁"></a>9.7 释放锁操作与死锁</h2><p>任何线程进入同步代码块、同步方法之前，必须先获得对同步监视器的锁定，那么何时会释放对同步监视器的锁定呢？</p><h3 id="1、释放锁的操作"><a href="#1、释放锁的操作" class="headerlink" title="1、释放锁的操作"></a><strong>1、释放锁的操作</strong></h3><p>当前线程的同步方法、同步代码块执行结束。</p><p>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致当前线程异常结束。</p><p>当前线程在同步代码块、同步方法中执行了锁对象的wait()方法，当前线程被挂起，并释放锁。</p><h3 id="2、不会释放锁的操作"><a href="#2、不会释放锁的操作" class="headerlink" title="2、不会释放锁的操作"></a><strong>2、不会释放锁的操作</strong></h3><p>线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行。</p><p>线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该该线程挂起，该线程不会释放锁（同步监视器）。应尽量避免使用suspend()和resume()这样的过时来控制线程。</p><h3 id="3、死锁"><a href="#3、死锁" class="headerlink" title="3、死锁"></a>3、死锁</h3><p>不同的线程分别锁住对方需要的同步监视器对象不释放，都在等待对方先放弃时就形成了线程的死锁。一旦出现死锁，整个程序既不会发生异常，也不会给出任何提示，只是所有线程处于阻塞状态，无法继续。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDeadLock</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="type">Owner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Owner</span>(g,m);</span><br><span class="line"><span class="type">Customer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(g,m);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(s).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(c).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Owner</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object goods;</span><br><span class="line"><span class="keyword">private</span> Object money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Owner</span><span class="params">(Object goods, Object money)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.goods = goods;</span><br><span class="line"><span class="built_in">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (goods) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;先给钱&quot;</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (money) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;发货&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object goods;</span><br><span class="line"><span class="keyword">private</span> Object money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(Object goods, Object money)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.goods = goods;</span><br><span class="line"><span class="built_in">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (money) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;先发货&quot;</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (goods) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;再给钱&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、面试题：sleep-和wait-方法的区别"><a href="#4、面试题：sleep-和wait-方法的区别" class="headerlink" title="4、面试题：sleep()和wait()方法的区别"></a>4、面试题：sleep()和wait()方法的区别</h3><p>（1）sleep()不释放锁，wait()释放锁</p><p>（2）sleep()指定休眠的时间，wait()可以指定时间也可以无限等待直到notify或notifyAll</p><p>（3）sleep()在Thread类中声明的静态方法，wait方法在Object类中声明</p><p>因为我们调用wait（）方法是由锁对象调用，而锁对象的类型是任意类型的对象。那么希望任意类型的对象都要有的方法，只能声明在Object类中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第9章-多线程&quot;&gt;&lt;a href=&quot;#第9章-多线程&quot; class=&quot;headerlink&quot; title=&quot;第9章 多线程&quot;&gt;&lt;/a&gt;第9章 多线程&lt;/h1&gt;&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE_【异常】</title>
    <link href="https://manamn.space/2022/07/28/JavaSE-%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%91/"/>
    <id>https://manamn.space/2022/07/28/JavaSE-%E3%80%90%E5%BC%82%E5%B8%B8%E3%80%91/</id>
    <published>2022-07-28T05:06:37.000Z</published>
    <updated>2022-10-16T04:43:25.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaSE-【异常】"><a href="#JavaSE-【异常】" class="headerlink" title="JavaSE_【异常】"></a>JavaSE_【异常】</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>异常的体系结构</li><li><strong>常见异常</strong></li><li>throw关键字（手动创建并抛出异常）</li><li><strong>异常处理机制一：try</strong>（掌握）</li><li><strong>异常处理机制二：throws</strong>（掌握）</li><li>自定义异常</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><input disabled="" type="checkbox"> 能够辨别程序中异常和错误的区别</li><li><input disabled="" type="checkbox"> 说出异常的分类</li><li><input disabled="" type="checkbox"> 说出虚拟机处理异常的方式</li><li><input disabled="" type="checkbox"> 可以编写代码演示OOM</li><li><input disabled="" type="checkbox"> 列出常见的5个运行时异常</li><li><input disabled="" type="checkbox"> 列出常见的5个编译时异常</li><li><input disabled="" type="checkbox"> 能够使用try…catch关键字处理异常</li><li><input disabled="" type="checkbox"> 能够使用throws关键字处理异常</li><li><input disabled="" type="checkbox"> 能够自定义异常类</li><li><input disabled="" type="checkbox"> 能够处理自定义异常类</li></ul><h1 id="第八章-异常"><a href="#第八章-异常" class="headerlink" title="第八章    异常"></a>第八章    异常</h1><h2 id="8-1-异常概述"><a href="#8-1-异常概述" class="headerlink" title="8.1 异常概述"></a>8.1 异常概述</h2><h3 id="引入异常"><a href="#引入异常" class="headerlink" title="引入异常"></a>引入异常</h3><p>在使用计算机语言进行项目开发的过程中，即使程序员把代码写得 尽善尽美，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：客户输入数据的格式，读取文件是否存在，网络是否始终保持通畅等等。</p><ul><li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常的情况，如果不处理最终会导致JVM的非正常停止。</li></ul><blockquote><p>异常指的并不是语法错误,语法错了,编译不通过,不会产生字节码文件,根本不能运行.</p><p>异常也不是指逻辑代码错误而没有得到想要的结果，例如：求a与b的和，你写成了a-b 除数为0的情况</p></blockquote><p>对于异常，一般有两种解决方法：一是遇到错误就终止程序的运行。另一种方法是由程序员在编写程序时，就考虑到错误的检测、错误消息的提示，以及错误的处理。</p><p>Java中是如何表示不同的异常情况，又是如何让程序员得知，并处理异常的呢？</p><p>Java中把不同的异常用不同的类表示，一旦发生某种异常，就通过创建该异常类型的对象，并且抛出，然后程序员可以catch到这个异常对象，并处理，如果无法catch到这个异常对象，那么这个异常对象将会导致程序终止。</p><h2 id="8-2-异常体系"><a href="#8-2-异常体系" class="headerlink" title="8.2 异常体系"></a>8.2 异常体系</h2><p>异常的根类是<code>java.lang.Throwable</code>，其下有两个子类：<code>java.lang.Error</code>与<code>java.lang.Exception</code>，平常所说的异常指<code>java.lang.Exception</code>。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E7%B1%BB.png"></p><p><strong>Throwable体系：</strong></p><ul><li><strong>Error</strong>:严重错误Error，无法通过处理的错误，只能事先避免，好比绝症。<ul><li>例如：StackOverflowError，OOM（OutOfMemoryError）  内存泄漏（Memory Leak）  。</li><li>内存溢出(Out Of Memory，简称OOM)是指应用系统中存在无法回收的<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98/103614">内存</a>或使用的<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98/103614">内存</a>过多，最终使得程序运行要用到的<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98/103614">内存</a>大于能提供的最大内存。 </li><li>内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果 。</li></ul></li><li><strong>Exception</strong>:表示异常，其它因编程错误或偶然的外在因素导致的一般性问题，程序员可以通过代码的方式纠正，使程序继续运行，是必须要处理的。好比感冒、阑尾炎。<ul><li>例如：空指针访问、试图读取不存在的文件、网络连接中断、数组角标越界</li></ul></li></ul><p><strong>Throwable中的常用方法：</strong></p><ul><li><p><code>public void printStackTrace()</code>:打印异常的详细信息。</p><p><em>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</em></p></li><li><p><code>public String getMessage()</code>:获取发生异常的原因。</p><p><em>提示给用户的时候,就提示错误原因。</em></p></li></ul><p><em><strong>出现异常,不要紧张,把异常的简单类名,拷贝到API中去查。</strong></em></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%AE%80%E5%8D%95%E7%9A%84%E5%BC%82%E5%B8%B8%E6%9F%A5%E7%9C%8B.bmp"></p><h2 id="8-3-异常分类"><a href="#8-3-异常分类" class="headerlink" title="8.3 异常分类"></a>8.3 异常分类</h2><p>我们平常说的异常就是指Exception，因为这类异常一旦出现，我们就要对代码进行更正，修复程序。</p><p><strong>异常(Exception)的分类</strong>:根据在编译时期还是运行时期去检查异常?</p><ul><li><strong>编译时期异常</strong>:checked异常。在编译时期,就会检查,如果没有处理异常,则编译失败。(如文件找不到异常)</li><li><strong>运行时期异常</strong>:runtime异常。在运行时期,检查异常.在编译时期,运行异常不会被编译器检测到(不报错)。(如数组索引越界异常，类型转换异常)。程序员应该积极避免其出现的异常，而不是使用try..catch处理，因为这类异常很普遍，若都使用try..catch或throws处理可能会对程序的可读性和运行效率产生影响。</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562771528807.png" alt="1562771528807"></p><h3 id="演示常见的错误和异常"><a href="#演示常见的错误和异常" class="headerlink" title="演示常见的错误和异常"></a>演示常见的错误和异常</h3><h4 id="1、VirtualMachineError"><a href="#1、VirtualMachineError" class="headerlink" title="1、VirtualMachineError"></a>1、VirtualMachineError</h4><p>最常见的就是：StackOverflowError、OutOfMemoryError</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//StackOverflowError</span></span><br><span class="line">digui();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">digui</span><span class="params">()</span>&#123;</span><br><span class="line">digui();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//OutOfMemoryError</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[Integer.MAX_VALUE];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//OutOfMemoryError</span></span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">s.append(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、运行时异常"><a href="#2、运行时异常" class="headerlink" title="2、运行时异常"></a>2、运行时异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//NullPointerException</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">System.out.println(arr[<span class="number">0</span>].length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//ClassCastException</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line"><span class="type">Woman</span> <span class="variable">w</span> <span class="operator">=</span> (Woman) p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//InputMismatchException</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//ArithmeticException</span></span><br><span class="line">System.out.println(a/b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、编译时异常"><a href="#3、编译时异常" class="headerlink" title="3、编译时异常"></a>3、编译时异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠1秒</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;Java学习秘籍.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;....&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-4-异常的抛出机制"><a href="#8-4-异常的抛出机制" class="headerlink" title="8.4 异常的抛出机制"></a>8.4 异常的抛出机制</h2><p>先运行下面的程序，程序会产生一个数组索引越界异常ArrayIndexOfBoundsException。我们通过图解来解析下异常产生的过程。</p><p> 工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTools</span> &#123;</span><br><span class="line">    <span class="comment">// 对给定的数组通过给定的角标获取元素。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getElement</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">element</span> <span class="operator">=</span> arr[index];</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123; <span class="number">34</span>, <span class="number">12</span>, <span class="number">67</span> &#125;;</span><br><span class="line">        intnum = ArrayTools.getElement(arr, <span class="number">4</span>)</span><br><span class="line">        System.out.println(<span class="string">&quot;num=&quot;</span> + num);</span><br><span class="line">        System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序执行过程图解：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E5%BC%82%E5%B8%B8%E4%BA%A7%E7%94%9F%E8%BF%87%E7%A8%8B.png"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562772282750.png" alt="1562772282750"></p><h2 id="8-5-异常的处理"><a href="#8-5-异常的处理" class="headerlink" title="8.5 异常的处理"></a>8.5 异常的处理</h2><p>Java异常处理的五个关键字：<strong>try、catch、finally、throw、throws</strong></p><h3 id="8-5-1-异常throw"><a href="#8-5-1-异常throw" class="headerlink" title="8.5.1 异常throw"></a>8.5.1 异常throw</h3><p>Java程序的执行过程中如出现异常，会生成一个异常类对象，该异常对象将被提交给Java运行时系统，这个过程称为抛出(throw)异常。异常对象的生成有两种方式：</p><ul><li>由虚拟机自动生成：程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——自动抛出</li><li>由开发人员手动创建：Exception exception &#x3D; new ClassCastException();——创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样，但是一旦throw抛出，就会对程序运行产生影响了。</li></ul><p>下面我们说明手动抛出异常：</p><p>比如，在定义方法时，方法需要接受参数。那么，当调用方法使用接受到的参数时，首先需要先对参数数据进行合法的判断，数据若不合法，就应该告诉调用者，这时可以使用抛出异常的方式来告诉调用者。</p><p>在java中，提供了一个<strong>throw</strong>关键字，它用来抛出一个指定的异常对象。那么，抛出一个异常具体如何操作呢？</p><ol><li><p>创建一个异常对象。封装一些提示信息(信息可以自己编写)。</p></li><li><p>需要将这个异常对象告知给调用者。怎么告知呢？怎么将这个异常对象传递到调用者处呢？通过关键字throw就可以完成。throw 异常对象。</p><p>throw<strong>用在方法内</strong>，用来抛出一个异常对象，将这个异常对象传递到调用者处，并<strong>结束</strong>当前方法的执行。</p></li></ol><p><strong>使用格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">throw new 异常类名(参数);</span><br></pre></td></tr></table></figure><p> 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;要访问的arr数组不存在&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;该索引在数组中不存在，已超出范围&quot;</span>);</span><br></pre></td></tr></table></figure><p>学习完抛出异常的格式后，我们通过下面程序演示下throw的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThrowDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个数组 </span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">52</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="comment">//根据索引找对应的元素 </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">element</span> <span class="operator">=</span> getElement(arr, index);</span><br><span class="line"></span><br><span class="line">        System.out.println(element);</span><br><span class="line">        System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 根据 索引找到数组中对应的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getElement</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> index)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             判断条件如果满足，当执行完throw抛出异常对象后，方法已经无法继续运算。</span></span><br><span class="line"><span class="comment">             这时就会结束当前方法的执行，并将异常告知给调用者。这时就需要通过异常来解决。 </span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;要访问的arr数组不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//判断  索引是否越界</span></span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">             <span class="comment">/*</span></span><br><span class="line"><span class="comment">             判断条件如果满足，当执行完throw抛出异常对象后，方法已经无法继续运算。</span></span><br><span class="line"><span class="comment">             这时就会结束当前方法的执行，并将异常告知给调用者。这时就需要通过异常来解决。 </span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;哥们，角标越界了~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">element</span> <span class="operator">=</span> arr[index];</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果产生了问题，我们就会throw将问题描述类即异常进行抛出，也就是将问题返回给该方法的调用者。</p><p>那么对于调用者来说，该怎么处理呢？一种是进行捕获处理，另一种就是继续讲问题声明出去，使用throws声明处理。</p></blockquote><h4 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h4><p>1、声明Husband类，包含姓名和妻子属性，属性私有化，提供一个Husband(String name)的构造器，重写toString方法，返回丈夫姓名和妻子的姓名</p><p>2、声明Wife类，包含姓名和丈夫属性，属性私有化，提供一个Wife(String name)的构造器，重写toString方法，返回妻子的姓名和丈夫的姓名</p><p>3、声明TestMarry类，在main中，创建Husband和Wife对象后直接打印妻子和丈夫对象，查看异常情况，看如何解决</p><h4 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h4><p>1、声明银行账户类Account</p><p>（1）包含账号、余额属性，要求属性私有化，提供无参和有参构造，</p><p>（2）包含取款方法，当取款金额为负数时，抛出IllegalArgumentException，异常信息为“取款金额有误，不能为负数”，当取款金额超过余额时，抛出UnsupportedOperationException，异常信息为“取款金额不足，不支持当前取款操作”</p><p>（3）包含存款方法，当取款金额为负数时，抛出IllegalArgumentException，异常信息为“存款金额有误，不能为负数”</p><p>2、编写测试类，创建账号对象，并调用取款和存款方法，并传入非法参数，测试发生对应的异常。</p><h3 id="8-5-2-声明异常throws"><a href="#8-5-2-声明异常throws" class="headerlink" title="8.5.2 声明异常throws"></a>8.5.2 声明异常throws</h3><p><strong>声明异常</strong>：将问题标识出来，报告给调用者。如果方法内通过throw抛出了<strong>编译时异常</strong>，而没有捕获处理（稍后讲解该方式），那么必须通过throws进行声明，让调用者去处理。</p><p>关键字<strong>throws</strong>运用于方法声明之上,用于表示当前方法不处理异常,而是提醒该方法的调用者来处理异常(抛出异常).</p><p><strong>声明异常格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数) throws 异常类名1,异常类名2…&#123;   &#125;</span><br></pre></td></tr></table></figure><p>声明异常的代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">readFile(<span class="string">&quot;不敲代码学会Java秘籍.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"><span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(filePath+<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>throws用于进行异常类的声明，若该方法可能有多种异常情况产生，那么在throws后面可以写多个异常类，用逗号隔开。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException,IllegalAccessException &#123;</span><br><span class="line">readFile(<span class="string">&quot;不敲代码学会Java秘籍.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> FileNotFoundException,IllegalAccessException&#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"><span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(filePath+<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!file.isFile())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(filePath + <span class="string">&quot;不是文件，无法直接读取&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>1、声明银行账户类Account</p><p>（1）包含账号、余额属性，要求属性私有化，提供无参和有参构造，</p><p>（2）包含取款方法，当取款金额为负数时，抛出Exception，异常信息为“越取你余额越多，想得美”，当取款金额超过余额时，抛出Exception，异常信息为“取款金额不足，不支持当前取款操作”</p><p>（3）包含存款方法，当取款金额为负数时，抛出Exception，异常信息为“越存余额越少，你愿意吗？”</p><p>2、编写测试类，创建账号对象，并调用取款和存款方法，并传入非法参数，测试发生对应的异常。</p><h3 id="8-5-3-捕获异常try…catch"><a href="#8-5-3-捕获异常try…catch" class="headerlink" title="8.5.3 捕获异常try…catch"></a>8.5.3 捕获异常try…catch</h3><p>如果异常出现的话,会立刻终止程序,所以我们得处理异常:</p><ol><li>该方法不处理,而是声明抛出,由该方法的调用者来处理(throws)。</li><li>在方法中使用try-catch的语句块来处理异常。</li></ol><p><strong>try-catch</strong>的方式就是捕获异常。</p><ul><li><strong>捕获异常</strong>：Java中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。</li></ul><p>捕获异常语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">     编写可能会出现异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span>  e)&#123;</span><br><span class="line">     处理异常的代码</span><br><span class="line">     <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span>  e)&#123;</span><br><span class="line">     处理异常的代码</span><br><span class="line">     <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p><strong>try：</strong>该代码块中编写可能产生异常的代码。</p><p><strong>catch：</strong>用来进行某种异常的捕获，实现对捕获到的异常进行处理。</p><ul><li>可以有多个catch块，按顺序匹配。</li><li>如果多个异常类型有包含关系，那么小上大下</li></ul><p>演示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">readFile(<span class="string">&quot;不敲代码学会Java秘籍.txt&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;好好敲代码，不要老是想获得什么秘籍&quot;);</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;继续学习吧...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> FileNotFoundException, IllegalAccessException&#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"><span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(filePath+<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!file.isFile())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(filePath + <span class="string">&quot;不是文件，无法直接读取&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何获取异常信息：</p><p>Throwable类中定义了一些查看方法:</p><ul><li><p><code>public String getMessage()</code>:获取异常的描述信息,原因(提示给用户的时候,就提示错误原因。</p></li><li><p><code>public void printStackTrace()</code>:打印异常的跟踪栈信息并输出到控制台。</p></li></ul><p>​            <em>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</em></p><h3 id="8-5-4-finally块"><a href="#8-5-4-finally块" class="headerlink" title="8.5.4 finally块"></a>8.5.4 finally块</h3><p><strong>finally</strong>：有一些特定的代码无论异常是否发生，都需要执行。另外，因为异常会引发程序跳转，导致有些语句执行不到。而finally就是解决这个问题的，在finally代码块中存放的代码都是一定会被执行的。</p><p>什么时候的代码必须最终执行？</p><p>当我们在try语句块中打开了一些物理资源(磁盘文件&#x2F;网络连接&#x2F;数据库连接等),我们都得在使用完之后,最终关闭打开的资源。</p><p>finally的语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(...)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    无论<span class="keyword">try</span>中是否发生异常，也无论<span class="keyword">catch</span>是否捕获异常，也不管<span class="keyword">try</span>和<span class="keyword">catch</span>中是否有<span class="keyword">return</span>语句，都一定会执行</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    无论<span class="keyword">try</span>中是否发生异常，也不管<span class="keyword">try</span>中是否有<span class="keyword">return</span>语句，都一定会执行</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>注意:finally不能单独使用。</p></blockquote><p>比如在我们之后学习的IO流中，当打开了一个关联文件的资源，最后程序不管结果如何，都需要把这个资源关闭掉。</p><p>finally代码参考如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">readFile(<span class="string">&quot;不敲代码学会Java秘籍.txt&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;继续学习吧...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(filePath+<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!file.isFile())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(filePath + <span class="string">&quot;不是文件，无法直接读取&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//抓取到的是编译期异常  抛出去的是运行期 </span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;无论如何，这里的代码一定会被执行&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(fis!=<span class="literal">null</span>)&#123;</span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">//抓取到的是编译期异常  抛出去的是运行期 </span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当只有在try或者catch中调用退出JVM的相关方法，例如System.exit(0),此时finally才不会执行,否则finally永远会执行。</p></blockquote><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E6%AD%BB%E4%BA%86%E9%83%BD%E8%A6%81try.bmp"></p><h3 id="8-5-5-finally与return"><a href="#8-5-5-finally与return" class="headerlink" title="8.5.5 finally与return"></a>8.5.5 finally与return</h3><h4 id="形式一：从try回来"><a href="#形式一：从try回来" class="headerlink" title="形式一：从try回来"></a>形式一：从try回来</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReturn</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> test(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(String str)</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Integer.parseInt(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;test结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="形式二：从catch回来"><a href="#形式二：从catch回来" class="headerlink" title="形式二：从catch回来"></a>形式二：从catch回来</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReturn</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> test(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(String str)</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Integer.parseInt(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;test结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="形式三：从finally回来"><a href="#形式三：从finally回来" class="headerlink" title="形式三：从finally回来"></a>形式三：从finally回来</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReturn</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> test(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(String str)</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Integer.parseInt(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;test结束&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-6-异常注意事项"><a href="#8-6-异常注意事项" class="headerlink" title="8.6 异常注意事项"></a>8.6 异常注意事项</h2><ul><li><p>多个异常使用捕获又该如何处理呢？</p><ol><li>多个异常分别处理。</li><li>多个异常一次捕获，多次处理。(推荐)</li><li>多个异常一次捕获一次处理。</li></ol><p>一般我们是使用一次捕获多次处理方式，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">     编写可能会出现异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型A  e)&#123;  当<span class="keyword">try</span>中出现A类型异常,就用该<span class="keyword">catch</span>来捕获.</span><br><span class="line">     处理异常的代码</span><br><span class="line">     <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型B  e)&#123;  当<span class="keyword">try</span>中出现B类型异常,就用该<span class="keyword">catch</span>来捕获.</span><br><span class="line">     处理异常的代码</span><br><span class="line">     <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:这种异常处理方式，要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。</p></blockquote></li><li><p>运行时异常被抛出可以不处理。即不捕获也不声明抛出。</p></li><li><p>如果finally有return语句,永远返回finally中的结果,避免该情况. </p></li><li><p>如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常。</p></li><li><p>父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类方法中产生了编译时异常，只能捕获处理，不能声明抛出</p></li></ul><h2 id="8-7-自定义异常"><a href="#8-7-自定义异常" class="headerlink" title="8.7 自定义异常"></a>8.7 自定义异常</h2><p><strong>为什么需要自定义异常类:</strong></p><p>我们说了Java中不同的异常类,分别表示着某一种具体的异常情况,那么在开发中总是有些异常情况是Java开发人员没有定义好的,此时我们根据自己业务的异常情况来定义异常类。例如年龄负数问题，考试成绩负数问题等等。那么能不能自己定义异常呢？可以</p><p><strong>异常类如何定义:</strong></p><ol><li>自定义一个编译期异常: 自定义类 并继承于<code>java.lang.Exception</code>。</li><li>自定义一个运行时期的异常类:自定义类 并继承于<code>java.lang.RuntimeException</code>。</li></ol><p><strong>演示自定义异常：</strong></p><p>要求：我们模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</p><p>首先定义一个登陆异常类RegisterException：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 业务逻辑异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空参构造</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RegisterException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 表示异常提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RegisterException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟登陆操作，使用数组模拟数据库中存储的数据，并提供当前注册账号是否存在方法用于判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟数据库中已存在账号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] names = &#123;<span class="string">&quot;bill&quot;</span>,<span class="string">&quot;hill&quot;</span>,<span class="string">&quot;jill&quot;</span>&#125;;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;     </span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">              <span class="comment">// 可能出现异常的代码</span></span><br><span class="line">            checkUsername(<span class="string">&quot;nill&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;注册成功&quot;</span>);<span class="comment">//如果没有异常就是注册成功</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(RegisterException e)&#123;</span><br><span class="line">            <span class="comment">//处理异常</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断当前注册账号是否存在</span></span><br><span class="line">    <span class="comment">//因为是编译期异常，又想调用者去处理 所以声明该异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkUsername</span><span class="params">(String uname)</span> <span class="keyword">throws</span> LoginException&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;names.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(names[i].equals(uname))&#123;<span class="comment">//如果名字在这里面 就抛出登陆异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RegisterException</span>(<span class="string">&quot;亲&quot;</span>+name+<span class="string">&quot;已经被注册了！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><ul><li>从Exception类或者它的子类派生一个子类即可</li><li>习惯上，自定义异常类应该包含2个构造器：一个是无参构造，另一个是带有详细信息的构造器</li><li>自定义的异常只能通过throw抛出。</li><li>自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaSE-【异常】&quot;&gt;&lt;a href=&quot;#JavaSE-【异常】&quot; class=&quot;headerlink&quot; title=&quot;JavaSE_【异常】&quot;&gt;&lt;/a&gt;JavaSE_【异常】&lt;/h1&gt;&lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第7章 面向对象基础（下）</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC7%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC7%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2022-07-28T05:06:17.000Z</published>
    <updated>2022-10-16T04:43:25.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第7章-面向对象基础（下）"><a href="#第7章-面向对象基础（下）" class="headerlink" title="第7章 面向对象基础（下）"></a>第7章 面向对象基础（下）</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><p><input disabled="" type="checkbox"> 认识枚举类型</p></li><li><p><input disabled="" type="checkbox"> 会使用枚举类型</p></li><li><p><input disabled="" type="checkbox"> 认识包装类</p></li><li><p><input disabled="" type="checkbox"> 认识包装类</p></li><li><p><input disabled="" type="checkbox"> 会使用包装类进行处理字符串</p></li><li><p><input disabled="" type="checkbox"> 会分析包装类的相关面试题</p></li><li><p><input disabled="" type="checkbox"> 能够声明抽象类</p></li><li><p><input disabled="" type="checkbox"> 能够说出抽象类的特点</p></li><li><p><input disabled="" type="checkbox"> 能够继承抽象类</p></li><li><p><input disabled="" type="checkbox"> 掌握声明接口的格式</p></li><li><p><input disabled="" type="checkbox"> 掌握实现接口的格式</p></li><li><p><input disabled="" type="checkbox"> 说出接口中成员的特点</p></li><li><p><input disabled="" type="checkbox"> 说出接口的其他特点</p></li><li><p><input disabled="" type="checkbox"> 掌握static关键字的用法</p></li><li><p><input disabled="" type="checkbox"> 说出内部类的几种形式</p></li><li><p><input disabled="" type="checkbox"> 能够声明静态内部类和非静态成员内部类</p></li><li><p><input disabled="" type="checkbox"> 能够看懂和声明匿名内部类</p></li><li><p><input disabled="" type="checkbox"> 能够使用系统预定义的三个基本注解</p></li><li><p><input disabled="" type="checkbox"> 能够编写文档注释</p></li><li><p><input disabled="" type="checkbox"> 能够使用JUnit框架的@Test注解</p></li></ul><h1 id="第七章-面向对象基础–下（续）"><a href="#第七章-面向对象基础–下（续）" class="headerlink" title="第七章 面向对象基础–下（续）"></a>第七章 面向对象基础–下（续）</h1><h2 id="7-1-枚举"><a href="#7-1-枚举" class="headerlink" title="7.1 枚举"></a>7.1 枚举</h2><h3 id="7-1-1-概述"><a href="#7-1-1-概述" class="headerlink" title="7.1.1 概述"></a>7.1.1 概述</h3><p>某些类型的对象是有限的几个，这样的例子举不胜举：</p><ul><li>星期：Monday(星期一)……Sunday(星期天)</li><li>性别：Man(男)、Woman(女)</li><li>月份：January(1月)……December(12月)</li><li>季节：Spring(春天)……Winter(冬天)</li><li>支付方式：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银行卡)、CreditCard(信用卡)</li><li>员工工作状态：Busy（忙）、Free（闲）、Vocation（休假）</li><li>订单状态：Nonpayment（未付款）、Paid（已付款）、Fulfilled（已配货）、Delivered（已发货）、Checked（已确认收货）、Return（退货）、Exchange（换货）、Cancel（取消）</li></ul><p>枚举类型本质上也是一种类，只不过是这个类的对象是固定的几个，而不能随意让用户创建。</p><p>在JDK1.5之前，需要程序员自己通过特殊的方式来定义枚举类型。</p><p>在JDK1.5之后，Java支持enum关键字来快速的定义枚举类型。</p><h3 id="7-1-2-JDK1-5之前"><a href="#7-1-2-JDK1-5之前" class="headerlink" title="7.1.2 JDK1.5之前"></a>7.1.2 JDK1.5之前</h3><p>在JDK1.5之前如何声明枚举类呢？</p><ul><li>构造器加private私有化</li><li>本类内部创建一组常量对象，并添加public static修饰符，对外暴露这些常量对象</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEnum</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> Season.SPRING;</span><br><span class="line">System.out.println(spring);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Season</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span> == SPRING)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;春&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span> == SUMMER)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;夏&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span> == AUTUMN)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;秋&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;冬&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-1-3-JDK1-5之后"><a href="#7-1-3-JDK1-5之后" class="headerlink" title="7.1.3 JDK1.5之后"></a>7.1.3 JDK1.5之后</h3><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 <span class="keyword">enum</span> 枚举类名&#123;</span><br><span class="line">    常量对象列表</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【修饰符】 <span class="keyword">enum</span> 枚举类名&#123;</span><br><span class="line">    常量对象列表;</span><br><span class="line">    </span><br><span class="line">    其他成员列表;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEnum</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> Season.SPRING;</span><br><span class="line">System.out.println(spring);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span>&#123;</span><br><span class="line">SPRING,SUMMER,AUTUMN,WINTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEnum</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> Season.SPRING;</span><br><span class="line">System.out.println(spring);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span>&#123;</span><br><span class="line">SPRING(<span class="string">&quot;春&quot;</span>),SUMMER(<span class="string">&quot;夏&quot;</span>),AUTUMN(<span class="string">&quot;秋&quot;</span>),WINTER(<span class="string">&quot;冬&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String description)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.description = description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;<span class="comment">//需要手动编写，无法使用Generate toString()...</span></span><br><span class="line"><span class="keyword">return</span> description;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举类的要求和特点：</p><ul><li>枚举类的常量对象列表必须在枚举类的首行，因为是常量，所以建议大写。</li><li>如果常量对象列表后面没有其他代码，那么“；”可以省略，否则不可以省略“；”。</li><li>编译器给枚举类默认提供的是private的无参构造，如果枚举类需要的是无参构造，就不需要声明，写常量对象列表时也不用加参数，</li><li>如果枚举类需要的是有参构造，需要手动定义private的有参构造，调用有参构造的方法就是在常量对象名后面加(实参列表)就可以。</li><li>枚举类默认继承的是java.lang.Enum类，因此不能再继承其他的类型。</li><li>JDK1.5之后switch，提供支持枚举类型，case后面可以写枚举常量名。</li><li>枚举类型如有其它属性，建议（<strong>不是必须</strong>）这些属性也声明为final的，因为常量对象在逻辑意义上应该不可变。</li></ul><h3 id="7-1-4-枚举类型常用方法"><a href="#7-1-4-枚举类型常用方法" class="headerlink" title="7.1.4 枚举类型常用方法"></a>7.1.4 枚举类型常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>toString(): 默认返回的是常量名（对象名），可以继续手动重写该方法！</span><br><span class="line"><span class="number">2.</span>name():返回的是常量名（对象名） 【很少使用】</span><br><span class="line"><span class="number">3.</span>ordinal():返回常量的次序号，默认从<span class="number">0</span>开始</span><br><span class="line"><span class="number">4.</span>values():返回该枚举类的所有的常量对象，返回类型是当前枚举的数组类型，是一个静态方法</span><br><span class="line"><span class="number">5.</span>valueOf(String name)：根据枚举常量对象名称获取枚举对象</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEnum</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Season[] values = Season.values();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line"><span class="keyword">switch</span>(values[i])&#123;</span><br><span class="line"><span class="keyword">case</span> SPRING:</span><br><span class="line">System.out.println(values[i]+<span class="string">&quot;:春暖花开，万物复苏&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SUMMER:</span><br><span class="line">System.out.println(values[i]+<span class="string">&quot;:百花争艳，郁郁葱葱&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> AUTUMN:</span><br><span class="line">System.out.println(values[i]+<span class="string">&quot;:菊桂飘香，百树凋零&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WINTER:</span><br><span class="line">System.out.println(values[i]+<span class="string">&quot;:梅花独开，大地一色&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span>&#123;</span><br><span class="line">SPRING,SUMMER,AUTUMN,WINTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-1-5-练习"><a href="#7-1-5-练习" class="headerlink" title="7.1.5 练习"></a>7.1.5 练习</h3><p>案例：<br>1、声明月份枚举类Month：</p><p>（1）创建：1-12月常量对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JANUARY,FEBRUARY,MARCH,APRIL,MAY,JUNE,JULY,AUGUST,SEPTEMBER,OCTOBER,NOVEMBER,DECEMBER</span><br></pre></td></tr></table></figure><p>（2）声明两个属性：value（月份值，例如：JANUARY的value为1），<br>                     description（描述，例如：JANUARY的description为1月份是一年的开始）。</p><p>（3）声明一个有参构造，创建12个对象</p><p>（4）声明一个方法：public static Month getByValue(int value)</p><p>（5）手动重写toString()：返回对象信息，例如：1-&gt;1月份是一年的开始。</p><p>2、在测试类中，从键盘输入1个1-12的月份值，获取对应的月份对象，并打印对象</p><h2 id="7-2-包装类"><a href="#7-2-包装类" class="headerlink" title="7.2 包装类"></a>7.2 包装类</h2><h3 id="7-2-1-包装类"><a href="#7-2-1-包装类" class="headerlink" title="7.2.1 包装类"></a>7.2.1 包装类</h3><p>Java提供了两个类型系统，基本类型与引用类型，使用基本类型在于效率，然而当要使用只针对对象设计的API或新特性（例如泛型），那么基本数据类型的数据就需要用包装类来包装。</p><table><thead><tr><th>序号</th><th>基本数据类型</th><th>包装类（java.lang包）</th></tr></thead><tbody><tr><td>1</td><td>byte</td><td>Byte</td></tr><tr><td>2</td><td>short</td><td>Short</td></tr><tr><td>3</td><td>int</td><td><strong>Integer</strong></td></tr><tr><td>4</td><td>long</td><td>Long</td></tr><tr><td>5</td><td>float</td><td>Float</td></tr><tr><td>6</td><td>double</td><td>Double</td></tr><tr><td>7</td><td>char</td><td><strong>Character</strong></td></tr><tr><td>8</td><td>boolean</td><td>Boolean</td></tr><tr><td>9</td><td>void</td><td>Void</td></tr></tbody></table><h3 id="7-2-2-装箱与拆箱"><a href="#7-2-2-装箱与拆箱" class="headerlink" title="7.2.2  装箱与拆箱"></a>7.2.2  装箱与拆箱</h3><p> 装箱：把基本数据类型转为包装类对象。</p><blockquote><p>转为包装类的对象，是为了使用专门为对象设计的API和特性</p></blockquote><p>拆箱：把包装类对象拆为基本数据类型。</p><blockquote><p>转为基本数据类型，一般是因为需要运算，Java中的大多数运算符是为基本数据类型设计的。比较、算术等</p></blockquote><p>基本数值—-&gt;包装对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">4</span>);<span class="comment">//使用构造函数函数</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.valueOf(<span class="number">4</span>);<span class="comment">//使用包装类中的valueOf方法</span></span><br></pre></td></tr></table></figure><p>包装对象—-&gt;基本数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> i1.intValue();</span><br></pre></td></tr></table></figure><p>JDK1.5之后，可以自动装箱与拆箱。</p><blockquote><p>注意：只能与自己对应的类型之间才能实现自动装箱与拆箱。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>;<span class="comment">//自动装箱。相当于Integer i = Integer.valueOf(4);</span></span><br><span class="line">i = i + <span class="number">5</span>;<span class="comment">//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;</span></span><br><span class="line"><span class="comment">//加法运算完成后，再次装箱，把基本数值转成对象。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//错误的，1是int类型</span></span><br></pre></td></tr></table></figure><p>总结：对象（引用数据类型）能用的运算符有哪些？</p><p>（1）instanceof</p><p>（2）&#x3D;：赋值运算符</p><p>（3）&#x3D;&#x3D;和!&#x3D;：用于比较地址，但是要求左右两边对象的类型一致或者是有父子类继承关系。</p><p>（4）对于字符串这一种特殊的对象，支持“+”，表示拼接。</p><h3 id="7-2-3-包装类的一些API"><a href="#7-2-3-包装类的一些API" class="headerlink" title="7.2.3 包装类的一些API"></a>7.2.3 包装类的一些API</h3><h4 id="1、基本数据类型和字符串之间的转换"><a href="#1、基本数据类型和字符串之间的转换" class="headerlink" title="1、基本数据类型和字符串之间的转换"></a>1、基本数据类型和字符串之间的转换</h4><p>（1）把基本数据类型转为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//String str = a;//错误的</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> a + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(a);</span><br></pre></td></tr></table></figure><p>（2）把字符串转为基本数据类型</p><p>String转换成对应的基本类型 ，除了Character类之外，其他所有包装类都具有parseXxx静态方法可以将字符串参数转换为对应的基本类型，例如：</p><ul><li><code>public static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</li><li><code>public static long parseLong(String s)</code>：将字符串参数转换为对应的long基本类型。</li><li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li></ul><p>或把字符串转为包装类，然后可以自动拆箱为基本数据类型</p><ul><li><code>public static Integer valueOf(String s)</code>：将字符串参数转换为对应的Integer包装类，然后可以自动拆箱为int基本类型</li><li><code>public static Long valueOf(String s)</code>：将字符串参数转换为对应的Long包装类，然后可以自动拆箱为long基本类型</li><li><code>public static Double valueOf(String s)</code>：将字符串参数转换为对应的Double包装类，然后可以自动拆箱为double基本类型</li></ul><p>注意:如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出<code>java.lang.NumberFormatException</code>异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;整数的字符串&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Double.parseDouble(<span class="string">&quot;小数的字符串&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Boolean.parseBoolean(<span class="string">&quot;true或false&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;整数的字符串&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Double.valueOf(<span class="string">&quot;小数的字符串&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Boolean.valueOf(<span class="string">&quot;true或false&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="2、数据类型的最大最小值"><a href="#2、数据类型的最大最小值" class="headerlink" title="2、数据类型的最大最小值"></a>2、数据类型的最大最小值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer.MAX_VALUE和Integer.MIN_VALUE</span><br><span class="line">Long.MAX_VALUE和Long.MIN_VALUE</span><br><span class="line">Double.MAX_VALUE和Double.MIN_VALUE</span><br></pre></td></tr></table></figure><h4 id="3、字符转大小写"><a href="#3、字符转大小写" class="headerlink" title="3、字符转大小写"></a>3、字符转大小写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Character.toUpperCase(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">Character.toLowerCase(<span class="string">&#x27;X&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="4、整数转进制"><a href="#4、整数转进制" class="headerlink" title="4、整数转进制"></a>4、整数转进制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer.toBinaryString(<span class="type">int</span> i) </span><br><span class="line">Integer.toHexString(<span class="type">int</span> i)</span><br><span class="line">Integer.toOctalString(<span class="type">int</span> i)</span><br></pre></td></tr></table></figure><h3 id="7-2-4-包装类对象的缓存问题"><a href="#7-2-4-包装类对象的缓存问题" class="headerlink" title="7.2.4 包装类对象的缓存问题"></a>7.2.4 包装类对象的缓存问题</h3><table><thead><tr><th>包装类</th><th>缓存对象</th></tr></thead><tbody><tr><td>Byte</td><td>-128~127</td></tr><tr><td>Short</td><td>-128~127</td></tr><tr><td>Integer</td><td>-128~127</td></tr><tr><td>Long</td><td>-128~127</td></tr><tr><td>Float</td><td>没有</td></tr><tr><td>Double</td><td>没有</td></tr><tr><td>Character</td><td>0~127</td></tr><tr><td>Boolean</td><td>true和false</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">System.out.println(i == j);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(i == j);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);<span class="comment">//新new的在堆中</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//这个用的是缓冲的常量对象，在方法区</span></span><br><span class="line">System.out.println(i == j);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);<span class="comment">//新new的在堆中</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);<span class="comment">//另一个新new的在堆中</span></span><br><span class="line">System.out.println(i == j);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line">System.out.println(d1==d2);<span class="comment">//false 比较地址，没有缓存对象，每一个都是新new的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-5-面试题"><a href="#7-2-5-面试题" class="headerlink" title="7.2.5 面试题"></a>7.2.5 面试题</h3><h4 id="1、类型转换问题"><a href="#1、类型转换问题" class="headerlink" title="1、类型转换问题"></a>1、类型转换问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line">System.out.println(d1==d2);<span class="comment">//true 和基本数据类型比较会自动拆箱，比较数据值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">System.out.println(i==j);<span class="comment">//true  会先将i自动拆箱为int，然后根据基本数据类型“自动类型转换”规则，转为double比较</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">System.out.println(i==j);<span class="comment">//true 会自动拆箱，按照基本数据类型进行比较</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、不可变对象"><a href="#2、不可变对象" class="headerlink" title="2、不可变对象"></a>2、不可变对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExam</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>);</span><br><span class="line"><span class="type">Circle</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">change(i,j,c);</span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span> + i);<span class="comment">//1</span></span><br><span class="line">System.out.println(<span class="string">&quot;j = &quot;</span> + j);<span class="comment">//2</span></span><br><span class="line">System.out.println(<span class="string">&quot;c.radius = &quot;</span> + c.radius);<span class="comment">//10.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 方法的参数传递机制：</span></span><br><span class="line"><span class="comment"> * （1）基本数据类型：形参的修改完全不影响实参</span></span><br><span class="line"><span class="comment"> * （2）引用数据类型：通过形参修改对象的属性值，会影响实参的属性值</span></span><br><span class="line"><span class="comment"> * 这类Integer等包装类对象是“不可变”对象，即一旦修改，就是新对象，和实参就无关了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> a ,Integer b,Circle c )</span>&#123;</span><br><span class="line">a += <span class="number">10</span>;</span><br><span class="line"><span class="comment">//b += 10;//等价于  b = new Integer(b+10);</span></span><br><span class="line">c.radius += <span class="number">10</span>;</span><br><span class="line"><span class="comment">/*c = new Circle();</span></span><br><span class="line"><span class="comment">c.radius+=10;*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"><span class="type">double</span> radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-抽象类"><a href="#7-3-抽象类" class="headerlink" title="7.3 抽象类"></a>7.3 抽象类</h2><h3 id="7-3-1-由来"><a href="#7-3-1-由来" class="headerlink" title="7.3.1 由来"></a>7.3.1 由来</h3><p>抽象：即不具体、或无法具体</p><p>例如：当我们声明一个几何图形类：圆、矩形、三角形类等，发现这些类都有共同特征：求面积、求周长、获取图形详细信息。那么这些共同特征应该抽取到一个公共父类中。但是这些方法在父类中又<strong>无法给出具体的实现</strong>，而是应该交给子类各自具体实现。那么父类在声明这些方法时，<strong>就只有方法签名，没有方法体</strong>，我们把没有方法体的方法称为<strong>抽象方法</strong>。Java语法规定，包含抽象方法的类必须是<strong>抽象类</strong>。</p><h3 id="7-3-2-语法格式"><a href="#7-3-2-语法格式" class="headerlink" title="7.3.2 语法格式"></a>7.3.2 语法格式</h3><ul><li><strong>抽象方法</strong> ： 没有方法体的方法。</li><li><strong>抽象类</strong>：被abstract所修饰的类。</li></ul><p>抽象类的语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">【权限修饰符】 <span class="keyword">abstract</span> class 类名&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">【权限修饰符】 <span class="keyword">abstract</span> class 类名 extends 父类&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象方法的语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【其他修饰符】 <span class="keyword">abstract</span> 返回值类型  方法名(【形参列表】);</span><br></pre></td></tr></table></figure><blockquote><p>注意：抽象方法没有方法体</p></blockquote><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;小猫在墙头走~~~&quot;</span>)；  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CatTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(); </span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 调用run方法</span></span><br><span class="line">        c.run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">小猫在墙头走~~~</span><br></pre></td></tr></table></figure><p>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做<strong>实现方法</strong>。</p><h3 id="7-3-3-注意事项"><a href="#7-3-3-注意事项" class="headerlink" title="7.3.3 注意事项"></a>7.3.3 注意事项</h3><p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p></blockquote></li><li><p>抽象类中，也有构造方法，是供子类创建对象时，初始化父类成员变量使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()或手动的super(实参列表)，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。 </p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li></ol><h3 id="7-3-4-练习"><a href="#7-3-4-练习" class="headerlink" title="7.3.4 练习"></a>7.3.4 练习</h3><h4 id="1、练习1"><a href="#1、练习1" class="headerlink" title="1、练习1"></a>1、练习1</h4><p>定义一个几何图形父类Graphic。所有几何图形都应该具备一个计算面积的方法。但是不同的几何图形计算面积的方式完全不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Graphic</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Graphic</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Graphic</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">double</span> length, <span class="type">double</span> width)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.length = length;</span><br><span class="line"><span class="built_in">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.length = length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> length * width;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、练习2"><a href="#2、练习2" class="headerlink" title="2、练习2"></a>2、练习2</h4><p>1、声明抽象父类：Person，包含抽象方法：<br>public abstract void walk();<br>public abstract void eat();</p><p>2、声明子类Man，继承Person<br>重写walk()：大步流星走路<br>重写eat()：狼吞虎咽吃饭<br>新增方法：public void smoke()实现为吞云吐雾</p><p>3、声明子类Woman，继承Person<br>重写walk()：婀娜多姿走路<br>重写eat()：细嚼慢咽吃饭<br>新增方法：public void buy()实现为买买买…</p><p>4、在测试类中创建子类对象，调用方法测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;大步流星走路&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;狼吞虎咽吃饭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smoke</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;吞云吐雾&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;婀娜多姿走路&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;细嚼慢咽吃饭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;买买买...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExer1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Man</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">m.eat();</span><br><span class="line">m.walk();</span><br><span class="line">m.smoke();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Woman</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">w.eat();</span><br><span class="line">w.walk();</span><br><span class="line">w.buy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-4-接口"><a href="#7-4-接口" class="headerlink" title="7.4 接口"></a>7.4 接口</h2><h3 id="7-4-1-概述"><a href="#7-4-1-概述" class="headerlink" title="7.4.1 概述"></a>7.4.1 概述</h3><p>生活中大家每天都在用USB接口，那么USB接口与我们今天要学习的接口有什么相同点呢？</p><pre><code> USB（ Universal Serial Bus ）是通用串行总线的英文缩写，是Intel公司开发的总线架构，使得在计算机上添加串行设备（鼠标、键盘、打印机、扫描仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等）非常容易。只须将设备插入计算机的USB端口中，系统会自动识别和配置。 有了USB，我们电脑需要提供的各种插槽的口越来越少，而能支持的其他设备的连接却越来越多。</code></pre><p>​那么我们平时看到的电脑上的USB插口、以及其他设备上的USB插口是什么呢？</p><p>​其实，不管是电脑上的USB插口，还是其他设备上的USB插口都只是遵循了USB规范的一种具体设备而已。</p><p>​根据时代发展，USB接口标准经历了一代USB、第二代USB 2.0和第三代USB 3.0 。</p><p>​USB规格第一次是于1995年，由Intel、IBM、Compaq、Microsoft、NEC、Digital、North Telecom等七家公司组成的USBIF(USB Implement Forum)共同提出，USBIF于1996年1月正式提出USB1.0规格，频宽为1.5Mbps。</p><p>   USB2.0技术规范是有由Compaq、Hewlett Packard、Intel、Lucent、Microsoft、NEC、Philips共同制定、发布的，规范把外设数据传输速度提高到了480Mbps，被称为USB 2.0的高速(High-speed)版本.</p><p>   USB 3.0是最新的USB规范，该规范由英特尔等公司发起,USB3.0的最大传输带宽高达5.0Gbps(640MB&#x2F;s),USB3.0 引入全双工数据传输。5根线路中2根用来发送数据，另2根用来接收数据，还有1根是地线。也就是说，USB 3.0可以同步全速地进行读写操作。</p><table><thead><tr><th><strong>USB版本</strong></th><th><strong>最大传输速率</strong></th><th><strong>速率称号</strong></th><th><strong>最大输出电流</strong></th><th><strong>推出时间</strong></th></tr></thead><tbody><tr><td>USB1.0</td><td>1.5Mbps(192KB&#x2F;s)</td><td>低速(Low-Speed)</td><td>5V&#x2F;500mA</td><td>1996年1月</td></tr><tr><td>USB1.1</td><td>12Mbps(1.5MB&#x2F;s)</td><td>全速(Full-Speed)</td><td>5V&#x2F;500mA</td><td>1998年9月</td></tr><tr><td>USB2.0</td><td>480Mbps(60MB&#x2F;s)</td><td>高速(High-Speed)</td><td>5V&#x2F;500mA</td><td>2000年4月</td></tr><tr><td>USB3.0</td><td>5Gbps(500MB&#x2F;s)</td><td>超高速(Super-Speed)</td><td>5V&#x2F;900mA</td><td>2008年11月</td></tr><tr><td>USB 3.1</td><td>10Gbps(1280MB&#x2F;s)</td><td>超高速+(Super-speed+)</td><td>20V&#x2F;5A</td><td>2013年12月</td></tr></tbody></table><p> 下面是USB2.0和USB3.0标准下的各类接口示意图： </p><p><img src="/imgs/20180627200402517.png"></p><p>​电脑边上提供了USB插槽，这个插槽遵循了USB的规范，只要其他设备也是遵循USB规范的，那么就可以互联，并正常通信。至于这个电脑、以及其他设备是哪个厂家制造的，内部是如何实现的，我们都无需关心。</p><p>​这种设计是将规范和实现分离，这也正是Java接口的好处。Java的软件系统会有很多模块组成，那么各个模块之间也应该采用这种面相接口的低耦合，为系统提供更好的可扩展性和可维护性。</p><ul><li>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是&#x2F;要…则必须能…”的思想。继承是一个”是不是”的is-a关系，而接口实现则是 “能不能”的has-a关系。<ul><li>例如：你能不能用USB进行连接，或是否具备USB通信功能，就看你是否遵循USB接口规范</li><li>例如：Java程序是否能够连接使用某种数据库产品，那么要看该数据库产品有没有实现Java设计的JDBC规范</li></ul></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562216188519.png" alt="1562216188519"></p><p><img src="/imgs/1562891521094.png" alt="1562891521094"></p><h3 id="7-4-2-定义格式"><a href="#7-4-2-定义格式" class="headerlink" title="7.4.2 定义格式"></a>7.4.2 定义格式</h3><p>接口的定义，它与定义类方式相似，但是使用 <code>interface</code> 关键字。它也会被编译成.class文件，但一定要明确它并不是类，而是另外一种引用数据类型。</p><blockquote><p>引用数据类型：数组，类，接口。</p></blockquote><h4 id="1、接口的声明格式"><a href="#1、接口的声明格式" class="headerlink" title="1、接口的声明格式"></a>1、接口的声明格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 interface 接口名&#123;</span><br><span class="line">    <span class="comment">//接口的成员列表：</span></span><br><span class="line">    <span class="comment">// 静态常量</span></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="comment">// 私有方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Usb3</span>&#123;</span><br><span class="line">    <span class="comment">//静态常量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">MAX_SPEED</span> <span class="operator">=</span> <span class="number">500</span>*<span class="number">1024</span>*<span class="number">1024</span>;<span class="comment">//500MB/s</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//默认方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;USB 3.0可以同步全速地进行读写操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、接口的成员说明"><a href="#2、接口的成员说明" class="headerlink" title="2、接口的成员说明"></a>2、接口的成员说明</h4><p>接口定义的是多个类共同的公共行为规范，这些行为规范是与外部交流的通道，这就意味着接口里通常是定义一组公共方法。</p><p>在JDK8之前，接口中只允许出现：</p><p>（1）公共的静态的常量：其中public static final可以省略</p><p>（2）公共的抽象的方法：其中public abstract可以省略</p><blockquote><p>理解：接口是从多个相似类中抽象出来的规范，不需要提供具体实现</p></blockquote><p>在JDK1.8时，接口中允许声明默认方法和静态方法：</p><p>（3）公共的默认的方法：其中public 可以省略，建议保留，但是default不能省略</p><p>（4）公共的静态的方法：其中public 可以省略，建议保留，但是static不能省略</p><p>在JDK1.9时，接口又增加了：</p><p>（5）私有方法</p><p>除此之外，接口中不能有其他成员，没有构造器，没有初始化块，因为接口中没有成员变量需要初始化。</p><h4 id="3、面试题拷问？"><a href="#3、面试题拷问？" class="headerlink" title="3、面试题拷问？"></a>3、面试题拷问？</h4><p>1、为什么接口中只能声明公共的静态的常量？</p><p>因为接口是标准规范，那么在规范中需要声明一些底线边界值，当实现者在实现这些规范时，不能去随意修改和触碰这些底线，否则就有“危险”。</p><p>例如：USB1.0规范中规定最大传输速率是1.5Mbps，最大输出电流是5V&#x2F;500mA</p><p>​           USB3.0规范中规定最大传输速率是5Gbps(500MB&#x2F;s)，最大输出电流是5V&#x2F;900mA</p><p>例如：尚硅谷学生行为规范中规定学员，早上8:25之前进班，晚上21:30之后离开等等。</p><p>2、为什么JDK1.8之后要允许接口定义静态方法和默认方法呢？因为它违反了接口作为一个抽象标准定义的概念。</p><p><strong>静态方法</strong>：因为之前的标准类库设计中，有很多Collection&#x2F;Colletions或者Path&#x2F;Paths这样成对的接口和类，后面的类中都是静态方法，而这些静态方法都是为前面的接口服务的，那么这样设计一对API，不如把静态方法直接定义到接口中使用和维护更方便。</p><p><strong>默认方法</strong>：（1）我们要在已有的老版接口中提供新方法时，如果添加抽象方法，就会涉及到原来使用这些接口的类就会有问题，那么为了保持与旧版本代码的兼容性，只能允许在接口中定义默认方法实现。比如：Java8中对Collection、List、Comparator等接口提供了丰富的默认方法。（2）当我们接口的某个抽象方法，在很多实现类中的实现代码是一样的，此时将这个抽象方法设计为默认方法更为合适，那么实现类就可以选择重写，也可以选择不重写。</p><p>3、为什么JDK1.9要允许接口定义私有方法呢？因为我们说接口是规范，规范时需要公开让大家遵守的</p><p><strong>私有方法</strong>：因为有了默认方法和静态方法这样具有具体实现的方法，那么就可能出现多个方法由共同的代码可以抽取，而这些共同的代码抽取出来的方法又只希望在接口内部使用，所以就增加了私有方法。</p><h3 id="7-4-3-实现接口"><a href="#7-4-3-实现接口" class="headerlink" title="7.4.3 实现接口"></a>7.4.3 实现接口</h3><p>接口的使用，它<strong>不能创建对象</strong>，但是可以被实现（<code>implements</code> ，类似于被继承）。</p><p>类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 <code> implements</code>关键字。</p><h4 id="1、实现接口语法格式"><a href="#1、实现接口语法格式" class="headerlink" title="1、实现接口语法格式"></a>1、实现接口语法格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 class 实现类  implements 接口&#123;</span><br><span class="line"><span class="comment">// 重写接口中抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span></span><br><span class="line">  <span class="comment">// 重写接口中默认方法【可选】</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【修饰符】 class 实现类 extends 父类 implements 接口&#123;</span><br><span class="line">    <span class="comment">// 重写接口中抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span></span><br><span class="line">  <span class="comment">// 重写接口中默认方法【可选】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><p>如果接口的实现类是非抽象类，那么必须重写接口中<strong>所有</strong>抽象方法。</p></li><li><p>默认方法可以选择保留，也可以重写。</p><blockquote><p>重写时，default单词就不要再写了，它只用于在接口中表示默认方法，到类中就没有默认方法的概念了</p></blockquote></li><li><p>不能重写静态方法</p></li></ol><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MobileHDD</span> <span class="keyword">implements</span> <span class="title class_">Usb3</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写/实现接口的抽象方法，【必选】</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;读数据&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;写数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写接口的默认方法，【可选】</span></span><br><span class="line"><span class="comment">//重写默认方法时，default单词去掉</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;清理硬盘中的隐藏回收站中的东西，再结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、如何调用对应的方法"><a href="#2、如何调用对应的方法" class="headerlink" title="2、如何调用对应的方法"></a>2、如何调用对应的方法</h4><ul><li>对于接口的静态方法，直接使用“接口名.”进行调用即可<ul><li>也只能使用“接口名.”进行调用，不能通过实现类的对象进行调用</li></ul></li><li>对于接口的抽象方法、默认方法，只能通过实现类对象才可以调用<ul><li>接口不能直接创建对象，只能创建实现类的对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInteface</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建实现类对象</span></span><br><span class="line"><span class="type">MobileHDD</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MobileHDD</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过实现类对象调用重写的抽象方法，以及接口的默认方法，如果实现类重写了就执行重写的默认方法，如果没有重写，就执行接口中的默认方法</span></span><br><span class="line">b.start();</span><br><span class="line">b.read();</span><br><span class="line">b.stop();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过接口名调用接口的静态方法</span></span><br><span class="line">MobileHDD.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、练习"><a href="#3、练习" class="headerlink" title="3、练习"></a>3、练习</h4><p>1、声明一个LiveAble接口</p><ul><li>包含两个抽象方法：<ul><li>void eat();</li><li>void breathe();</li></ul></li><li>包含默认方法  default void sleep()，实现为打印“静止不动”</li><li>包含静态方法 static void drink()，实现为“喝水”</li></ul><p>2、声明动物Animal类，实现LiveAble接口。</p><ul><li>void eat();实现为“吃东西”，</li><li>void breathe();实现为”吸入氧气呼出二氧化碳”</li><li>void sleep()重写为”闭上眼睛睡觉”</li></ul><p>3、声明植物Plant类，实现LiveAble接口。</p><ul><li>void eat();实现为“吸收营养”</li><li>void breathe();实现为”吸入二氧化碳呼出氧气”</li></ul><p>4、在测试类中，分别创建两个实现类的对象，调用对应的方法。通过接口名，调用静态方法</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LiveAble</span> &#123;</span><br><span class="line">    <span class="comment">// 定义抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">breathe</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//定义默认方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;静止不动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;喝水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Animal <span class="keyword">implements</span> <span class="title class_">LiveAble</span> &#123;</span><br><span class="line"><span class="comment">//重写/实现接口的抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重写/实现接口的抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">breathe</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吸入氧气呼出二氧化碳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重写接口的默认方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;闭上眼睛睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Plant</span> <span class="keyword">implements</span> <span class="title class_">LiveAble</span> &#123;</span><br><span class="line"><span class="comment">//重写/实现接口的抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吸收营养&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写/实现接口的抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">breathe</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吸入二氧化碳呼出氧气&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建实现类（子类）对象  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="comment">// 调用实现后的方法</span></span><br><span class="line">        a.eat();</span><br><span class="line">        a.sleep();</span><br><span class="line">        a.breathe();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建实现类（子类）对象</span></span><br><span class="line">        <span class="type">Plant</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Plant</span>();</span><br><span class="line">        p.eat();</span><br><span class="line">        p.sleep();</span><br><span class="line">        p.breathe();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过接口调用静态方法</span></span><br><span class="line">        LiveAble.drink();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">吃东西</span><br><span class="line">闭上眼睛睡觉</span><br><span class="line">吸入氧气呼出二氧化碳</span><br><span class="line">吸收营养</span><br><span class="line">静止不动</span><br><span class="line">吸入二氧化碳呼出氧气</span><br><span class="line">喝水</span><br></pre></td></tr></table></figure><h3 id="7-4-4-接口的多实现"><a href="#7-4-4-接口的多实现" class="headerlink" title="7.4.4 接口的多实现"></a>7.4.4 接口的多实现</h3><p>之前学过，在继承体系中，一个类只能继承一个父类。而对于接口而言，一个类是可以实现多个接口的，这叫做接口的<strong>多实现</strong>。并且，一个类能继承一个父类，同时实现多个接口。</p><p>实现格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 class 实现类  implements 接口<span class="number">1</span>，接口<span class="number">2</span>，接口<span class="number">3</span>。。。&#123;</span><br><span class="line"><span class="comment">// 重写接口中所有抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span></span><br><span class="line">  <span class="comment">// 重写接口中默认方法【可选】</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【修饰符】 class 实现类 extends 父类 implements 接口<span class="number">1</span>，接口<span class="number">2</span>，接口<span class="number">3</span>。。。&#123;</span><br><span class="line">    <span class="comment">// 重写接口中所有抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span></span><br><span class="line">  <span class="comment">// 重写接口中默认方法【可选】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口中，有多个抽象方法时，实现类必须重写所有抽象方法。<strong>如果抽象方法有重名的，只需要重写一次</strong>。</p></blockquote><p>定义多个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">showA</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">showB</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;showA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;showB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>1、声明第一个接口Runner，包含抽象方法：void run()</p><p>2、声明第二个接口Swimming，包含抽象方法：void swim()</p><p>3、声明兔子类，实现Runner接口</p><p>4、声明乌龟类，实现Runner接口和Swimming接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Runner</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swimming</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">implements</span> <span class="title class_">Runner</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;兔子跑得快&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tortoise</span> <span class="keyword">implements</span> <span class="title class_">Runner</span>,Swimming&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;乌龟游得快&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;乌龟跑的慢&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-5-默认方法冲突问题"><a href="#7-4-5-默认方法冲突问题" class="headerlink" title="7.4.5 默认方法冲突问题"></a>7.4.5 默认方法冲突问题</h3><h4 id="1、亲爹优先原则"><a href="#1、亲爹优先原则" class="headerlink" title="1、亲爹优先原则"></a>1、亲爹优先原则</h4><p>当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的抽象方法重名，子类就近选择执行父类的成员方法。代码如下：</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AAAAAAAAAAAA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DDDDDDDDDDDD&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="comment">// 未重写methodA方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="comment">//当然也可以选择重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BBBBBBBBBBBB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.methodA(); </span><br><span class="line">        </span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">DDDDDDDDDDDD</span><br><span class="line">BBBBBBBBBBBB</span><br></pre></td></tr></table></figure><h4 id="2、必须做出选择"><a href="#2、必须做出选择" class="headerlink" title="2、必须做出选择"></a>2、必须做出选择</h4><p>当一个类同时实现了多个接口，而多个接口中包含方法签名相同的默认方法时，怎么办呢？</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E9%80%89%E6%8B%A9%E5%9B%B0%E9%9A%BE.jpg"></p><p>无论你多难抉择，最终都是要做出选择的。代码如下：</p><p>声明接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">d</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;今晚7点-8点陪我吃饭看电影&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">d</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;今晚7点-8点陪我逛街吃饭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择保留其中一个，通过“接口名.super.方法名”的方法选择保留哪个接口的默认方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">d</span><span class="params">()</span> &#123;</span><br><span class="line">A.<span class="built_in">super</span>.d();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择自己完全重写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">d</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;自己待着&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-6-接口的多继承"><a href="#7-4-6-接口的多继承" class="headerlink" title="7.4.6 接口的多继承"></a>7.4.6 接口的多继承</h3><p>一个接口能继承另一个或者多个接口，接口的继承也使用 <code>extends</code> 关键字，子接口继承父接口的方法。</p><p>定义父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AAAAAAAAAAAAAAAAAAA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BBBBBBBBBBBBBBBBBBB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义子接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span>,B&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CCCCCCCCCCCCCCCCCCCC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>子接口重写默认方法时，default关键字可以保留。</p><p>子类重写默认方法时，default关键字不可以保留。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">C</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;xxxxx&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;yyyyy&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">E</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B,C&#123;<span class="comment">//效果和上面的D是等价的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;xxxxx&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;yyyyy&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-7-接口与实现类对象的多态引用"><a href="#7-4-7-接口与实现类对象的多态引用" class="headerlink" title="7.4.7 接口与实现类对象的多态引用"></a>7.4.7 接口与实现类对象的多态引用</h3><p>实现类实现接口，类似于子类继承父类，因此，接口类型的变量与实现类的对象之间，也可以构成多态引用。通过接口类型的变量调用方法，最终执行的是你new的实现类对象实现的方法体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterface</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Flyable</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">b.fly();</span><br><span class="line"></span><br><span class="line"><span class="type">Flyable</span> <span class="variable">k</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kite</span>();</span><br><span class="line">k.fly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;展翅高飞&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Kite</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;别拽我，我要飞&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-8-接口面试题排错"><a href="#7-4-8-接口面试题排错" class="headerlink" title="7.4.8  接口面试题排错"></a>7.4.8  接口面试题排错</h3><h4 id="第1题：成员变量冲突问题"><a href="#第1题：成员变量冲突问题" class="headerlink" title="第1题：成员变量冲突问题"></a>第1题：成员变量冲突问题</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562417617254.png" alt="1562417617254"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">JieKou1</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">2</span>;<span class="comment">//公共的静态的常量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">JieKou2</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> <span class="keyword">implements</span> <span class="title class_">JieKou1</span>,JieKou2&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(x);//错误，模糊不清</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.x);</span><br><span class="line">        System.out.println(JieKou1.x);</span><br><span class="line">        System.out.println(JieKou2.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-9-经典接口介绍"><a href="#7-4-9-经典接口介绍" class="headerlink" title="7.4.9  经典接口介绍"></a>7.4.9  经典接口介绍</h3><h4 id="1、java-lang-Comparable"><a href="#1、java-lang-Comparable" class="headerlink" title="1、java.lang.Comparable"></a>1、java.lang.Comparable</h4><p>我们知道基本数据类型的数据（除boolean类型外）需要比较大小的话，之间使用比较运算符即可，但是引用数据类型是不能直接使用比较运算符来比较大小的。那么，如何解决这个问题呢？</p><p>Java给所有引用数据类型的大小比较，指定了一个标准接口，就是java.lang.Comparable接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object obj)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们想要使得我们某个类的对象可以比较大小，怎么做呢？步骤：</p><p>第一步：哪个类的对象要比较大小，哪个类就实现java.lang.Comparable接口，并重写方法</p><ul><li>方法体就是你要如何比较当前对象和指定的另一个对象的大小</li></ul><p>第二步：对象比较大小时，通过对象调用compareTo方法，根据方法的返回值决定谁大谁小。</p><ul><li>this对象（调用compareTo方法的对象）大于指定对象（传入compareTo()的参数对象）返回正整数</li><li>this对象（调用compareTo方法的对象）小于指定对象（传入compareTo()的参数对象）返回负整数</li><li>this对象（调用compareTo方法的对象）等于指定对象（传入compareTo()的参数对象）返回零</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComparable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">89</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">89</span>);</span><br><span class="line"><span class="keyword">if</span>(s1.compareTo(s2)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;s1&gt;s2&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s1.compareTo(s2)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;s1&lt;s2&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;s1 = s2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略了构造器、get/set、toString等方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"><span class="comment">//这些需要强制，将o对象向下转型为Student类型的变量，才能调用Student类中的属性</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) o;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.score != stu.score)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.score - stu.score;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//成绩相同，按照学号比较大小</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.id - stu.id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习1：冒泡排序"><a href="#练习1：冒泡排序" class="headerlink" title="练习1：冒泡排序"></a>练习1：冒泡排序</h5><p>声明一个Employee员工类，包含编号、姓名、薪资，实现Comparable接口，要求，按照薪资比较大小，如果薪资相同，按照编号比较大小。</p><p>声明一个测试类TestEmployee类，在main中创建Employee[]数组，长度为5，并且存储5个员工对象，现在要求用冒泡排序，实现对这个数组进行排序，遍历结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Employee [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, salary=&quot;</span> + salary + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> (Employee) o;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.getSalary() != emp.getSalary())&#123;</span><br><span class="line"><span class="keyword">return</span> Double.compare(<span class="built_in">this</span>.getSalary(), emp.getSalary());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.id - emp.id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComparable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Employee[] arr = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">13000</span>);</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">13000</span>);</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">14000</span>);</span><br><span class="line">arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>,<span class="string">&quot;赵六&quot;</span>,<span class="number">7000</span>);</span><br><span class="line">arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>,<span class="string">&quot;钱七&quot;</span>,<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//原顺序</span></span><br><span class="line">System.out.println(<span class="string">&quot;员工列表：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line">                <span class="comment">//因为Employee类型实现了Comparable接口，所以有compareTo()方法</span></span><br><span class="line"><span class="keyword">if</span>(arr[j].compareTo(arr[j+<span class="number">1</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;排序后员工列表：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习2：自定义数组排序工具类"><a href="#练习2：自定义数组排序工具类" class="headerlink" title="练习2：自定义数组排序工具类"></a>练习2：自定义数组排序工具类</h5><p>自定义一个数组工具类MyArrays，它包含一个静态方法，可以给任意对象数组用冒泡排序实现从小到大排序，该怎么定义这个方法呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArrays</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Object[] arr)</span>&#123;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line"><span class="comment">//将arr[j]强制为Comparable接口类型，目的是调用compareTo方法</span></span><br><span class="line"><span class="comment">//当然如果数组的元素没有实现这个接口，那么将会发生ClassCastException</span></span><br><span class="line"><span class="type">Comparable</span> <span class="variable">c</span> <span class="operator">=</span> (Comparable) arr[j];</span><br><span class="line"><span class="keyword">if</span>(c.compareTo(arr[j+<span class="number">1</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Object[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用自定义的MyArrays数组工具类，给练习1的员工数组进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComparable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Employee[] arr = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">13000</span>);</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">13000</span>);</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">14000</span>);</span><br><span class="line">arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>,<span class="string">&quot;赵六&quot;</span>,<span class="number">7000</span>);</span><br><span class="line">arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>,<span class="string">&quot;钱七&quot;</span>,<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//原顺序</span></span><br><span class="line">System.out.println(<span class="string">&quot;员工列表：&quot;</span>);</span><br><span class="line">MyArrays.print(arr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//要求Employee类型必须实现Comparable接口，否则将发生ClassCastException异常</span></span><br><span class="line">MyArrays.sort(arr);</span><br><span class="line">        </span><br><span class="line">System.out.println(<span class="string">&quot;排序后员工列表：&quot;</span>);</span><br><span class="line">MyArrays.print(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>java.util.Arrays数组工具类的public static void sort(Object[] a)就是这么实现的，只不过它使用的排序算法是效率更高快排，而不是冒泡排序，但是无论哪种排序算法，最终都要涉及到两个元素的比较大小，都需要通过元素调用compareTo()方法。</p></blockquote><h4 id="2、java-util-Comparator"><a href="#2、java-util-Comparator" class="headerlink" title="2、java.util.Comparator"></a>2、java.util.Comparator</h4><p>思考：</p><p>（1）如果一个类，没有实现Comparable接口，而这个类你又不方便修改（例如：一些第三方的类，你只有.class文件，没有源文件），那么这样类的对象也要比较大小怎么办？</p><p>（2）如果一个类，实现了Comparable接口，也指定了两个对象的比较大小的规则，但是此时此刻我不想按照它预定义的方法比较大小，但是我又不能随意修改，因为会影响其他地方的使用，怎么办？</p><p>JDK在设计类库之初，也考虑到这种情况了，所以又增加了一个java.util.Comparator接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparator</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1,Object o2)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们想要比较某个类的两个对象的大小，怎么做呢？步骤：</p><p>第一步：编写一个类，我们称之为比较器类型，实现java.util.Comparator接口，并重写方法</p><ul><li>方法体就是你要如何指定的两个对象的大小</li></ul><p>第二步：比较大小时，通过比较器类型的对象调用compare()方法，将要比较大小的两个对象作为compare方法的实参传入，根据方法的返回值决定谁大谁小。</p><ul><li>o1对象大于o2返回正整数</li><li>o1对象小于o2返回负整数</li><li>o1对象等于o2返回零</li></ul><p>代码示例：一个没有实现Comparable接口的学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> score)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">int</span> score)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Student [name=&quot;</span> + name + <span class="string">&quot;, score=&quot;</span> + score + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码示例：定义定制比较器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentScoreCompare</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> (Student) o1;</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> (Student) o2;</span><br><span class="line"><span class="keyword">return</span> s1.getScore() - s2.getScore();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码示例：测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComparator</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">89</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">78</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">StudentScoreCompare</span> <span class="variable">ssc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentScoreCompare</span>();</span><br><span class="line"><span class="keyword">if</span>(ssc.compare(stu1, stu2)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(stu1 + <span class="string">&quot;&gt;&quot;</span> + stu2);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ssc.compare(stu1, stu2)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(stu1 + <span class="string">&quot;&lt;&quot;</span> + stu2);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(stu1 + <span class="string">&quot;=&quot;</span> + stu2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习1：冒泡排序-1"><a href="#练习1：冒泡排序-1" class="headerlink" title="练习1：冒泡排序"></a>练习1：冒泡排序</h5><p>声明一个Employee员工类，包含编号、姓名、薪资，</p><p>声明一个测试类，在main中，创建Employee[]数组，长度为5，显示原来顺序结果</p><p>声明一个定制比较器EmpSalaryComparator，实现Comparator接口，按照薪资比较大小</p><p>声明一个定制比较器EmpIdComparator，实现Comparator接口，按照编号比较大小</p><p>在测试类中，分别用这个两个比较器对象，对数组进行排序，并显示排序后结果</p><p>员工类示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Employee [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, salary=&quot;</span> + salary + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>员工薪资定制比较器类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EmpSalaryComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> (Employee) o1;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> (Employee) o2;</span><br><span class="line"><span class="keyword">return</span> Double.compare(e1.getSalary(), e2.getSalary());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>员工编号定制比较器类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EmpIdComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> (Employee) o1;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> (Employee) o2;</span><br><span class="line"><span class="keyword">return</span> e1.getId() - e2.getId();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComparator</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Employee[] arr = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">13000</span>);</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">14000</span>);</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">13000</span>);</span><br><span class="line">arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>,<span class="string">&quot;赵六&quot;</span>,<span class="number">7000</span>);</span><br><span class="line">arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>,<span class="string">&quot;钱七&quot;</span>,<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//原顺序</span></span><br><span class="line">System.out.println(<span class="string">&quot;员工列表：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">EmpSalaryComparator</span> <span class="variable">ec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpSalaryComparator</span>();</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ec.compare(arr[j], arr[j+<span class="number">1</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;按照薪资排序后员工列表：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">EmpIdComparator</span> <span class="variable">ec2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpIdComparator</span>();</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ec2.compare(arr[j], arr[j+<span class="number">1</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;按照编号排序后员工列表：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习2：自定义数组排序工具类-1"><a href="#练习2：自定义数组排序工具类-1" class="headerlink" title="练习2：自定义数组排序工具类"></a>练习2：自定义数组排序工具类</h5><p>自定义一个数组工具类MyArrays，它包含一个静态方法，可以给任意对象数组用冒泡排序实现从小到大排序，该怎么定义这个方法呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArrays</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Object[] arr,Comparator c)</span>&#123;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line"><span class="comment">//这里不需要强制类型转换</span></span><br><span class="line"><span class="keyword">if</span>(c.compare(arr[j], arr[j+<span class="number">1</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Object[] arr)</span>&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用新工具类，简化练习1测试类的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComparator</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Employee[] arr = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">13000</span>);</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">14000</span>);</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">13000</span>);</span><br><span class="line">arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>,<span class="string">&quot;赵六&quot;</span>,<span class="number">7000</span>);</span><br><span class="line">arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>,<span class="string">&quot;钱七&quot;</span>,<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//原顺序</span></span><br><span class="line">System.out.println(<span class="string">&quot;员工列表：&quot;</span>);</span><br><span class="line">MyArrays.print(arr);</span><br><span class="line"></span><br><span class="line"><span class="type">EmpSalaryComparator</span> <span class="variable">ec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpSalaryComparator</span>();</span><br><span class="line">MyArrays.sort(arr, ec);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;按照薪资排序后员工列表：&quot;</span>);</span><br><span class="line">MyArrays.print(arr);</span><br><span class="line"></span><br><span class="line"><span class="type">EmpIdComparator</span> <span class="variable">ec2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpIdComparator</span>();</span><br><span class="line">MyArrays.sort(arr, ec2);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;按照编号排序后员工列表：&quot;</span>);</span><br><span class="line">MyArrays.print(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>java.util.Arrays数组工具类的public static <T> void sort(T[] a, Comparator&lt;? super T&gt; c)就是这做的</p></blockquote><h4 id="3、java-lang-Cloneable"><a href="#3、java-lang-Cloneable" class="headerlink" title="3、java.lang.Cloneable"></a>3、java.lang.Cloneable</h4><p>在java.lang.Object类中有一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span><span class="keyword">throws</span> CloneNotSupportedException </span><br></pre></td></tr></table></figure><p>所有类型都可以重写这个方法，它是获取一个对象的克隆体对象用的，就是造一个和当前对象各种属性值一模一样的对象。当然地址肯定不同。</p><p>我们在重写这个方法后时，调用super.clone()，发现报异常CloneNotSupportedException，因为我们没有实现java.lang.Cloneable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Teacher [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">result = prime * result + id;</span><br><span class="line">result = prime * result + ((name == <span class="literal">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">Teacher</span> <span class="variable">other</span> <span class="operator">=</span> (Teacher) obj;</span><br><span class="line"><span class="keyword">if</span> (id != other.id)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.name != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClonable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line"><span class="type">Teacher</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="number">1</span>,<span class="string">&quot;高老师&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">clone</span> <span class="operator">=</span> src.clone();</span><br><span class="line">System.out.println(clone);</span><br><span class="line">System.out.println(src == clone);</span><br><span class="line">System.out.println(src.equals(clone));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-5-内部类"><a href="#7-5-内部类" class="headerlink" title="7.5 内部类"></a>7.5 内部类</h2><h3 id="7-5-1-概述"><a href="#7-5-1-概述" class="headerlink" title="7.5.1 概述"></a>7.5.1 概述</h3><p>1、什么是内部类？</p><p>将一个类A定义在另一个类B里面，里面的那个类A就称为<strong>内部类</strong>，B则称为<strong>外部类</strong>。</p><p>2、为什么要声明内部类呢？</p><p>当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，不在其他地方单独使用，那么整个内部的完整结构最好使用内部类。</p><p>而且内部类因为在外部类的里面，因此可以直接访问外部类的私有成员。</p><p>3、内部类都有哪些形式？</p><p>根据内部类声明的位置（如同变量的分类），我们可以分为：</p><p>（1）成员内部类：</p><ul><li>静态成员内部类</li><li>非静态成员内部类</li></ul><p>（2）局部内部类</p><ul><li>有名字的局部内部类</li><li>匿名的内部类</li></ul><h3 id="7-5-2-静态内部类"><a href="#7-5-2-静态内部类" class="headerlink" title="7.5.2 静态内部类"></a>7.5.2 静态内部类</h3><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 class 外部类&#123;</span><br><span class="line">    【其他修饰符】 <span class="keyword">static</span> class 内部类&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类的特点：</p><ul><li>和其他类一样，它只是定义在外部类中的另一个完整的类结构<ul><li>可以继承自己的想要继承的父类，实现自己想要实现的父接口们，和外部类的父类和父接口无关</li><li>可以在静态内部类中声明属性、方法、构造器等结构，包括静态成员</li><li>可以使用abstract修饰，因此它也可以被其他类继承</li><li>可以使用final修饰，表示不能被继承</li><li>编译后有自己的独立的字节码文件，只不过在内部类名前面冠以外部类名和$符号。</li></ul></li><li>和外部类不同的是，它可以允许四种权限修饰符：public，protected，缺省，private<ul><li>外部类只允许public或缺省的</li></ul></li><li><strong>只</strong>可以在静态内部类中使用外部类的<strong>静态成员</strong><ul><li>在静态内部类中不能使用外部类的非静态成员哦</li></ul></li><li>在外部类的外面不需要通过外部类的对象就可以创建静态内部类的对象</li><li>如果在内部类中有变量与外部类的静态成员变量同名，可以使用“外部类名.”进行区别</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInner</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    Outer.Inner in= <span class="keyword">new</span> <span class="title class_">Outer</span>.Inner();</span><br><span class="line">    in.inMethod();</span><br><span class="line">    </span><br><span class="line">    Outer.Inner.inTest();</span><br><span class="line">        </span><br><span class="line">        Outer.Inner.inFun(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">4</span>;<span class="comment">//可以</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">inMethod</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;out.a = &quot;</span> + a);</span><br><span class="line"><span class="comment">//System.out.println(&quot;out.b = &quot; + b);//错误的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inTest</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;out.a = &quot;</span> + a);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inFun</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;out.a = &quot;</span> + Outer.a);</span><br><span class="line">            System.out.println(<span class="string">&quot;local.a = &quot;</span> + a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实严格的讲（在James Gosling等人编著的《The Java Language Specification》）静态内部类不是内部类，而是类似于C++的嵌套类的概念，外部类仅仅是静态内部类的一种命名空间的限定名形式而已。所以接口中的内部类通常都不叫内部类，因为接口中的内部成员都是隐式是静态的（即public static)。例如：Map.Entry。</p></blockquote><h3 id="7-5-3-非静态成员内部类"><a href="#7-5-3-非静态成员内部类" class="headerlink" title="7.5.3 非静态成员内部类"></a>7.5.3 非静态成员内部类</h3><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 class 外部类&#123;</span><br><span class="line">    【修饰符】 class 内部类&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非静态内部类的特点：</p><ul><li><p>和其他类一样，它只是定义在外部类中的另一个完整的类结构</p><ul><li>可以继承自己的想要继承的父类，实现自己想要实现的父接口们，和外部类的父类和父接口无关</li><li>可以在非静态内部类中声明属性、方法、构造器等结构，但是<strong>不允许声明静态成员</strong>，但是可以<strong>继承</strong>父类的静态成员，而且<strong>可以声明静态常量</strong>。</li><li>可以使用abstract修饰，因此它也可以被其他类继承</li><li>可以使用final修饰，表示不能被继承</li><li>编译后有自己的独立的字节码文件，只不过在内部类名前面冠以外部类名和$符号。</li></ul></li><li><p>和外部类不同的是，它可以允许四种权限修饰符：public，protected，缺省，private</p><ul><li>外部类只允许public或缺省的</li></ul></li><li><p>还可以在非静态内部类中使用外部类的<strong>所有成员</strong>，哪怕是私有的</p></li><li><p>在外部类的静态成员中不可以使用非静态内部类哦</p><ul><li>就如同静态方法中不能访问本类的非静态成员变量和非静态方法一样</li></ul></li><li><p>在外部类的外面必须通过外部类的对象才能创建非静态内部类的对象</p><ul><li>因此在非静态内部类的方法中有两个this对象，一个是外部类的this对象，一个是内部类的this对象</li></ul></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInner</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Outer</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">    Outer.Inner in= out.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    in.inMethod();</span><br><span class="line">    </span><br><span class="line">    Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> out.getInner();</span><br><span class="line">    inner.inMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">class</span> <span class="title class_">Inner</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="comment">//static int d = 4;//错误</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">inMethod</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;out.a = &quot;</span> + a);</span><br><span class="line">System.out.println(<span class="string">&quot;out.b = &quot;</span> + Outer.<span class="built_in">this</span>.b);</span><br><span class="line">System.out.println(<span class="string">&quot;in.b = &quot;</span> + b);</span><br><span class="line">System.out.println(<span class="string">&quot;father.c = &quot;</span> + c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outMethod</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//Inner in = new Inner();//错误的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Inner <span class="title function_">getInner</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习1：语法练习题"><a href="#练习1：语法练习题" class="headerlink" title="练习1：语法练习题"></a>练习1：语法练习题</h4><p>声明一个身体Body类，包含一个私有的boolean类型的属性live，初始化为true，表示活着。属性私有化，提供get&#x2F;set方法。</p><p>声明一个身体Body的内部类Heart，包含void beat()方法，当live为true时，打印“心脏在跳动”，否则打印“心脏停止跳动”。因为Heart只为外部类Body服务，而又具有自己的方法，属性等，而且这里应该是有Body实体存在的情况下才能有Heart实体，所以这里把Heart声明为非静态内部类。</p><p>声明一个测试类，在测试类的主方法中，创建身体和心脏的对象，调用心脏对象的beat()方法，然后调用身体对象的setLive()方法，设置为false后，再调用心脏对象的beat()方法查看结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">boolean</span> <span class="variable">live</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Heart</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beat</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 直接访问外部类成员</span></span><br><span class="line">            <span class="keyword">if</span> (live) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;心脏在跳动&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;心脏不跳了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLive</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> live;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLive</span><span class="params">(<span class="type">boolean</span> live)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.live = live;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建外部类对象 </span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">// 创建内部类对象</span></span><br><span class="line">        <span class="type">Heart</span> <span class="variable">heart</span> <span class="operator">=</span> p.<span class="keyword">new</span> <span class="title class_">Heart</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用内部类方法</span></span><br><span class="line">        heart.beat();</span><br><span class="line">        <span class="comment">// 调用外部类方法</span></span><br><span class="line">        p.setLive(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 调用内部类方法</span></span><br><span class="line">        heart.beat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">心脏在跳动</span><br><span class="line">心脏不跳了</span><br></pre></td></tr></table></figure><h4 id="练习2：简单面试题"><a href="#练习2：简单面试题" class="headerlink" title="练习2：简单面试题"></a>练习2：简单面试题</h4><p>判断如下代码的运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Inner</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">s1.a = <span class="number">10</span>;</span><br><span class="line"><span class="type">Inner</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">s2.a = <span class="number">20</span>;</span><br><span class="line">Test.<span class="type">Inner</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>.Inner();</span><br><span class="line">System.out.println(s3.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="type">Inner</span> <span class="variable">r</span> <span class="operator">=</span> t.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">System.out.println(r.a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-4-局部内部类"><a href="#7-5-4-局部内部类" class="headerlink" title="7.5.4 局部内部类"></a>7.5.4 局部内部类</h3><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 class 外部类&#123;</span><br><span class="line">    【修饰符】 返回值类型  方法名(【形参列表】)&#123;</span><br><span class="line">            【<span class="keyword">final</span>/<span class="keyword">abstract</span>】 class 内部类&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部内部类的特点：</p><ul><li>和外部类一样，它只是定义在外部类的某个方法中的另一个完整的类结构<ul><li>可以继承自己的想要继承的父类，实现自己想要实现的父接口们，和外部类的父类和父接口无关</li><li>可以在局部内部类中声明属性、方法、构造器等结构，<strong>但不包括静态成员，除非是从父类继承的静态常量</strong></li><li>可以使用abstract修饰，因此它也可以被同一个方法的在它后面的其他内部类继承</li><li>可以使用final修饰，表示不能被继承</li><li>编译后有自己的独立的字节码文件，只不过在内部类名前面冠以外部类名、$符号、编号。<ul><li>这里有编号是因为同一个外部类中，不同的方法中存在相同名称的局部内部类</li></ul></li></ul></li><li>和成员内部类不同的是，它前面不能有权限修饰符等</li><li>局部内部类如同局部变量一样，有作用域</li><li>局部内部类中是否能访问外部类的静态还是非静态的成员，取决于所在的方法</li><li>局部内部类中还可以使用所在方法的局部常量，即用final声明的局部变量<ul><li>JDK1.8之后，如果某个局部变量在局部内部类中被使用了，自动加final</li></ul></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outMethod</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inMethod</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;out.a = &quot;</span> + a);</span><br><span class="line"><span class="comment">//System.out.println(&quot;out.b = &quot; + b);//错误的，因为outMethod是静态的</span></span><br><span class="line">System.out.println(<span class="string">&quot;out.local.c = &quot;</span> + c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">in.inMethod();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outTest</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inMethod</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;out.a = &quot;</span> + a);</span><br><span class="line">System.out.println(<span class="string">&quot;out.b = &quot;</span> + b);<span class="comment">//可以，因为outTest是飞静态的</span></span><br><span class="line">System.out.println(<span class="string">&quot;method.c = &quot;</span> + c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">in.inMethod();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>为什么在局部内部类中使用外部类方法的局部变量要加final呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInner</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">A</span> <span class="variable">obj</span> <span class="operator">=</span> Outer.method();</span><br><span class="line"><span class="comment">//因为如果c不是final的，那么method方法执行完，method的栈空间就释放了，那么c也就消失了</span></span><br><span class="line">obj.a();<span class="comment">//这里打印c就没有中可取了，所以把c声明为常量，存储在方法区中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">implements</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;method.c = &quot;</span> + c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-5-匿名内部类"><a href="#7-5-5-匿名内部类" class="headerlink" title="7.5.5  匿名内部类"></a>7.5.5  匿名内部类</h3><h4 id="1、引入"><a href="#1、引入" class="headerlink" title="1、引入"></a>1、引入</h4><p>当我们在开发过程中，需要用到一个抽象类的子类的对象或一个接口的实现类的对象，而且只创建一个对象，而且逻辑代码也不复杂。那么我们原先怎么做的呢？</p><p>（1）编写类，继承这个父类或实现这个接口</p><p>（2）重写父类或父接口的方法</p><p>（3）创建这个子类或实现类的对象</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明接口实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大家注意安全&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//如果MyRunnable类只是在这里使用一次，并且只创建它的一个对象</span></span><br><span class="line">        <span class="comment">//分开两个.java源文件，反而不好维护</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;安全提示线程&quot;</span>,target);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，因为考虑到这个子类或实现类是一次性的，那么我们“费尽心机”的给它取名字，就显得多余。那么我们完全可以使用匿名内部类的方式来实现，避免给类命名的问题。</p><p>可以修改为如下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//MyRunnable类只是在这里使用一次，并且只创建它的一个对象，那么这些写代码更紧凑，更好维护</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;大家注意安全&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(Exception e)&#123;                </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;安全提示线程&quot;</span>,target);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、语法格式"><a href="#2、语法格式" class="headerlink" title="2、语法格式"></a>2、语法格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类(【实参列表】)&#123;</span><br><span class="line">    重写方法...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//()中是否需要【实参列表】，看你想要让这个匿名内部类调用父类的哪个构造器，如果调用父类的无参构造，那么()中就不用写参数，如果调用父类的有参构造，那么()中需要传入实参</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父接口()&#123;</span><br><span class="line">    重写方法...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//()中没有参数，因为此时匿名内部类的父类是Object类，它只有一个无参构造</span></span><br></pre></td></tr></table></figure><blockquote><p>匿名内部类是没有名字的类，因此在声明类的同时就创建好了唯一的对象。</p></blockquote><p>注意：</p><p>匿名内部类是一种特殊的局部内部类，只不过没有名称而已。所有局部内部类的限制都适用于匿名内部类。例如：</p><ul><li>在匿名内部类中是否可以使用外部类的非静态成员变量，看所在方法是否静态</li><li>在匿名内部类中如果需要访问当前方法的局部变量，该局部变量需要加final</li></ul><p>思考：这个对象能做什么呢？</p><p>答：（1）调用某个方法（2）赋值给父类&#x2F;父接口的变量，通过多态引用使用这个对象（3）作为某个方法调用的实参</p><h4 id="3、使用方式一：匿名内部类的对象直接调用方法"><a href="#3、使用方式一：匿名内部类的对象直接调用方法" class="headerlink" title="3、使用方式一：匿名内部类的对象直接调用方法"></a>3、使用方式一：匿名内部类的对象直接调用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;.a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">B</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;ccccc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;.b();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、使用方式二：通过父类或父接口的变量多态引用匿名内部类的对象"><a href="#4、使用方式二：通过父类或父接口的变量多态引用匿名内部类的对象" class="headerlink" title="4、使用方式二：通过父类或父接口的变量多态引用匿名内部类的对象"></a>4、使用方式二：通过父类或父接口的变量多态引用匿名内部类的对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">A</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    obj.a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">B</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;ccccc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    obj.b();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、使用方式三：匿名内部类的对象作为实参"><a href="#5、使用方式三：匿名内部类的对象作为实参" class="headerlink" title="5、使用方式三：匿名内部类的对象作为实参"></a>5、使用方式三：匿名内部类的对象作为实参</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(A a)</span>&#123;</span><br><span class="line">    a.method();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    test(<span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、练习"><a href="#6、练习" class="headerlink" title="6、练习"></a>6、练习</h4><h5 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h5><p>声明一个Employee员工类，包含编号、姓名、薪资，</p><p>声明一个测试类，在main中，创建Employee[]数组，长度为5，显示原来顺序结果</p><p>调用java.util.Arrays数组工具类的排序方法public static void sort(Object[] a, Comparator c)对数组的元素进行排序，用匿名内部类的对象给c形参传入按照薪资比较大小的定制比较器对象。并显示排序后结果</p><p>调用java.util.Arrays数组工具类的排序方法public static void sort(Object[] a, Comparator c)对数组的元素进行排序，用匿名内部类的对象给c形参传入按照编号比较大小的定制比较器对象。并显示排序后结果</p><p>员工类示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Employee [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, salary=&quot;</span> + salary + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInner</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Employee[] arr = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">13000</span>);</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">14000</span>);</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">13000</span>);</span><br><span class="line">arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>,<span class="string">&quot;赵六&quot;</span>,<span class="number">7000</span>);</span><br><span class="line">arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>,<span class="string">&quot;钱七&quot;</span>,<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//原顺序</span></span><br><span class="line">System.out.println(<span class="string">&quot;员工列表：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> (Employee) o1;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> (Employee) o2;</span><br><span class="line"><span class="keyword">return</span> Double.compare(e1.getSalary(), e2.getSalary());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;按照薪资排序后员工列表：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> (Employee) o1;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> (Employee) o2;</span><br><span class="line"><span class="keyword">return</span> e1.getId() - e2.getId();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;按照编号排序后员工列表：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h5><p>（1）声明一个抽象类Father，包含抽象方法：public abstract void method();<br>（2）用匿名内部类继承Father，并重写抽象方法，打印“hello baby”<br>并调用子类对象的method方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExer1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Father</span>()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello 孩子&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h5><p>（1）声明一个员工类Triangle三角形，有属性：a,b,c表示三条边<br>（2）在测试类中创建Triangle数组<br>（3）分别调用Arrays.sort(数组，Comparator)，用匿名内部类实现按照编号周长排列<br>（4）分别调用Arrays.sort(数组，Comparator)，用匿名内部类实现按照薪资面积排列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> a;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> b;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> c;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Triangle</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b, <span class="type">double</span> c)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.a = a;</span><br><span class="line"><span class="built_in">this</span>.b = b;</span><br><span class="line"><span class="built_in">this</span>.c = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Triangle</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(<span class="type">double</span> a)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getB</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setB</span><span class="params">(<span class="type">double</span> b)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.b = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getC</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setC</span><span class="params">(<span class="type">double</span> c)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.c = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Triangle [a=&quot;</span> + a + <span class="string">&quot;, b=&quot;</span> + b + <span class="string">&quot;, c=&quot;</span> + c + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">p</span> <span class="operator">=</span> getPerimeter()/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> Math.sqrt(p*(p-a)*(p-b)*(p-c));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExer2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Triangle[] arr = <span class="keyword">new</span> <span class="title class_">Triangle</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>]  = <span class="keyword">new</span> <span class="title class_">Triangle</span>(<span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">arr[<span class="number">1</span>]  = <span class="keyword">new</span> <span class="title class_">Triangle</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">arr[<span class="number">2</span>]  = <span class="keyword">new</span> <span class="title class_">Triangle</span>(<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;原来的顺序：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;按照周长排序：&quot;</span>);</span><br><span class="line">Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="type">Triangle</span> <span class="variable">t1</span> <span class="operator">=</span> (Triangle) o1;</span><br><span class="line"><span class="type">Triangle</span> <span class="variable">t2</span> <span class="operator">=</span> (Triangle) o2;</span><br><span class="line"><span class="keyword">return</span> Double.compare(t1.getPerimeter(), t2.getPerimeter());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;按照面积排序：&quot;</span>);</span><br><span class="line">Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="type">Triangle</span> <span class="variable">t1</span> <span class="operator">=</span> (Triangle) o1;</span><br><span class="line"><span class="type">Triangle</span> <span class="variable">t2</span> <span class="operator">=</span> (Triangle) o2;</span><br><span class="line"><span class="keyword">return</span> Double.compare(t1.getArea(), t2.getArea());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习4"><a href="#练习4" class="headerlink" title="练习4"></a>练习4</h5><p>1、声明一个接口：Predicate接口，包含public abstract boolean test(Object obj);抽象方法<br>2、声明一个员工类：Employee,有属性：编号、姓名、年龄、薪资<br>3、声明一个员工管理类：EmployeeService，<br>（1）包含Employee[] arr，并在EmployeeService构造器中，创建数组，并初始化数组，例如：<br>arr &#x3D; new Employee[5];<br>        arr[0] &#x3D; new Employee(4, “李四”, 24, 24000);<br>        arr[1] &#x3D; new Employee(3, “张三”, 23, 13000);<br>        arr[2] &#x3D; new Employee(5, “王五”, 25, 15000);<br>        arr[3] &#x3D; new Employee(1, “赵六”, 27, 17000);<br>        arr[4] &#x3D; new Employee(2, “钱七”, 16, 6000);</p><p>（2）包含public Employee[] get(Predicate p){<br>        Employee[] result &#x3D; new Employee[arr.length];<br>        int total &#x3D; 0;<br>        for(int i&#x3D;0; i&lt;arr.length; i++){<br>            if(p.test(arr[i]){<br>                result[total++] &#x3D; arr[i];<br>            }<br>        }<br>        return Arrays.copyOf(result,total);<br>    }<br>这个方法的作用，就是用于在arr数组中筛选满足条件的元素<br>4、在测试类中，创建EmployeeService对象，调用get(Predicate p)方法，通过匿名内部类的对象给形参p赋值，<br>分别获取：<br>（1）所有员工对象<br>（2）所有年龄超过25的员工<br>（3）所有薪资高于15000的员工<br>（4）所有编号是偶数的员工<br>（5）名字是“张三”的员工<br>（6）年龄超过25，薪资高于15000的员工</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Predicate</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Object obj)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">int</span> age, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Employee [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, salary=&quot;</span> + salary + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Employee[] arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">EmployeeService</span><span class="params">()</span> &#123;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">24</span>, <span class="number">24000</span>);</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="number">13000</span>);</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">25</span>, <span class="number">15000</span>);</span><br><span class="line">arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">27</span>, <span class="number">17000</span>);</span><br><span class="line">arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>, <span class="string">&quot;钱七&quot;</span>, <span class="number">16</span>, <span class="number">6000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Employee[] get(Predicate p)&#123;</span><br><span class="line">Employee[] result = <span class="keyword">new</span> <span class="title class_">Employee</span>[arr.length] ;</span><br><span class="line"><span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(p.test(arr[i]))&#123;</span><br><span class="line">result[total++] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Arrays.copyOf(result, total);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExer5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">EmployeeService</span> <span class="variable">es</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmployeeService</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//（1）所有员工对象</span></span><br><span class="line">Employee[] employees = es.get(<span class="keyword">new</span> <span class="title class_">Predicate</span>()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; employees.length; i++) &#123;</span><br><span class="line">System.out.println(employees[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line"><span class="comment">//（2）所有年龄超过25的员工</span></span><br><span class="line">employees = es.get(<span class="keyword">new</span> <span class="title class_">Predicate</span>()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> (Employee) obj;</span><br><span class="line"><span class="keyword">return</span> emp.getAge()&gt;<span class="number">25</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; employees.length; i++) &#123;</span><br><span class="line">System.out.println(employees[i]);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-6注解"><a href="#7-6注解" class="headerlink" title="7.6注解"></a>7.6注解</h2><h3 id="7-6-1-什么是注解"><a href="#7-6-1-什么是注解" class="headerlink" title="7.6.1 什么是注解"></a>7.6.1 什么是注解</h3><p>注解是以“**@注释名**”在代码中存在的，还可以添加一些参数值，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(value=”unchecked”)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@author</span></span><br><span class="line"><span class="meta">@param</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>注解Annotation是从<em><strong>JDK5.0</strong></em>开始引入。</p><p>虽然说注解也是一种注释，因为它们都不会改变程序原有的逻辑，只是对程序增加了某些注释性信息。不过它又不同于单行注释和多行注释，对于单行注释和多行注释是给程序员看的，而注解是可以被编译器或其他程序读取的一种注释，程序还可以根据注解的不同，做出相应的处理。所以注解是插入到代码中以便有工具可以对它们进行处理的标签。</p><p>一个完整的注解有三个部分：</p><ul><li>注解的声明：就如同类、方法、变量等一样，需要先声明后使用</li><li>注解的使用：用于注解在包、类、方法、属性、构造、局部变量等上面的10个位置中一个或多个位置</li><li>注解的读取：有一段专门用来读取这些使用的注解，然后根据注解信息作出相应的处理，这段程序称为注解处理流程，这也是注解区别与普通注释最大的不同。</li></ul><p>注解和之前的类和方法不一样。之前的类和方法只有声明和使用两个部分。类声明完了，作用和功能就定了，调用时根据声明执行即可。而注解的声明只是说明了该注解的使用格式，注解的作用由读取该注解的程序决定。</p><p>示例说明：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200307194703453.png" alt="image-20200307194703453"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200307200134140.png" alt="image-20200307200134140"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200307201107365.png" alt="image-20200307201107365"></p><p>而我们平时使用的注解，要么是JRE核心类库中声明的，要么是某个框架（例如JUunit框架，Spring框架等）声明的，如果是JRE类库中声明的注解，JDK中都会提供该注解的读取程序，要么是在编译中，要么在某个其他的地方。而框架中声明注解，读取该注解的程序在框架中定义，因此每一个注解的意义由框架（例如JUunit框架，Spring框架等）决定。</p><h3 id="7-6-2-系统预定义的三个最基本的注解"><a href="#7-6-2-系统预定义的三个最基本的注解" class="headerlink" title="7.6.2 系统预定义的三个最基本的注解"></a>7.6.2 系统预定义的三个最基本的注解</h3><h4 id="1、-Override"><a href="#1、-Override" class="headerlink" title="1、@Override"></a>1、@Override</h4><p>​用于检测被修饰的方法为有效的重写方法，如果不是，则报编译错误!</p><p>​只能标记在方法上。</p><p>​它会被编译器程序读取。</p><h4 id="2、-Deprecated"><a href="#2、-Deprecated" class="headerlink" title="2、@Deprecated"></a>2、@Deprecated</h4><p>​用于表示被标记的数据已经过时，不建议使用。</p><p>​可以用于修饰 属性、方法、构造、类、包、局部变量、参数。</p><p>​它会被编译器程序读取。</p><h4 id="3、-SuppressWarnings"><a href="#3、-SuppressWarnings" class="headerlink" title="3、@SuppressWarnings"></a>3、@SuppressWarnings</h4><p>​抑制编译警告。</p><p>​可以用于修饰类、属性、方法、构造、局部变量、参数</p><p>​它会被编译器程序读取。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAnnotation</span> &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;unused&quot;,&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">list.add(<span class="number">123</span>);</span><br><span class="line">list.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Father</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">f.show();</span><br><span class="line">f.methodOl();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodOl</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father Method&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print1n</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father Method&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">sum += nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">public void method01() &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;Son Method&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void println()&#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;Father Method&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public long sum(int[] nums)&#123;</span></span><br><span class="line"><span class="comment">int sum = 0;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line"><span class="comment">sum += nums[i];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return sum;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-3-Java中文档注释"><a href="#7-6-3-Java中文档注释" class="headerlink" title="7.6.3 Java中文档注释"></a>7.6.3 Java中文档注释</h3><ul><li>@author 标明开发该类模块的作者，多个作者之间使用,分割</li><li>@version 标明该类模块的版本</li><li>@see 参考转向，也就是相关主题</li><li>@since 从哪个版本开始增加的</li><li>@param 对方法中某参数的说明，如果没有参数就不能写</li><li>@return 对方法返回值的说明，如果方法的返回值类型是void就不能写</li><li>@throws&#x2F;@exception 对方法可能抛出的异常进行说明 ，如果方法没有用throws显式抛出的异常就不能写<ul><li>其中 @param  @return 和 @exception 这三个标记都是只用于方法的。</li><li>@param的格式要求：@param 形参名 形参类型  形参说明</li><li>@return 的格式要求：@return 返回值类型 返回值说明</li><li>@exception 的格式要求：@exception 异常类型 异常说明</li><li>@param和@exception可以并列多个</li></ul></li></ul><p>javadoc.exe就是这些注解的信息处理流程。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Irene</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAnnotation2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是Java的主方法，是Java程序的入口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args String[] 命令行参数，使用java命令时，在后面传入参数，例如</span></span><br><span class="line"><span class="comment"> * java 类名   参数1  参数2 ....</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个求两个整数中最大值的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a int 其中一个整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b int 另一个整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int 返回最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是复制一个文件的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> src String 源文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dest  String 目标文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> FileNotFoundException 当源文件找不到时会抛出该异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(String src, String dest)</span> <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src);</span><br><span class="line"><span class="comment">//..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注释与代码要一致，如果不一致，会误导别人或自己</p></blockquote><h4 id="eclipse中导出javadoc"><a href="#eclipse中导出javadoc" class="headerlink" title="eclipse中导出javadoc"></a>eclipse中导出javadoc</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576665188851.png" alt="1576665188851"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576665298238.png" alt="1576665298238"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576665309340.png" alt="1576665309340"></p><p>如果导出时有乱码问题，可以在上述窗口下面按next到最后一步通过增加Javadoc的额外参数选项来指定字符编码再导出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-docencoding UTF-8</span><br><span class="line">-encoding UTF-8</span><br><span class="line">-charset UTF-8</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576665525558.png" alt="1576665525558"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576665321307.png" alt="1576665321307"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576665331437.png" alt="1576665331437"></p><h4 id="idea中导出javadoc"><a href="#idea中导出javadoc" class="headerlink" title="idea中导出javadoc"></a>idea中导出javadoc</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576467074566.png" alt="1576467074566"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/javadoc2.jpg" alt="img"></p><h3 id="7-6-4-JUnit单元测试"><a href="#7-6-4-JUnit单元测试" class="headerlink" title="7.6.4 JUnit单元测试"></a>7.6.4 JUnit单元测试</h3><p>JUnit是由 Erich Gamma 和 Kent Beck 编写的一个回归测试框架（regression testing framework）,供Java开发人员编写单元测试之用。多数Java的开发环境都已经集成了JUnit作为单元测试的工具。JUnit测试是程序员测试，即所谓白盒测试，因为程序员知道被测试的软件如何（How）完成功能和完成什么样（What）的功能。</p><p>要使用JUnit，必须在项目的编译路径中必须引入JUnit的库，即相关的.class文件组成的jar包。如何把JUnit的jar添加到编译路径如图所示：</p><h4 id="在eclipse中截图如下："><a href="#在eclipse中截图如下：" class="headerlink" title="在eclipse中截图如下："></a>在eclipse中截图如下：</h4><h5 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h5><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562474605131.png" alt="1562474605131"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562474620088.png" alt="1562474620088"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562474639231.png" alt="1562474639231"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562474653799.png" alt="1562474653799"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562474692691.png" alt="1562474692691"></p><h5 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h5><p>在@Test后面按Ctrl + 1，在选择Add JUnit 4 library to the build path</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576580402867.png" alt="1576580402867"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576580476913.png" alt="1576580476913"></p><h4 id="在idea中截图如下："><a href="#在idea中截图如下：" class="headerlink" title="在idea中截图如下："></a>在idea中截图如下：</h4><h5 id="方式一：指定本地jar目录"><a href="#方式一：指定本地jar目录" class="headerlink" title="方式一：指定本地jar目录"></a>方式一：指定本地jar目录</h5><p>单击工具栏的<img src="/imgs/1576580533760.png" alt="1576580533760">打开项目设置</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576584674884.png" alt="1576584674884"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576584719209.png" alt="1576584719209"></p><p>注意：如上操作需要提前下载，并将JUnit的相关jar放到当前模块的libs文件夹中。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576584781088.png" alt="1576584781088"></p><h5 id="方式二：指定Marven仓库"><a href="#方式二：指定Marven仓库" class="headerlink" title="方式二：指定Marven仓库"></a>方式二：指定Marven仓库</h5><p>在@Test后面按Alt + 回车，选择Add ‘JUnit4’ to classpath即可</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576580013065.png" alt="1576580013065"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576580073306.png" alt="1576580073306"></p><p><strong>注意：如果Maven的本地仓库（例如：C:\Users\Irene\.m2）中没有则需要联网从Maven的中央仓库中下载。</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576580095402.png" alt="1576580095402"></p><ul><li>首先使用JUnit测试的类必须是public的。需要测试的方法都必须是public，无参，无返回值。</li><li>@Test：标记在非静态的测试方法上。只有标记@Test的方法才能被作为一个测试方法单独测试。一个类中可以有多个@Test标记的方法。运行时如果只想运行其中一个@Test标记的方法，那么选择这个方法名，然后单独运行，否则整个类的所有标记了@Test的方法都会被执行，<strong>而且执行顺序不可控</strong>。</li></ul><p>@Test注解会被JUnit框架读取，并处理。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.AfterClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJUnit</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object[] array;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> total;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//从数组中删除一个元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">System.arraycopy(array, <span class="number">1</span>, array, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">array[--total]=<span class="literal">null</span>;</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tadd</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//往数组中存储三个元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">array[total++] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">array[total++] = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">array[total++] = <span class="string">&quot;java&quot;</span>;</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第7章-面向对象基础（下）&quot;&gt;&lt;a href=&quot;#第7章-面向对象基础（下）&quot; class=&quot;headerlink&quot; title=&quot;第7章 面向对象基础（下）&quot;&gt;&lt;/a&gt;第7章 面向对象基础（下）&lt;/h1&gt;&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot;</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第6章【面向对象基础--中】</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC6%E7%AB%A0%E3%80%90%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80-%E4%B8%AD%E3%80%91/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC6%E7%AB%A0%E3%80%90%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80-%E4%B8%AD%E3%80%91/</id>
    <published>2022-07-28T05:05:27.000Z</published>
    <updated>2022-10-16T04:43:25.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第6章【面向对象基础–中】"><a href="#第6章【面向对象基础–中】" class="headerlink" title="第6章【面向对象基础–中】"></a>第6章【面向对象基础–中】</h1><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 理解封装的概念</li><li><input disabled="" type="checkbox"> 掌握权限修饰符的使用</li><li><input disabled="" type="checkbox"> 掌握成员变量的私有化</li><li><input disabled="" type="checkbox"> 掌握构造器的声明与使用</li><li><input disabled="" type="checkbox"> 会声明标准的JavaBean</li><li><input disabled="" type="checkbox"> 能够写出类的继承格式</li><li><input disabled="" type="checkbox"> 能够说出继承的特点</li><li><input disabled="" type="checkbox"> 能够说出方法重写的概念以及和重载的区别</li><li><input disabled="" type="checkbox"> 能够使用this关键字解决问题</li><li><input disabled="" type="checkbox"> 能够使用super关键字解决问题</li><li><input disabled="" type="checkbox"> 能够分析类初始化过程（为面试服务）</li><li><input disabled="" type="checkbox"> 能够分析实例初始化过程（为面试服务）</li><li><input disabled="" type="checkbox"> 能够应用多态解决问题</li><li><input disabled="" type="checkbox"> 理解向上转型与向下转型</li><li><input disabled="" type="checkbox"> 能够使用instanceof关键字判断对象类型</li><li><input disabled="" type="checkbox"> 了解native关键字</li><li><input disabled="" type="checkbox"> 掌握final关键字</li><li><input disabled="" type="checkbox"> 了解Object类的常用方法</li><li><input disabled="" type="checkbox"> 会重写Object的常用方法</li></ul><h2 id="6-1-封装"><a href="#6-1-封装" class="headerlink" title="6.1 封装"></a>6.1 封装</h2><h3 id="6-1-1-封装概述"><a href="#6-1-1-封装概述" class="headerlink" title="6.1.1 封装概述"></a>6.1.1 封装概述</h3><h4 id="1、为什么需要封装？"><a href="#1、为什么需要封装？" class="headerlink" title="1、为什么需要封装？"></a>1、为什么需要封装？</h4><ul><li>我要用洗衣机，只需要按一下开关和洗涤模式就可以了。有必要了解洗衣机内部的结构吗？有必要碰电动机吗？</li><li>我们使用的电脑，内部有CPU、硬盘、键盘、鼠标等等，每一个部件通过某种连接方式一起工作，但是各个部件之间又是独立的</li><li>现实生活中，每一个个体与个体之间是有边界的，每一个团体与团体之间是有边界的，而同一个个体、团体内部的信息是互通的，只是对外有所隐瞒。</li></ul><p>面向对象编程语言是对客观世界的模拟，客观世界里每一个事物的内部信息都是隐藏在对象内部的，外界无法直接操作和修改，只能通过指定的方式进行访问和修改。封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。适当的封装可以让代码更容易理解与维护，也加强了代码的安全性。</p><p>随着我们系统越来越复杂，类会越来越多，那么类之间的访问边界必须把握好，面向对象的开发原则要遵循“高内聚、低耦合”，而“高内聚，低耦合”的体现之一：</p><ul><li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉；</li><li>低耦合：仅对外暴露少量的方法用于使用</li></ul><p>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的讲，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</p><h4 id="2、如何实现封装呢？"><a href="#2、如何实现封装呢？" class="headerlink" title="2、如何实现封装呢？"></a>2、如何实现封装呢？</h4><p>通俗的讲，封装就是把该隐藏的隐藏起来，该暴露的暴露出来。那么暴露的程度如何控制呢？就是依赖访问控制修饰符，也称为权限修饰符来控制。</p><p>访问控制修饰符来控制相应的可见边界，边界有如下：</p><p>（1）类</p><p>（2）包</p><p>（3）子类</p><p>（4）模块：Java9之后引入</p><h5 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h5><p>权限修饰符：public,protected,缺省,private</p><table><thead><tr><th>修饰符</th><th>本类</th><th>本包</th><th>其他包子类</th><th>其他包非子类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>缺省</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>外部类：public和缺省</p><p>成员变量、成员方法、构造器、成员内部类：public,protected,缺省,private</p><p>提示：protected修饰非静态成员，<strong>跨包时，</strong>只能在子类的非静态成员中访问，在静态成员中无论是否创建对象都不能访问。</p><h5 id="示例一：本包非子类与子类"><a href="#示例一：本包非子类与子类" class="headerlink" title="示例一：本包非子类与子类"></a>示例一：本包非子类与子类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.access1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> a;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> e;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">int</span> f;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> g;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mother</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Mother</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.access1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//本包非子类中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Other</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Father</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">System.out.println(obj.a);</span><br><span class="line">System.out.println(obj.b);</span><br><span class="line">System.out.println(obj.c);</span><br><span class="line"><span class="comment">//System.out.println(obj.d);//跨类不可见</span></span><br><span class="line"></span><br><span class="line">System.out.println(Father.e);</span><br><span class="line">System.out.println(Father.f);</span><br><span class="line">System.out.println(Father.g);</span><br><span class="line"><span class="comment">//System.out.println(h);//跨类不可见</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Father</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">System.out.println(obj.a);</span><br><span class="line">System.out.println(obj.b);</span><br><span class="line">System.out.println(obj.c);</span><br><span class="line"><span class="comment">//System.out.println(obj.d);//跨类不可见</span></span><br><span class="line"></span><br><span class="line">System.out.println(Father.e);</span><br><span class="line">System.out.println(Father.f);</span><br><span class="line">System.out.println(Father.g);</span><br><span class="line"><span class="comment">//System.out.println(h);//跨类不可见</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.access1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//本包子类中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//静态直接访问非静态都不行</span></span><br><span class="line"><span class="comment">/*System.out.println(a);</span></span><br><span class="line"><span class="comment">System.out.println(b);</span></span><br><span class="line"><span class="comment">System.out.println(c);</span></span><br><span class="line"><span class="comment">System.out.println(d);*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">Father</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">System.out.println(obj.a);</span><br><span class="line">System.out.println(obj.b);</span><br><span class="line">System.out.println(obj.c);</span><br><span class="line"><span class="comment">//System.out.println(obj.d);//跨类不可见</span></span><br><span class="line"></span><br><span class="line">System.out.println(e);</span><br><span class="line">System.out.println(f);</span><br><span class="line">System.out.println(g);</span><br><span class="line"><span class="comment">//System.out.println(h);//跨类不可见</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(c);</span><br><span class="line"><span class="comment">//System.out.println(d);//跨类不可见</span></span><br><span class="line"></span><br><span class="line">System.out.println(e);</span><br><span class="line">System.out.println(f);</span><br><span class="line">System.out.println(g);</span><br><span class="line"><span class="comment">//System.out.println(h);//跨类不可见</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20200304104635023.png" alt="image-20200304104635023"></p><h5 id="示例二：跨包子类和非子类"><a href="#示例二：跨包子类和非子类" class="headerlink" title="示例二：跨包子类和非子类"></a>示例二：跨包子类和非子类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.access1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> a;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> e;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">int</span> f;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> g;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.other;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.test01.access1.Father;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Another</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Father</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">System.out.println(obj.a);</span><br><span class="line"><span class="comment">//System.out.println(obj.b);//跨包非子类不可见</span></span><br><span class="line"><span class="comment">//System.out.println(obj.c);//跨包不可见</span></span><br><span class="line"><span class="comment">//System.out.println(obj.d);//跨类不可见</span></span><br><span class="line"></span><br><span class="line">System.out.println(Father.e);</span><br><span class="line"><span class="comment">//System.out.println(Father.f);//跨包非子类不可见</span></span><br><span class="line"><span class="comment">//System.out.println(Father.g);//跨包不可见</span></span><br><span class="line"><span class="comment">//System.out.println(h);//跨类不可见</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Father</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">System.out.println(obj.a);</span><br><span class="line"><span class="comment">//System.out.println(obj.b);//跨包非子类不可见</span></span><br><span class="line"><span class="comment">//System.out.println(obj.c);//跨包不可见</span></span><br><span class="line"><span class="comment">//System.out.println(obj.d);//跨类不可见</span></span><br><span class="line"></span><br><span class="line">System.out.println(Father.e);</span><br><span class="line"><span class="comment">//System.out.println(Father.f);//跨包非子类不可见</span></span><br><span class="line"><span class="comment">//System.out.println(Father.g);//跨包不可见</span></span><br><span class="line"><span class="comment">//System.out.println(h);//跨类不可见</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.other;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.test01.access1.Father;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//静态直接访问非静态都不行</span></span><br><span class="line"><span class="comment">/*System.out.println(a);</span></span><br><span class="line"><span class="comment">System.out.println(b);</span></span><br><span class="line"><span class="comment">System.out.println(c);</span></span><br><span class="line"><span class="comment">System.out.println(d);*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">Father</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">System.out.println(obj.a);</span><br><span class="line"><span class="comment">//System.out.println(obj.b);//跨包的静态成员</span></span><br><span class="line"><span class="comment">//不能访问非静态的protected</span></span><br><span class="line"><span class="comment">//System.out.println(obj.c);//跨包不可见</span></span><br><span class="line"><span class="comment">//System.out.println(obj.d);//跨类不可见</span></span><br><span class="line"></span><br><span class="line">System.out.println(e);</span><br><span class="line">System.out.println(f);</span><br><span class="line"><span class="comment">//System.out.println(g);//跨包不可见</span></span><br><span class="line"><span class="comment">//System.out.println(h);//跨类不可见</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="comment">//System.out.println(c);//跨包不可见</span></span><br><span class="line"><span class="comment">//System.out.println(d);//跨类不可见</span></span><br><span class="line"></span><br><span class="line">System.out.println(e);</span><br><span class="line">System.out.println(f);</span><br><span class="line"><span class="comment">//System.out.println(g);//跨包不可见</span></span><br><span class="line"><span class="comment">//System.out.println(h);//跨类不可见</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20200304105258795.png" alt="image-20200304105258795"></p><h5 id="示例三：缺省的类"><a href="#示例三：缺省的类" class="headerlink" title="示例三：缺省的类"></a>示例三：缺省的类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.access1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mother</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.access1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Daughter</span> <span class="keyword">extends</span> <span class="title class_">Mother</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.other;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mother类是缺省的，跨包不能使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Daughter</span> <span class="keyword">extends</span> <span class="title class_">Mother</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20200304105646328.png" alt="image-20200304105646328"></p><h5 id="示例四：公共的类缺省的构造器，跨包使用问题"><a href="#示例四：公共的类缺省的构造器，跨包使用问题" class="headerlink" title="示例四：公共的类缺省的构造器，跨包使用问题"></a>示例四：公共的类缺省的构造器，跨包使用问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.access1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">Fu()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.access1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.other;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.test01.access1.Fu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line">Zi() &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.access1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Neighbor</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fu</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test01.other;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.test01.access1.Fu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnotherNeighbor</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fu</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20200304110742600.png" alt="image-20200304110742600"></p><h3 id="6-1-2-成员变量-x2F-属性私有化问题"><a href="#6-1-2-成员变量-x2F-属性私有化问题" class="headerlink" title="6.1.2 成员变量&#x2F;属性私有化问题"></a>6.1.2 成员变量&#x2F;属性私有化问题</h3><p><strong><span style="color:red">成员变量（field）私有化</span>之后，提供标准的<span style="color:red">get&#x2F;set</span>方法，我们把这种成员变量也称为<span style="color:red">属性（property）</span>。</strong>或者可以说只要能通过get&#x2F;set操作的就是事物的属性，哪怕它没有对应的成员变量。</p><h4 id="1、成员变量封装的目的"><a href="#1、成员变量封装的目的" class="headerlink" title="1、成员变量封装的目的"></a>1、成员变量封装的目的</h4><ul><li>隐藏类的实现细节</li><li>让使用者只能通过事先预定的方法来访问数据，从而可以在该方法里面加入控制逻辑，限制对成员变量的不合理访问。还可以进行数据检查，从而有利于保证对象信息的完整性。</li><li>便于修改，提高代码的可维护性。主要说的是隐藏的部分，在内部修改了，如果其对外可以的访问方式不变的话，外部根本感觉不到它的修改。例如：Java8-&gt;Java9，String从char[]转为byte[]内部实现，而对外的方法不变，我们使用者根本感觉不到它内部的修改。</li></ul><h4 id="2、实现步骤"><a href="#2、实现步骤" class="headerlink" title="2、实现步骤"></a>2、实现步骤</h4><ol><li>使用 <code>private</code> 修饰成员变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> 数据类型 变量名 ；</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chinese</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String country;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> marry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>提供 <code>getXxx</code>方法 &#x2F; <code>setXxx</code> 方法，可以访问成员变量，代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chinese</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String country;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> marry;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCountry</span><span class="params">(String c)</span>&#123;</span><br><span class="line">        country = c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCountry</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;</span><br><span class="line">name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMarry</span><span class="params">(<span class="type">boolean</span> m)</span>&#123;</span><br><span class="line">        marry = m;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMarry</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> marry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、如何解决局部变量与成员变量同名问题"><a href="#3、如何解决局部变量与成员变量同名问题" class="headerlink" title="3、如何解决局部变量与成员变量同名问题"></a>3、如何解决局部变量与成员变量同名问题</h4><p>当局部变量与类变量（静态成员变量）同名时，在类变量前面加“类名.”；</p><p>当局部变量与实例变量（非静态成员变量）同名时，在实例变量前面加“this.”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chinese</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String country;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCountry</span><span class="params">(String country)</span>&#123;</span><br><span class="line">        Chinese.country = country;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCountry</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、-练习"><a href="#4、-练习" class="headerlink" title="4、 练习"></a>4、 练习</h4><p>（1）定义矩形类Rectangle，</p><p>​声明静态变量sides，初始化为4，表示矩形边长的总数量；</p><p>​声明实例变量长和宽</p><p>​全部私有化，并提供相应的get&#x2F;set方法</p><p>（2）在测试类中创建Rectangle对象，并调用相应的方法测试</p><p>（2）测试类ObjectArrayTest的main中创建一个可以装3个学生对象的数组，并且按照学生成绩排序，显示学生信息</p><h2 id="6-2-构造器（Constructor"><a href="#6-2-构造器（Constructor" class="headerlink" title="6.2 构造器（Constructor)"></a>6.2 构造器（Constructor)</h2><p>我们发现我们new完对象时，所有成员变量都是默认值，如果我们需要赋别的值，需要挨个为它们再赋值，太麻烦了。我们能不能在new对象时，直接为当前对象的某个或所有成员变量直接赋值呢。</p><p>可以，Java给我们提供了构造器。</p><h4 id="1、构造器的作用"><a href="#1、构造器的作用" class="headerlink" title="1、构造器的作用"></a>1、构造器的作用</h4><p>在创建对象的时候为实例变量赋初始值。</p><blockquote><p><strong>注意：构造器只为实例变量初始化，不为静态类变量初始化</strong></p></blockquote><h4 id="2、构造器的语法格式"><a href="#2、构造器的语法格式" class="headerlink" title="2、构造器的语法格式"></a>2、构造器的语法格式</h4><p>构造器又称为构造方法，那是因为它长的很像方法。但是和方法还有有所区别的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 构造器名()&#123;</span><br><span class="line">    <span class="comment">// 实例初始化代码</span></span><br><span class="line">&#125;</span><br><span class="line">【修饰符】 构造器名(参数列表)&#123;</span><br><span class="line"><span class="comment">// 实例初始化代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">// 无参构造</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125; </span><br><span class="line"> <span class="comment">// 有参构造</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age; </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>构造器名必须与它所在的类名必须相同。</li><li>它没有返回值，所以不需要返回值类型，甚至不需要void</li><li>如果你不提供构造器，系统会给出无参数构造器，并且该构造器的修饰符默认与类的修饰符相同</li><li>如果你提供了构造器，系统将不再提供无参数构造器，除非你自己定义。</li><li>构造器是可以重载的，既可以定义参数，也可以不定义参数。</li><li>构造器的修饰符只能是权限修饰符，不能被其他任何修饰</li></ol><h4 id="3、练习"><a href="#3、练习" class="headerlink" title="3、练习"></a>3、练习</h4><p>（1）声明一个员工类，</p><ul><li>包含属性：编号、姓名、薪资、性别，要求属性私有化，提供get&#x2F;set，</li><li>提供无参构造器和有参构造器</li><li>提供getInfo()</li></ul><p>（2）在测试类的main中分别用无参构造和有参构造创建员工类对象，调用getInfo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEmployee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//分别用无参构造和有参构造创建对象，调用getInfo</span></span><br><span class="line"><span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">System.out.println(e1.getInfo());</span><br><span class="line"></span><br><span class="line"><span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">110000</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">System.out.println(e2.getInfo());</span><br><span class="line"></span><br><span class="line">e2.setSalary(<span class="number">120000</span>);</span><br><span class="line">System.out.println(e2.getInfo());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;e1薪资：&quot;</span> + e1.getSalary());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"><span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供无参构造器和有参构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String id, String name)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String id, String name, <span class="type">double</span> salary, <span class="type">char</span> gender)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line"><span class="built_in">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">char</span> gender)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供getInfo()</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;编号：&quot;</span> + id + <span class="string">&quot;，姓名：&quot;</span> + name + <span class="string">&quot;，薪资：&quot;</span> + salary + <span class="string">&quot;，性别：&quot;</span> +gender;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-标准JavaBean"><a href="#6-3-标准JavaBean" class="headerlink" title="6.3 标准JavaBean"></a>6.3 标准JavaBean</h2><p><code>JavaBean</code> 是 Java语言编写类的一种标准规范。符合<code>JavaBean</code> 的类，要求：</p><p>（1）类必须是具体的和公共的，</p><p>（2）并且具有无参数的构造方法，</p><p>（3）成员变量私有化，并提供用来操作成员变量的<code>set</code> 和<code>get</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassName</span>&#123;</span><br><span class="line">  <span class="comment">//成员变量</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="comment">//无参构造方法【必须】</span></span><br><span class="line">  <span class="comment">//有参构造方法【建议】</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//getXxx()</span></span><br><span class="line">  <span class="comment">//setXxx()</span></span><br><span class="line">  <span class="comment">//其他成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 编写符合<code>JavaBean</code> 规范的类，以学生类为例，标准代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get/set成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//其他成员方法列表</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;，年龄：&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStudent</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 无参构造使用</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">s.setName(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">s.setAge(<span class="number">18</span>);</span><br><span class="line">System.out.println(s.getName() + <span class="string">&quot;---&quot;</span> + s.getAge());</span><br><span class="line">        System.out.println(s.getInfo());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参构造使用</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵丽颖&quot;</span>, <span class="number">18</span>);</span><br><span class="line">System.out.println(s2.getName() + <span class="string">&quot;---&quot;</span> + s2.getAge());</span><br><span class="line">        System.out.println(s2.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-继承"><a href="#6-4-继承" class="headerlink" title="6.4 继承"></a>6.4 继承</h2><h3 id="6-4-1-继承的概述"><a href="#6-4-1-继承的概述" class="headerlink" title="6.4.1 继承的概述"></a>6.4.1 继承的概述</h3><h4 id="生活中的继承"><a href="#生活中的继承" class="headerlink" title="生活中的继承"></a>生活中的继承</h4><ul><li><p>财产：富二代</p></li><li><p>样貌：如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%BB%A7%E6%89%BF1.jpg"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%BB%A7%E6%89%BF2.jpg"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%BB%A7%E6%89%BF3.jpg"></p></li><li><p>才华：如图所示：</p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%BB%A7%E6%89%BF4.jpg" style="zoom: 33%;" /></li></ul><h4 id="继承的由来"><a href="#继承的由来" class="headerlink" title="继承的由来"></a>继承的由来</h4><p>如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8C%AB%E7%8B%97%E7%BB%A7%E6%89%BF1.jpg"></p><p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类中无需再定义这些属性和行为，只需要和抽取出来的类构成某种关系。如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8C%AB%E7%8B%97%E7%BB%A7%E6%89%BF2.jpg"></p><p>其中，多个类可以称为<strong>子类</strong>，也叫<strong>派生类</strong>；多个类抽取出来的这个类称为<strong>父类</strong>、<strong>超类（superclass）</strong>或者<strong>基类</strong>。</p><p>继承描述的是事物之间的所属关系，这种关系是：<code>is-a</code> 的关系。例如，图中猫属于动物，狗也属于动物。可见，父类更通用，子类更具体。我们通过继承，可以使多种事物之间形成一种关系体系。</p><h4 id="继承的好处"><a href="#继承的好处" class="headerlink" title="继承的好处"></a>继承的好处</h4><ul><li><p>提高<strong>代码的复用性</strong>。</p></li><li><p>提高<strong>代码的扩展性</strong>。</p></li><li><p>类与类之间产生了关系，是学习<strong>多态的前提</strong>。</p></li></ul><h3 id="6-4-2-继承的格式"><a href="#6-4-2-继承的格式" class="headerlink" title="6.4.2 继承的格式"></a>6.4.2 继承的格式</h3><p>通过 <code>extends</code> 关键字，可以声明一个子类继承另外一个父类，定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 class 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【修饰符】 class 子类 extends 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继承演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义动物类Animal，做为父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 定义name属性</span></span><br><span class="line">String name; </span><br><span class="line">    <span class="comment">// 定义age属性</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"><span class="comment">// 定义动物的吃东西方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(age + <span class="string">&quot;岁的&quot;</span> + name + <span class="string">&quot;在吃东西&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义猫类Cat 继承 动物类Animal</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="comment">// 定义一个猫抓老鼠的方法catchMouse</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendDemo01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个猫类对象</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>()；</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 为该猫类对象的name属性进行赋值</span></span><br><span class="line">cat.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 为该猫类对象的age属性进行赋值</span></span><br><span class="line">cat.age = <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用该猫的catchMouse()方法</span></span><br><span class="line">cat.catchMouse();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 调用该猫继承来的eat()方法</span></span><br><span class="line">      cat.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">演示结果：</span><br><span class="line">抓老鼠</span><br><span class="line"><span class="number">2</span>岁的Tom在吃东西</span><br></pre></td></tr></table></figure><h3 id="6-4-3-继承的特点一：成员变量"><a href="#6-4-3-继承的特点一：成员变量" class="headerlink" title="6.4.3 继承的特点一：成员变量"></a>6.4.3 继承的特点一：成员变量</h3><h4 id="1、父类成员变量私有化（private）"><a href="#1、父类成员变量私有化（private）" class="headerlink" title="1、父类成员变量私有化（private）"></a>1、父类成员变量私有化（private）</h4><ul><li>父类中的成员，无论是公有(public)还是私有(private)，均会被子类继承。</li><li>子类虽会继承父类私有(private)的成员，但子类不能对继承的私有成员直接进行访问，可通过继承的get&#x2F;set方法进行访问。如图所示：</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%BB%A7%E6%89%BF%E7%A7%81%E6%9C%89%E6%88%90%E5%91%981.jpg"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义动物类Animal，做为父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 定义name属性</span></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line">    <span class="comment">// 定义age属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">// 定义动物的吃东西方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(age + <span class="string">&quot;岁的&quot;</span> + name + <span class="string">&quot;在吃东西&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义猫类Cat 继承 动物类Animal</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="comment">// 定义一个猫抓老鼠的方法catchMouse</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendDemo01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个猫类对象</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>()；</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 为该猫类对象的name属性进行赋值</span></span><br><span class="line"><span class="comment">//cat.name = &quot;Tom&quot;;// 编译报错</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 为该猫类对象的age属性进行赋值</span></span><br><span class="line">cat.age = <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用该猫的catchMouse()方法</span></span><br><span class="line">cat.catchMouse();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 调用该猫继承来的eat()方法</span></span><br><span class="line">      cat.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图所示：</p><p>eclipse中Debug查看对象成员变量值的情况截图如下：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%BB%A7%E6%89%BF%E7%A7%81%E6%9C%89%E6%88%90%E5%91%982.jpg"></p><p>idea中Debug查看对象成员变量值的情况截图如下：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576579518956.png" alt="1576579518956"></p><h4 id="2、父子类成员变量重名"><a href="#2、父子类成员变量重名" class="headerlink" title="2、父子类成员变量重名"></a>2、父子类成员变量重名</h4><p>我们说父类的所有成员变量都会继承到子类中，那么如果子类出现与父类同名的成员变量会怎么样呢？</p><p>父类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> k=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getJ</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJ</span><span class="params">(<span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.j = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> i=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> j=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> m=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在想要在子类Son中声明一个test()方法，并打印这些所有变量的值，该如何实现？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> i=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> j=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> m=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;父类继承的i：&quot;</span> + <span class="built_in">super</span>.i);</span><br><span class="line">System.out.println(<span class="string">&quot;子类的i：&quot;</span> +i);</span><br><span class="line"><span class="comment">//System.out.println(super.j);</span></span><br><span class="line">System.out.println(<span class="string">&quot;父类继承的j：&quot;</span> +getJ());</span><br><span class="line">System.out.println(<span class="string">&quot;子类的j：&quot;</span> +j);</span><br><span class="line">System.out.println(<span class="string">&quot;父类继承的k：&quot;</span> +k);</span><br><span class="line">System.out.println(<span class="string">&quot;子类的m：&quot;</span> +m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><p>（1）当父类的成员变量私有化时，在子类中是无法直接访问的，所以是否重名不影响，如果想要访问父类的私有成员变量，只能通过父类的get&#x2F;set方法访问；</p><p>（2）当父类的成员变量非私有时，在子类中可以直接访问，所以如果有重名时，就需要加“super.”进行区别。</p><p>使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>.父类成员变量名</span><br></pre></td></tr></table></figure><p>以上test()调用结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSon</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Son</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">s.test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">父类继承的i：<span class="number">1</span></span><br><span class="line">子类的i：<span class="number">2</span></span><br><span class="line">父类继承的j：<span class="number">1</span></span><br><span class="line">子类的j：<span class="number">2</span></span><br><span class="line">父类继承的k：<span class="number">1</span></span><br><span class="line">子类的m：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>eclipse中Debug查看对象的成员变量的值截图如下：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572422069292.png" alt="1572422069292"></p><p>idea中Debug查看对象的成员变量的值截图如下：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1576579731205.png" alt="1576579731205"></p><blockquote><p>说明：虽然我们可以区分父子类的重名成员变量，但是实际开发中，我们不建议这么干。</p></blockquote><h3 id="6-4-4-继承的特点二：成员方法"><a href="#6-4-4-继承的特点二：成员方法" class="headerlink" title="6.4.4 继承的特点二：成员方法"></a>6.4.4 继承的特点二：成员方法</h3><p>我们说父类的所有方法子类都会继承，但是当某个方法被继承到子类之后，子类觉得父类原来的实现不适合于子类，该怎么办呢？我们可以进行方法重写 (Override)</p><h4 id="1、方法重写"><a href="#1、方法重写" class="headerlink" title="1、方法重写"></a>1、方法重写</h4><p>比如新的手机增加来电显示头像的功能，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showNum</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;来电显示号码&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//智能手机类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写父类的来电显示号码功能，并增加自己的显示姓名和图片功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showNum</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//调用父类已经存在的功能使用super</span></span><br><span class="line"><span class="built_in">super</span>.showNum();</span><br><span class="line"><span class="comment">//增加自己特有显示姓名和图片功能</span></span><br><span class="line">System.out.println(<span class="string">&quot;显示来电姓名&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;显示头像&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsDemo06</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line">      <span class="type">NewPhone</span> <span class="variable">np</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewPhone</span>()；</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用父类继承而来的方法</span></span><br><span class="line">        np.call();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 调用子类重写的方法</span></span><br><span class="line">      np.showNum();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>小贴士：这里重写时，用到super.父类成员方法，表示调用父类的成员方法。</p></blockquote><p>注意事项：</p><p>1.@Override：写在方法上面，用来检测是不是有效的正确覆盖重写。这个注解就算不写，只要满足要求，也是正确的方法覆盖重写。建议保留</p><p>2.必须保证父子类之间方法的名称相同，参数列表也相同。<br>3.子类方法的返回值类型必须【小于等于】父类方法的返回值类型（小于其实就是是它的子类，例如：Student &lt; Person）。</p><blockquote><p>注意：如果返回值类型是基本数据类型和void，那么必须是相同</p></blockquote><p>4.子类方法的权限必须【大于等于】父类方法的权限修饰符。<br>小扩展提示：public &gt; protected &gt; 缺省 &gt; private</p><p>5.几种特殊的方法不能被重写</p><ul><li>静态方法不能被重写</li><li>私有等在子类中不可见的方法不能被重写</li><li>final方法不能被重写</li></ul><h4 id="2、方法的重载"><a href="#2、方法的重载" class="headerlink" title="2、方法的重载"></a>2、方法的重载</h4><p>（1）同一个类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b,<span class="type">int</span> c)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> max(max(a,b),c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）父子类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span> + i  <span class="string">&quot;,j = &quot;</span> + j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于Son类，相当于有两个print方法，一个形参列表是(int i)，一个形参列表(int i, int j)</p></blockquote><h3 id="6-4-5-继承的特点三：构造方法"><a href="#6-4-5-继承的特点三：构造方法" class="headerlink" title="6.4.5 继承的特点三：构造方法"></a>6.4.5 继承的特点三：构造方法</h3><p>当类之间产生了关系，其中各类中的构造方法，又产生了哪些影响呢？</p><p>首先我们要回忆两个事情，构造方法的定义格式和作用。</p><ol><li><p>构造方法的名字是与类名一致的。</p><p>所以子类是<strong>无法继承</strong>父类构造方法的。</p></li><li><p>构造方法的作用是初始化实例变量的，而子类又会从父类继承所有成员变量</p><p>所以子类的初始化过程中，<strong>必须</strong>先执行父类的初始化动作。子类的构造方法中默认有一个<code>super()</code> ，表示调用父类的实例初始化方法，父类成员变量初始化后，才可以给子类使用。代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line">  Fu()&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Fu()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">  Zi()&#123;</span><br><span class="line">    <span class="comment">// super（），调用父类构造方法</span></span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;Zi（）&quot;</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsDemo07</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String args[])</span>&#123;</span><br><span class="line">    <span class="type">Zi</span> <span class="variable">zi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">Fu（）</span><br><span class="line">Zi（）</span><br></pre></td></tr></table></figure><p>如果父类没有无参构造怎么办？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其他成员方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时子类代码报错。</p><p>解决办法：在子类构造器中，用super(实参列表)，显示调用父类的有参构造解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> score)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name, age);</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他成员方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><p>子类对象实例化过程中必须先完成从父类继承的成员变量的实例初始化，这个过程是通过调用父类的实例初始化方法来完成的。</p><ul><li>super()：表示调用父类的无参实例初始化方法，要求父类必须有无参构造，而且可以省略不写；</li><li>super(实参列表)：表示调用父类的有参实例初始化方法，当父类没有无参构造时，子类的构造器首行必须写super(实参列表)来明确调用父类的哪个有参构造（其实是调用该构造器对应的实例初始方法）</li><li>super()和super(实参列表)都只能出现在子类构造器的首行</li></ul><p>形式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">//A类和B类都是默认有一个无参构造，B类的默认无参构造中还会默认调用A类的默认无参构造</span></span><br><span class="line">        <span class="comment">//但是因为都是默认的，没有打印语句，看不出来</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">A()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A类无参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">//A类显示声明一个无参构造，</span></span><br><span class="line"><span class="comment">//B类默认有一个无参构造，</span></span><br><span class="line"><span class="comment">//B类的默认无参构造中会默认调用A类的无参构造</span></span><br><span class="line">        <span class="comment">//可以看到会输出“A类无参构造器&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形式三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">A()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A类无参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">B()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B类无参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">//A类显示声明一个无参构造，</span></span><br><span class="line"><span class="comment">//B类显示声明一个无参构造，        </span></span><br><span class="line"><span class="comment">//B类的无参构造中虽然没有写super()，但是仍然会默认调用A类的无参构造</span></span><br><span class="line">        <span class="comment">//可以看到会输出“A类无参构造器&quot;和&quot;B类无参构造器&quot;)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形式四：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">A()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A类无参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">B()&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;B类无参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">//A类显示声明一个无参构造，</span></span><br><span class="line"><span class="comment">//B类显示声明一个无参构造，        </span></span><br><span class="line"><span class="comment">//B类的无参构造中明确写了super()，表示调用A类的无参构造</span></span><br><span class="line">        <span class="comment">//可以看到会输出“A类无参构造器&quot;和&quot;B类无参构造器&quot;)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形式五：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">A(<span class="type">int</span> a)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A类有参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">B()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B类无参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test05</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">//A类显示声明一个有参构造，没有写无参构造，那么A类就没有无参构造了</span></span><br><span class="line"><span class="comment">//B类显示声明一个无参构造，        </span></span><br><span class="line"><span class="comment">//B类的无参构造没有写super(...)，表示默认调用A类的无参构造</span></span><br><span class="line">        <span class="comment">//编译报错，因为A类没有无参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20200227141228450.png" alt="image-20200227141228450"></p><p><img src="/imgs/image-20200227141051954.png" alt="image-20200227141051954"></p><p>形式六：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">A(<span class="type">int</span> a)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A类有参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">B()&#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;B类无参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test06</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">//A类显示声明一个有参构造，没有写无参构造，那么A类就没有无参构造了</span></span><br><span class="line"><span class="comment">//B类显示声明一个无参构造，        </span></span><br><span class="line"><span class="comment">//B类的无参构造明确写super()，表示调用A类的无参构造</span></span><br><span class="line">        <span class="comment">//编译报错，因为A类没有无参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200303183542807.png" alt="image-20200303183542807"></p><p>形式七：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">A(<span class="type">int</span> a)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A类有参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">B(<span class="type">int</span> a)&#123;</span><br><span class="line"><span class="built_in">super</span>(a);</span><br><span class="line">System.out.println(<span class="string">&quot;B类有参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test07</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//A类显示声明一个有参构造，没有写无参构造，那么A类就没有无参构造了</span></span><br><span class="line"><span class="comment">//B类显示声明一个有参构造，        </span></span><br><span class="line"><span class="comment">//B类的有参构造明确写super(a)，表示调用A类的有参构造</span></span><br><span class="line">        <span class="comment">//会打印“A类有参构造器&quot;和&quot;B类有参构造器&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形式八：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    A()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">A(<span class="type">int</span> a)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A类有参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    B（）&#123;</span><br><span class="line">        <span class="built_in">super</span>();<span class="comment">//可以省略，调用父类的无参构造</span></span><br><span class="line">        System.out.println(<span class="string">&quot;B类无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">B(<span class="type">int</span> a)&#123;</span><br><span class="line"><span class="built_in">super</span>(a);<span class="comment">//调用父类有参构造</span></span><br><span class="line">System.out.println(<span class="string">&quot;B类有参构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test8</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="type">B</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-6-继承的特点四：单继承限制"><a href="#6-4-6-继承的特点四：单继承限制" class="headerlink" title="6.4.6 继承的特点四：单继承限制"></a>6.4.6 继承的特点四：单继承限制</h3><ol><li>Java只支持单继承，不支持多继承。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个类只能有一个父类，不可以有多个父类。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;&#125; <span class="comment">//ok</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span>，B...<span class="comment">//error</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Java支持多层继承(继承体系)。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>顶层父类是Object类。所有的类默认继承Object，作为父类。</p></blockquote><ol start="3"><li><p>子类和父类是一种相对的概念。</p><p>例如：B类对于A来说是子类，但是对于C类来说是父类</p></li><li><p>一个父类可以同时拥有多个子类</p></li></ol><h3 id="6-4-7-继承练习"><a href="#6-4-7-继承练习" class="headerlink" title="6.4.7 继承练习"></a>6.4.7 继承练习</h3><h4 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h4><p>（1）父类Graphic图形<br>包含属性：name（图形名），属性私有化，不提供无参构造，只提供有参构造<br>包含求面积getArea()：返回0.0<br>求周长getPerimeter()方法：返回0.0<br>显示信息getInfo()方法：返回图形名称、面积、周长</p><p>（2）子类Circle圆继承Graphic图形<br>包含属性：radius<br>重写求面积getArea()和求周长getPerimeter()方法，显示信息getInfo()加半径信息</p><p>（3）子类矩形Rectange继承Graphic图形<br>包含属性：length、width<br>重写求面积getArea()和求周长getPerimeter()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graphic</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Graphic</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * this对象：调用当前方法的对象，如果是Graphic对象，那么就会执行Graphic的getArea()和getPerimeter()</span></span><br><span class="line"><span class="comment"> * this对象：调用当前方法的对象，如果是Circle对象，那么就会执行Circle的getArea()和getPerimeter()</span></span><br><span class="line"><span class="comment"> * this对象：调用当前方法的对象，如果是Rectangle对象，那么就会执行Rectangle的getArea()和getPerimeter()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;图形：&quot;</span> + name + <span class="string">&quot;，面积：&quot;</span> + getArea() + <span class="string">&quot;,周长：&quot;</span> + getPerimeter();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Graphic</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String name, <span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span><span class="comment">//表示这个方法是重写的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span><span class="comment">//表示这个方法是重写的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.PI * radius * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*@Override//表示这个方法是重写的方法</span></span><br><span class="line"><span class="comment">public String getInfo() &#123;</span></span><br><span class="line"><span class="comment">return super.getInfo() + &quot;，半径：&quot; + radius;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Graphic</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(String name, <span class="type">double</span> length, <span class="type">double</span> width)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line"><span class="built_in">this</span>.length = length;</span><br><span class="line"><span class="built_in">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.length = length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> length*width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*(length + width);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGraphicExer3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Graphic</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graphic</span>(<span class="string">&quot;通用图形&quot;</span>);</span><br><span class="line">System.out.println(g.getInfo());</span><br><span class="line"></span><br><span class="line"><span class="type">Circle</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="string">&quot;圆&quot;</span>, <span class="number">1.2</span>);</span><br><span class="line">System.out.println(c.getInfo());<span class="comment">//调用getInfo()方法的对象是c</span></span><br><span class="line"></span><br><span class="line"><span class="type">Rectangle</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="string">&quot;矩形&quot;</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">System.out.println(r.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h4><p>（1）声明一个银行储蓄卡类，</p><p>​包含属性：账户，余额</p><p>​包含取款 public void withdraw(double money)</p><p>​    存款 pubic void save(double money)</p><p>​           获取账户信息： public String getInfo() 可以返回账户和余额</p><p>（2）声明一个银行信用卡类，继承储蓄卡类</p><p>​增加属性：可透支额度，最多可透支金额</p><p>​重写存款 public void withdraw(double money)，可透支</p><p>​       存款 pubic void save(double money)，需要恢复可透支额度</p><p>（3）在测试类中，分别创建两种卡对象，测试</p><h4 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h4><p>1、声明父类：Person类<br>包含属性：姓名，年龄，性别<br>属性私有化，get&#x2F;set<br>包含getInfo()方法：例如：姓名：张三，年龄：23，性别：男</p><p>2、声明子类：Student类，继承Person类<br>新增属性：score成绩<br>属性私有化，get&#x2F;set<br>包含getInfo()方法：例如：姓名：张三，年龄：23，性别：男，成绩：89</p><p>3、声明子类：Teacher类，继承Person类<br>新增属性：salary薪资<br>属性私有化，get&#x2F;set<br>包含getInfo()方法：例如：姓名：张三，年龄：23，性别：男，薪资：10000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">char</span> gender)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line"><span class="built_in">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">char</span> gender)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//包含getInfo()方法：例如：姓名：张三，年龄：23，性别：男</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;，年龄：&quot;</span> + age +<span class="string">&quot;，性别：&quot;</span> + gender;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">char</span> gender, <span class="type">int</span> score)</span> &#123;</span><br><span class="line">setName(name);</span><br><span class="line">setAge(age);</span><br><span class="line">setGender(gender);</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">int</span> score)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//包含getInfo()方法：例如：姓名：张三，年龄：23，性别：男，成绩：89</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//return &quot;姓名：&quot; + getName() + &quot;，年龄：&quot; + getAge() + &quot;，成绩：&quot; + score;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.getInfo() + <span class="string">&quot;，成绩：&quot;</span> + score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">char</span> gender, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">setName(name);</span><br><span class="line">setAge(age);</span><br><span class="line">setGender(gender);</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//包含getInfo()方法：例如：姓名：张三，年龄：23，性别：男，薪资：10000</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.getInfo() + <span class="string">&quot;，薪资：&quot;</span> + salary;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPersonExer2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">System.out.println(p.getInfo());</span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;陈琦&quot;</span>, <span class="number">25</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">89</span>);</span><br><span class="line">System.out.println(s.getInfo());</span><br><span class="line"></span><br><span class="line"><span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;柴林燕&quot;</span>, <span class="number">18</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">11111</span>);</span><br><span class="line">System.out.println(t.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-5-this和super关键字"><a href="#6-5-this和super关键字" class="headerlink" title="6.5 this和super关键字"></a>6.5 this和super关键字</h2><h3 id="6-5-1-this关键字"><a href="#6-5-1-this关键字" class="headerlink" title="6.5.1 this关键字"></a>6.5.1 this关键字</h3><h4 id="1、this的含义"><a href="#1、this的含义" class="headerlink" title="1、this的含义"></a>1、this的含义</h4><p>this代表当前对象</p><h4 id="2、this使用位置"><a href="#2、this使用位置" class="headerlink" title="2、this使用位置"></a>2、this使用位置</h4><ul><li>this在实例初始化相关的代码块和构造器中：表示正在创建的那个实例对象，即正在new谁，this就代表谁</li><li>this在非静态实例方法中：表示调用该方法的对象，即谁在调用，this就代表谁。</li><li>this不能出现在静态代码块和静态方法中</li></ul><h4 id="3、this使用格式"><a href="#3、this使用格式" class="headerlink" title="3、this使用格式"></a>3、this使用格式</h4><p>（1）this.成员变量名</p><ul><li>当方法的局部变量与当前对象的成员变量重名时，就可以在成员变量前面加this.，如果没有重名问题，就可以省略this.</li><li>this.成员变量会先从本类声明的成员变量列表中查找，如果未找到，会去从父类继承的在子类中仍然可见的成员变量列表中查找</li></ul><p>（2）this.成员方法</p><ul><li>调用当前对象的成员方法时，都可以加”this.”，也可以省略，实际开发中都省略</li><li>当前对象的成员方法，先从本类声明的成员方法列表中查找，如果未找到，会去从父类继承的在子类中仍然可见的成员方法列表中查找</li></ul><p>（3）this()或this(实参列表)</p><ul><li><p>只能调用本类的其他构造器</p></li><li><p>必须在构造器的首行</p></li><li><p>如果一个类中声明了n个构造器，则最多有 n - 1个构造器中使用了”this(【实参列表】)”，否则会发生递归调用死循环</p></li></ul><h3 id="6-5-2-super关键字"><a href="#6-5-2-super关键字" class="headerlink" title="6.5.2  super关键字"></a>6.5.2  super关键字</h3><h4 id="1、super的含义"><a href="#1、super的含义" class="headerlink" title="1、super的含义"></a>1、super的含义</h4><p>super代表当前对象中从父类的引用的</p><h4 id="2、super使用的前提"><a href="#2、super使用的前提" class="headerlink" title="2、super使用的前提"></a>2、super使用的前提</h4><ul><li>通过super引用父类的xx，都是在子类中仍然可见的</li><li>不能在静态代码块和静态方法中使用super</li></ul><h4 id="3、super的使用格式"><a href="#3、super的使用格式" class="headerlink" title="3、super的使用格式"></a>3、super的使用格式</h4><p>（1）super.成员变量</p><p>在子类中访问父类的成员变量，特别是当子类的成员变量与父类的成员变量重名时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//其他代码省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line"><span class="comment">//其他成员方法省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561984785190.png" alt="1561984785190"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Son</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    s.test(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">System.out.println(<span class="built_in">super</span>.a);<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>.a);<span class="comment">//20</span></span><br><span class="line">System.out.println(a);<span class="comment">//30</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）super.成员方法</p><p>在子类中调用父类的成员方法，特别是当子类重写了父类的成员方法时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Son</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    s.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">method();<span class="comment">//bb</span></span><br><span class="line"><span class="built_in">this</span>.method();<span class="comment">//bb</span></span><br><span class="line"><span class="built_in">super</span>.method();<span class="comment">//aa</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）super()或super(实参列表)</p><p>在子类的构造器首行，用于表示调用父类的哪个实例初始化方法</p><blockquote><p>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</p></blockquote><h3 id="6-5-3-就近原则和追根溯源原则"><a href="#6-5-3-就近原则和追根溯源原则" class="headerlink" title="6.5.3  就近原则和追根溯源原则"></a>6.5.3  就近原则和追根溯源原则</h3><h4 id="1、找变量"><a href="#1、找变量" class="headerlink" title="1、找变量"></a>1、找变量</h4><ul><li><p><strong>没有super和this</strong></p><ul><li>在构造器、代码块、方法中如果出现使用某个变量，先查看是否是当前块声明的局部变量，</li><li>如果不是局部变量，先从当前执行代码的本类去找成员变量</li><li>如果从当前执行代码的本类中没有找到，会往上找父类的（非private，跨包还不能是缺省的）</li></ul></li><li><p><strong>this</strong> ：代表当前对象</p><ul><li>通过this找成员变量时，先从当前执行代码的本类中找，没有的会往上找父类的（非private，跨包还不能是缺省的）。</li></ul></li><li><p><strong>super</strong> ：代表父类的</p><ul><li>通过super找成员变量，直接从当前执行代码所在类的父类找</li><li>super()或super(实参列表)只能从直接父类找</li><li>通过super只能访问父类在子类中可见的（非private，跨包还不能是缺省的）</li></ul></li></ul><blockquote><p>注意：super和this都不能出现在静态方法和静态代码块中，因为super和this都是存在与<strong>对象</strong>中的</p></blockquote><h4 id="2、找方法"><a href="#2、找方法" class="headerlink" title="2、找方法"></a>2、找方法</h4><ul><li><p>没有super和this</p><ul><li>先从当前对象（调用方法的对象）的本类找，如果没有，再从直接父类找，再没有，继续往上追溯</li></ul></li><li><p>this</p><ul><li>先从当前对象（调用方法的对象）的本类找，如果没有，再从父类继承的可见的方法列表中查找</li></ul></li><li><p>super</p><ul><li>直接从当前对象（调用方法的对象）的父类继承的可见的方法列表中查找</li></ul></li></ul><h4 id="3、找构造器"><a href="#3、找构造器" class="headerlink" title="3、找构造器"></a>3、找构造器</h4><ul><li>this()或this(实参列表)：只从本类中，不会再往上追溯</li><li>super()或super(实参列表)：只从直接父类找，不会再往上追溯</li></ul><h4 id="4、练习"><a href="#4、练习" class="headerlink" title="4、练习"></a>4、练习</h4><h5 id="（1）情形1"><a href="#（1）情形1" class="headerlink" title="（1）情形1"></a>（1）情形1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//子类与父类的属性同名，子类对象中就有两个a</span></span><br><span class="line">System.out.println(<span class="string">&quot;父类的a：&quot;</span> + <span class="built_in">super</span>.a);<span class="comment">//10    直接从父类局部变量找</span></span><br><span class="line">System.out.println(<span class="string">&quot;子类的a：&quot;</span> + <span class="built_in">this</span>.a);<span class="comment">//20   先从本类成员变量找</span></span><br><span class="line">System.out.println(<span class="string">&quot;子类的a：&quot;</span> + a);<span class="comment">//20  先找局部变量找，没有再从本类成员变量找</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子类与父类的属性不同名，是同一个b</span></span><br><span class="line">System.out.println(<span class="string">&quot;b = &quot;</span> + b);<span class="comment">//11  先找局部变量找，没有再从本类成员变量找，没有再从父类找</span></span><br><span class="line">System.out.println(<span class="string">&quot;b = &quot;</span> + <span class="built_in">this</span>.b);<span class="comment">//11   先从本类成员变量找，没有再从父类找</span></span><br><span class="line">System.out.println(<span class="string">&quot;b = &quot;</span> + <span class="built_in">super</span>.b);<span class="comment">//11  直接从父类局部变量找</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line"><span class="comment">//子类与父类的属性同名，子类对象中就有两个成员变量a，此时方法中还有一个局部变量a</span></span><br><span class="line">System.out.println(<span class="string">&quot;父类的a：&quot;</span> + <span class="built_in">super</span>.a);<span class="comment">//10  直接从父类局部变量找</span></span><br><span class="line">System.out.println(<span class="string">&quot;子类的a：&quot;</span> + <span class="built_in">this</span>.a);<span class="comment">//20  先从本类成员变量找</span></span><br><span class="line">System.out.println(<span class="string">&quot;局部变量的a：&quot;</span> + a);<span class="comment">//30  先找局部变量</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);<span class="comment">//13  先找局部变量</span></span><br><span class="line">System.out.println(<span class="string">&quot;b = &quot;</span> + <span class="built_in">this</span>.b);<span class="comment">//11  先从本类成员变量找</span></span><br><span class="line">System.out.println(<span class="string">&quot;b = &quot;</span> + <span class="built_in">super</span>.b);<span class="comment">//11  直接从父类局部变量找</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInherite2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">System.out.println(son.a);<span class="comment">//20</span></span><br><span class="line">System.out.println(son.b);<span class="comment">//11</span></span><br><span class="line"></span><br><span class="line">son.test();</span><br><span class="line"></span><br><span class="line">son.method(<span class="number">30</span>);</span><br><span class="line">        </span><br><span class="line">        son.fun(<span class="number">13</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（2）情形2"><a href="#（2）情形2" class="headerlink" title="（2）情形2"></a>（2）情形2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Son</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    System.out.println(s.getNum());<span class="comment">//10   没重写，先找本类，没有，找父类</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">Daughter</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Daughter</span>();</span><br><span class="line">    System.out.println(d.getNum());<span class="comment">//20  重写了，先找本类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Daughter</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（3）情形3"><a href="#（3）情形3" class="headerlink" title="（3）情形3"></a>（3）情形3</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Son</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    s.test();</span><br><span class="line">    </span><br><span class="line">    <span class="type">Daughter</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Daughter</span>();</span><br><span class="line">    d.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(getNum());<span class="comment">//10  本类没有找父类</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>.getNum());<span class="comment">//10  本类没有找父类</span></span><br><span class="line">System.out.println(<span class="built_in">super</span>.getNum());<span class="comment">//10  本类没有找父类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Daughter</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(getNum());<span class="comment">//20  先找本类</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>.getNum());<span class="comment">//20  先找本类</span></span><br><span class="line">System.out.println(<span class="built_in">super</span>.getNum());<span class="comment">//10  直接找父类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-6-成员变量初始化"><a href="#6-6-成员变量初始化" class="headerlink" title="6.6 成员变量初始化"></a>6.6 成员变量初始化</h2><h3 id="6-6-1-成员变量初始化方式"><a href="#6-6-1-成员变量初始化方式" class="headerlink" title="6.6.1 成员变量初始化方式"></a>6.6.1 成员变量初始化方式</h3><h4 id="1、成员变量有默认值"><a href="#1、成员变量有默认值" class="headerlink" title="1、成员变量有默认值"></a>1、成员变量有默认值</h4><table><thead><tr><th>类别</th><th>具体类型</th><th>默认值</th></tr></thead><tbody><tr><td>基本类型</td><td>整数（byte，short，int，long）</td><td>0</td></tr><tr><td></td><td>浮点数（float，double）</td><td>0.0</td></tr><tr><td></td><td>字符（char）</td><td>‘\u0000’</td></tr><tr><td></td><td>布尔（boolean）</td><td>false</td></tr><tr><td></td><td>数据类型</td><td>默认值</td></tr><tr><td>引用类型</td><td>数组，类，接口</td><td>null</td></tr></tbody></table><p>我们知道类中成员变量都有默认值，但是现在我们要为成员变量赋默认值以外的值，我们该怎么办呢？</p><h4 id="2、显式赋值"><a href="#2、显式赋值" class="headerlink" title="2、显式赋值"></a>2、显式赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COUNTRY</span> <span class="operator">=</span> <span class="string">&quot;中华人民共和国&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">school</span> <span class="operator">=</span> <span class="string">&quot;尚硅谷&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>显式赋值，一般都是赋常量值</p></blockquote><h4 id="3、代码块"><a href="#3、代码块" class="headerlink" title="3、代码块"></a>3、代码块</h4><p>如果成员变量想要初始化的值不是一个硬编码的常量值，而是需要通过复杂的计算或读取文件、或读取运行环境信息等方式才能获取的一些值，该怎么办呢？</p><ul><li>静态初始化块：为静态变量初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 class 类名&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">静态初始化</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>实例初始化：为实例变量初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 class 类名&#123;</span><br><span class="line">    &#123;</span><br><span class="line">实例初始化块</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态初始化块：在类初始化时由类加载器调用执行，每一个类的静态初始化只会执行一次，早于实例对象的创建。</p><p>实例初始化块：每次new实例对象时自动执行，每new一个对象，执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String school;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="comment">//获取系统属性，这里只是说明school的初始化过程可能比较复杂</span></span><br><span class="line">school = System.getProperty(<span class="string">&quot;school&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(school==<span class="literal">null</span>) &#123;</span><br><span class="line">school = <span class="string">&quot;尚硅谷&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(info==<span class="literal">null</span>) &#123;</span><br><span class="line">gender = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">gender = info.charAt(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSchool</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> school;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setSchool</span><span class="params">(String school)</span> &#123;</span><br><span class="line">Student.school = school;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">char</span> gender)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、构造器"><a href="#4、构造器" class="headerlink" title="4、构造器"></a>4、构造器</h4><p>我们发现，显式赋值和实例初始化块为每一个实例对象的实例变量初始化的都是相同的值，那么我们如果想要不同的实例对象初始化为不同的值，怎么办呢？此时我们可以考虑使用构造器，在new对象时由对象的创建者决定为当前对象的实例变量赋什么值。</p><blockquote><p><strong>注意：构造器只为实例变量初始化，不为静态类变量初始化</strong></p></blockquote><p>为实例变量初始化，再new对象时由对象的创建者决定为当前对象的实例变量赋什么值。</p><h3 id="6-6-2-类初始化"><a href="#6-6-2-类初始化" class="headerlink" title="6.6.2 类初始化"></a>6.6.2 类初始化</h3><p>1、类初始化的目的：为类中的静态变量进行赋值。</p><p>2、实际上，类初始化的过程时在调用一个<clinit>()方法，而这个方法是编译器自动生成的。编译器会将如下两部分的<strong>所有</strong>代码，<strong>按顺序</strong>合并到类初始化<clinit>()方法体中。<br><strong>clinit</strong> are the static initialization blocks for the class, and static field initialization </p><p>（1）静态类成员变量的显式赋值语句</p><p>（2）静态代码块中的语句</p><p>3、整个类初始化只会进行一次，如果子类初始化时，发现父类没有初始化，那么会先初始化父类。</p><h4 id="示例代码1：单个类"><a href="#示例代码1：单个类" class="headerlink" title="示例代码1：单个类"></a>示例代码1：单个类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    Father.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> getNumber();<span class="comment">//这里调用方法为a变量显式赋值的目的是为了看到这个过程</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(1)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> getNumber();</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(2)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;getNumber()&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father:test()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">getNumber()</span><br><span class="line">Father(<span class="number">1</span>)</span><br><span class="line">getNumber()</span><br><span class="line">Father(<span class="number">2</span>)</span><br><span class="line">Father:test()</span><br></pre></td></tr></table></figure><h4 id="示例代码2：父子类"><a href="#示例代码2：父子类" class="headerlink" title="示例代码2：父子类"></a>示例代码2：父子类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    Son.test();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        Son.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> getNumber();</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(1)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> getNumber();</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(2)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father:getNumber()&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> getNumber();</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son(1)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> getNumber();</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son(2)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son:getNumber()&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son:test()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">Father:getNumber()</span><br><span class="line">Father(<span class="number">1</span>)</span><br><span class="line">Father:getNumber()</span><br><span class="line">Father(<span class="number">2</span>)</span><br><span class="line">Son:getNumber()</span><br><span class="line">Son(<span class="number">1</span>)</span><br><span class="line">Son:getNumber()</span><br><span class="line">Son(<span class="number">2</span>)</span><br><span class="line">Son:test()</span><br><span class="line">-----------------------------</span><br><span class="line">Son:test()</span><br></pre></td></tr></table></figure><p>结论：</p><p>每一个类都有一个类初始化方法<clinit>()方法，然后子类初始化时，如果发现父类加载和没有初始化，会先加载和初始化父类，然后再加载和初始化子类。一个类，只会初始化一次。</p><h3 id="6-6-3-实例初始化"><a href="#6-6-3-实例初始化" class="headerlink" title="6.6.3 实例初始化"></a>6.6.3 实例初始化</h3><p>1、实例初始化的目的：为类中非静态成员变量赋值</p><p>2、实际上我们编写的代码在编译时，会自动处理代码，整理出一个<clinit>()的类初始化方法，还会整理出一个或多个的<init>(…)实例初始化方法。一个类有几个实例初始化方法，由这个类就有几个构造器决定。</p><p> <strong>init</strong> is the (or one of the) constructor(s) for the instance, and non-static field initialization.</p><p>实例初始化方法的方法体，由四部分构成：</p><p>（1）super()或super(实参列表)    这里选择哪个，看原来构造器首行是哪句，没写，默认就是super()</p><p>（2）非静态实例变量的显示赋值语句</p><p>（3）非静态代码块</p><p>（4）对应构造器中的代码</p><p>特别说明：其中（2）和（3）是按顺序合并的，（1）一定在最前面（4）一定在最后面</p><p>3、执行特点：</p><ul><li>创建对象时，才会执行</li><li>每new一个对象，都会完成该对象的实例初始化</li><li>调用哪个构造器，就是执行它对应的<init>实例初始化方法</li><li>创建子类对象时，父类对应的实例初始化会被先执行，执行父类哪个实例初始化方法，看用super()还是super(实参列表)</li></ul><h4 id="示例代码1：单个类-1"><a href="#示例代码1：单个类-1" class="headerlink" title="示例代码1：单个类"></a>示例代码1：单个类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Father</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">    <span class="type">Father</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> getNumber();</span><br><span class="line"><span class="keyword">private</span> String info;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(1)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Father()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father()无参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Father(String info)&#123;</span><br><span class="line"><span class="built_in">this</span>.info = info;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(info)有参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> getNumber();</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(2)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father:getNumber()&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">Father:getNumber()</span><br><span class="line">Father(<span class="number">1</span>)</span><br><span class="line">Father:getNumber()</span><br><span class="line">Father(<span class="number">2</span>)</span><br><span class="line">Father()无参构造</span><br><span class="line">Father:getNumber()</span><br><span class="line">Father(<span class="number">1</span>)</span><br><span class="line">Father:getNumber()</span><br><span class="line">Father(<span class="number">2</span>)</span><br><span class="line">Father(info)有参构造</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562072678317.png" alt="1562072678317"></p><h4 id="示例代码2：父子类-1"><a href="#示例代码2：父子类-1" class="headerlink" title="示例代码2：父子类"></a>示例代码2：父子类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Son</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">    <span class="type">Son</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> getNumber();</span><br><span class="line"><span class="keyword">private</span> String info;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(1)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Father()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father()无参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Father(String info)&#123;</span><br><span class="line"><span class="built_in">this</span>.info = info;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(info)有参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> getNumber();</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(2)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father:getNumber()&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> getNumber();</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son(1)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> getNumber();</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son(2)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son()：无参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Son</span><span class="params">(String info)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(info);</span><br><span class="line">System.out.println(<span class="string">&quot;Son(info)：有参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son:getNumber()&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">Father:getNumber()</span><br><span class="line">Father(<span class="number">1</span>)</span><br><span class="line">Father:getNumber()</span><br><span class="line">Father(<span class="number">2</span>)</span><br><span class="line">Father()无参构造</span><br><span class="line">Son:getNumber()</span><br><span class="line">Son(<span class="number">1</span>)</span><br><span class="line">Son:getNumber()</span><br><span class="line">Son(<span class="number">2</span>)</span><br><span class="line">Son()：无参构造</span><br><span class="line">-----------------------------</span><br><span class="line">Father:getNumber()</span><br><span class="line">Father(<span class="number">1</span>)</span><br><span class="line">Father:getNumber()</span><br><span class="line">Father(<span class="number">2</span>)</span><br><span class="line">Father(info)有参构造</span><br><span class="line">Son:getNumber()</span><br><span class="line">Son(<span class="number">1</span>)</span><br><span class="line">Son:getNumber()</span><br><span class="line">Son(<span class="number">2</span>)</span><br><span class="line">Son(info)：有参构造</span><br></pre></td></tr></table></figure><h4 id="示例代码3：父子类，方法有重写"><a href="#示例代码3：父子类，方法有重写" class="headerlink" title="示例代码3：父子类，方法有重写"></a>示例代码3：父子类，方法有重写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Son</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">    <span class="type">Son</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> getNumber();</span><br><span class="line"><span class="keyword">private</span> String info;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(1)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Father()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father()无参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Father(String info)&#123;</span><br><span class="line"><span class="built_in">this</span>.info = info;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(info)有参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> getNumber();</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father(2)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father:getNumber()&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> getNumber();</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son(1)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> getNumber();</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son(2)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son()：无参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Son</span><span class="params">(String info)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(info);</span><br><span class="line">System.out.println(<span class="string">&quot;Son(info)：有参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son:getNumber()&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">Son:getNumber()  <span class="comment">//子类重写getNumber()方法，那么创建子类的对象，就是调用子类的getNumber()方法，因为当前对象this是子类的对象。</span></span><br><span class="line">Father(<span class="number">1</span>)</span><br><span class="line">Son:getNumber()</span><br><span class="line">Father(<span class="number">2</span>)</span><br><span class="line">Father()无参构造</span><br><span class="line">Son:getNumber()</span><br><span class="line">Son(<span class="number">1</span>)</span><br><span class="line">Son:getNumber()</span><br><span class="line">Son(<span class="number">2</span>)</span><br><span class="line">Son()：无参构造</span><br><span class="line">-----------------------------</span><br><span class="line">Son:getNumber()</span><br><span class="line">Father(<span class="number">1</span>)</span><br><span class="line">Son:getNumber()</span><br><span class="line">Father(<span class="number">2</span>)</span><br><span class="line">Father(info)有参构造</span><br><span class="line">Son:getNumber()</span><br><span class="line">Son(<span class="number">1</span>)</span><br><span class="line">Son:getNumber()</span><br><span class="line">Son(<span class="number">2</span>)</span><br><span class="line">Son(info)：有参构造</span><br></pre></td></tr></table></figure><h3 id="6-6-4-类初始化与实例初始化"><a href="#6-6-4-类初始化与实例初始化" class="headerlink" title="6.6.4 类初始化与实例初始化"></a>6.6.4 类初始化与实例初始化</h3><p>类初始化肯定优先于实例初始化。</p><p>类初始化只做一次。</p><p>实例初始化是每次创建对象都要进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Son</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">    <span class="type">Son</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father:static&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father:not_static&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Father()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father()无参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son:static&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son:not_static&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Son()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son()无参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">Father:<span class="keyword">static</span></span><br><span class="line">Son:<span class="keyword">static</span></span><br><span class="line">Father:not_static</span><br><span class="line"><span class="title function_">Father</span><span class="params">()</span>无参构造</span><br><span class="line">Son:not_static</span><br><span class="line"><span class="title function_">Son</span><span class="params">()</span>无参构造</span><br><span class="line">----------------------------</span><br><span class="line">Father:not_static</span><br><span class="line"><span class="title function_">Father</span><span class="params">()</span>无参构造</span><br><span class="line">Son:not_static</span><br><span class="line"><span class="title function_">Son</span><span class="params">()</span>无参构造</span><br></pre></td></tr></table></figure><h2 id="6-7-多态"><a href="#6-7-多态" class="headerlink" title="6.7 多态"></a>6.7 多态</h2><h3 id="6-7-1-引入"><a href="#6-7-1-引入" class="headerlink" title="6.7.1 引入"></a>6.7.1 引入</h3><p>多态是继封装、继承之后，面向对象的第三大特性。</p><p>生活中，比如求面积的功能，圆、矩形、三角形实现起来是不一样的。跑的动作，小猫、小狗和大象，跑起来是不一样的。再比如飞的动作，昆虫、鸟类和飞机，飞起来也是不一样的。可见，同一行为，通过不同的事物，可以体现出来的不同的形态。那么此时就会出现各种子类的类型。</p><p>但是Java是强类型静态语言，既每一个变量在使用之前必须声明它确切的类型，然后之后的赋值和运算时都是严格按照这个数据类型来处理的。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br></pre></td></tr></table></figure><p>但是，有的时候，我们在设计一个数组、或一个方法的形参、返回值类型时，无法确定它具体的类型，只能确定它是某个系列的类型。</p><p>例如：想要设计一个数组用来存储各种图形的对象，并且按照各种图形的面积进行排序，但是具体存储的对象可能有圆、矩形、三角形等，那么各种图形的求面积方式又是不同的。</p><p>例如：想要设计一个方法，它的功能是比较两个图形的面积大小，返回面积较大的那个图形对象。那么此时形参和返回值类型是图形类型，但是不知道它具体是哪一种图形类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Circle[] arr = <span class="keyword">new</span> <span class="title class_">Circle</span>[长度]; <span class="comment">//只能装圆形对象</span></span><br><span class="line">Rectangle[] arr = <span class="keyword">new</span> <span class="title class_">Rectangle</span>[长度]; <span class="comment">//只能装矩形对象</span></span><br><span class="line"><span class="comment">//无法统一管理各种图形对象，例如：给各种图形对象按照面积排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//需要重载很多个方法，增加一种具体的图形，就需要增加一个方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Circle <span class="title function_">maxArea</span><span class="params">(Circle c1, Circle c2)</span>&#123;<span class="comment">//只能比较两个圆对象</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Rectangle <span class="title function_">maxArea</span><span class="params">(Rectangle r1, Rectangle r2)</span>&#123;<span class="comment">//只能比较两个矩形对象</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，Java就引入了多态。</p><h3 id="6-7-2-定义"><a href="#6-7-2-定义" class="headerlink" title="6.7.2 定义"></a>6.7.2 定义</h3><h4 id="1、格式"><a href="#1、格式" class="headerlink" title="1、格式"></a>1、格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类类型 变量名 = 子类对象；</span><br></pre></td></tr></table></figure><blockquote><p>父类类型：指子类对象继承的父类类型，或者实现的父接口类型。</p></blockquote><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="type">int</span> age)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">&quot;说：我今年&quot;</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    Man(String name, <span class="type">int</span> age)&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    Woman(String name, <span class="type">int</span> age)&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">Person[] arr = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Woman</span>(<span class="string">&quot;如花&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">arr[i].speak();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">show(<span class="keyword">new</span> <span class="title class_">Man</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>));</span><br><span class="line">show(<span class="keyword">new</span> <span class="title class_">Woman</span>(<span class="string">&quot;如花&quot;</span>,<span class="number">18</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">p.speak();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、编译时类型与运行时类型不一致问题"><a href="#2、编译时类型与运行时类型不一致问题" class="headerlink" title="2、编译时类型与运行时类型不一致问题"></a>2、编译时类型与运行时类型不一致问题</h4><ul><li><p>编译时，看“父类”，只能调用父类声明的方法，不能调用子类扩展的方法；</p></li><li><p>运行时，看“子类”，一定是执行子类重写的方法体；</p></li></ul><p>代码如下：</p><p>定义父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>定义子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 多态形式，创建对象</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line">        a1.eat();    </span><br><span class="line">        <span class="comment">//a1.catchMouse();//错误，catchMouse()是子类扩展的方法，父类中没有</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        多态引用，编译时，看“父类”，只能调用父类声明的方法；</span></span><br><span class="line"><span class="comment">            运行时，看“子类”，一定是执行子类重写的方法体；</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多态形式，创建对象</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); </span><br><span class="line">        <span class="comment">// 调用的是 Dog 的 eat</span></span><br><span class="line">        a2.eat();               </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7-5-多态的应用"><a href="#6-7-5-多态的应用" class="headerlink" title="6.7.5 多态的应用"></a>6.7.5 多态的应用</h3><h4 id="1、多态应用在形参实参"><a href="#1、多态应用在形参实参" class="headerlink" title="1、多态应用在形参实参"></a>1、多态应用在形参实参</h4><p>父类类型作为方法形式参数，子类对象为实参。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">showAnimalEat(<span class="keyword">new</span> <span class="title class_">Dog</span>()); <span class="comment">//形参 Animal a,实参new Dog() </span></span><br><span class="line"><span class="comment">//实参给形参赋值   Animal a = new Dog()   多态引用</span></span><br><span class="line">showAnimalEat(<span class="keyword">new</span> <span class="title class_">Cat</span>());<span class="comment">//形参 Animal a,实参new Cat() </span></span><br><span class="line"><span class="comment">//实参给形参赋值   Animal a = new Cat()   多态引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 设计一个方法，可以查看所有动物的吃的行为</span></span><br><span class="line"><span class="comment"> * 关注的是所有动物的共同特征：eat()</span></span><br><span class="line"><span class="comment"> * 所以形参，设计为父类的类型</span></span><br><span class="line"><span class="comment"> * 此时不关注子类特有的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showAnimalEat</span> <span class="params">(Animal a)</span>&#123;</span><br><span class="line">        a.eat();</span><br><span class="line"><span class="comment">//        a.catchMouse();//错误，因为a现在编译时类型是Animal，只能看到父类中有的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、多态应用在数组"><a href="#2、多态应用在数组" class="headerlink" title="2、多态应用在数组"></a>2、多态应用在数组</h4><p>数组元素类型声明为父类类型，实际存储的是子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 声明一个数组，可以装各种动物的对象，看它们吃东西的样子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Animal[] arr = <span class="keyword">new</span> <span class="title class_">Animal</span>[<span class="number">2</span>]; <span class="comment">//此时不是new Animal的对象，而是new Animal[]的数组对象</span></span><br><span class="line"><span class="comment">//在堆中开辟了长度为5的数组空间，用来装Animal或它子类对象的地址</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//多态引用   左边arr[0] 是Animal类型，右边是new Cat()</span></span><br><span class="line"><span class="comment">//把Cat对象，赋值给Animal类型的变量</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i].eat();</span><br><span class="line"><span class="comment">//arr[i].catchMouse();错误，因为arr[i]现在编译时类型是Animal，只能看到父类中有的方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、多态应用在返回值"><a href="#3、多态应用在返回值" class="headerlink" title="3、多态应用在返回值"></a>3、多态应用在返回值</h4><p>方法的返回值类型声明为父类的类型，实际返回值是子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Animal</span> <span class="variable">c</span> <span class="operator">=</span> buy(<span class="string">&quot;猫咪&quot;</span>);</span><br><span class="line">System.out.println(c.getClass());</span><br><span class="line">c.eat();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 设计一个方法，可以购买各种动物的对象，此时不确定是那种具体的动物</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 返回值类型是父类的对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 多态体现在   返回值类型  Animal ，实际返回的对象是子类的new Cat()，或new Dog()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title function_">buy</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;猫咪&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;小狗&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7-6-多态练习"><a href="#6-7-6-多态练习" class="headerlink" title="6.7.6 多态练习"></a>6.7.6 多态练习</h3><h4 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h4><p>（1）声明父类Traffic，包含方法public void drive()<br>（2）声明子类Car,Bicycle等，并重写drive方法<br>（3）在测试类的main中创建一个数组，有各种交通工具，遍历调用drive()方法<br>模拟马路上跑的各种交通工具</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Traffic</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_">Traffic</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;滴滴滴...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bicycle</span> <span class="keyword">extends</span> <span class="title class_">Traffic</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;蹬蹬蹬。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExer1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//右边这些是用匿名对象，初始化数组</span></span><br><span class="line">Traffic[] arr = &#123;<span class="keyword">new</span> <span class="title class_">Car</span>(),<span class="keyword">new</span> <span class="title class_">Bicycle</span>(),<span class="keyword">new</span> <span class="title class_">Car</span>(),<span class="keyword">new</span> <span class="title class_">Bicycle</span>()&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i].drive();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习2："><a href="#练习2：" class="headerlink" title="练习2："></a>练习2：</h4><p>（1）声明一个父类Person类，public void toilet()</p><p>（2）声明一个子类Woman类，重写方法<br>（3）声明一个子类Man类，重写方法<br>（4）在测试类中声明一个方法，<br>public static void goToToilet(Person p){<br>    p.toilet();<br>}<br>在main中，创建不同子类对象，调用goToToilet方法进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toilet</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toilet</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;站着..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toilet</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;坐着..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPerson</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">goToToilet(<span class="keyword">new</span> <span class="title class_">Woman</span>());<span class="comment">//隐含了Person p = new Woman();</span></span><br><span class="line">goToToilet(<span class="keyword">new</span> <span class="title class_">Man</span>());<span class="comment">//隐含了Person p = new Man();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">goToToilet</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">p.toilet();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习3："><a href="#练习3：" class="headerlink" title="练习3："></a>练习3：</h4><p>1、声明一个父类Employee员工类型，有属性，姓名（String）<br>有方法，public double earning() 用于返回实发工资，默认返回0<br>        public String getInfo()：显示姓名和实发工资</p><p>2、声明一个子类SalaryEmployee正式工，继承父类Employee，增加属性，薪资，工作日天数，请假天数<br>重写方法，public double earning()返回实发工资，实发工资 &#x3D; 薪资 - 薪资&#x2F;工作日天数 * 请假天数，</p><p>3、声明一个子类HourEmployee小时工，继承父类Employee<br>有属性，工作小时数，每小时多少钱<br>重写方法，public double earning()返回实发工资， 实发工资 &#x3D; 每小时多少钱 * 小时数</p><p>4、声明一个子类Manager经理，继承SalaryEmployee，增加属性：奖金比例<br>重写方法，public double earning()返回实发工资，实发工资 &#x3D; (薪资 - 薪资&#x2F;工作日天数 * 请假天数)*(1+奖金比例)</p><p>5、你现在是财务，需要查看每个人的实发工资，并查看工资总额。<br>声明一个员工数组，存储各种员工，并遍历显示他们的姓名和实发工资，并计算所有员工的工资总额</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">earning</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;，实发工资：&quot;</span> + earning();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SalaryEmployee</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> workingDays;<span class="comment">//工作日天数，</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> offDays;<span class="comment">//请假天数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SalaryEmployee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SalaryEmployee</span><span class="params">(String name,  <span class="type">double</span> salary, <span class="type">int</span> workingDays, <span class="type">double</span> offDays)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line"><span class="built_in">this</span>.workingDays = workingDays;</span><br><span class="line"><span class="built_in">this</span>.offDays = offDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWorkingDays</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> workingDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWorkingDays</span><span class="params">(<span class="type">int</span> workingDays)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.workingDays = workingDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getOffDays</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> offDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOffDays</span><span class="params">(<span class="type">double</span> offDays)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.offDays = offDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 重写方法，public double earning()返回实发工资， </span></span><br><span class="line"><span class="comment">实发工资 = 薪资 - 薪资/工作日天数 * 请假天数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">earning</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary - salary/workingDays * offDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HourEmployee</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> moneyPerHour;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> hours;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HourEmployee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HourEmployee</span><span class="params">(String name, <span class="type">double</span> moneyPerHour, <span class="type">double</span> hours)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line"><span class="built_in">this</span>.moneyPerHour = moneyPerHour;</span><br><span class="line"><span class="built_in">this</span>.hours = hours;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getMoneyPerHour</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> moneyPerHour;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoneyPerHour</span><span class="params">(<span class="type">double</span> moneyPerHour)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.moneyPerHour = moneyPerHour;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHours</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hours;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHours</span><span class="params">(<span class="type">double</span> hours)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.hours = hours;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 重写方法，public double earning()返回实发工资， </span></span><br><span class="line"><span class="comment">实发工资 = 每小时多少钱 * 小时数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">earning</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> moneyPerHour * hours;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">SalaryEmployee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> commisionPer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name,  <span class="type">double</span> salary, <span class="type">int</span> workingDays, <span class="type">double</span> offDays, <span class="type">double</span> commisionPer)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name, salary, workingDays, offDays);</span><br><span class="line"><span class="built_in">this</span>.commisionPer = commisionPer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCommisionPer</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> commisionPer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommisionPer</span><span class="params">(<span class="type">double</span> commisionPer)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.commisionPer = commisionPer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">earning</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.earning() * (<span class="number">1</span>+commisionPer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEmployee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Employee[] all = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">all[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">HourEmployee</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">all[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">SalaryEmployee</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">10000</span>, <span class="number">22</span>, <span class="number">1</span>);</span><br><span class="line">all[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;老王&quot;</span>, <span class="number">20000</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; all.length; i++) &#123;</span><br><span class="line">System.out.println(all[i].getInfo());</span><br><span class="line">sum += all[i].earning();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;总额：&quot;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7-7-向上转型与向下转型"><a href="#6-7-7-向上转型与向下转型" class="headerlink" title="6.7.7 向上转型与向下转型"></a>6.7.7 向上转型与向下转型</h3><p>首先，一个对象在new的时候创建是哪个类型的对象，它从头至尾都不会变。即这个对象的运行时类型，本质的类型用于不会变。这个和基本数据类型的转换是不同的。</p><p>但是，把这个对象赋值给不同类型的变量时，这些变量的编译时类型却不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchHouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;看家&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//a编译时类型是Cat</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">b</span> <span class="operator">=</span> a;<span class="comment">//b编译时类型是Animal</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> a;<span class="comment">//c编译时类型是Object</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//运行时类型</span></span><br><span class="line">        System.out.println(a.getClass());</span><br><span class="line">        System.out.println(b.getClass());</span><br><span class="line">        System.out.println(c.getClass());</span><br><span class="line">        <span class="comment">//以上输出都一样，都是Cat类型</span></span><br><span class="line">        </span><br><span class="line">       <span class="comment">//a,b,c的编译时类型不同</span></span><br><span class="line">    <span class="comment">//通过a能调用Cat中所有方法，包括从父类继承的，包括自己扩展的</span></span><br><span class="line">    <span class="comment">//通过b只能调用Animal类及它的父类有的方法，不能调用Cat扩展的方法</span></span><br><span class="line">    <span class="comment">//通过c只能调用Object类才有的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要类型转换呢？</p><p>因为多态，就一定会有把子类对象赋值给父类变量的时候，这个时候，<font color="red"><strong>在编译期间</strong></font>，就会出现类型转换的现象。</p><p>但是，使用父类变量接收了子类对象之后，我们就<strong>不能调用</strong>子类拥有，而父类没有的方法了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做类型转换。</p><ul><li><p><strong>向上转型</strong>：当左边的变量的类型（父类） &gt; 右边对象&#x2F;变量的类型（子类），我们就称为向上转型</p><ul><li>此时，编译时按照左边变量的类型处理，就只能调用父类中有的变量和方法，不能调用子类特有的变量和方法了</li><li>但是，运行时，仍然是对象本身的类型</li><li>此时，一定是安全的，而且也是自动完成的</li></ul></li><li><p><strong>向下转型</strong>：当左边的变量的类型（子类）&lt;右边对象&#x2F;变量的类型（父类），我们就称为向下转型</p><ul><li>此时，编译时按照左边变量的类型处理，就可以调用子类特有的变量和方法了</li><li>但是，运行时，仍然是对象本身的类型</li><li>此时，不一定是安全的，需要使用(类型)进行强制类型转换</li><li>不是所有通过编译的向下转型都是正确的，可能会发生ClassCastException，为了安全，可以通过isInstanceof关键字进行判断</li></ul></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat(); <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">        c.catchMouse(); <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="comment">//Dog d = (Dog)a;     //这段代码可以通过编译，但是运行时，却报出了ClassCastException </span></span><br><span class="line">        <span class="comment">//这是因为，明明创建了Cat类型对象，运行时，当然不能转换成Dog对象的。这两个类型并没有任何继承关系，//不符合类型转换的定义。</span></span><br><span class="line">        <span class="comment">//d.watchHouse();        // 调用的是 Dog 的 watchHouse </span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">       <span class="comment">// Dog d2 = (Dog)a2;//这段代码可以通过编译，但是运行时，却报出了ClassCastException </span></span><br><span class="line">       <span class="comment">// d2.watchHouse(); // 调用的是 Dog 的 watchHouse</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免ClassCastException的发生，Java提供了 <code>instanceof</code> 关键字，给引用变量做类型的校验，只要用instanceof判断返回true的，那么强转为该类型就一定是安全的，不会报ClassCastException异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名/对象 instanceof 数据类型 </span><br></pre></td></tr></table></figure><p>所以，转换前，我们最好先做一个判断，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">            c.catchMouse();        <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">            d.watchHouse();       <span class="comment">// 调用的是 Dog 的 watchHouse</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，哪些instanceof判断会返回true呢？</p><ul><li>对象&#x2F;变量的编译时类型 与  instanceof后面数据类型是直系亲属关系才可以比较</li><li>对象&#x2F;变量的运行时类型&lt;&#x3D; instanceof后面数据类型，才为true</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="comment">//方法代码省略...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//方法代码省略...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChineseWoman</span> <span class="keyword">extends</span> <span class="title class_">Woman</span>&#123;</span><br><span class="line"><span class="comment">//方法代码省略...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1、instanceof 前面的对象与后面的类型有没有要求</span></span><br><span class="line"><span class="comment"> * instanceof 前面的对象的编译时类型，必须与 instanceof后面的类型有直系关系</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * 2、instanceof 什么时候返回true</span></span><br><span class="line"><span class="comment"> * instanceof 前面的对象的运行时类型，确实 &lt;= instanceof后面的类型，直系关系</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInstanceof</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Man</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line"><span class="comment">//System.out.println(m instanceof Woman);//错误  m的编译时类型是Man，它和Woman不是直系关系</span></span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">System.out.println(p1 <span class="keyword">instanceof</span> Woman);</span><br><span class="line">        <span class="comment">//可以，p1的编译时类型是Person，它和Woman是直系关系</span></span><br><span class="line"><span class="comment">//但是p1的运行时类型是Man，返回false</span></span><br><span class="line">        </span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">System.out.println(p2 <span class="keyword">instanceof</span> Woman);</span><br><span class="line">        <span class="comment">//p2的编译时类型是Person，它和Woman是直系关系</span></span><br><span class="line"><span class="comment">//p2的运行时类型是Woman，返回true</span></span><br><span class="line">        </span><br><span class="line"><span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseWoman</span>();</span><br><span class="line">System.out.println(p2 <span class="keyword">instanceof</span> Woman);</span><br><span class="line">        <span class="comment">//p3的编译时类型是Person，它和Woman是直系关系</span></span><br><span class="line">        <span class="comment">//但是p3的运行时类型是ChineseWoman, ChineseWoman&lt;=Woman，所以返回true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseWoman</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">p5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">        <span class="type">ChineseWoman</span> <span class="variable">p6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseWoman</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因为p1的运行时类型是Person类型，编译时类型是Person</span></span><br><span class="line">        System.out.println(p1 <span class="keyword">instanceof</span> Object);<span class="comment">//true  Person &lt; Object类型</span></span><br><span class="line">        System.out.println(p1 <span class="keyword">instanceof</span> Person);<span class="comment">//true  Person = Person类型</span></span><br><span class="line">        System.out.println(p1 <span class="keyword">instanceof</span> Woman);<span class="comment">//false Person &gt; Woman类型</span></span><br><span class="line">        System.out.println(p1 <span class="keyword">instanceof</span> ChineseWoman);<span class="comment">//false Person &gt; ChineseWoman类型</span></span><br><span class="line">        System.out.println(p1 <span class="keyword">instanceof</span> Man);<span class="comment">//false  Person &gt; Man类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//因为p2的运行时类型是Woman类型，编译时类型是Person</span></span><br><span class="line">        System.out.println(p2 <span class="keyword">instanceof</span> Object);<span class="comment">//true Woman &lt; Object类型</span></span><br><span class="line">        System.out.println(p2 <span class="keyword">instanceof</span> Person);<span class="comment">//true Woman &lt; Person类型</span></span><br><span class="line">        System.out.println(p2 <span class="keyword">instanceof</span> Woman);<span class="comment">//true Woman = Woman类型</span></span><br><span class="line">        System.out.println(p2 <span class="keyword">instanceof</span> ChineseWoman);<span class="comment">//false Woman &gt; ChineseWoman类型</span></span><br><span class="line">        System.out.println(p2 <span class="keyword">instanceof</span> Man);<span class="comment">//false Woman 和Man 是平级关系，没有父子类关系</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因为p3的运行时类型是ChineseWoman，编译时类型是Person</span></span><br><span class="line">        System.out.println(p3 <span class="keyword">instanceof</span> Object);<span class="comment">//true ChineseWoman &lt; Object类型</span></span><br><span class="line">        System.out.println(p3 <span class="keyword">instanceof</span> Person);<span class="comment">//true ChineseWoman &lt; Person类型</span></span><br><span class="line">        System.out.println(p3 <span class="keyword">instanceof</span> Woman);<span class="comment">//true ChineseWoman &lt; Woman类型</span></span><br><span class="line">        System.out.println(p3 <span class="keyword">instanceof</span> ChineseWoman);<span class="comment">//true ChineseWoman = ChineseWoman类型</span></span><br><span class="line">        System.out.println(p3 <span class="keyword">instanceof</span> Man);<span class="comment">//false ChineseWoman 和 Man 是叔侄挂心，不是父子类关系</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因为p4的运行时类型是Man，编译时类型是Person</span></span><br><span class="line">        System.out.println(p4 <span class="keyword">instanceof</span> Object);<span class="comment">//true Man &lt; Object类型</span></span><br><span class="line">        System.out.println(p4 <span class="keyword">instanceof</span> Person);<span class="comment">//true Man &lt; Person类型</span></span><br><span class="line">        System.out.println(p4 <span class="keyword">instanceof</span> Woman);<span class="comment">//false Woman 和Man 是平级关系，没有父子类关系</span></span><br><span class="line">        System.out.println(p4 <span class="keyword">instanceof</span> ChineseWoman);<span class="comment">//false ChineseWoman 和 Man 是叔侄挂心，不是父子类关系</span></span><br><span class="line">        System.out.println(p4 <span class="keyword">instanceof</span> Man);<span class="comment">//true Man = Man类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因为p5的运行时类型是Woman类型，编译时类型是Object</span></span><br><span class="line">        System.out.println(p5 <span class="keyword">instanceof</span> Object);<span class="comment">//true Woman &lt; Object类型</span></span><br><span class="line">        System.out.println(p5 <span class="keyword">instanceof</span> Person);<span class="comment">//true Woman &lt; Person类型</span></span><br><span class="line">        System.out.println(p5 <span class="keyword">instanceof</span> Woman);<span class="comment">//true Woman = Woman类型</span></span><br><span class="line">        System.out.println(p5 <span class="keyword">instanceof</span> ChineseWoman);<span class="comment">//false Woman &gt; ChineseWoman类型</span></span><br><span class="line">        System.out.println(p5 <span class="keyword">instanceof</span> Man);<span class="comment">//false Woman 和Man 是平级关系，没有父子类关系</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//因为p6的运行时类型是ChineseWoman，编译时类型是ChineseWoman</span></span><br><span class="line">        System.out.println(p6 <span class="keyword">instanceof</span> Object);<span class="comment">//true ChineseWoman &lt; Object类型</span></span><br><span class="line">        System.out.println(p6 <span class="keyword">instanceof</span> Person);<span class="comment">//true ChineseWoman &lt; Person类型</span></span><br><span class="line">        System.out.println(p6 <span class="keyword">instanceof</span> Woman);<span class="comment">//true ChineseWoman &lt; Woman类型</span></span><br><span class="line">        System.out.println(p6 <span class="keyword">instanceof</span> ChineseWoman);<span class="comment">//true ChineseWoman = ChineseWoman类型</span></span><br><span class="line"><span class="comment">//        System.out.println(p6 instanceof Man);//编译不通过，因为p6的编译时类型是ChineseWoman，和Man不是直系亲属关系</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><p>1、声明一个父类Employee员工类型，<br>有属性，姓名（String），出生日期（MyDate类型，也是自定义的含年，月，日属性日期类型）<br>有方法，public abstract double earning()<br>        public String getInfo()：显示姓名和实发工资</p><p>2、声明一个子类SalaryEmployee正式工，继承父类Employee<br>增加属性，薪资，工作日天数，请假天数<br>重写方法，public double earning()返回实发工资， 实发工资 &#x3D; 薪资 - 薪资&#x2F;工作日天数 * 请假天数，<br>重写方法，public String getInfo()：显示姓名和实发工资，月薪，工作日天数，请假天数</p><p>3、声明一个子类HourEmployee小时工，继承父类Employee<br>有属性，工作小时数，每小时多少钱<br>重写方法，public double earning()返回实发工资， 实发工资 &#x3D; 每小时多少钱 * 小时数<br>重写方法，public String getInfo()：显示姓名和实发工资，时薪，工作小时数<br>增加方法，public void leave()：打印查看使用工具是否损坏，需要赔偿</p><p>4、声明一个子类Manager经理，继承SalaryEmployee<br>增加属性：奖金，奖金比例<br>重写方法，public double earning()返回实发工资， 实发工资 &#x3D; (薪资 - 薪资&#x2F;工作日天数 * 请假天数)*(1+奖金比例)<br>重写方法，public String getInfo()：显示姓名和实发工资，月薪，工作日天数，请假天数，奖金比例</p><p>5、声明一个员工数组，存储各种员工，<br>你现在是人事，从键盘输入当前的月份，需要查看每个人的详细信息。<br>如果他是正式工（包括SalaryEmployee和Manager），并且是本月生日的，祝福生日快乐，通知领取生日礼物。如果是HourEmployee显示小时工，就进行完工检查，即调用leave方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> MyDate birthday;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, MyDate birthday)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.birthday = <span class="keyword">new</span> <span class="title class_">MyDate</span>(year, month, day);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> MyDate <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(MyDate birthday)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">earning</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;，生日：&quot;</span> + birthday.getInfo() +<span class="string">&quot;，实发工资：&quot;</span> + earning();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SalaryEmployee</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> workingDays;<span class="comment">//工作日天数，</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> offDays;<span class="comment">//请假天数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SalaryEmployee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SalaryEmployee</span><span class="params">(String name, <span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day, <span class="type">double</span> salary, <span class="type">int</span> workingDays, <span class="type">double</span> offDays)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name, year, month, day);</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line"><span class="built_in">this</span>.workingDays = workingDays;</span><br><span class="line"><span class="built_in">this</span>.offDays = offDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SalaryEmployee</span><span class="params">(String name, MyDate birthday, <span class="type">double</span> salary, <span class="type">int</span> workingDays, <span class="type">double</span> offDays)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name, birthday);</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line"><span class="built_in">this</span>.workingDays = workingDays;</span><br><span class="line"><span class="built_in">this</span>.offDays = offDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWorkingDays</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> workingDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWorkingDays</span><span class="params">(<span class="type">int</span> workingDays)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.workingDays = workingDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getOffDays</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> offDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOffDays</span><span class="params">(<span class="type">double</span> offDays)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.offDays = offDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 重写方法，public double earning()返回实发工资， </span></span><br><span class="line"><span class="comment">实发工资 = 薪资 - 薪资/工作日天数 * 请假天数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">earning</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary - salary/workingDays * offDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.getInfo() + <span class="string">&quot;，月薪：&quot;</span> + salary + <span class="string">&quot;，工作日：&quot;</span> + workingDays +<span class="string">&quot;，请假天数：&quot;</span> + offDays;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HourEmployee</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> moneyPerHour;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> hours;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HourEmployee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HourEmployee</span><span class="params">(String name, <span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day, <span class="type">double</span> moneyPerHour, <span class="type">double</span> hours)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name, year, month, day);</span><br><span class="line"><span class="built_in">this</span>.moneyPerHour = moneyPerHour;</span><br><span class="line"><span class="built_in">this</span>.hours = hours;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HourEmployee</span><span class="params">(String name, MyDate birthday, <span class="type">double</span> moneyPerHour, <span class="type">double</span> hours)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name, birthday);</span><br><span class="line"><span class="built_in">this</span>.moneyPerHour = moneyPerHour;</span><br><span class="line"><span class="built_in">this</span>.hours = hours;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getMoneyPerHour</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> moneyPerHour;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoneyPerHour</span><span class="params">(<span class="type">double</span> moneyPerHour)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.moneyPerHour = moneyPerHour;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHours</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hours;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHours</span><span class="params">(<span class="type">double</span> hours)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.hours = hours;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 重写方法，public double earning()返回实发工资， </span></span><br><span class="line"><span class="comment">实发工资 = 每小时多少钱 * 小时数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">earning</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> moneyPerHour * hours;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.getInfo() + <span class="string">&quot;，时薪：&quot;</span> + moneyPerHour + <span class="string">&quot;，小时数：&quot;</span> + hours;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leave</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;小时工，查看使用工具是否损坏，需要赔偿，然后拿钱走人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">SalaryEmployee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> commisionPer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name, <span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day, <span class="type">double</span> salary, <span class="type">int</span> workingDays, <span class="type">double</span> offDays,</span></span><br><span class="line"><span class="params"><span class="type">double</span> commisionPer)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name, year, month, day, salary, workingDays, offDays);</span><br><span class="line"><span class="built_in">this</span>.commisionPer = commisionPer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name, MyDate birthday, <span class="type">double</span> salary, <span class="type">int</span> workingDays, <span class="type">double</span> offDays, <span class="type">double</span> commisionPer)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(name, birthday, salary, workingDays, offDays);</span><br><span class="line"><span class="built_in">this</span>.commisionPer = commisionPer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCommisionPer</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> commisionPer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommisionPer</span><span class="params">(<span class="type">double</span> commisionPer)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.commisionPer = commisionPer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">earning</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.earning() * (<span class="number">1</span>+commisionPer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.getInfo() + <span class="string">&quot;，奖金比例：&quot;</span> + commisionPer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEmployee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Employee[] all = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">/*all[0] = new HourEmployee(&quot;张三&quot;, new MyDate(1990, 5, 1), 50, 50);</span></span><br><span class="line"><span class="comment">all[1] = new SalaryEmployee(&quot;李四&quot;, new MyDate(1991, 1, 1), 10000, 22, 1);</span></span><br><span class="line"><span class="comment">all[2] = new Manager(&quot;老王&quot;, new MyDate(1987, 12, 8), 20000, 22, 0, 0.3);*/</span></span><br><span class="line"></span><br><span class="line">all[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">HourEmployee</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">1990</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">all[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">SalaryEmployee</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">1991</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10000</span>, <span class="number">22</span>, <span class="number">1</span>);</span><br><span class="line">all[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;老王&quot;</span>, <span class="number">1987</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">20000</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从键盘输入当前的月份</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;请输入当前月份：&quot;</span>);</span><br><span class="line"><span class="type">int</span> month;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">month = input.nextInt();</span><br><span class="line"><span class="keyword">if</span>(month&gt;=<span class="number">1</span> &amp;&amp; month&lt;=<span class="number">12</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">input.close();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; all.length; i++) &#123;</span><br><span class="line">System.out.println(all[i].getInfo());</span><br><span class="line"><span class="keyword">if</span>(all[i] <span class="keyword">instanceof</span> SalaryEmployee)&#123;</span><br><span class="line"><span class="keyword">if</span>(month == all[i].getBirthday().getMonth())&#123;</span><br><span class="line">System.out.println(all[i].getName() +<span class="string">&quot;生日快乐，领取生日补助购物卡&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">HourEmployee</span> <span class="variable">he</span> <span class="operator">=</span> (HourEmployee) all[i];</span><br><span class="line">he.leave();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7-8-多态引用时关于成员变量与成员方法引用的原则"><a href="#6-7-8-多态引用时关于成员变量与成员方法引用的原则" class="headerlink" title="6.7.8 多态引用时关于成员变量与成员方法引用的原则"></a>6.7.8 多态引用时关于成员变量与成员方法引用的原则</h3><h4 id="1、成员变量：只看编译时类型"><a href="#1、成员变量：只看编译时类型" class="headerlink" title="1、成员变量：只看编译时类型"></a>1、成员变量：只看编译时类型</h4><p>如果直接访问成员变量，那么只看编译时类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 成员变量没有重写，只看编译时类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestExtends</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Son</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">System.out.println(s.a);<span class="comment">//2，因为son的编译时类型是Son</span></span><br><span class="line">System.out.println(((Father)s).a);<span class="comment">//1    ((Father)son)编译时类型，就是Father</span></span><br><span class="line"></span><br><span class="line"><span class="type">Father</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">System.out.println(s2.a);<span class="comment">//1 son2的编译时类型是Father</span></span><br><span class="line">System.out.println(((Son)s2).a);<span class="comment">//2  ((Son)son2)编译时类型，就是Son</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、非虚方法：只看编译时类型"><a href="#2、非虚方法：只看编译时类型" class="headerlink" title="2、非虚方法：只看编译时类型"></a>2、非虚方法：只看编译时类型</h4><p>在Java中的非虚方法有三种: </p><p> 1、由invokestatic指令调用的static方法，这种方法在编译时确定在运行时不会改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -v .\Test.class</span><br></pre></td></tr></table></figure><p> 2、由invokespecial指令调用的方法，这些方法包括私有方法，实例构造方法和父类方法，这些方法也是在编译时已经确定，在运行时不会再改变的方法</p><p> 3、由final关键字修饰的方法。虽然final方法是由invokevirtual指令进行调用的，但是final修饰的方法不能够进行在子类中进行覆盖，所以final修饰的方法是不能够在运行期进行动态改变的。在java语言规范中明确规定final方法就是非虚方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Father</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">f.test();<span class="comment">//只看编译时类型</span></span><br><span class="line">        f.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father.test&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father.method&quot;</span>);</span><br><span class="line">        fun();<span class="comment">//看运行时类型</span></span><br><span class="line">        other();<span class="comment">//看编译时类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father.fun&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">other</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father.other&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son.fun&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">other</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son.other&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>静态方法不能被重写</p><p>调用静态方法最好使用“类名.”</p></blockquote><h4 id="3、虚方法：静态分派与动态绑定"><a href="#3、虚方法：静态分派与动态绑定" class="headerlink" title="3、虚方法：静态分派与动态绑定"></a>3、虚方法：静态分派与动态绑定</h4><p>在Java中虚方法是指在编译阶段和类加载阶段都不能确定方法的调用入口地址，在运行阶段才能确定的方法，即可能被重写的方法。</p><p>当我们通过“对象.方法”的形式，调用一个虚方法，我们要如何确定它具体执行哪个方法呢？</p><p>（1）静态分派：先看这个对象的编译时类型，在这个对象的编译时类型中找到最匹配的方法</p><p><strong>最匹配的是指，实参的编译时类型与形参的类型最匹配</strong></p><p>（2）动态绑定：再看这个对象的运行时类型，如果这个对象的运行时类重写了刚刚找到的那个最匹配的方法，那么执行重写的，否则仍然执行刚才编译时类型中的那个方法</p><h5 id="（1）示例一：没有重载有重写"><a href="#（1）示例一：没有重载有重写" class="headerlink" title="（1）示例一：没有重载有重写"></a>（1）示例一：没有重载有重写</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码在编译期间先进行静态分派：此时a的编译时类型是Animal类，所以去Animal类中搜索eat()方法，如果Animal类或它的父类中没有这个方法，将会报错。</p><p>而在运行期间动态的在进行动态绑定：a的运行时类型是Cat类，而子类重写了eat()方法，所以执行的是Cat类的eat方法。如果没有重写，那么还是执行Animal类在的eat()方法</p><h5 id="（2）示例二：有重载没有重写"><a href="#（2）示例二：有重载没有重写" class="headerlink" title="（2）示例二：有重载没有重写"></a>（2）示例二：有重载没有重写</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Father f)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;father&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Son s)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Daughter f)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;daughter&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Daughter</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOverload</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Father</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="type">Father</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"><span class="type">Father</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Daughter</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">my.method(f);<span class="comment">//father</span></span><br><span class="line">my.method(s);<span class="comment">//father</span></span><br><span class="line">my.method(d);<span class="comment">//father</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码在编译期间先进行静态分派：因为my是MyClass类型，那么在MyClass类型中寻找最匹配的method方法。</p><p>而在运行期间动态的在进行动态绑定：即确定执行的是MyClass类中的method(Father f)方法，因为my对象的运行时类型还是MyClass类型。</p><p><strong>有些同学会疑问，不是应该分别执行method(Father f)、method(Son s)、method(Daughter d)吗？</strong></p><p><strong>因为此时实参f,s,d编译时类型都是Father类型，因此method(Father f)是最合适的。</strong></p><h5 id="（3）示例三：有重载没有重写"><a href="#（3）示例三：有重载没有重写" class="headerlink" title="（3）示例三：有重载没有重写"></a>（3）示例三：有重载没有重写</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Father f)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;father&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Son s)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Daughter</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOverload</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyClass</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="type">Father</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="type">Son</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"><span class="type">Daughter</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Daughter</span>();</span><br><span class="line">my.method(f);<span class="comment">//father</span></span><br><span class="line">my.method(s);<span class="comment">//son</span></span><br><span class="line">my.method(d);<span class="comment">//father</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码在编译期间先进行静态分派：因为my是MyClass类型，那么在MyClass类型中寻找最匹配的method方法。</p><p>而在运行期间动态的在进行动态绑定：即确定执行的是MyClass类中的method(Father f)方法，因为my对象的运行时类型还是MyClass类型。</p><p><strong>有些同学会疑问，这次为什么分别执行method(Father f)、method(Son s)？</strong></p><p><strong>因为此时实参f,s,d编译时类型分别是Father、Son、Daughter，而Daughter只能与Father参数类型匹配</strong></p><h5 id="（4）示例四：有重载没有重写"><a href="#（4）示例四：有重载没有重写" class="headerlink" title="（4）示例四：有重载没有重写"></a>（4）示例四：有重载没有重写</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Father f)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;father&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Son s)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySub</span> <span class="keyword">extends</span> <span class="title class_">MyClass</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Daughter d)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;daughter&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Daughter</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOverload</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyClass</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySub</span>();</span><br><span class="line"><span class="type">Father</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="type">Son</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"><span class="type">Daughter</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Daughter</span>();</span><br><span class="line">my.method(f);<span class="comment">//father</span></span><br><span class="line">my.method(s);<span class="comment">//son</span></span><br><span class="line">my.method(d);<span class="comment">//father</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码在编译期间先进行静态分派：因为my是MyClass类型，那么在MyClass类型中寻找最匹配的method方法。</p><p>而在运行期间动态的在进行动态绑定：即确定执行的是MyClass类中的method(Father f)方法，因为my对象的运行时类型还是MyClass类型。</p><p><strong>有些同学会疑问，my对象不是MySub类型吗，而MySub类型中有method(Daughter d)方法，那么my.method(d)语句应该执行MySub类型中的method(Daughter d)方法？</strong></p><ul><li><p>my变量在编译时类型是MyClass类型，那么在MyClass类中，只有method(Father f)，method(Son s)方法，</p></li><li><p>f,s,d变量编译时类型分别是Father、Son、Daughter，而Daughter只能与Father参数类型匹配</p></li><li><p>而在MySub类中并没有重写method(Father f)方法，所以仍然执行MyClass类中的method(Father f)方法</p></li></ul><h5 id="（5）示例五：有重载有重写"><a href="#（5）示例五：有重载有重写" class="headerlink" title="（5）示例五：有重载有重写"></a>（5）示例五：有重载有重写</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Father f)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;father&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Son s)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySub</span> <span class="keyword">extends</span> <span class="title class_">MyClass</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Father d)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;sub--&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Daughter d)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;daughter&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Daughter</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOverloadOverride</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyClass</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySub</span>();</span><br><span class="line"><span class="type">Father</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="type">Son</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"><span class="type">Daughter</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Daughter</span>();</span><br><span class="line">my.method(f);<span class="comment">//sub--</span></span><br><span class="line">my.method(s);<span class="comment">//son</span></span><br><span class="line">my.method(d);<span class="comment">//sub--</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码在编译期间先进行静态分派：因为my是MyClass类型，那么在MyClass类型中寻找最匹配的method方法。</p><p>而在运行期间动态的在进行动态绑定：即确定执行的是MyClass类中的method(Father f)方法，因为my对象的运行时类型还是MyClass类型。</p><p><strong>有些同学会疑问，my对象不是MySub类型吗，而MySub类型中有method(Daughter d)方法，那么my.method(d)语句应该执行MySub类型中的method(Daughter d)方法？</strong></p><ul><li><p>my变量在编译时类型是MyClass类型，那么在MyClass类中，只有method(Father f)，method(Son s)方法，</p></li><li><p>f,s,d变量编译时类型分别是Father、Son、Daughter，而Daughter只能与Father参数类型匹配</p></li><li><p>而在MySub类中重写method(Father f)方法，所以执行MySub类中的method(Father f)方法</p></li></ul><h2 id="6-8-native关键字"><a href="#6-8-native关键字" class="headerlink" title="6.8 native关键字"></a>6.8 native关键字</h2><p>native：本地的，原生的<br>用法：</p><p>​只能修饰方法</p><p>​表示这个方法的方法体代码不是用Java语言实现的，而是由C&#x2F;C++语言编写的。</p><p>​但是对于Java程序员来说，可以当做Java的方法一样去正常调用它，或者子类重写它。</p><p>JVM内存的管理：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561465258546.png"></p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>程序计数器</td><td>程序计数器是CPU中的寄存器，它包含每一个线程下一条要执行的指令的地址</td></tr><tr><td>本地方法栈</td><td>当程序中调用了native的本地方法时，本地方法执行期间的内存区域</td></tr><tr><td>方法区</td><td>存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</td></tr><tr><td>堆内存</td><td>存储对象（包括数组对象），new来创建的，都存储在堆内存。</td></tr><tr><td>虚拟机栈</td><td>用于存储正在执行的每个Java方法的局部变量表等。局部变量表存放了编译期可知长度的各种基本数据类型、对象引用，方法执行完，自动释放。</td></tr></tbody></table><h3 id="修饰符一起使用问题？"><a href="#修饰符一起使用问题？" class="headerlink" title="修饰符一起使用问题？"></a>修饰符一起使用问题？</h3><table><thead><tr><th></th><th>外部类</th><th>成员变量</th><th>代码块</th><th>构造器</th><th>方法</th><th>局部变量</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>×</td><td>√</td><td>√</td><td>×</td></tr><tr><td>protected</td><td>×</td><td>√</td><td>×</td><td>√</td><td>√</td><td>×</td></tr><tr><td>private</td><td>×</td><td>√</td><td>×</td><td>√</td><td>√</td><td>×</td></tr><tr><td>static</td><td>×</td><td>√</td><td>√</td><td>×</td><td>√</td><td>×</td></tr><tr><td>final</td><td>√</td><td>√</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>abstract</td><td>√</td><td>×</td><td>×</td><td>×</td><td>√</td><td>×</td></tr><tr><td>native</td><td>×</td><td>×</td><td>×</td><td>×</td><td>√</td><td>×</td></tr></tbody></table><p>不能和abstract一起使用的修饰符？</p><p>（1）abstract和<strong>final</strong>不能一起修饰<strong>方法和类</strong></p><p>（2）abstract和<strong>static</strong>不能一起修饰<strong>方法</strong></p><p>（3）abstract和<strong>native</strong>不能一起修饰<strong>方法</strong></p><p>（4）abstract和<strong>private</strong>不能一起修饰<strong>方法</strong></p><p>static和final一起使用：</p><p>（1）修饰方法：可以，因为都不能被重写</p><p>（2）修饰成员变量：可以，表示静态常量</p><p>（3）修饰局部变量：不可以，static不能修饰局部变量</p><p>（4）修饰代码块：不可以，final不能修改代码块</p><p>（5）修饰内部类：可以一起修饰成员内部类，不能一起修饰局部内部类（后面讲）</p><h2 id="6-9-final关键字"><a href="#6-9-final关键字" class="headerlink" title="6.9 final关键字"></a>6.9 final关键字</h2><p>final：最终的，不可更改的，它的用法有：</p><h3 id="1、修饰类"><a href="#1、修饰类" class="headerlink" title="1、修饰类"></a>1、修饰类</h3><p>表示这个类不能被继承，没有子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Eunuch</span>&#123;<span class="comment">//太监类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Eunuch</span>&#123;<span class="comment">//错误</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、修饰方法"><a href="#2、修饰方法" class="headerlink" title="2、修饰方法"></a>2、修饰方法</h3><p>表示这个方法不能被子类重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;father&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;<span class="comment">//错误</span></span><br><span class="line">System.out.println(<span class="string">&quot;son&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、声明常量"><a href="#3、声明常量" class="headerlink" title="3、声明常量"></a>3、声明常量</h3><p>final修饰某个变量（成员变量或局部变量），表示它的值就不能被修改，即常量，常量名建议使用大写字母。</p><blockquote><p>如果某个成员变量用final修饰后，没有set方法，并且必须初始化（可以显式赋值、或在初始化块赋值、实例变量还可以在构造器中赋值）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_SCORE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_SCORE</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COUNTRY</span> <span class="operator">=</span> <span class="string">&quot;中华人民共和国&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Chinese</span><span class="params">( String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Chinese</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//final修饰的没有set方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCountry</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> COUNTRY;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-10-Object根父类"><a href="#6-10-Object根父类" class="headerlink" title="6.10  Object根父类"></a>6.10  Object根父类</h2><h3 id="6-10-1-如何理解根父类"><a href="#6-10-1-如何理解根父类" class="headerlink" title="6.10.1 如何理解根父类"></a>6.10.1 如何理解根父类</h3><p>类 <code>java.lang.Object</code>是类层次结构的根类，即所有类的父类。每个类都使用 <code>Object</code> 作为超类。</p><ul><li>Object类型的变量与除Object以外的任意引用数据类型的对象都多态引用</li><li>所有对象（包括数组）都实现这个类的方法。</li><li>如果一个类没有特别指定父类，那么默认则继承自Object类。例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="comment">/*extends Object*/</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-10-2-Object类的API"><a href="#6-10-2-Object类的API" class="headerlink" title="6.10.2 Object类的API"></a>6.10.2 Object类的API</h3><p>​<strong>API(Application Programming Interface)<strong>，应用程序编程接口。Java API是一本程序员的<code>字典</code> ，是JDK中提供给我们使用的类的说明文档。所以我们可以通过查询API的方式，来学习Java提供的类，并得知如何使用它们。在API文档中是无法得知这些类具体是如何实现的，如果要查看具体实现代码，那么我们需要查看</strong>src源码</strong>。</p><p>​根据JDK源代码及Object类的API文档，Object类当中包含的方法有11个。今天我们主要学习其中的5个：</p><h4 id="（1）toString"><a href="#（1）toString" class="headerlink" title="（1）toString()"></a>（1）toString()</h4><p>public String toString()</p><p>①默认情况下，toString()返回的是“对象的运行时类型 @ 对象的hashCode值的十六进制形式”</p><p>②通常是建议重写，如果在eclipse中，可以用Alt +Shift + S–&gt;Generate toString()</p><p>③如果我们直接System.out.println(对象)，默认会自动调用这个对象的toString()</p><blockquote><p>因为Java的引用数据类型的变量中存储的实际上时对象的内存地址，但是Java对程序员隐藏内存地址信息，所以不能直接将内存地址显示出来，所以当你打印对象时，JVM帮你调用了对象的toString()。</p></blockquote><p>例如自定义的Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略构造器与Getter Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）getClass"><a href="#（2）getClass" class="headerlink" title="（2）getClass()"></a>（2）getClass()</h4><p>public final Class&lt;?&gt; getClass()：获取对象的运行时类型</p><blockquote><p>因为Java有多态现象，所以一个引用数据类型的变量的编译时类型与运行时类型可能不一致，因此如果需要查看这个变量实际指向的对象的类型，需要用getClass()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">System.out.println(obj.getClass());<span class="comment">//运行时类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）finalize"><a href="#（3）finalize" class="headerlink" title="（3）finalize()"></a>（3）finalize()</h4><p>protected void finalize()：用于最终清理内存的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFinalize</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="type">MyData</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyData</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.gc();<span class="comment">//通知垃圾回收器来回收垃圾</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);<span class="comment">//等待2秒再结束main，为了看效果</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;轻轻的我走了...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试题：对finalize()的理解？</p><ul><li><p>当对象被GC确定为要被回收的垃圾，在回收之前由GC帮你调用这个方法，不是由程序员手动调用。</p></li><li><p>这个方法与C语言的析构函数不同，C语言的析构函数被调用，那么对象一定被销毁，内存被回收，而finalize方法的调用不一定会销毁当前对象，因为可能在finalize()中出现了让当前对象“复活”的代码</p></li><li><p>每一个对象的finalize方法只会被调用一次。</p></li><li><p>子类可以选择重写，一般用于彻底释放一些资源对象，而且这些资源对象往往时通过C&#x2F;C++等代码申请的资源内存</p></li></ul><h4 id="（4）hashCode"><a href="#（4）hashCode" class="headerlink" title="（4）hashCode()"></a>（4）hashCode()</h4><p>public int hashCode()：返回每个对象的hash值。</p><p>hashCode 的常规协定：</p><ul><li>①如果两个对象的hash值是不同的，那么这两个对象一定不相等；</li><li>②如果两个对象的hash值是相同的，那么这两个对象不一定相等。</li></ul><p>主要用于后面当对象存储到哈希表等容器中时，为了提高存储和查询性能用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Aa&quot;</span>.hashCode());<span class="comment">//2112</span></span><br><span class="line">System.out.println(<span class="string">&quot;BB&quot;</span>.hashCode());<span class="comment">//2112</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（5）equals"><a href="#（5）equals" class="headerlink" title="（5）equals()"></a>（5）equals()</h4><p>public boolean equals(Object obj)：用于判断当前对象this与指定对象obj是否“相等”</p><p>①默认情况下，equals方法的实现等价于与“&#x3D;&#x3D;”，比较的是对象的地址值</p><p>②我们可以选择重写，重写有些要求：</p><p>A：如果重写equals，那么一定要一起重写hashCode()方法，因为规定：</p><p>​a：如果两个对象调用equals返回true，那么要求这两个对象的hashCode值一定是相等的；</p><p>​b：如果两个对象的hashCode值不同的，那么要求这个两个对象调用equals方法一定是false；</p><p>​c：如果两个对象的hashCode值相同的，那么这个两个对象调用equals可能是true，也可能是false</p><p>B：如果重写equals，那么一定要遵循如下几个原则：</p><p>​a：自反性：x.equals(x)返回true</p><p>​b：传递性：x.equals(y)为true, y.equals(z)为true，然后x.equals(z)也应该为true</p><p>​c：一致性：只要参与equals比较的属性值没有修改，那么无论何时调用结果应该一致</p><p>​d：对称性：x.equals(y)与y.equals(x)结果应该一样</p><p>​e：非空对象与null的equals一定是false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String host;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String host, String username, String password)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.host = host;</span><br><span class="line"><span class="built_in">this</span>.username = username;</span><br><span class="line"><span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getHost</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> host;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHost</span><span class="params">(String host)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.host = host;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;User [host=&quot;</span> + host + <span class="string">&quot;, username=&quot;</span> + username + <span class="string">&quot;, password=&quot;</span> + password + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">result = prime * result + ((host == <span class="literal">null</span>) ? <span class="number">0</span> : host.hashCode());</span><br><span class="line">result = prime * result + ((password == <span class="literal">null</span>) ? <span class="number">0</span> : password.hashCode());</span><br><span class="line">result = prime * result + ((username == <span class="literal">null</span>) ? <span class="number">0</span> : username.hashCode());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">User</span> <span class="variable">other</span> <span class="operator">=</span> (User) obj;</span><br><span class="line"><span class="keyword">if</span> (host == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.host != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!host.equals(other.host))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (password == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.password != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!password.equals(other.password))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (username == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.username != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!username.equals(other.username))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第6章【面向对象基础–中】&quot;&gt;&lt;a href=&quot;#第6章【面向对象基础–中】&quot; class=&quot;headerlink&quot; title=&quot;第6章【面向对象基础–中】&quot;&gt;&lt;/a&gt;第6章【面向对象基础–中】&lt;/h1&gt;&lt;h2 id=&quot;教学目标&quot;&gt;&lt;a href=&quot;#教学目标&quot;</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第5章 面向对象基础（上）</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC5%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC5%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2022-07-28T05:04:46.000Z</published>
    <updated>2022-10-16T04:43:25.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第5章-面向对象基础（上）"><a href="#第5章-面向对象基础（上）" class="headerlink" title="第5章 面向对象基础（上）"></a>第5章 面向对象基础（上）</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><input disabled="" type="checkbox"> 初步了解面向对象的思想</li><li><input disabled="" type="checkbox"> 能够明确类与对象关系</li><li><input disabled="" type="checkbox"> 能够掌握类的定义格式</li><li><input disabled="" type="checkbox"> 能够掌握创建对象格式</li><li><input disabled="" type="checkbox"> 理解包的作用</li><li><input disabled="" type="checkbox"> 掌握包的声明和导入</li><li><input disabled="" type="checkbox"> 能够通过类访问类的静态成员变量和静态成员方法</li><li><input disabled="" type="checkbox"> 能够通过对象访问对象的非静态成员变量和非静态成员方法</li><li><input disabled="" type="checkbox"> 能够区别静态方法和非静态方法</li><li><input disabled="" type="checkbox"> 能够区别类变量与实例变量</li><li><input disabled="" type="checkbox"> 能够区别成员变量与局部变量</li><li><input disabled="" type="checkbox"> 能够理解方法的调用执行机制</li><li><input disabled="" type="checkbox"> 能够理解方法的参数传递机制</li><li><input disabled="" type="checkbox"> 掌握方法的可变参数的使用</li><li><input disabled="" type="checkbox"> 掌握方法重载的概念</li><li><input disabled="" type="checkbox"> 能够判断出方法的重载</li><li><input disabled="" type="checkbox"> 了解命令行参数</li><li><input disabled="" type="checkbox"> 理解递归方法</li><li><input disabled="" type="checkbox"> 理解对象数组</li></ul><h1 id="第五章-面向对象基础（上）"><a href="#第五章-面向对象基础（上）" class="headerlink" title="第五章 面向对象基础（上）"></a>第五章 面向对象基础（上）</h1><h2 id="5-1-面向对象思想概述"><a href="#5-1-面向对象思想概述" class="headerlink" title="5.1 面向对象思想概述"></a>5.1 面向对象思想概述</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>Java语言是一种面向对象的程序设计语言，而面向对象思想（OOP）是一种程序设计思想，我们在面向对象思想的指引下，使用Java语言去设计、开发计算机程序。<br>这里的<strong>对象</strong>泛指现实中一切事物，每种事物都具备自己的<strong>属性</strong>和<strong>行为</strong>。面向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算机事件的设计思想。<br>它区别于面向过程思想（POP），强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去操作实现。</p><h3 id="2、面向对象与面向过程的区别"><a href="#2、面向对象与面向过程的区别" class="headerlink" title="2、面向对象与面向过程的区别"></a>2、面向对象与面向过程的区别</h3><p>面向过程：POP: Process-Oriented Programming</p><p>​以函数（方法）为最小单位</p><p>​数据独立于函数之外</p><p>​以过程，步骤为主，考虑怎么做</p><p>面向对象：OOP: Object Oriented Programming</p><p>​以类&#x2F;对象为最小单位，类包括：数据+方法</p><p>​以对象（谁）为主，考虑谁来做，谁能做</p><p>面向对象仍然包含面向过程，只不过关注点变了，关注谁来做</p><p>程序员的角色：</p><p>面向过程：程序员是具体执行者</p><p>面向对象：程序员是指挥者</p><p>面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。</p><p>例子：把大象装进冰箱</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561535567825.png" alt="1561535567825"></p><p>3、面向对象的基本特征</p><p>面向对象的语言中，包含了三大基本特征，即封装、继承和多态。</p><h2 id="5-2-类和对象"><a href="#5-2-类和对象" class="headerlink" title="5.2 类和对象"></a>5.2 类和对象</h2><p>环顾周围，你会发现很多对象，比如桌子，椅子，同学，老师等。桌椅属于办公用品，师生都是人类。那么什么是类呢？什么是对象呢？</p><h3 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h3><ul><li><p><strong>类</strong>：是一类具有相同特性的事物的抽象描述，是一组相关<strong>属性</strong>和<strong>行为</strong>的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。</p></li><li><p>类可以看做是一个模版，或者图纸，系统根据类的定义来造出对象。我们要造一个汽车，怎么样造？类就是这个图纸，规定了汽车的详细信息，然后根据图纸将汽车造出来。</p><p>类：我们叫做class。 对象：我们叫做Object,instance(实例)。以后我们说某个类的对象，某个类的实例。是一样的意思。</p><p><strong>示例1</strong>：</p><p><em><strong>英雄联盟、王者荣耀中的类和对象</strong></em></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps1.jpg" alt="1597040261305"></p><p>英雄就是类，具体的英雄，盖伦、提莫是对象。</p><p><em><strong>示例2：</strong></em></p><p><em><strong>月饼模具和月饼</strong></em></p><p>月饼模具是类，使用月饼模具制作的一个个月饼就是对象</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps2.jpg" alt="1597040368607"></p></li></ul><p>现实中，描述一类事物：</p><ul><li><strong>属性</strong>：就是该事物的状态信息。</li><li><strong>行为</strong>：就是该事物能够做什么。</li></ul><p>举例：小猫。</p><p>​属性：名字、体重、年龄、颜色。<br>​行为：走、跑、叫。</p><h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><ul><li><strong>对象</strong>：是一类事物的具体体现。对象是类的一个<strong>实例</strong>（对象并不是找个女朋友），必然具备该类事物的属性和行为。</li></ul><p>现实中，一类事物的一个实例：一只小猫 。</p><p>举例：一只小猫。</p><p>​属性：tom、5kg、2 years、yellow。<br>​行为：溜墙根走、蹦跶的跑、喵喵叫。</p><h3 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h3><ul><li>类是对一类事物的描述，是<strong>抽象的</strong>。</li><li>对象是一类事物的实例，是<strong>具体的</strong>。</li><li><strong>类是对象的模板，对象是类的实体</strong>。</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1.jpg"> </p><h2 id="5-3-类的定义和对象的创建"><a href="#5-3-类的定义和对象的创建" class="headerlink" title="5.3 类的定义和对象的创建"></a>5.3 类的定义和对象的创建</h2><h3 id="事物与类的对比"><a href="#事物与类的对比" class="headerlink" title="事物与类的对比"></a>事物与类的对比</h3><p>现实世界的一类事物：</p><p>​<strong>属性</strong>：事物的状态信息。<br>​<strong>行为</strong>：事物能够做什么。</p><p> Java中用class描述事物也是如此：</p><p>​<strong>成员变量</strong>：对应事物的<strong>属性</strong><br>​<strong>成员方法</strong>：对应事物的<strong>行为</strong></p><h3 id="类的定义格式"><a href="#类的定义格式" class="headerlink" title="类的定义格式"></a>类的定义格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassName</span> &#123;</span><br><span class="line">  <span class="comment">//成员变量</span></span><br><span class="line">  <span class="comment">//成员方法 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>定义类</strong>：就是定义类的成员，包括<strong>成员变量</strong>和<strong>成员方法</strong>。</li><li><strong>成员变量</strong>：和以前定义变量几乎是一样的。只不过位置发生了改变。<strong>在类中，方法外</strong>。</li><li><strong>成员方法</strong>：和以前写的main方法格式类似。只不过功能和形式更丰富了。在类中，方法外。</li></ul><p>类的定义格式举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">//成员变量</span></span><br><span class="line">  String name；<span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> age；<span class="comment">//年龄</span></span><br><span class="line">    <span class="type">boolean</span> isMarried;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人走路...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;名字是：&quot;</span> + name + <span class="string">&quot;，年龄是：&quot;</span> + age + <span class="string">&quot;，Married：&quot;</span> + isMarried;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p>创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名()<span class="comment">//也称为匿名对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给创建的对象命名</span></span><br><span class="line"><span class="comment">//或者说，把创建的对象用一个引用数据类型的变量保存起来</span></span><br><span class="line">类名 对象名 = <span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure><p>类似于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;高老师年龄是：&quot;</span> + <span class="number">18</span>);<span class="comment">//如果确定只在这里一次性使用，那么可以不用变量保存(#^.^#)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把18用int类型的age变量保存起来，方便后面使用</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;高老师年龄是：&quot;</span> + age);</span><br><span class="line">System.out.println(<span class="string">&quot;仓老师比高老师大10岁，年龄是：&quot;</span> + (age+<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>那么，对象名中存储的是什么呢？答：对象地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStudent</span>&#123;</span><br><span class="line">    <span class="comment">//Java程序的入口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Student</span>());<span class="comment">//Student@7852e922</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(stu);<span class="comment">//Student@4e25154f</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">System.out.println(arr);<span class="comment">//[I@70dea4e</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Student和TestStudent没有位置要求，谁在上面谁在下面都可以</span></span><br><span class="line"><span class="comment">//但是如果TestStudent类的main中使用了Student类，那么要求编译时，这个Student已经写好了，不写是不行的</span></span><br><span class="line"><span class="comment">//如果两个类都在一个.java源文件中，只能有一个类是public的</span></span><br></pre></td></tr></table></figure><p>发现学生对象和数组对象类似，直接打印对象名和数组名都是显示“类型@对象的hashCode值”，所以说类、数组都是引用数据类型，引用数据类型的变量中存储的是对象的地址，或者说指向堆中对象的首地址。</p><p>那么像“Student@4e25154f”是对象的地址吗？不是，因为Java是对程序员隐藏内存地址的，不暴露内存地址信息，所以打印对象时不直接显示内存地址，而是JVM提取了对象描述信息给你现在，默认提取的是对象的运行时类型@代表对象唯一编码的hashCode值。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561597909862.png" alt="1561597909862"></p><h2 id="5-4-包（Package）"><a href="#5-4-包（Package）" class="headerlink" title="5.4 包（Package）"></a>5.4 包（Package）</h2><h3 id="1、包的作用"><a href="#1、包的作用" class="headerlink" title="1、包的作用"></a>1、包的作用</h3><p>（1）可以避免类重名：有了包之后，类的全名称就变为：包.类名</p><p>（2）分类组织管理众多的类</p><p>例如：</p><ul><li>java.lang—-包含一些Java语言的核心类，如String、Math、Integer、 System和Thread等，提供常用功能</li><li>java.net—-包含执行与网络相关的操作的类和接口。</li><li>java.io —-包含能提供多种输入&#x2F;输出功能的类。</li><li>java.util—-包含一些实用工具类，如集合框架类、日期时间、数组工具类Arrays，文本扫描仪Scanner，随机值产生工具Random。</li><li>java.text—-包含了一些java格式化相关的类</li><li>java.sql和javax.sql—-包含了java进行JDBC数据库编程的相关类&#x2F;接口</li><li>java.awt和java.swing—-包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。</li></ul><p>（3）可以控制某些类型或成员的可见范围</p><p>如果某个类型或者成员的权限修饰缺省的话，那么就仅限于本包使用</p><h3 id="2、声明包的语法格式"><a href="#2、声明包的语法格式" class="headerlink" title="2、声明包的语法格式"></a>2、声明包的语法格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>(1)必须在源文件的代码首行</p><p>(2)一个源文件只能有一个声明包的语句</p></blockquote><p>包的命名规范和习惯：<br>（1）所有单词都小写，每一个单词之间使用.分割<br>（2）习惯用公司的域名倒置</p><p>例如：com.atguigu.xxx;</p><blockquote><p>建议大家取包名时不要使用“java.xx”包</p></blockquote><h3 id="3、如何跨包使用类"><a href="#3、如何跨包使用类" class="headerlink" title="3、如何跨包使用类"></a>3、如何跨包使用类</h3><p>前提：被使用的类或成员的权限修饰符是&gt;缺省的，即可见的</p><p>（1）使用类型的全名称</p><p>例如：java.util.Scanner input &#x3D; new java.util.Scanner(System.in);</p><p>（2）使用import 语句之后，代码中使用简名称</p><p>import语句告诉编译器到哪里去寻找类。</p><p>import语句的语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包.类名;</span><br><span class="line"><span class="keyword">import</span> 包.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> 包.类名.静态成员; <span class="comment">//后面再讲</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>使用java.lang包下的类，不需要import语句，就直接可以使用简名称</p><p>import语句必须在package下面，class的上面</p><p>当使用两个不同包的同名类时，例如：java.util.Date和java.sql.Date。一个使用全名称，一个使用简名称</p></blockquote><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bean.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        java.sql.<span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="number">346724566</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-成员变量"><a href="#5-5-成员变量" class="headerlink" title="5.5 成员变量"></a>5.5 成员变量</h2><h3 id="1、成员变量的分类"><a href="#1、成员变量的分类" class="headerlink" title="1、成员变量的分类"></a>1、成员变量的分类</h3><p>实例变量：没有static修饰，也叫对象属性，属于某个对象的，通过对象来使用</p><p>类变量：有static修饰，也叫类变量，属于整个类的，不是属于某个实例</p><h3 id="2、如何声明成员变量？"><a href="#2、如何声明成员变量？" class="headerlink" title="2、如何声明成员变量？"></a>2、如何声明成员变量？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 class 类名&#123;</span><br><span class="line">    【修饰符】 数据类型  属性名;    <span class="comment">//属性有默认值</span></span><br><span class="line">    【修饰符】 数据类型  属性名 = 值; <span class="comment">//属性有初始值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：属性的类型可以是Java的任意类型，包括基本数据类型、引用数据类型（类、接口、数组等）</p></blockquote><p>例如：声明一个中国人的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>&#123;</span><br><span class="line"><span class="keyword">static</span> String country;</span><br><span class="line">String name;</span><br><span class="line">    <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;<span class="comment">//显式赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、如何在类外面访问成员变量？"><a href="#3、如何在类外面访问成员变量？" class="headerlink" title="3、如何在类外面访问成员变量？"></a>3、如何在类外面访问成员变量？</h3><h4 id="（1）类变量"><a href="#（1）类变量" class="headerlink" title="（1）类变量"></a>（1）类变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类名.静态成员变量  <span class="comment">//推荐</span></span><br><span class="line"></span><br><span class="line">对象名.静态成员变量 <span class="comment">//不推荐</span></span><br></pre></td></tr></table></figure><h4 id="（2）实例变量"><a href="#（2）实例变量" class="headerlink" title="（2）实例变量"></a>（2）实例变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.静态成员变量  <span class="comment">//只能使用这种方式</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestChinese</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//类名.静态成员变量</span></span><br><span class="line">System.out.println(Chinese.country);</span><br><span class="line"><span class="comment">//错误，非静态成员变量必须通过对象.进行访问</span></span><br><span class="line"><span class="comment">//System.out.println(Chinese.name);</span></span><br><span class="line"></span><br><span class="line"><span class="type">Chinese</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line"><span class="comment">//对象名.非静态成员变量</span></span><br><span class="line">System.out.println(c1.name);</span><br><span class="line"><span class="comment">//静态的成员变量也可以通过对象.进行访问</span></span><br><span class="line"><span class="comment">//对象名.非静态成员变量</span></span><br><span class="line">System.out.println(c1.country);</span><br><span class="line">        System.out.println(c1.gender);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>&#123;</span><br><span class="line"><span class="keyword">static</span> String country;</span><br><span class="line">String name;</span><br><span class="line">    <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、成员变量的特点"><a href="#4、成员变量的特点" class="headerlink" title="4、成员变量的特点"></a>4、成员变量的特点</h3><h4 id="（1）成员变量有默认值"><a href="#（1）成员变量有默认值" class="headerlink" title="（1）成员变量有默认值"></a>（1）成员变量有默认值</h4><table><thead><tr><th>基本类型</th><th>整数（byte，short，int，long）</th><th>0</th></tr></thead><tbody><tr><td></td><td>浮点数（float，double）</td><td>0.0</td></tr><tr><td></td><td>字符（char）</td><td>‘\u0000’</td></tr><tr><td></td><td>布尔（boolean）</td><td>false</td></tr><tr><td></td><td>数据类型</td><td>默认值</td></tr><tr><td>引用类型</td><td>数组，类，接口</td><td>null</td></tr></tbody></table><h4 id="（2）类变量的值是所有对象共享的，而实例变量的值是每个对象独立的"><a href="#（2）类变量的值是所有对象共享的，而实例变量的值是每个对象独立的" class="headerlink" title="（2）类变量的值是所有对象共享的，而实例变量的值是每个对象独立的"></a>（2）类变量的值是所有对象共享的，而实例变量的值是每个对象独立的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestChinese</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Chinese</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line"><span class="type">Chinese</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line"></span><br><span class="line">c1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">c2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">        c2.gender = <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c1.country = &quot;中国&quot;;</span></span><br><span class="line">Chinese.country = <span class="string">&quot;中国&quot;</span>;<span class="comment">//推荐</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;c1.country = &quot;</span> + c1.country + <span class="string">&quot;,c1.name = &quot;</span> + c1.name + <span class="string">&quot;,c1.gender = &quot;</span> + c1.gender);</span><br><span class="line">System.out.println(<span class="string">&quot;c2.country = &quot;</span> + c2.country + <span class="string">&quot;,c2.name = &quot;</span> + c2.name + <span class="string">&quot;,c2.gender = &quot;</span> + c2.gender);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>&#123;</span><br><span class="line"><span class="keyword">static</span> String country;</span><br><span class="line">String name;</span><br><span class="line">    <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、成员变量的内存图"><a href="#5、成员变量的内存图" class="headerlink" title="5、成员变量的内存图"></a>5、成员变量的内存图</h3><p>​内存是计算机中重要的部件之一，它是与CPU进行沟通的桥梁。其作用是用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。只要计算机在运行中，CPU就会把需要运算的数据调到内存中进行运算，当运算完成后CPU再将结果传送出来。我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。Java虚拟机要运行程序，必须要对内存进行空间的分配和管理，每一片区域都有特定的处理数据方式和内存管理方式。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561465258546.png" alt="1561465258546"></p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>程序计数器</td><td>程序计数器是CPU中的寄存器，它包含每一个线程下一条要执行的指令的地址</td></tr><tr><td>本地方法栈</td><td>当程序中调用了native的本地方法时，本地方法执行期间的内存区域</td></tr><tr><td>方法区</td><td>存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</td></tr><tr><td>堆内存</td><td>存储对象（包括数组对象），new来创建的，都存储在堆内存。</td></tr><tr><td>虚拟机栈</td><td>用于存储正在执行的每个Java方法的局部变量表等。局部变量表存放了编译期可知长度的各种基本数据类型、对象引用，方法执行完，自动释放。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test08FieldSave</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Chinese</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">c1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">System.out.println(c1.country);<span class="comment">//静态变量，也可以使用&quot;对象名.&quot;进行访问</span></span><br><span class="line">System.out.println(c1.name);<span class="comment">//非静态的实例变量通过&quot;对象名.&quot;进行访问</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Chinese</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">c2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">System.out.println(c2.country);</span><br><span class="line">System.out.println(c2.name);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">//其中一个对象将静态变量的值修改了，其他对象都会改变</span></span><br><span class="line"><span class="comment">//因为静态变量只存一份</span></span><br><span class="line">c1.country = <span class="string">&quot;中华人民共和国&quot;</span>;</span><br><span class="line">System.out.println(c1.country);</span><br><span class="line">System.out.println(c2.country);</span><br><span class="line">System.out.println(Chinese.country);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//其中一个对象将非静态实例变量修改了，其他对象不受影响</span></span><br><span class="line">c1.name = <span class="string">&quot;张三丰&quot;</span>;</span><br><span class="line">System.out.println(c1.name);</span><br><span class="line">System.out.println(c2.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">String</span> <span class="variable">country</span> <span class="operator">=</span> <span class="string">&quot;中国&quot;</span>;<span class="comment">//静态变量，所有中国人的国家的名称是一样，只需要存储一份</span></span><br><span class="line">String name;<span class="comment">//实例变量，每一个中国人的姓名是独立，每一个对象单独存储</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/2%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%86%85%E5%AD%98%E5%9B%BE%E5%88%86%E6%9E%90%EF%BC%882%EF%BC%89.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyDate</span>&#123;</span><br><span class="line"><span class="type">int</span> year;</span><br><span class="line"><span class="type">int</span> month;</span><br><span class="line"><span class="type">int</span> day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">String name;</span><br><span class="line">MyDate birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test09FieldExer3</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//创建两个员工对象</span></span><br><span class="line"><span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//为两个员工对象的成员变量赋值</span></span><br><span class="line">e1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">e1.birthday = <span class="keyword">new</span> <span class="title class_">MyDate</span>();</span><br><span class="line"></span><br><span class="line">e2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">e2.birthday = <span class="keyword">new</span> <span class="title class_">MyDate</span>();</span><br><span class="line"></span><br><span class="line">e1.birthday.year = <span class="number">2000</span>;</span><br><span class="line">e1.birthday.month = <span class="number">1</span>;</span><br><span class="line">e1.birthday.day = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">e2.birthday.year = <span class="number">2000</span>;</span><br><span class="line">e2.birthday.month = <span class="number">3</span>;</span><br><span class="line">e2.birthday.day = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;第一个员工，姓名：&quot;</span> + e1.name +<span class="string">&quot;，生日：&quot;</span> + e1.birthday.year + <span class="string">&quot;年&quot;</span> + e1.birthday.month + <span class="string">&quot;月&quot;</span> + e1.birthday.day + <span class="string">&quot;日&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;第二个员工，姓名：&quot;</span> + e2.name +<span class="string">&quot;，生日：&quot;</span> + e2.birthday.year + <span class="string">&quot;年&quot;</span> + e2.birthday.month + <span class="string">&quot;月&quot;</span> + e2.birthday.day + <span class="string">&quot;日&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%86%85%E5%AD%98%E5%9B%BE%E5%88%86%E6%9E%90%EF%BC%881%EF%BC%89.png"></p><h3 id="6、成员变量练习题"><a href="#6、成员变量练习题" class="headerlink" title="6、成员变量练习题"></a>6、成员变量练习题</h3><p>（1）声明一个圆的图形类，有属性：半径<br>    在测试类的main中，创建圆的2个对象，为半径属性赋值，并显示两个圆的半径值和面积值<br>    提示：圆周率为Math.PI</p><p>（2）声明一个银行账户类，有属性：利率、账号、余额</p><p>​在测试类的main中，创建账户类的两个对象，其中所有账户的利率是相同的，都是0.035，而账号和余额是不同的，并打印显示</p><p>（3）声明一个MyDate类型，有属性：年，月，日</p><p>​  声明另一个Employee类型，有属性：姓名（String类型），生日（MyDate类型）</p><p>在测试类中的main中，创建两个员工对象，并为他们的姓名和生日赋值，并显示</p><h2 id="5-6-成员方法"><a href="#5-6-成员方法" class="headerlink" title="5.6 成员方法"></a>5.6 成员方法</h2><p>成员变量是用来存储对象的数据信息的，那么如何表示对象的行为功能呢？就要通过方法来实现</p><h3 id="5-6-1-方法的概念"><a href="#5-6-1-方法的概念" class="headerlink" title="5.6.1 方法的概念"></a>5.6.1 方法的概念</h3><p>方法也叫函数，是一个独立功能的定义，是一个类中最基本的功能单元。</p><p>把一个功能封装为方法的目的是，可以实现代码重用，从而简少代码量。</p><h3 id="5-6-2-方法的原则"><a href="#5-6-2-方法的原则" class="headerlink" title="5.6.2  方法的原则"></a>5.6.2  方法的原则</h3><p>方法的使用原则：</p><p>（1）必须先声明后使用</p><blockquote><p> 类，变量，方法等都要先声明后使用</p></blockquote><p>（2）不调用不执行，调用一次执行一次。</p><h3 id="5-6-3-成员方法的分类"><a href="#5-6-3-成员方法的分类" class="headerlink" title="5.6.3 成员方法的分类"></a>5.6.3 成员方法的分类</h3><p>成员方法分为两类：</p><ul><li>实例方法：没有static修饰的方法，必须通过实例对象来调用。</li><li>静态方法：有static修饰的方法，也叫类方法，可以由类名来调用。</li></ul><h3 id="5-6-4-如何声明方法"><a href="#5-6-4-如何声明方法" class="headerlink" title="5.6.4 如何声明方法"></a>5.6.4 如何声明方法</h3><p>1、方法声明的位置必须在类中方法外</p><p>2、语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 返回值类型 方法名(【参数列表：参数类型<span class="number">1</span> 参数名<span class="number">1</span>,参数类型<span class="number">2</span> 参数名, ...... 】)&#123;</span><br><span class="line">        方法体；</span><br><span class="line">        【<span class="keyword">return</span> 返回值;】</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修饰符： 修饰符后面一一介绍，例如：public，static等都是修饰符</li><li>返回值类型： 表示方法运行的结果的数据类型，方法执行后将结果返回到调用者<ul><li>基本数据类型</li><li>引用数据类型</li><li>无返回值类型：void</li></ul></li><li>方法名：给方法起一个名字，见名知意，能准确代表该方法功能的名字</li><li>参数列表：方法内部需要用到其他方法中的数据，需要通过参数传递的形式将数据传递过来，可以是基本数据类型、引用数据类型、也可以没有参数，什么都不写</li><li>方法体：特定功能代码</li><li>return：结束方法，并将方法的结果返回去，<ul><li>如果返回值类型不是void，方法体中必须保证一定有return 返回值;语句，并且要求该返回值结果的类型与声明的返回值类型一致或兼容。</li><li>如果返回值类型为void时，return 后面不用跟返回值，甚至也可以没有return语句。</li><li>return语句后面就不能再写其他代码了，否则会报错：Unreachable code</li></ul></li></ul><p>声明位置示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">类&#123;</span><br><span class="line">    方法<span class="number">1</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    方法<span class="number">2</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">类&#123;</span><br><span class="line">    方法<span class="number">1</span>()&#123;</span><br><span class="line">        方法<span class="number">2</span>()&#123;  <span class="comment">//位置错误</span></span><br><span class="line">        </span><br><span class="line">   &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例一："><a href="#示例一：" class="headerlink" title="示例一："></a>示例一：</h4><p>声明一个圆的图形类：</p><p>​属性（成员变量）：半径，</p><p>​成员方法：求面积的方法，返回圆对象信息的方法</p><p>​在测试类的main中，创建圆的2个对象，为半径属性赋值，调用两个方法进行测试<br>​提示：圆周率为Math.PI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"><span class="type">double</span> radius;</span><br><span class="line"><span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Circle不同的对象，半径值不同，那么面积也不同，所以这里area()是非静态的</p></blockquote><h4 id="示例二："><a href="#示例二：" class="headerlink" title="示例二："></a>示例二：</h4><p>声明一个计算工具类CountTools：</p><p>​方法1：求两个整数的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CountTools</span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CountTools只是一个工具类，求两个整数最大值的功能，和CountTools对象无关，所以这里max方法声明为静态的更好，当然也可以声明为非静态的，就是调用的时候需要创建CountTools对象而已。</p></blockquote><h3 id="5-6-5-如何在其他类中调用方法"><a href="#5-6-5-如何在其他类中调用方法" class="headerlink" title="5.6.5 如何在其他类中调用方法"></a>5.6.5 如何在其他类中调用方法</h3><h4 id="（1）实例方法"><a href="#（1）实例方法" class="headerlink" title="（1）实例方法"></a>（1）实例方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.实例方法(【实参列表】)  <span class="comment">//必须通过对象来访问</span></span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCircle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Circle</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">c1.radius = <span class="number">1.2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;c1的面积：&quot;</span> + c1.area());</span><br><span class="line"><span class="comment">//非静态方法只能通过&quot;对象.&quot;进行访问</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;c1的面积：&quot; + Circle.area());</span></span><br><span class="line">        </span><br><span class="line"><span class="type">Circle</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">c2.radius = <span class="number">2.5</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;c2的面积：&quot;</span> + c2.area());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"><span class="type">double</span> radius;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）类方法"><a href="#（2）类方法" class="headerlink" title="（2）类方法"></a>（2）类方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类名.类方法(【实参列表】)  <span class="comment">//推荐</span></span><br><span class="line"></span><br><span class="line">对象名.类方法(【实参列表】) <span class="comment">//不推荐</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCount</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(CountTools.max(<span class="number">4</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态方法也可以通过“对象.”访问，就是麻烦点</span></span><br><span class="line"><span class="type">CountTools</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountTools</span>();</span><br><span class="line">System.out.println(c.max(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountTools</span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）总结"><a href="#（3）总结" class="headerlink" title="（3）总结"></a>（3）总结</h4><ul><li>形参：在定义方法时方法名后面括号中声明的变量称为形式参数（简称形参）即形参出现在方法定义时。</li><li>实参：调用方法时方法名后面括号中的使用的值&#x2F;变量&#x2F;表达式称为实际参数（简称实参）即实参出现在方法调用时。</li></ul><p>总结：</p><p>（1）调用时，需要传“实参”，实参的个数、类型、顺序顺序要与形参列表一一对应</p><p>​如果方法没有形参，就不需要也不能传实参。</p><p>（2）调用时，如果方法有返回值，可以接受或处理返回值结果，当然也可以不接收，那么此时返回值就丢失了。</p><p>​如果方法的返回值类型是void，不需要也不能接收和处理返回值结果。</p><h3 id="5-6-6-在本类中访问本类的成员变量和成员方法"><a href="#5-6-6-在本类中访问本类的成员变量和成员方法" class="headerlink" title="5.6.6 在本类中访问本类的成员变量和成员方法"></a>5.6.6 在本类中访问本类的成员变量和成员方法</h3><p>直接用，不需要加“对象名.”和”类名.”</p><p>唯一例外：静态方法中不能直接访问本类的非静态的成员变量和成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"><span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个方法，可以返回“圆对象”的详细信息</span></span><br><span class="line">String <span class="title function_">getDetailInfo</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;半径：&quot;</span> + radius + <span class="string">&quot;，面积：&quot;</span> + area() +<span class="string">&quot;，周长：&quot;</span> + perimeter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个方法，可以返回“圆对象”的面积</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">area</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> Math.PI*radius*radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个方法，可以返回“圆对象”的周长</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">perimeter</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*Math.PI*radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"> test();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        method();<span class="comment">//错误</span></span><br><span class="line">        test();<span class="comment">//正确</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-7-方法的声明与调用练习"><a href="#5-6-7-方法的声明与调用练习" class="headerlink" title="5.6.7 方法的声明与调用练习"></a>5.6.7 方法的声明与调用练习</h3><p>1、声明数学工具类MathTools</p><p>（1）静态方法1：可以比较两个整数是否相同<br>（2）静态方法2：可以判断某个数是否是素数<br>（3）静态方法3：可以返回某个整数所有的约数（约数：从1到这个数之间所有能把它整除的数）<br>在Test测试类的main中调用测试</p><p>2、声明数组工具类ArraysTools</p><p>（1）静态方法1：可以实现给任意整型数组实现从小到大排序<br>（2）静态方法2：可以遍历任意整型数组，返回结果效果：[元素1，元素2，元素3。。。]</p><p>3、声明矩形类</p><p>（1）包含属性：长、宽</p><p>（2）包含3个方法：</p><p>​求面积、</p><p>​求周长、</p><p>​返回矩形对象的信息：长：xx，宽：xx，面积：xx，周长：xx</p><p>4、声明一个圆类，有半径radius成员变量</p><p>​     声明一个图形工具类GraphicTools，包含一个静态方法可以返回两个圆中面积大的那一个圆的方法</p><p>​在测试类中测试</p><h3 id="5-6-8-方法调用内存分析"><a href="#5-6-8-方法调用内存分析" class="headerlink" title="5.6.8 方法调用内存分析"></a>5.6.8 方法调用内存分析</h3><p>方法不调用不执行，调用一次执行一次，每次调用会在栈中有一个入栈动作，即给当前方法开辟一块独立的内存区域，用于存储当前方法的局部变量的值，当方法执行结束后，会释放该内存，称为出栈，如果方法有返回值，就会把结果返回调用处，如果没有返回值，就直接结束，回到调用处继续执行下一条指令。</p><p>栈结构：先进后出，后进先出。</p><p>示例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCount</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> CountTools.max(a, b));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountTools</span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572349992849.png" alt="1572349992849"></p><p>示例二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCircle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Circle</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">c1.radius = <span class="number">1.2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">area1</span> <span class="operator">=</span> c1.area();</span><br><span class="line"></span><br><span class="line"><span class="type">Circle</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">c2.radius = <span class="number">2.5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">area2</span> <span class="operator">=</span> c2.area();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"><span class="type">double</span> radius;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572350522409.png" alt="1572350522409"></p><p>示例三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">ArrayUtil.sort(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayUtil</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572350909017.png" alt="1572350909017"></p><h3 id="5-6-9-方法的参数传递机制"><a href="#5-6-9-方法的参数传递机制" class="headerlink" title="5.6.9 方法的参数传递机制"></a>5.6.9 方法的参数传递机制</h3><ul><li>方法的参数传递机制：实参给形参赋值<ul><li>方法的形参是基本数据类型时，形参值的改变不会影响实参；</li><li>方法的形参是引用数据类型时，形参地址值的改变不会影响实参，但是形参地址值里面的数据的改变会影响实参，例如，修改数组元素的值，或修改对象的属性值。<ul><li>注意：String、Integer等特殊类型容易错</li></ul></li></ul></li></ul><p>示例代码1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[] args)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        swap(x,y);<span class="comment">//调用完之后，x与y的值不变</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例代码2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(MyData my)</span>&#123;</span><br><span class="line">        my.num *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">MyData</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyData</span>();</span><br><span class="line">        m.num = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        change(m);<span class="comment">//调用完之后，m对象的num属性值就变为2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">ArrayUtil.sort(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayUtil</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>陷阱1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">陷阱1：在方法中，形参 = 新new对象，那么就和实参无关了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(MyData my)</span>&#123;</span><br><span class="line">        my = <span class="keyword">new</span> <span class="title class_">MyData</span>();<span class="comment">//形参指向了新对象</span></span><br><span class="line">        my.num *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">MyData</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyData</span>();</span><br><span class="line">        m.num = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        change(m);<span class="comment">//调用完之后，m对象的num属性值仍然为1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>陷阱2：见字符串和包装类部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">StringUtil</span> <span class="variable">util</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringUtil</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;尚硅谷&quot;</span>;</span><br><span class="line">util.change(str);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringUtil</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str)</span>&#123;</span><br><span class="line">str += <span class="string">&quot;你好&quot;</span>;<span class="comment">//String对象不可变，一旦修改就会产生新对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-10-成员变量与局部变量的区别"><a href="#5-6-10-成员变量与局部变量的区别" class="headerlink" title="5.6.10 成员变量与局部变量的区别"></a>5.6.10 成员变量与局部变量的区别</h3><h4 id="1、变量的分类"><a href="#1、变量的分类" class="headerlink" title="1、变量的分类"></a>1、变量的分类</h4><ul><li><p>成员变量</p><ul><li>静态变量</li><li>实例变量</li></ul></li><li><p>局部变量</p></li></ul><h4 id="2、区别"><a href="#2、区别" class="headerlink" title="2、区别"></a>2、区别</h4><p>1、声明位置和方式<br>（1）静态变量：在类中方法外，并且有static修饰<br>（2）实例变量：在类中方法外，没有static修饰<br>（3）局部变量：在方法体{}中或方法的形参列表、代码块中</p><p>2、在内存中存储的位置不同<br>（1）静态变量：方法区<br>（2）实例变量：堆<br>（3）局部变量：栈</p><p>3、生命周期<br>（1）静态变量：和类的生命周期一样，因为它的值是该类所有对象共享的，早于对象的创建而存在。<br>（2）实例变量：和对象的生命周期一样，随着对象的创建而存在，随着对象被GC回收而消亡，<br>            而且每一个对象的实例变量是独立的。<br>（3）局部变量：和方法调用的生命周期一样，每一次方法被调用而在存在，随着方法执行的结束而消亡，<br>            而且每一次方法调用都是独立。</p><p>4、作用域<br>（1）静态变量和实例变量：不谈作用域<br>在本类中，唯一的限制，静态方法或静态代码块中不能使用非静态的，其他都可以直接使用。<br>在其他类中，能不能使用看修饰符（public,protected,private等）<br>（2）局部变量：有作用域<br>出了作用域就不能使用</p><p>5、修饰符（后面来讲）<br>（1）静态变量：很多<br>public,protected,private,final,volatile等，一定有的是static<br>（2）实例变量<br>public,protected,private,final,volatile,transient等<br>（3）局部变量<br>final</p><p>public,protected,private：权限修饰符<br>final：是否是常量，即值是否可以修改<br>volatile：和多线程有关<br>transient：是否序列化，和IO有关</p><p>6、默认值<br>（1）静态变量：有默认值<br>（2）实例变量：有默认值<br>（3）局部变量：没有，必须初始化<br>        其中的形参比较特殊，靠实参给它初始化。</p><h2 id="5-6-可变参数"><a href="#5-6-可变参数" class="headerlink" title="5.6 可变参数"></a>5.6 可变参数</h2><p>在<strong>JDK1.5</strong>之后，如果我们定义一个方法时，此时某个形参的类型可以确定，但是形参的个数不确定，那么我们可以使用可变参数。</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 返回值类型 方法名(【非可变参数部分的形参列表,】参数类型... 形参名)&#123;  &#125;</span><br></pre></td></tr></table></figure><p>要求：</p><p>（1）一个方法最多只能有一个可变参数</p><p>（2）如果一个方法包含可变参数，那么可变参数必须是形参列表的最后一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 返回值类型 方法名(【非可变参数部分的形参列表,】参数类型[] 形参名)&#123;  &#125;</span><br></pre></td></tr></table></figure><p>只是后面这种定义，在调用时必须传递数组，而前者更灵活，既可以传递数组，又可以直接传递数组的元素，这样更灵活了。</p><h4 id="示例一：-求n个整数的和"><a href="#示例一：-求n个整数的和" class="headerlink" title="示例一：    求n个整数的和"></a>示例一：    求n个整数的和</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeArgs</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">62</span>, <span class="number">431</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum1</span> <span class="operator">=</span> getSum1(arr);</span><br><span class="line">System.out.println(sum1);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> getSum2(arr);</span><br><span class="line">System.out.println(sum2);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum3</span> <span class="operator">=</span> getSum2(<span class="number">1</span>, <span class="number">4</span>, <span class="number">62</span>, <span class="number">431</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(sum3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完成数组 所有元素的求和</span></span><br><span class="line"><span class="comment">// 原始写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum1</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变参数写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum2</span><span class="params">(<span class="type">int</span>... arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例二：求1-n个整数中的最大值"><a href="#示例二：求1-n个整数中的最大值" class="headerlink" title="示例二：求1-n个整数中的最大值"></a>示例二：求1-n个整数中的最大值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeArgs_Exer1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(max(<span class="number">1</span>));</span><br><span class="line">System.out.println(max(<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span>... others)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> num;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; others.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(max &lt; others[i])&#123;</span><br><span class="line">max = num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例三：字符串拼接"><a href="#示例三：字符串拼接" class="headerlink" title="示例三：字符串拼接"></a>示例三：字符串拼接</h4><p>需求一：返回n个字符串拼接结果，如果没有传入字符串，那么返回空字符串””</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeArgs_Exer2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(concat());</span><br><span class="line">System.out.println(concat(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">concat</span><span class="params">(String... args)</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">str += args[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求二：n个字符串进行拼接，每一个字符串之间使用某字符进行分割，如果没有传入字符串，那么返回空字符串””</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeArgs_Exer4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(concat(<span class="string">&#x27;+&#x27;</span>));</span><br><span class="line">System.out.println(concat(<span class="string">&#x27;+&#x27;</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">concat</span><span class="params">(<span class="type">char</span> seperator, String... args)</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">str += args[i];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">str += seperator + args[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h4><p>1、声明一个方法，可以找出任意个整数的最大公约数</p><p>2、声明一个方法，可以找出任意个字符串中的公共字符，例如：hello与world的公共字符是o和l，如果没有就返回””</p><p>提示：获取字符串长度的方法：int length()</p><p>​例如：字符串.length()，   “hello”.length()返回5</p><p>​   获取字符串[index]位置的字符：char charAt(int index)</p><p>​例如：字符串.charAt(index)    hello.charAt(1)返回’e’</p><p>参考答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test12MethodExer1</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(maxYue(<span class="number">6</span>,<span class="number">9</span>));</span><br><span class="line">System.out.println(maxYue(<span class="number">16</span>,<span class="number">18</span>,<span class="number">4</span>,<span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxYue</span><span class="params">(<span class="type">int</span>... args)</span>&#123;</span><br><span class="line"><span class="comment">//找很多个数的公约数</span></span><br><span class="line"><span class="comment">//(1)找出它们中最小的</span></span><br><span class="line"><span class="comment">//类似于在数组中找最小值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;args.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(args[i] &lt; min)&#123;</span><br><span class="line">min = args[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)从小的数往1的方向找，找到的第一个公约数就是它们的最大公约数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=min; i&gt;=<span class="number">1</span>; i--)&#123;</span><br><span class="line"><span class="comment">//这个i得把args中所有的数都整除了，那么i就是他们的公约数</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//假设i可以把args中所有数都整除了</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;args.length; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(args[j] % i !=<span class="number">0</span>)&#123;<span class="comment">//args中有一个数不能被i整除，说明这个i不是它们的公约数</span></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">return</span> i;<span class="comment">//return会结束当前方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//1是所有数的公约数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">假设args中6和9  args[0]是6，args[1]是9，min=6</span></span><br><span class="line"><span class="comment">外循环第一次i=min=6,  </span></span><br><span class="line"><span class="comment">内循环第一次：j=0,  if(args[0] % 6！=0)不成立 j++</span></span><br><span class="line"><span class="comment">内循环第二次：j=1,  if(args[1] % 6!=0)成立   flag = false  ;break;</span></span><br><span class="line"><span class="comment">说明i不是它们公约数</span></span><br><span class="line"><span class="comment">外循环第二次i=5</span></span><br><span class="line"><span class="comment">内循环第一次：j=0,  if(args[0] % 5 !=0)成立 j++  flag = false;break;</span></span><br><span class="line"><span class="comment">说明i不是它们公约数</span></span><br><span class="line"><span class="comment">外循环第三次i=4</span></span><br><span class="line"><span class="comment">内循环第一次：j=0,  if(args[0] % 4 !=0)成立 j++  flag = false;break;</span></span><br><span class="line"><span class="comment">说明i不是它们公约数</span></span><br><span class="line"><span class="comment">外循环第四次i=3</span></span><br><span class="line"><span class="comment">内循环第一次：j=0,  if(args[0] % 3 !=0)不成立 j++ </span></span><br><span class="line"><span class="comment">内循环第二次：j=1,  if(args[1] % 3 !=0)不成立 j++  </span></span><br><span class="line"><span class="comment">if(flag)成立，return i;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明一个方法，可以找出任意个整数的最大公约数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxYueShu</span> <span class="operator">=</span> getMaxYueShu(<span class="number">10</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;maxYueShu = &quot;</span> + maxYueShu);</span><br><span class="line">        System.out.println(sameChars(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>));<span class="comment">//ol</span></span><br><span class="line">        System.out.println(sameChars(<span class="string">&quot;chai&quot;</span>, <span class="string">&quot;wolrd&quot;</span>));</span><br><span class="line">        System.out.println(sameChars(<span class="string">&quot;atguigu&quot;</span>, <span class="string">&quot;java&quot;</span>));</span><br><span class="line">        System.out.println(sameChars(<span class="string">&quot;samewordsg&quot;</span>, <span class="string">&quot;string&quot;</span>, <span class="string">&quot;words&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sameChars</span><span class="params">(String... words)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">same</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>; a &lt;= <span class="string">&#x27;z&#x27;</span>; a++) &#123;</span><br><span class="line">            <span class="comment">//统计相同单词的个数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; words.length; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>; h &lt; words[j].length(); h++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (words[j].charAt(h) == a) &#123;</span><br><span class="line">                        count++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当相同的个数等于字符个数时 判定所有的字符串都出现过</span></span><br><span class="line">            <span class="keyword">if</span> (count == words.length) &#123;</span><br><span class="line">                same += a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> same;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-7-方法重载"><a href="#5-7-方法重载" class="headerlink" title="5.7 方法重载"></a>5.7 方法重载</h2><ul><li><strong>方法重载</strong>：指在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可，与修饰符和返回值类型无关。</li><li>参数列表：数据类型个数不同，数据类型不同，数据类型顺序不同。</li><li>重载方法调用：JVM通过方法的参数列表，调用不同的方法。</li></ul><h4 id="示例一：比较两个数据是否相等"><a href="#示例一：比较两个数据是否相等" class="headerlink" title="示例一：比较两个数据是否相等"></a>示例一：比较两个数据是否相等</h4><p>比较两个数据是否相等。参数类型分别为两个<code>byte</code>类型，两个<code>short</code>类型，两个<code>int</code>类型，两个<code>long</code>类型，并在<code>main</code>方法中进行测试。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Method_Demo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定义不同数据类型的变量</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">g</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 调用</span></span><br><span class="line">        System.out.println(compare(a, b));</span><br><span class="line">        System.out.println(compare(c, d));</span><br><span class="line">        System.out.println(compare(e, f));</span><br><span class="line">        System.out.println(compare(g, h));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 两个byte类型的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">byte</span> a, <span class="type">byte</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;byte&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两个short类型的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">short</span> a, <span class="type">short</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;short&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两个int类型的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两个long类型的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;long&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例二：求各种最大值"><a href="#示例二：求各种最大值" class="headerlink" title="示例二：求各种最大值"></a>示例二：求各种最大值</h4><p>用重载实现：<br>定义方法求两个整数的最大值<br>定义方法求三个整数的最大值<br>定义方法求两个小数的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求两个整数的最大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求三个整数的最大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> max(max(a,b),c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求两个小数的最大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例三：判断两个方法是否是合理的重载方法"><a href="#示例三：判断两个方法是否是合理的重载方法" class="headerlink" title="示例三：判断两个方法是否是合理的重载方法"></a>示例三：判断两个方法是否是合理的重载方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断如下两个方法是否构成重载：是</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringUtil</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">concat</span><span class="params">(<span class="type">char</span> seperator, String... args)</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">str += args[i];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">str += seperator + args[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">concat</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">str += args[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断如下两个方法是否构成重载：不是</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>... nums)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">sum += nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">sum += nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test06_Overload_Problem2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(sum(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//(int a, int b)</span></span><br><span class="line">System.out.println(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));<span class="comment">//(int... args)和(int a, int... args)都兼容，就有问题</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不调用编译没问题，但是调用时就有问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;args.length; i++)&#123;</span><br><span class="line">sum += args[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>... args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;args.length; i++)&#123;</span><br><span class="line">sum += args[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="课后练习-1"><a href="#课后练习-1" class="headerlink" title="课后练习"></a>课后练习</h4><p>1、声明一个数组工具类ArraysTools，包含几个重载方法</p><p>（1）重载方法系列1：可以为byte[]，short[]，int[]，long[]，double[]，char[]数组实现从小到大排序</p><p>（2）重载方法系列2：可以遍历byte[]，short[]，int[]，long[]，double[]，char[]数组，遍历结果形式：</p><p>​[元素1，元素2，。。。]</p><p>2、声明一个图形工具类GraphicTools，包含两个重载方法</p><p>（1）包含方法1：根据底边和高，求三角形面积，<br>（2）包含方法2：根据三条边，求三角形面积</p><p>提示：根据三角形三边求面积的海伦公式： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1597044718215.png" alt="1597044718215"></p><h2 id="5-8-命令行参数（了解）"><a href="#5-8-命令行参数（了解）" class="headerlink" title="5.8 命令行参数（了解）"></a>5.8 命令行参数（了解）</h2><p>通过命令行给main方法的形参传递的实参称为命令行参数</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561632816552.png" alt="1561632816552"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCommandParam</span>&#123;</span><br><span class="line"><span class="comment">//形参：String[] args</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(args);</span><br><span class="line">System.out.println(args.length);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;args.length; i++)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;个参数的值是：&quot;</span> + args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java TestCommandParam</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java TestCommandParam 1 2 3</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java TestCommandParam hello atguigu</span><br></pre></td></tr></table></figure><h2 id="5-9-static关键字"><a href="#5-9-static关键字" class="headerlink" title="5.9 static关键字"></a>5.9 static关键字</h2><p>static是一个修饰符，可以修饰：</p><ul><li>成员变量，我们称为类变量，或静态变量，表示某个类的所有对象共享的数据</li><li>成员方法，我们称为类方法，或静态方法，表示不需要实例对象就可以调用的方法，使用“类名.”进行调用<ul><li>父类的静态方法可以被继承不能被重写</li><li>父接口的静态方法不能被实现类继承</li></ul></li><li>代码块，我们称为静态代码块，或静态初始化块，用于为静态变量初始化，每一个类的静态代码块只会执行一次，在类第一次初始化时执行</li><li>成员内部类，我们称为静态成员内部类，简称静态内部类，不需要外部类实例对象就可以使用的内部类，在静态内部类中只能使用外部类的静态成员<ul><li>static不能修饰top-level的类</li></ul></li></ul><ul><li>静态导入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> 包.类名.静态成员;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> 包.类名.*;</span><br></pre></td></tr></table></figure><p>例如：使用一个枚举类的常量对象时，使用一个接口的内部接口时等</p><h2 id="5-10-递归"><a href="#5-10-递归" class="headerlink" title="5.10 递归"></a>5.10 递归</h2><ul><li><strong>递归</strong>：指在当前方法内调用自己的这种现象。</li><li><strong>递归的分类:</strong><ul><li>递归分为两种，直接递归和间接递归。</li><li>直接递归称为方法自身调用自己。</li><li>间接递归可以A方法调用B方法，B方法调用C方法，C方法调用A方法。</li></ul></li><li><strong>注意事项</strong>：<ul><li>递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。</li><li>在递归中虽然有限定条件，但是递归次数不能太多。否则也会发生栈内存溢出。</li></ul></li></ul><h4 id="示例一：计算1-100之间所有自然数的和"><a href="#示例一：计算1-100之间所有自然数的和" class="headerlink" title="示例一：计算1-100之间所有自然数的和"></a>示例一：计算1-100之间所有自然数的和</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionMethod1</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> sum(<span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;1-100的和：&quot;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> n + sum(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561731643079.png" alt="1561731643079"></p><h4 id="示例二：求n"><a href="#示例二：求n" class="headerlink" title="示例二：求n!"></a>示例二：求n!</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1573725058457.png" alt="1573725058457"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionMethod2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">jieCheng</span> <span class="operator">=</span> jieCheng(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;10的阶乘是：&quot;</span> + jieCheng);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">jieCheng</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> n * jieCheng(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561731297753.png" alt="1561731297753"></p><h4 id="示例三：计算斐波那契数列（Fibonacci）的第n个值"><a href="#示例三：计算斐波那契数列（Fibonacci）的第n个值" class="headerlink" title="示例三：计算斐波那契数列（Fibonacci）的第n个值"></a>示例三：计算斐波那契数列（Fibonacci）的第n个值</h4><p>规律：一个数等于前两个数之和，</p><p>​f(0) &#x3D;1，</p><p>​f(1) &#x3D; 1，</p><p>​f(2) &#x3D; f(0) + f(1) &#x3D;2，</p><p>​f(3) &#x3D; f(1) + f(2) &#x3D; 3, </p><p>​f(4) &#x3D; f(2) + f(3) &#x3D; 5</p><p>​…</p><p>​f(n) &#x3D; f(n-2) + f(n-1);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionMethod3</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Count</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Count</span>();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;f(10)：&quot;</span> + c.f(<span class="number">10</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;f方法被调用的总次数：&quot;</span> + c.total);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">total++;</span><br><span class="line"><span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> f(n-<span class="number">2</span>) + f(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561733124831.png" alt="1561733124831"></p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>1、描述：猴子吃桃子问题，猴子第一天摘下若干个桃子，当即吃了所有桃子的一半，还不过瘾，又多吃了一个。第二天又将仅剩下的桃子吃掉了一半，又多吃了一个。以后每天都吃了前一天剩下的一半多一个。到第十天，只剩下一个桃子。试求第一天共摘了多少桃子？</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1573725022751.png" alt="1573725022751"></p><p>2、有n级台阶，一次只能上1步或2步，共有多少种走法？</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1573724181996.png" alt="1573724181996"></p><p>3、</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1573724277746.png" alt="1573724277746"></p><h2 id="5-11-对象数组"><a href="#5-11-对象数组" class="headerlink" title="5.11  对象数组"></a>5.11  对象数组</h2><p>数组是用来存储一组数据的容器，一组基本数据类型的数据可以用数组装，那么一组对象也可以使用数组来装。</p><p>即数组的元素可以是基本数据类型，也可以是引用数据类型。当元素是引用数据类型是，我们称为对象数组。</p><blockquote><p>注意：对象数组，首先要创建数组对象本身，即确定数组的长度，然后再创建每一个元素对象，如果不创建，数组的元素的默认值就是null，所以很容易出现空指针异常NullPointerException。</p></blockquote><h3 id="示例一：-1"><a href="#示例一：-1" class="headerlink" title="示例一："></a>示例一：</h3><p>（1）定义圆Circle类，包含radius半径属性，getArea()求面积方法，getPerimeter()求周长方法，String getInfo()返回圆对象的详细信息的方法</p><p>（2）在测试类中创建长度为5的Circle[]数组，用来装5个圆对象，并给5个圆对象的半径赋值为[1,10)的随机值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test16_ObjectArray</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//要在数组中存储5个圆对象</span></span><br><span class="line"><span class="comment">//声明一个可以用来存储圆对象的数组</span></span><br><span class="line">Circle[] arr = <span class="keyword">new</span> <span class="title class_">Circle</span>[<span class="number">5</span>];</span><br><span class="line"><span class="comment">//for(int i=0; i&lt;arr.length; i++)&#123;</span></span><br><span class="line"><span class="comment">//System.out.println(arr[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//System.out.println(arr[0].radius);//NullPointerException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给元素赋值</span></span><br><span class="line"><span class="comment">//元素的类型是：Circle，应该给它一个Circle的对象</span></span><br><span class="line"><span class="comment">//arr[0] = 1.2;//错误的</span></span><br><span class="line"><span class="comment">//arr[0]相当于它是一个Circle类型的变量，也是对象名，必须赋值为对象</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">arr[0] =  new Circle();</span></span><br><span class="line"><span class="comment">arr[0].radius = 1.2;</span></span><br><span class="line"><span class="comment">System.out.println(arr[0].radius);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建5个对象，半径随机赋值为[1,10)的随机值</span></span><br><span class="line"><span class="comment">//Math.random()==&gt;[0,1)</span></span><br><span class="line"><span class="comment">//Math.random()*9==&gt;[0,9)</span></span><br><span class="line"><span class="comment">//Math.random()*9+1==&gt;[1,10)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">arr[i] = <span class="keyword">new</span> <span class="title class_">Circle</span>();<span class="comment">//有对象才有半径</span></span><br><span class="line">arr[i].radius = Math.random()*<span class="number">9</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历显示圆对象的信息</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="comment">//arr[i]是一个Circle的对象，就可以调用Circle类中的属性和方法</span></span><br><span class="line">System.out.println(arr[i].getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"><span class="type">double</span> radius;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3.14</span> * <span class="number">2</span> * radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;半径：&quot;</span> + radius +<span class="string">&quot;，面积：&quot;</span> + getArea() + <span class="string">&quot;，周长：&quot;</span> + getPerimeter();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象数组的内存图分析"><a href="#对象数组的内存图分析" class="headerlink" title="对象数组的内存图分析"></a>对象数组的内存图分析</h3><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><p>（1）定义学生类Student</p><p>​声明姓名和成绩实例变量，</p><p>​getInfo()方法：用于返回学生对象的信息</p><p>（2）测试类ObjectArrayTest的main中创建一个可以装3个学生对象的数组，并且按照学生成绩排序，显示学生信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectArrayTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Student[] arr = <span class="keyword">new</span> <span class="title class_">Student</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">arr[<span class="number">0</span>].name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">arr[<span class="number">0</span>].score = <span class="number">89</span>;</span><br><span class="line"></span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">arr[<span class="number">1</span>].name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">arr[<span class="number">1</span>].score = <span class="number">84</span>;</span><br><span class="line"></span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">arr[<span class="number">2</span>].name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">arr[<span class="number">2</span>].score = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j].score &gt; arr[j+<span class="number">1</span>].score)&#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i].getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;,成绩：&quot;</span> + score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test18_ObjectArrayExer2_2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//创建一个可以装3个学生对象的数组</span></span><br><span class="line">Student[] arr = <span class="keyword">new</span> <span class="title class_">Student</span>[<span class="number">3</span>];<span class="comment">//只是申明这个数组，可以用来装3个学生，此时里面没有学生对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从键盘输入</span></span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length; i++)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;个学生信息：&quot;</span>);</span><br><span class="line">arr[i] = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">arr[i].name = input.next();</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;成绩：&quot;</span>);</span><br><span class="line">arr[i].score = input.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先显示一下目前的顺序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">System.out.println(arr[i].getInfo());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;arr.length-i; j++)&#123;</span><br><span class="line"><span class="comment">//arr[j] &gt; arr[j+1]//错误的</span></span><br><span class="line"><span class="keyword">if</span>(arr[j].score &gt; arr[j+<span class="number">1</span>].score)&#123;</span><br><span class="line"><span class="comment">//交换两个元素，这里是两个学生对象，所以temp也得是Student类型</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再显示一下目前的顺序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">System.out.println(arr[i].getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> score;<span class="comment">//使用int或double都可以</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + name +<span class="string">&quot;，成绩：&quot;</span> + score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第5章-面向对象基础（上）&quot;&gt;&lt;a href=&quot;#第5章-面向对象基础（上）&quot; class=&quot;headerlink&quot; title=&quot;第5章 面向对象基础（上）&quot;&gt;&lt;/a&gt;第5章 面向对象基础（上）&lt;/h1&gt;&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot;</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第4章【数组】</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC4%E7%AB%A0%E3%80%90%E6%95%B0%E7%BB%84%E3%80%91/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC4%E7%AB%A0%E3%80%90%E6%95%B0%E7%BB%84%E3%80%91/</id>
    <published>2022-07-28T05:04:26.000Z</published>
    <updated>2022-10-16T04:43:25.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaSE-第4章-数组"><a href="#JavaSE-第4章-数组" class="headerlink" title="JavaSE_第4章 数组"></a>JavaSE_第4章 数组</h1><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>数组概念</li><li>数组的声明和初始化</li><li>数组的索引</li><li>数组的长度</li><li>数组的遍历</li><li>数组内存</li><li>数组的相关算法</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><input disabled="" type="checkbox"> 理解数组作为容器的概念</li><li><input disabled="" type="checkbox"> 掌握数组的声明和初始化</li><li><input disabled="" type="checkbox"> 使用索引访问数组的元素</li><li><input disabled="" type="checkbox"> 了解数组的内存图解</li><li><input disabled="" type="checkbox"> 避免空指针和越界异常</li><li><input disabled="" type="checkbox"> 掌握数组的遍历</li><li><input disabled="" type="checkbox"> 掌握常见的数组算法</li></ul><h1 id="第四章-数组"><a href="#第四章-数组" class="headerlink" title="第四章 数组"></a>第四章 数组</h1><h2 id="4-1-容器概述"><a href="#4-1-容器概述" class="headerlink" title="4.1 容器概述"></a>4.1 容器概述</h2><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>现在需要统计某公司员工的工资情况，例如计算平均工资、找到最高工资等。假设该公司有50名员工，用前面所学的知识，程序首先需要声明50个变量来分别记住每位员工的工资，然后在进行操作，这样做会显得很麻烦，而且错误率也会很高。因此我们可以使用容器进行操作。将所有的数据全部存储到一个容器中，统一操作。</p><h3 id="容器概念"><a href="#容器概念" class="headerlink" title="容器概念"></a>容器概念</h3><ul><li><strong>容器：</strong>是将多个数据存储到一起，每个数据称为该容器的元素。</li><li><strong>生活中的容器：</strong>水杯，衣柜，教室</li></ul><h2 id="4-2-数组的概念"><a href="#4-2-数组的概念" class="headerlink" title="4.2 数组的概念"></a>4.2 数组的概念</h2><ul><li><strong>数组概念：</strong> 数组就是用于存储数据的长度固定的容器，保证多个数据的数据类型要一致。</li></ul><p>百度百科中对数组的定义：</p><p>所谓<strong>数组</strong>(array)，就是相同数据类型的元素按一定顺序排列的集合，就是把有限个类型相同的变量用一个名字命名，以便统一管理他们，然后用编号区分他们，这个名字称为<strong>数组名</strong>，编号称为<strong>下标或索引</strong>(index)。组成数组的各个变量称为数组的<strong>元素</strong>(element)。数组中元素的个数称为<strong>数组的长度</strong>(length)。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561452334825.png" alt="1561452334825"></p><p>数组的特点：</p><p>1、数组的长度一旦确定就不能修改</p><p>2、创建数组时会在内存中开辟一整块连续的空间。</p><p>3、存取元素的速度快，因为可以通过[下标]，直接定位到任意一个元素。</p><h2 id="4-3-数组的声明与初始化"><a href="#4-3-数组的声明与初始化" class="headerlink" title="4.3 数组的声明与初始化"></a>4.3 数组的声明与初始化</h2><p>数组的声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//推荐</span></span><br><span class="line">元素的数据类型[] 二维数组的名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不推荐</span></span><br><span class="line">元素的数据类型  二维数组名[];</span><br></pre></td></tr></table></figure><h3 id="方式一：静态初始化"><a href="#方式一：静态初始化" class="headerlink" title="方式一：静态初始化"></a>方式一：静态初始化</h3><ul><li><strong>格式：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3.</span>..&#125;;<span class="comment">//必须在一个语句中完成，不能分开两个语句写</span></span><br></pre></td></tr></table></figure><ul><li>举例：</li></ul><p>定义存储1，2，3，4，5整数的数组容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr;</span><br><span class="line">arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><h3 id="方式二：静态初始化"><a href="#方式二：静态初始化" class="headerlink" title="方式二：静态初始化"></a>方式二：静态初始化</h3><ul><li><strong>格式：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3.</span>..&#125;;</span><br><span class="line">或</span><br><span class="line">数据类型[] 数组名;</span><br><span class="line">数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3.</span>..&#125;;</span><br></pre></td></tr></table></figure><ul><li>举例：</li></ul><p>定义存储1，2，3，4，5整数的数组容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//错误的，后面有&#123;&#125;指定元素列表，就不需要在[长度]指定长度。</span></span><br></pre></td></tr></table></figure><h3 id="方式三：动态初始化"><a href="#方式三：动态初始化" class="headerlink" title="方式三：动态初始化"></a>方式三：动态初始化</h3><ul><li><strong>格式：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数组存储的元素的数据类型[] 数组名字 = <span class="keyword">new</span> 数组存储的元素的数据类型[长度];</span><br><span class="line"></span><br><span class="line"> 或</span><br><span class="line"></span><br><span class="line">数组存储的数据类型[] 数组名字;</span><br><span class="line">数组名字 = <span class="keyword">new</span> 数组存储的数据类型[长度];</span><br></pre></td></tr></table></figure><ul><li>数组定义格式详解：<ul><li>数组存储的元素的数据类型： 创建的数组容器可以存储什么数据类型的数据。</li><li>元素的类型可以是任意的Java的数据类型。例如：int, String, Student等</li><li>[] : 表示数组。</li><li>数组名字：为定义的数组起个变量名，满足标识符规范，可以使用名字操作数组。</li><li>new：关键字，创建数组使用的关键字。因为数组本身是引用数据类型，所以要用new创建数组对象。</li><li>[长度]：数组的长度，表示数组容器中可以存储多少个元素。</li><li><strong>注意：数组有定长特性，长度一旦指定，不可更改。</strong><ul><li>和水杯道理相同，买了一个2升的水杯，总容量就是2升，不能多也不能少。</li></ul></li></ul></li><li>举例：</li></ul><p>定义可以存储5个整数的数组容器，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><blockquote><p>思考：用这种方式初始化的数组，元素有值吗？</p></blockquote><h2 id="4-4-数组元素的访问"><a href="#4-4-数组元素的访问" class="headerlink" title="4.4 数组元素的访问"></a>4.4 数组元素的访问</h2><ul><li><strong>索引：</strong> 每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为**数组索引(index)**，可以通过数组的索引访问到数组中的元素。</li><li><strong>索引范围：</strong>[0, 数组的长度-1]</li><li><strong>格式：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引]</span><br></pre></td></tr></table></figure><ul><li><strong>索引访问数组中的元素：</strong><ul><li>数组名[索引]&#x3D;数值，为数组中的元素赋值</li><li>变量&#x3D;数组名[索引]，获取出数组中的元素</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//定义存储int类型数组，赋值元素1，2，3，4，5</span></span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//为0索引元素赋值为6</span></span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">//获取数组0索引上的元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    <span class="comment">//直接输出数组0索引元素</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-数组的遍历"><a href="#4-5-数组的遍历" class="headerlink" title="4.5 数组的遍历"></a>4.5 数组的遍历</h2><ul><li><strong>数组的长度属性：</strong> 每个数组都具有长度，而且是固定的，Java中赋予了数组的一个属性，可以获取到数组的长度，语句为：<code>数组名.length</code> ，属性length的执行结果是数组的长度，int类型结果。由次可以推断出，数组的最大索引值为<code>数组名.length-1</code>。</li><li><strong>数组遍历：</strong> 就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  <span class="comment">//打印数组的属性，输出结果是5</span></span><br><span class="line">  System.out.println(<span class="string">&quot;数组的长度：&quot;</span> + arr.length);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历输出数组中的元素</span></span><br><span class="line">    System.out.println(<span class="string">&quot;数组的元素有：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6-数组元素的默认值"><a href="#4-6-数组元素的默认值" class="headerlink" title="4.6 数组元素的默认值"></a>4.6 数组元素的默认值</h2><p>当我们使用动态初始化创建数组时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组存储的元素的数据类型[] 数组名字 = <span class="keyword">new</span> 数组存储的元素的数据类型[长度];</span><br></pre></td></tr></table></figure><p>此时只确定了数组的长度，那么数组的元素是什么值呢？</p><p>数组的元素有默认值：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561509460135.png" alt="1561509460135"></p><h2 id="4-7-数组内存图"><a href="#4-7-数组内存图" class="headerlink" title="4.7 数组内存图"></a>4.7 数组内存图</h2><h3 id="4-7-1-内存概述"><a href="#4-7-1-内存概述" class="headerlink" title="4.7.1 内存概述"></a>4.7.1 内存概述</h3><p>内存是计算机中重要的部件之一，它是与CPU进行沟通的桥梁。其作用是用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。只要计算机在运行中，CPU就会把需要运算的数据调到内存中进行运算，当运算完成后CPU再将结果传送出来。我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。</p><p>Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。</p><h3 id="4-7-2-Java虚拟机的内存划分"><a href="#4-7-2-Java虚拟机的内存划分" class="headerlink" title="4.7.2 Java虚拟机的内存划分"></a>4.7.2 Java虚拟机的内存划分</h3><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561465258546.png" alt="1561465258546"></p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>程序计数器</td><td>程序计数器是CPU中的寄存器，它包含每一个线程下一条要执行的指令的地址</td></tr><tr><td>本地方法栈</td><td>当程序中调用了native的本地方法时，本地方法执行期间的内存区域</td></tr><tr><td>方法区</td><td>存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</td></tr><tr><td>堆内存</td><td>存储对象（包括数组对象），new来创建的，都存储在堆内存。</td></tr><tr><td>虚拟机栈</td><td>用于存储正在执行的每个Java方法的局部变量表等。局部变量表存放了编译期可知长度的各种基本数据类型、对象引用，方法执行完，自动释放。</td></tr></tbody></table><h3 id="4-7-3-数组在内存中的存储"><a href="#4-7-3-数组在内存中的存储" class="headerlink" title="4.7.3 数组在内存中的存储"></a>4.7.3 数组在内存中的存储</h3><h4 id="1、一个数组内存图"><a href="#1、一个数组内存图" class="headerlink" title="1、一个数组内存图"></a>1、一个数组内存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">  System.out.println(arr);<span class="comment">//[I@5f150435</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE1.jpg"></p><blockquote><p>思考：打印arr为什么是[I@5f150435，它是数组的地址吗？</p><p>答：它不是数组的地址。</p><p>问？不是说arr中存储的是数组对象的首地址吗？</p><p>答：arr中存储的是数组的首地址，但是因为数组是引用数据类型，打印arr时，会自动调用arr数组对象的toString()方法，默认该方法实现的是对象类型名@该对象的hashCode()值的十六进制值。</p><p>问？对象的hashCode值是否就是对象内存地址？</p><p>答：不一定，因为这个和不同品牌的JVM产品的具体实现有关。例如：Oracle的OpenJDK中给出了5种实现，其中有一种是直接返回对象的内存地址，但是OpenJDK默认没有选择这种方式。</p></blockquote><h4 id="2、数组下标为什么是0开始"><a href="#2、数组下标为什么是0开始" class="headerlink" title="2、数组下标为什么是0开始"></a>2、数组下标为什么是0开始</h4><p>因为第一个元素距离数组首地址间隔0个单元。</p><h4 id="3、两个数组内存图"><a href="#3、两个数组内存图" class="headerlink" title="3、两个数组内存图"></a>3、两个数组内存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    System.out.println(arr);</span><br><span class="line">    System.out.println(arr2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE2.jpg"></p><h4 id="4、两个变量指向一个数组"><a href="#4、两个变量指向一个数组" class="headerlink" title="4、两个变量指向一个数组"></a>4、两个变量指向一个数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义数组，存储3个元素</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="comment">//数组索引进行赋值</span></span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">//输出3个索引上的元素值</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//定义数组变量arr2，将arr的地址赋值给arr2</span></span><br><span class="line">    <span class="type">int</span>[] arr2 = arr;</span><br><span class="line">    arr2[<span class="number">1</span>] = <span class="number">9</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure> <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE3.jpg" style="zoom:80%;" /><h2 id="4-8-数组的练习题"><a href="#4-8-数组的练习题" class="headerlink" title="4.8 数组的练习题"></a>4.8 数组的练习题</h2><p>1、练习1：用一个数组存储26个小写英文字母，并遍历显示，显示要求如：a-&gt;A</p><p>2、练习2：用一个数组存储本组学员的年龄，从键盘输入，并遍历显示</p><p>3、练习3：用一个数组存储本组学员的姓名，从键盘输入，并遍历显示</p><p>4、练习4：用数组存储一个星期的7个英文单词，然后从键盘输入星期的值[1-7]，输出对应的英文单词</p><h2 id="4-9-数组的常见算法"><a href="#4-9-数组的常见算法" class="headerlink" title="4.9 数组的常见算法"></a>4.9 数组的常见算法</h2><h3 id="4-9-1-数组统计：求总和、均值、统计偶数个数等"><a href="#4-9-1-数组统计：求总和、均值、统计偶数个数等" class="headerlink" title="4.9.1 数组统计：求总和、均值、统计偶数个数等"></a>4.9.1 数组统计：求总和、均值、统计偶数个数等</h3><p>思路：遍历数组，挨个的累加，判断每一个元素</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//求总和、均值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//因为0加上任何数都不影响结果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> <span class="variable">avg</span> <span class="operator">=</span> (<span class="type">double</span>)sum/arr.length;</span><br></pre></td></tr></table></figure><p>示例代码2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求总乘积</span></span><br><span class="line"><span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//因为1乘以任何数都不影响结果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    result *= arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//统计偶数个数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">even</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i]%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        even++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-9-2-数组的顺序查找"><a href="#4-9-2-数组的顺序查找" class="headerlink" title="4.9.2  数组的顺序查找"></a>4.9.2  数组的顺序查找</h3><p>顺序查找：挨个查看</p><p>要求：对数组元素的顺序没要求</p><p>顺序查找示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找value第一次在数组中出现的index</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == value)&#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(index==-<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(value + <span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(value + <span class="string">&quot;的下标是&quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-9-3-数组找最值"><a href="#4-9-3-数组找最值" class="headerlink" title="4.9.3 数组找最值"></a>4.9.3 数组找最值</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1574577970893.png" alt="1574577970893"></p><p>思路：</p><p>（1）先假设第一个元素最大&#x2F;最小</p><p>（2）然后用max&#x2F;min与后面的元素一一比较</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//找最大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">        max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-9-4-数组中找最值及其下标"><a href="#4-9-4-数组中找最值及其下标" class="headerlink" title="4.9.4 数组中找最值及其下标"></a>4.9.4 数组中找最值及其下标</h3><p>情况一：找最值及其第一次出现的下标</p><p>思路：</p><p>（1）先假设第一个元素最大&#x2F;最小</p><p>（2）用max&#x2F;min变量表示最大&#x2F;小值，用max&#x2F;min与后面的元素一一比较</p><p>（3）用index时刻记录目前比对的最大&#x2F;小的下标</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//找最大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">        max = arr[i];</span><br><span class="line">        index = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><p>思路：</p><p>（1）先假设第一个元素最大&#x2F;最小</p><p>（2）用maxIndex时刻记录目前比对的最大&#x2F;小的下标，那么arr[maxIndex]就是目前的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//找最大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; arr[maxIndex])&#123;</span><br><span class="line">        maxIndex = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;最大值：&quot;</span> + arr[maxIndex]);</span><br></pre></td></tr></table></figure><p>情况二：找最值及其所有最值的下标（即可能最大值重复）</p><p>思路：</p><p>（1）先找最大值</p><p>①假设第一个元素最大</p><p>②用max与后面的元素一一比较</p><p>（2）遍历数组，看哪些元素和最大值是一样的</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//找最大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">        max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组，看哪些元素和最大值是一样的</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(max == arr[i])&#123;</span><br><span class="line">        System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-9-5-冒泡排序"><a href="#4-9-5-冒泡排序" class="headerlink" title="4.9.5 冒泡排序"></a>4.9.5 冒泡排序</h3><p>Java中的经典算法之冒泡排序（Bubble Sort）</p><p>原理：比较两个相邻的元素，将值大的元素交换至右端。</p><p>思路：依次比较相邻的两个数，将小数放到前面，大数放到后面。</p><p>​即第一趟，首先比较第1个和第2个元素，将小数放到前面，大数放到后面。</p><p>​然后比较第2个和第3个元素，将小数放到前面，大数放到后面。</p><p>​如此继续，直到比较最后两个数，将小数放到前面，大数放到后面。</p><p>​重复第一趟步骤，直至全部排序完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">例如：冒泡：从小到大，从左到右两两比较</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;6,3,8,2,9,1&#125;</span></span><br><span class="line"><span class="comment">第一轮：</span></span><br><span class="line"><span class="comment">第1次：arr[0]与arr[1]比较，6&gt;3成立，就交换，&#123;3,6,8,2,9,1&#125;</span></span><br><span class="line"><span class="comment">第2次：arr[1]与arr[2]比较，6&gt;8不成立，不交换&#123;3,6,8,2,9,1&#125;</span></span><br><span class="line"><span class="comment">第3次：arr[2]与arr[3]比较，8&gt;2成立，就交换，&#123;3,6,2,8,9,1&#125;</span></span><br><span class="line"><span class="comment">第4次：arr[3]与arr[4]比较，8&gt;9不成立，不交换&#123;3,6,2,8,9,1&#125;</span></span><br><span class="line"><span class="comment">第5次：arr[4]与arr[5]比较，9&gt;1成立，就交换，&#123;3,6,2,8,1,9&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第一轮结果：&#123;3,6,2,8,1,9&#125;   9已经到达正确位置，下一轮不用在参与</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二轮：</span></span><br><span class="line"><span class="comment">第1次：arr[0]与arr[1]比较，3&gt;6不成立，不交换&#123;3,6,2,8,1,9&#125;</span></span><br><span class="line"><span class="comment">第2次：arr[1]与arr[2]比较，6&gt;2成立，就交换，&#123;3,2,6,8,1,9&#125;</span></span><br><span class="line"><span class="comment">第3次：arr[2]与arr[3]比较，6&gt;8不成立，不交换&#123;3,2,6,8,1,9&#125;</span></span><br><span class="line"><span class="comment">第4次：arr[3]与arr[4]比较，8&gt;1成立，就交换，&#123;3,2,6,1,8,9&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二轮结果：&#123;3,2,6,1,8,9&#125;   8已经到达正确位置，下一轮不用在参与</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第三轮：</span></span><br><span class="line"><span class="comment">第1次：arr[0]与arr[1]比较，3&gt;2成立，就交换，&#123;2,3,6,1,8,9&#125;</span></span><br><span class="line"><span class="comment">第2次：arr[1]与arr[2]比较，3&gt;6不成立，不交换&#123;2,3,6,1,8,9&#125;</span></span><br><span class="line"><span class="comment">第3次：arr[2]与arr[3]比较，6&gt;1成立，就交换，&#123;2,3,1,6,8,9&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第三轮结果：&#123;2,3,1,6,8,9&#125;   6已经到达正确位置，下一轮不用在参与</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第四轮：</span></span><br><span class="line"><span class="comment">第1次：arr[0]与arr[1]比较，2&gt;3不成立，不交换&#123;2,3,1,6,8,9&#125; </span></span><br><span class="line"><span class="comment">第2次：arr[1]与arr[2]比较，3&gt;1成立，就交换，&#123;2,1,3,6,8,9&#125; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第四轮结果：&#123;2,1,3,6,8,9&#125;    3已经到达正确位置，下一轮不用在参与</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第五轮</span></span><br><span class="line"><span class="comment">第1次：arr[0]与arr[1]比较，2&gt;1成立，就交换，&#123;1,2,3,6,8,9&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第五轮结果：&#123;1,2,3,6,8,9&#125;   2已经到达正确位置，下一轮不用在参与</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">剩下1，肯定是最小的了，不用比较了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6个元素，比较了5轮， n个元素需要n-1轮</span></span><br><span class="line"><span class="comment">每一轮比较很多次</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>&#125;;  <span class="comment">//arr.length = 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//i=1,2,3,4,5  一共5轮</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;<span class="comment">//轮数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i=1，第1轮，j=0,1,2,3,4   arr[j]与arr[j+1]</span></span><br><span class="line"><span class="comment">i=2，第2轮，j=0,1,2,3     arr[j]与arr[j+1]</span></span><br><span class="line"><span class="comment">i=3，第3轮，j=0,1,2       arr[j]与arr[j+1]</span></span><br><span class="line"><span class="comment">i=4，第4轮，j=0,1         arr[j]与arr[j+1]</span></span><br><span class="line"><span class="comment">i=5，第5轮，j=0           arr[j]与arr[j+1]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">j=0, j&lt;=arr.length-1-i</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;=arr.length-<span class="number">1</span>-i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：从大到小，从右到左</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] arr = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;<span class="comment">//外循环的次数 = 轮数 = 数组的长度-1</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    第1轮，i=1，从右到左两两比较，arr[8]与arr[7]，arr[7]与arr[6]....arr[1]与arr[0]</span></span><br><span class="line"><span class="comment">    第2轮，i=2，从右到左两两比较，arr[8]与arr[7]，arr[7]与arr[6]....arr[2]与arr[1]</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">    第8轮，i=8，从右到左两两比较，arr[8]与arr[7]</span></span><br><span class="line"><span class="comment">       arr[j]与arr[j-1]</span></span><br><span class="line"><span class="comment">    找两个关键点：（1）j的起始值：8（2）找j的终止值，依次是1,2,3,。。。8，得出j&gt;=i</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">8</span>; j&gt;=i; j--)&#123;</span><br><span class="line">        <span class="comment">//从大到小，后面的元素 &gt; 前面的元素，就交换</span></span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j-<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">            arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">            arr[j-<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-9-6-练习"><a href="#4-9-6-练习" class="headerlink" title="4.9.6 练习"></a>4.9.6 练习</h3><p>1、随机产生10个[0,100)之间整数，统计3的倍数的个数</p><p>2、随机产生10个[0,150)之间整数，统计既是3又是5，但不是7的倍数的个数</p><p>3、随机产生10个[0,100)之间整数，统计素数的个数</p><p>4、已知本组学员有：String[] names &#x3D; {“张三”,”李四”,”王五”,”赵六”,”钱七”};，从键盘输入一个学生姓名，查看他是否是本组学员</p><p>5、声明两个数组，一个存储本组学员姓名，一个存储本组学员成绩，找出最高分同学的姓名</p><h2 id="4-10-二维数组"><a href="#4-10-二维数组" class="headerlink" title="4.10 二维数组"></a>4.10 二维数组</h2><ul><li><p>二维数组：本质上就是元素为一维数组的一个数组。</p></li><li><p>二维数组的标记：[][]</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr; <span class="comment">//arr是一个二维数组，可以看成元素是int[]一维数组类型的一个数组</span></span><br></pre></td></tr></table></figure><p>二维数组也可以看成一个二维表，行*列组成的二维表，只不过这个二维表，每一行的列数还可能不同。但是每一个单元格中的元素的数据类型是一致的，例如：都是int，都是String等</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561524724397.png" alt="1561524724397"></p><h3 id="4-10-1-二维数组的声明与初始化"><a href="#4-10-1-二维数组的声明与初始化" class="headerlink" title="4.10.1 二维数组的声明与初始化"></a>4.10.1 二维数组的声明与初始化</h3><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//推荐</span></span><br><span class="line">元素的数据类型[][] 二维数组的名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不推荐</span></span><br><span class="line">元素的数据类型  二维数组名[][];</span><br><span class="line"><span class="comment">//不推荐</span></span><br><span class="line">元素的数据类型[]  二维数组名[];</span><br></pre></td></tr></table></figure><p>面试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int[] x, y[];</span><br><span class="line">//x是一维数组，y是二维数组</span><br></pre></td></tr></table></figure><h4 id="1、静态初始化"><a href="#1、静态初始化" class="headerlink" title="1、静态初始化"></a>1、静态初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">元素的数据类型[][] 二维数组名 = <span class="keyword">new</span> 元素的数据类型[][]&#123;</span><br><span class="line">&#123;元素<span class="number">1</span>，元素<span class="number">2</span>，元素<span class="number">3</span> 。。。&#125;, </span><br><span class="line">&#123;第二行的值列表&#125;,</span><br><span class="line">...</span><br><span class="line">&#123;第n行的值列表&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">元素的数据类型[][] 二维数组名;</span><br><span class="line">二维数组名 = <span class="keyword">new</span> 元素的数据类型[][]&#123;</span><br><span class="line">&#123;元素<span class="number">1</span>，元素<span class="number">2</span>，元素<span class="number">3</span> 。。。&#125;, </span><br><span class="line">&#123;第二行的值列表&#125;,</span><br><span class="line">...</span><br><span class="line">&#123;第n行的值列表&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下格式要求声明与静态初始化必须一起完成</span></span><br><span class="line">元素的数据类型[][] 二维数组的名称 = &#123;</span><br><span class="line">&#123;元素<span class="number">1</span>，元素<span class="number">2</span>，元素<span class="number">3</span> 。。。&#125;, </span><br><span class="line">&#123;第二行的值列表&#125;,</span><br><span class="line">...</span><br><span class="line">&#123;第n行的值列表&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><strong>如果是静态初始化，右边new 数据类型[][]中不能写数字，因为行数和列数，由{}的元素个数决定</strong></p></blockquote><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;<span class="comment">//错误，静态初始化右边new 数据类型[]中不能写数字</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;<span class="comment">//声明与初始化必须在一句完成</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Array2Demo1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(arr);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//1</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>][<span class="number">0</span>]); <span class="comment">//4</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>][<span class="number">0</span>]); <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//2</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>][<span class="number">1</span>]); <span class="comment">//5</span></span><br><span class="line"><span class="comment">//越界</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>][<span class="number">1</span>]); <span class="comment">//错误</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、动态初始化（规则二维表：每一行的列数是相同的）"><a href="#2、动态初始化（规则二维表：每一行的列数是相同的）" class="headerlink" title="2、动态初始化（规则二维表：每一行的列数是相同的）"></a>2、动态初始化（规则二维表：每一行的列数是相同的）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）确定行数和列数</span></span><br><span class="line">元素的数据类型[][] 二维数组名 = <span class="keyword">new</span> 元素的数据类型[m][n];</span><br><span class="line">m:表示这个二维数组有多少个一维数组。或者说一共二维表有几行</span><br><span class="line">n:表示每一个一维数组的元素有多少个。或者说每一行共有一个单元格</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时创建完数组，行数、列数确定，而且元素也都有默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//（2）再为元素赋新值</span></span><br><span class="line">二维数组名[行下标][列下标] = 值;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个二维数组</span></span><br><span class="line">    <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义了一个二维数组arr</span></span><br><span class="line">    <span class="comment">//这个二维数组有3个一维数组的元素</span></span><br><span class="line">    <span class="comment">//每一个一维数组有2个元素</span></span><br><span class="line">    <span class="comment">//输出二维数组名称</span></span><br><span class="line">    System.out.println(arr); <span class="comment">//地址值[[I@175078b</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出二维数组的第一个元素一维数组的名称</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); <span class="comment">//地址值[I@42552c</span></span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]); <span class="comment">//地址值[I@e5bbd6</span></span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]); <span class="comment">//地址值[I@8ee016</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出二维数组的元素</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//0</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="3、动态初始化（不规则：每一行的列数可能不一样）"><a href="#3、动态初始化（不规则：每一行的列数可能不一样）" class="headerlink" title="3、动态初始化（不规则：每一行的列数可能不一样）"></a>3、动态初始化（不规则：每一行的列数可能不一样）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）先确定总行数</span></span><br><span class="line">元素的数据类型[][] 二维数组名 = <span class="keyword">new</span> 元素的数据类型[总行数][];</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时只是确定了总行数，每一行里面现在是null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//（2）再确定每一行的列数，创建每一行的一维数组</span></span><br><span class="line">二维数组名[行下标] = <span class="keyword">new</span> 元素的数据类型[该行的总列数];</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时已经new完的行的元素就有默认值了，没有new的行还是null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)再为元素赋值</span></span><br><span class="line">二维数组名[行下标][列下标] = 值;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">       </span><br><span class="line">       System.out.println(arr);<span class="comment">//[[I@175078b</span></span><br><span class="line">       </span><br><span class="line">       System.out.println(arr[<span class="number">1</span>][<span class="number">0</span>]);<span class="comment">//NullPointerException</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//null</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//null</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态的为每一个一维数组分配空间</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//[I@42552c</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//[I@e5bbd6</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//[I@8ee016</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//0</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//0</span></span><br><span class="line"><span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">//System.out.println(arr[0][2]); //错误</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-10-2-二维数组的相关名称及其表示方式"><a href="#4-10-2-二维数组的相关名称及其表示方式" class="headerlink" title="4.10.2 二维数组的相关名称及其表示方式"></a>4.10.2 二维数组的相关名称及其表示方式</h3><p>（1）二维数组的长度&#x2F;行数： </p><p>​二维数组名.length</p><p>（2）二维数组的某一行：</p><p>​二维数组名[行下标]</p><p>​行下标的范围：[0, 二维数组名.length-1]</p><p>（3）某一行的列数：</p><p>​二维数组名[行下标].length</p><p>​       因为二维数组的每一行是一个一维数组</p><p>（4）某一个元素</p><p>​二维数组名[行下标][列下标]</p><h3 id="4-10-3-二维数组的遍历"><a href="#4-10-3-二维数组的遍历" class="headerlink" title="4.10.3  二维数组的遍历"></a>4.10.3  二维数组的遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;二维数组名.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;二维数组名[i].length; j++)&#123;</span><br><span class="line">        System.out.print(二维数组名[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-10-4-数组操作的常见异常"><a href="#4-10-4-数组操作的常见异常" class="headerlink" title="4.10.4 数组操作的常见异常"></a>4.10.4 数组操作的常见异常</h3><h4 id="1-数组越界异常"><a href="#1-数组越界异常" class="headerlink" title="1 数组越界异常"></a>1 数组越界异常</h4><p>观察一下代码，运行后会出现什么结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建数组，赋值3个元素，数组的索引就是0，1，2，没有3索引，因此我们不能访问数组中不存在的索引，程序运行后，将会抛出 <code>ArrayIndexOutOfBoundsException</code>  数组越界异常。在开发中，数组的越界异常是<strong>不能出现</strong>的，一旦出现了，就必须要修改我们编写的代码。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E5%BC%82%E5%B8%B8.jpg"></p><h4 id="2-数组空指针异常"><a href="#2-数组空指针异常" class="headerlink" title="2 数组空指针异常"></a>2 数组空指针异常</h4><p>观察一下代码，运行后会出现什么结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">       </span><br><span class="line">       System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//NullPointerException</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>因为此时数组的每一行还未分配具体存储元素的空间，此时arr[0]是null，此时访问arr[0][0]会抛出<code>NullPointerException</code> 空指针异常。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8.jpg"></p><p><strong>空指针异常在内存图中的表现</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572338767825.png" alt="1572338767825"></p><h3 id="4-10-5-二维数组练习"><a href="#4-10-5-二维数组练习" class="headerlink" title="4.10.5 二维数组练习"></a>4.10.5 二维数组练习</h3><h4 id="1、练习1"><a href="#1、练习1" class="headerlink" title="1、练习1"></a>1、练习1</h4><p>1、请使用二维数组存储如下数据，并遍历显示</p><p> 1</p><p> 2 2</p><p> 3 3 3</p><p> 4 4 4 4</p><p> 5 5 5 5 5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//1、声明一个二维数组，并且确定行数</span></span><br><span class="line"><span class="comment">//因为每一行的列数不同，这里无法直接确定列数</span></span><br><span class="line"><span class="type">int</span>[][]  arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、确定每一行的列数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">arr[0] 的列数是1</span></span><br><span class="line"><span class="comment">arr[1] 的列数是2</span></span><br><span class="line"><span class="comment">arr[2] 的列数是3</span></span><br><span class="line"><span class="comment">arr[3] 的列数是4</span></span><br><span class="line"><span class="comment">arr[4] 的列数是5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">arr[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、确定元素的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;arr[i].length; j++)&#123;</span><br><span class="line">arr[i][j] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、遍历显示</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;arr[i].length; j++)&#123;</span><br><span class="line">System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//1、声明一个二维数组，并且初始化</span></span><br><span class="line">       <span class="type">int</span>[][] arr = &#123;</span><br><span class="line">           &#123;<span class="number">1</span>&#125;,</span><br><span class="line">           &#123;<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">           &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;,</span><br><span class="line">           &#123;<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>&#125;,</span><br><span class="line">           &#123;<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、遍历显示</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;arr[i].length; j++)&#123;</span><br><span class="line">System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//1、声明一个二维数组，并且确定行数</span></span><br><span class="line"><span class="comment">//因为每一行的列数不同，这里无法直接确定列数</span></span><br><span class="line"><span class="type">int</span>[][]  arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="comment">//2、确定每一行的列数</span></span><br><span class="line">arr[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、确定元素的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;arr[i].length; j++)&#123;</span><br><span class="line">arr[i][j] = i+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、练习2"><a href="#2、练习2" class="headerlink" title="2、练习2"></a>2、练习2</h4><p>2、请使用二维数组存储如下数据，并遍历显示</p><p> 1 1 1 1 1</p><p> 2 2 2 2 2</p><p> 3 3 3 3 3</p><p> 4 4 4 4 4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[][] arr = &#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;arr[i].length; j++)&#123;</span><br><span class="line">System.out.print(arr[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//1、声明二维数组，并确定行数和列数</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、确定元素的值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">arr[i][j] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、遍历显示</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;arr[i].length; j++)&#123;</span><br><span class="line">System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、练习3"><a href="#3、练习3" class="headerlink" title="3、练习3"></a>3、练习3</h4><p>3、请使用二维数组存储如下数据，并遍历显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String[][] employees = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;10&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;段誉&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;3000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;13&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;令狐冲&quot;</span>, <span class="string">&quot;32&quot;</span>, <span class="string">&quot;18000&quot;</span>, <span class="string">&quot;15000&quot;</span>, <span class="string">&quot;2000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;任我行&quot;</span>, <span class="string">&quot;23&quot;</span>, <span class="string">&quot;7000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;张三丰&quot;</span>, <span class="string">&quot;24&quot;</span>, <span class="string">&quot;7300&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;12&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;周芷若&quot;</span>, <span class="string">&quot;28&quot;</span>, <span class="string">&quot;10000&quot;</span>, <span class="string">&quot;5000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;赵敏&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;6800&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;12&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;29&quot;</span>, <span class="string">&quot;10800&quot;</span>,<span class="string">&quot;5200&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;13&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;韦小宝&quot;</span>, <span class="string">&quot;30&quot;</span>, <span class="string">&quot;19800&quot;</span>, <span class="string">&quot;15000&quot;</span>, <span class="string">&quot;2500&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;12&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;26&quot;</span>, <span class="string">&quot;9800&quot;</span>, <span class="string">&quot;5500&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;小龙女&quot;</span>, <span class="string">&quot;21&quot;</span>, <span class="string">&quot;6600&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;25&quot;</span>, <span class="string">&quot;7100&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;12&quot;</span>, <span class="string">&quot;12&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>, <span class="string">&quot;27&quot;</span>, <span class="string">&quot;9600&quot;</span>, <span class="string">&quot;4800&quot;</span>&#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>其中”10”代表普通职员，”11”代表程序员，”12”代表设计师，”13”代表架构师</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561529559251.png" alt="1561529559251"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String[][] employees = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;10&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;段誉&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;3000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;13&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;令狐冲&quot;</span>, <span class="string">&quot;32&quot;</span>, <span class="string">&quot;18000&quot;</span>, <span class="string">&quot;15000&quot;</span>, <span class="string">&quot;2000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;任我行&quot;</span>, <span class="string">&quot;23&quot;</span>, <span class="string">&quot;7000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;张三丰&quot;</span>, <span class="string">&quot;24&quot;</span>, <span class="string">&quot;7300&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;12&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;周芷若&quot;</span>, <span class="string">&quot;28&quot;</span>, <span class="string">&quot;10000&quot;</span>, <span class="string">&quot;5000&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;赵敏&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;6800&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;12&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;29&quot;</span>, <span class="string">&quot;10800&quot;</span>,<span class="string">&quot;5200&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;13&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;韦小宝&quot;</span>, <span class="string">&quot;30&quot;</span>, <span class="string">&quot;19800&quot;</span>, <span class="string">&quot;15000&quot;</span>, <span class="string">&quot;2500&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;12&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;26&quot;</span>, <span class="string">&quot;9800&quot;</span>, <span class="string">&quot;5500&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;小龙女&quot;</span>, <span class="string">&quot;21&quot;</span>, <span class="string">&quot;6600&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;11&quot;</span>, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;25&quot;</span>, <span class="string">&quot;7100&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;12&quot;</span>, <span class="string">&quot;12&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>, <span class="string">&quot;27&quot;</span>, <span class="string">&quot;9600&quot;</span>, <span class="string">&quot;4800&quot;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;员工类型\t编号\t姓名\t年龄\t薪资\t奖金\t股票\t&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; employees.length; i++) &#123;</span><br><span class="line"><span class="keyword">switch</span>(employees[i][<span class="number">0</span>])&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;10&quot;</span>:</span><br><span class="line">System.out.print(<span class="string">&quot;普通职员&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;11&quot;</span>:</span><br><span class="line">System.out.print(<span class="string">&quot;程序员&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;12&quot;</span>:</span><br><span class="line">System.out.print(<span class="string">&quot;设计师&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;13&quot;</span>:</span><br><span class="line">System.out.print(<span class="string">&quot;架构师&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; employees[i].length; j++) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span> + employees[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-10-6-二维数组的内存图分析"><a href="#4-10-6-二维数组的内存图分析" class="headerlink" title="4.10.6 二维数组的内存图分析"></a>4.10.6 二维数组的内存图分析</h3><h4 id="1、示例一"><a href="#1、示例一" class="headerlink" title="1、示例一"></a>1、示例一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562112672215.png" alt="1562112672215"></p><h4 id="2、示例二"><a href="#2、示例二" class="headerlink" title="2、示例二"></a>2、示例二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、声明二维数组，并确定行数和列数</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、确定元素的值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">arr[i][j] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562113179785.png" alt="1562113179785"></p><h4 id="3、示例三"><a href="#3、示例三" class="headerlink" title="3、示例三"></a>3、示例三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、声明一个二维数组，并且确定行数</span></span><br><span class="line"><span class="comment">//因为每一行的列数不同，这里无法直接确定列数</span></span><br><span class="line"><span class="type">int</span>[][]  arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、确定每一行的列数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">arr[0] 的列数是1</span></span><br><span class="line"><span class="comment">arr[1] 的列数是2</span></span><br><span class="line"><span class="comment">arr[2] 的列数是3</span></span><br><span class="line"><span class="comment">arr[3] 的列数是4</span></span><br><span class="line"><span class="comment">arr[4] 的列数是5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">arr[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、确定元素的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;arr[i].length; j++)&#123;</span><br><span class="line">arr[i][j] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562113981079.png" alt="1562113981079"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaSE-第4章-数组&quot;&gt;&lt;a href=&quot;#JavaSE-第4章-数组&quot; class=&quot;headerlink&quot; title=&quot;JavaSE_第4章 数组&quot;&gt;&lt;/a&gt;JavaSE_第4章 数组&lt;/h1&gt;&lt;h2 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot;</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第3章 流程控制语句结构</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC3%E7%AB%A0-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E7%BB%93%E6%9E%84/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC3%E7%AB%A0-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E7%BB%93%E6%9E%84/</id>
    <published>2022-07-28T05:03:57.000Z</published>
    <updated>2022-10-16T04:43:25.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaSE-第三章【流程控制语句】"><a href="#JavaSE-第三章【流程控制语句】" class="headerlink" title="JavaSE_第三章【流程控制语句】"></a>JavaSE_第三章【流程控制语句】</h1><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>if else判断语句</li><li>switch选择语句</li><li>for循环语句</li><li>while循环语句</li><li>do…while循环语句</li><li>break</li><li>continue</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><p><input disabled="" type="checkbox"> 掌握键盘输入各种数据类型的值</p></li><li><p><input disabled="" type="checkbox"> 理解if语句的格式和执行流程</p></li><li><p><input disabled="" type="checkbox"> 理解if…else语句的格式和执行流程</p></li><li><p><input disabled="" type="checkbox"> 理解if…else if语句的格式和执行流程</p></li><li><p><input disabled="" type="checkbox"> 理解switch选择语句的格式和执行流程</p></li><li><p><input disabled="" type="checkbox"> 掌握switch选择语句接收的数据类型</p></li><li><p><input disabled="" type="checkbox"> 理解case的穿透性</p></li><li><p><input disabled="" type="checkbox"> 掌握break在switch中的使用</p></li><li><p><input disabled="" type="checkbox"> 掌握default在switch中的使用</p></li><li><p><input disabled="" type="checkbox"> 理解while语句的格式和执行流程</p></li><li><p><input disabled="" type="checkbox"> 了解do…while语句的格式和执行流程</p></li><li><p><input disabled="" type="checkbox"> 理解for语句的格式和执行流程</p></li><li><p><input disabled="" type="checkbox"> 了解跳出语句break，continue的意义</p></li><li><p><input disabled="" type="checkbox"> 理解死循环的执行流程</p></li><li><p><input disabled="" type="checkbox"> 理解循环嵌套的执行流程</p></li></ul><h1 id="第三章-流程控制"><a href="#第三章-流程控制" class="headerlink" title="第三章 流程控制"></a>第三章 流程控制</h1><p>不论哪一种编程语言，都会提供两种基本的流程控制结构：分支结构和循环结构。其中分支结构用于实现根据条件来选择性地执行某段代码，循环结构则用于实现根据循环条件重复执行某段代码。</p><h2 id="3-1-顺序结构"><a href="#3-1-顺序结构" class="headerlink" title="3.1 顺序结构"></a>3.1 顺序结构</h2><p>任何编程语言中最常见的程序结构就是顺序结构。顺序结构就是程序从上到下逐行地执行，中间没有任何判断和跳转。如果main方法的多行代码之间没有任何流程控制，则程序总是从上向下依次执行，排在前面的代码先执行，排在后面的代码后执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">//顺序执行，根据编写的顺序，从上到下运行</span></span><br><span class="line">    System.out.println(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-输入语句"><a href="#3-2-输入语句" class="headerlink" title="3.2 输入语句"></a>3.2 输入语句</h2><p>键盘输入代码的三个步骤：</p><p>1、准备Scanner类型的变量</p><p>2、提示输入xx</p><p>3、接收输入内容</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、准备Scanner类型的变量</span></span><br><span class="line"><span class="comment">//Scanner是一个引用数据类型，它的全名称是java.util.Scanner</span></span><br><span class="line"><span class="comment">//input就是一个引用数据类型的变量了，赋给它的值是一个对象</span></span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);<span class="comment">//System.in默认代表键盘输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、提示输入xx</span></span><br><span class="line">System.out.print(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、接收输入内容</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//列出各种数据类型的输入</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">long</span> <span class="variable">bigNum</span> <span class="operator">=</span> input.nextLong();</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> input.nextBoolean();</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> input.next();</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> input.next().charAt(<span class="number">0</span>);<span class="comment">//先按照字符串接收，然后再取字符串的第一个字符（下标为0）</span></span><br></pre></td></tr></table></figure><h3 id="语法案例演示1："><a href="#语法案例演示1：" class="headerlink" title="语法案例演示1："></a>语法案例演示1：</h3><p>从键盘输入个人信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Day03_Test02_Input</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//这里变量取什么名，下面就用什么.</span></span><br><span class="line"><span class="comment">//例如：这里取名input，下面就用input.</span></span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入姓名：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> input.next();</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入性别：&quot;</span>);</span><br><span class="line"><span class="comment">//input.next()得到字符串，不管你输入几个字符，</span></span><br><span class="line"><span class="comment">//.charAt(0)：从字符串中取出一个字符，(0)表示取第一个字符，(1)表示取第二个字符</span></span><br><span class="line"><span class="comment">//charAt(index)：也是一个方法，从第二个单词开始首字母大写，所以A是大写</span></span><br><span class="line"><span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> input.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入体重：&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">weight</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入是否已婚(true/false)：&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isMarry</span> <span class="operator">=</span> input.nextBoolean();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;姓名：&quot;</span> + name);</span><br><span class="line">System.out.println(<span class="string">&quot;年龄：&quot;</span> + age);</span><br><span class="line">System.out.println(<span class="string">&quot;性别：&quot;</span> + gender);</span><br><span class="line">System.out.println(<span class="string">&quot;体重：&quot;</span> + weight);</span><br><span class="line">System.out.println(<span class="string">&quot;婚否：&quot;</span> + (isMarry?<span class="string">&quot;是&quot;</span>:<span class="string">&quot;否&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法案例演示2：next-与nextLine"><a href="#语法案例演示2：next-与nextLine" class="headerlink" title="语法案例演示2：next()与nextLine()"></a>语法案例演示2：next()与nextLine()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">next()方法：</span></span><br><span class="line"><span class="comment">遇到空格等空白符，就认为输入结束</span></span><br><span class="line"><span class="comment">nextLine()方法：</span></span><br><span class="line"><span class="comment">遇到回车换行，就认为输入结束</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果你在键盘输入过程中，遇到java.util.InputMismatchException，</span></span><br><span class="line"><span class="comment">说明你输入的数据类型与接收数据的变量的类型不匹配</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Day03_Test04_Input2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入姓名：&quot;</span>);</span><br><span class="line"><span class="comment">//String name = input.next();//张 三  只能接收张，后面的空格和三无法接收，被下面的输入接收</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line">System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> input.nextInt();<span class="comment">//23回车换行  这里只接收23，回车换行被下面的输入接收</span></span><br><span class="line">input.nextLine();<span class="comment">//读取23后面的回车换行，但是这个不需要接收，只有下面一个输入是nextLine()情况下才需要这样，如果下面的输入是next()或者是nextInt(),nextDouble()等就不需要这么干</span></span><br><span class="line">System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入电话号码：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">tel</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line">System.out.println(<span class="string">&quot;tel = &quot;</span> + tel);</span><br><span class="line">        ★<span class="comment">//此部分输出不出来，只有注释掉才能正确输出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-分支结构：if语句第一种格式"><a href="#3-3-分支结构：if语句第一种格式" class="headerlink" title="3.3 分支结构：if语句第一种格式"></a>3.3 分支结构：if语句第一种格式</h2><ul><li><strong>if语句第一种格式：</strong> if</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)｛</span><br><span class="line">  语句体;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><ul><li><p><strong>执行流程</strong></p><ul><li><p>首先判断条件表达式看其结果是true还是false</p></li><li><p>如果是true就执行语句体</p></li><li><p>如果是false就不执行语句体</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/if.jpg"></p></li></ul></li></ul><h3 id="语法案例演示1：-1"><a href="#语法案例演示1：-1" class="headerlink" title="语法案例演示1："></a>语法案例演示1：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    <span class="comment">// 定义两个变量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//变量使用if判断</span></span><br><span class="line">    <span class="keyword">if</span> (a == b)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;a等于b&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == c)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;a等于c&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h3 id="语法案例演示2"><a href="#语法案例演示2" class="headerlink" title="语法案例演示2"></a>语法案例演示2</h3><p>案例：从键盘输入年份，请输出该年的2月份的总天数。闰年2月份29天，平年28天。</p><p>闰年：<br>（1）能被4整除，不能被100整除<br>（2）能被400整除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;请输入年份：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> <span class="number">28</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span> || year%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">days++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(year + <span class="string">&quot;年的2月份共&quot;</span> + days + <span class="string">&quot;天&quot;</span>);</span><br><span class="line">input.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;请输入年份：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> <span class="number">28</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span> || year%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">days++;<span class="comment">//当语句块只有一句时，可以省略&#123;&#125;，但是建议还是保留比较靠谱</span></span><br><span class="line"></span><br><span class="line">System.out.println(year + <span class="string">&quot;年的2月份共&quot;</span> + days + <span class="string">&quot;天&quot;</span>);</span><br><span class="line">input.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-分支结构：if语句第二种格式"><a href="#3-4-分支结构：if语句第二种格式" class="headerlink" title="3.4 分支结构：if语句第二种格式"></a>3.4 分支结构：if语句第二种格式</h2><ul><li><strong>if语句第二种格式：</strong> if…else</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式) &#123; </span><br><span class="line">  语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>执行流程</p><ul><li><p>首先判断关系表达式看其结果是true还是false</p></li><li><p>如果是true就执行语句体1</p></li><li><p>如果是false就执行语句体2</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/ifelse.jpg"></p></li></ul></li></ul><h3 id="语法案例演示1：-2"><a href="#语法案例演示1：-2" class="headerlink" title="语法案例演示1："></a>语法案例演示1：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">// 判断给定的数据是奇数还是偶数</span></span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;a是偶数&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;a是奇数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法案例演示2：if语句和三元运算符的互换"><a href="#语法案例演示2：if语句和三元运算符的互换" class="headerlink" title="语法案例演示2：if语句和三元运算符的互换"></a>语法案例演示2：if语句和三元运算符的互换</h3><p>在某些简单的应用中，if语句是可以和三元运算符互换使用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//定义变量，保存a和b的较大值</span></span><br><span class="line">    <span class="type">int</span> max;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">      max = a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      max = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可以上述功能改写为三元运算符形式</span></span><br><span class="line">    max = a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//定义变量，保存a和b的较大值</span></span><br><span class="line">    <span class="type">int</span> max;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b) </span><br><span class="line">      max = a;<span class="comment">//当语句块只有一个语句时，可以省略&#123;&#125;，但是不建议省略&#123;&#125;</span></span><br><span class="line">     <span class="keyword">else</span> </span><br><span class="line">      max = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习：求出最大值"><a href="#练习：求出最大值" class="headerlink" title="练习：求出最大值"></a>练习：求出最大值</h3><p>从键盘输入三个数，求出最大值，用单分支if和双分支if..else来计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Day03_Test08_MaxValueExer</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入第1个整数：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入第2个整数：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入第3个整数：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int max;//存储三个数中的最大值</span></span><br><span class="line"><span class="comment">if(a &gt; b)&#123;</span></span><br><span class="line"><span class="comment">max = a;</span></span><br><span class="line"><span class="comment">&#125;else&#123;</span></span><br><span class="line"><span class="comment">max = b;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if(c &gt; max)&#123;</span></span><br><span class="line"><span class="comment">max = c;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> a&gt;b ? a : b;</span><br><span class="line">max = max&gt;c ? max : c;</span><br><span class="line">System.out.println(a+<span class="string">&quot;,&quot;</span>+b+<span class="string">&quot;,&quot;</span>+c+<span class="string">&quot;中最大的是：&quot;</span>+ max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-分支结构：if语句第三种格式"><a href="#3-5-分支结构：if语句第三种格式" class="headerlink" title="3.5 分支结构：if语句第三种格式"></a>3.5 分支结构：if语句第三种格式</h2><ul><li><strong>if语句第三种格式：</strong> if…else if …else</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (判断条件<span class="number">1</span>) &#123;</span><br><span class="line">  执行语句<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (判断条件<span class="number">2</span>) &#123;</span><br><span class="line">  执行语句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (判断条件n) &#123;</span><br><span class="line"> 执行语句n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  执行语句n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>执行流程</strong></p><ul><li><p>首先判断关系表达式1看其结果是true还是false</p></li><li><p>如果是true就执行语句体1，然后结束当前多分支</p></li><li><p>如果是false就继续判断关系表达式2看其结果是true还是false</p></li><li><p>如果是true就执行语句体2，然后结束当前多分支</p></li><li><p>如果是false就继续判断关系表达式…看其结果是true还是false</p></li><li><p>…</p></li><li><p>如果没有任何关系表达式为true，就执行语句体n+1，然后结束当前多分支。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/ifelseif.jpg"></p></li></ul></li></ul><h3 id="语法案例演示1：-3"><a href="#语法案例演示1：-3" class="headerlink" title="语法案例演示1："></a>语法案例演示1：</h3><p>计算如下函数：x和y的关系满足如下：<br>（1）x&gt;&#x3D;3；         y &#x3D; 2x + 1;<br>（2）-1&lt;&#x3D;x&lt;3；   y &#x3D; 2x;<br>（3）x&lt;-1；          y &#x3D; 2x – 1;<br>从键盘输入x的值，计算出y的值并输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入x的值：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;= <span class="number">3</span>) &#123;</span><br><span class="line">      y = <span class="number">2</span> * x + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= -<span class="number">1</span> &amp;&amp; x &lt; <span class="number">3</span>) &#123;</span><br><span class="line">      y = <span class="number">2</span> * x;</span><br><span class="line">    &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">      y = <span class="number">2</span> * x - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;y的值是：&quot;</span>+y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入x的值：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;= <span class="number">3</span>) &#123;</span><br><span class="line">      y = <span class="number">2</span> * x + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= -<span class="number">1</span>) &#123;</span><br><span class="line">      y = <span class="number">2</span> * x;</span><br><span class="line">    &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">      y = <span class="number">2</span> * x - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;y的值是：&quot;</span>+y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561700798198.png" alt="1561700798198"></p><p><img src="/img/1561700825016.png" alt="1561700825016"></p><h3 id="语法案例演示2："><a href="#语法案例演示2：" class="headerlink" title="语法案例演示2："></a>语法案例演示2：</h3><ul><li>通过指定考试成绩，判断学生等级<ul><li>90-100      优秀</li><li>80-89        好</li><li>70-79        良</li><li>60-69        及格</li><li>60以下    不及格</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">89</span>；</span><br><span class="line">    <span class="keyword">if</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩是错误的&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">90</span> &amp;&amp; score&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于优秀&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span> &amp;&amp; score&lt;<span class="number">90</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于好&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">70</span> &amp;&amp; score&lt;<span class="number">80</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于良&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">60</span> &amp;&amp; score&lt;<span class="number">70</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于及格&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于不及格&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561436569004.png" alt="1561436569004"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">89</span>;</span><br><span class="line">    <span class="keyword">if</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩是错误的&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">90</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于优秀&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于好&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">70</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于良&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于及格&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于不及格&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561437387616.png" alt="1561437387616"></p><h2 id="3-6-分支结构：if-else嵌套"><a href="#3-6-分支结构：if-else嵌套" class="headerlink" title="3.6  分支结构：if..else嵌套"></a>3.6  分支结构：if..else嵌套</h2><p>在if的语句块中，或者是在else语句块中，<br>又包含了另外一个条件判断（可以是单分支、双分支、多分支）</p><p>执行的特点：<br>（1）如果是嵌套在if语句块中的<br>只有当外部的if条件满足，才会去判断内部的条件<br>（2）如果是嵌套在else语句块中的<br>只有当外部的if条件不满足，进入else后，才会去判断内部的条件</p><h3 id="语法案例演示1：-4"><a href="#语法案例演示1：-4" class="headerlink" title="语法案例演示1："></a>语法案例演示1：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">89</span>;</span><br><span class="line">    <span class="keyword">if</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩是错误的&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(score&gt;=<span class="number">90</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于优秀&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于好&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">70</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于良&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于及格&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于不及格&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//省略&#123;&#125;的情况，else中嵌套了一个完整的多分支结构，也算是一个语句，称为复合语句，所以也可以省略&#123;&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">89</span>;</span><br><span class="line">    <span class="keyword">if</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>)</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩是错误的&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(score&gt;=<span class="number">90</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于优秀&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于好&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">70</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于良&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于及格&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你的成绩属于不及格&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法案例演示2：-1"><a href="#语法案例演示2：-1" class="headerlink" title="语法案例演示2："></a>语法案例演示2：</h3><p>从键盘输入一个年份，和月份，输出该年份该月的总天数</p><p>要求：年份为正数，月份1-12</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//从键盘输入一个年份，和月份</span></span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;年份：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;月份：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(year&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(month&gt;=<span class="number">1</span> &amp;&amp; month&lt;=<span class="number">12</span>)&#123;</span><br><span class="line"><span class="comment">//合法的情况</span></span><br><span class="line"><span class="type">int</span> days;</span><br><span class="line"><span class="keyword">if</span>(month==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span> || year%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">days = <span class="number">29</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">days = <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(month==<span class="number">4</span> || month==<span class="number">6</span>  || month==<span class="number">9</span> || month==<span class="number">11</span>)&#123;</span><br><span class="line">days = <span class="number">30</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">days = <span class="number">31</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(year+<span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月有&quot;</span> + days +<span class="string">&quot;天&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;月份输入不合法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;年份输入不合法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-分支结构：switch选择结构"><a href="#3-7-分支结构：switch选择结构" class="headerlink" title="3.7 分支结构：switch选择结构"></a>3.7 分支结构：switch选择结构</h2><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">1</span>:</span><br><span class="line">        语句块<span class="number">1</span>;</span><br><span class="line">        【<span class="keyword">break</span>;】</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">2</span>:</span><br><span class="line">        语句块<span class="number">2</span>;</span><br><span class="line">        【<span class="keyword">break</span>;】   </span><br><span class="line">    。。。</span><br><span class="line">   【<span class="keyword">default</span>:</span><br><span class="line">        语句块n+<span class="number">1</span>;</span><br><span class="line">        【<span class="keyword">break</span>;】</span><br><span class="line">     】</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程：</p><p>（1）入口</p><p>①当switch(表达式)的值与case后面的某个常量值匹配，就从这个case进入；</p><p>②当switch(表达式)的值与case后面的所有常量值都不匹配，寻找default分支进入;不管default在哪里</p><p>（2）一旦从“入口”进入switch，就会顺序往下执行，直到遇到“出口”，即可能发生贯穿</p><p>（3）出口</p><p>①自然出口：遇到了switch的结束</p><p>②中断出口：遇到了break等</p><blockquote><p>注意：</p><p>（1）switch(表达式)的值的类型，只能是：4种基本数据类型（byte,short,int,char），两种引用数据类型（JDK1.5之后枚举、JDK1.7之后String）</p><p>（2）case后面必须是常量值，而且不能重复</p></blockquote><h3 id="语法案例演示1：-5"><a href="#语法案例演示1：-5" class="headerlink" title="语法案例演示1："></a>语法案例演示1：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchDemo01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//定义指定的星期</span></span><br><span class="line"><span class="type">int</span> <span class="variable">weekday</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//switch语句实现选择</span></span><br><span class="line"><span class="keyword">switch</span>(weekday) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;你的数字有误&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法案例演示2：case的穿透性"><a href="#语法案例演示2：case的穿透性" class="headerlink" title="语法案例演示2：case的穿透性"></a>语法案例演示2：case的穿透性</h3><p>在switch语句中，如果case的后面不写break，将出现穿透现象，也就是一旦匹配成功，不会在判断下一个case的值，直接向后运行，直到遇到break或者整个switch语句结束，switch语句执行终止。</p><p>练习：根据指定的月份输出对应季节（if语句）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 需求：定义一个月份，输出该月份对应的季节。</span></span><br><span class="line"><span class="comment"> * 一年有四季</span></span><br><span class="line"><span class="comment"> * 3,4,5春季</span></span><br><span class="line"><span class="comment"> * 6,7,8夏季</span></span><br><span class="line"><span class="comment"> * 9,10,11秋季</span></span><br><span class="line"><span class="comment"> * 12,1,2冬季</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析：</span></span><br><span class="line"><span class="comment"> * A:指定一个月份</span></span><br><span class="line"><span class="comment"> * B:判断该月份是几月,根据月份输出对应的季节</span></span><br><span class="line"><span class="comment"> * if</span></span><br><span class="line"><span class="comment"> * switch</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchTest01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//指定一个月份</span></span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if (month == 1) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;冬季&quot;);</span></span><br><span class="line"><span class="comment">&#125; else if (month == 2) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;冬季&quot;);</span></span><br><span class="line"><span class="comment">&#125; else if (month == 3) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;春季&quot;);</span></span><br><span class="line"><span class="comment">&#125; else if (month == 4) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;春季&quot;);</span></span><br><span class="line"><span class="comment">&#125; else if (month == 5) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;春季&quot;);</span></span><br><span class="line"><span class="comment">&#125; else if (month == 6) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;夏季&quot;);</span></span><br><span class="line"><span class="comment">&#125; else if (month == 7) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;夏季&quot;);</span></span><br><span class="line"><span class="comment">&#125; else if (month == 8) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;夏季&quot;);</span></span><br><span class="line"><span class="comment">&#125; else if (month == 9) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;秋季&quot;);</span></span><br><span class="line"><span class="comment">&#125; else if (month == 10) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;秋季&quot;);</span></span><br><span class="line"><span class="comment">&#125; else if (month == 11) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;秋季&quot;);</span></span><br><span class="line"><span class="comment">&#125; else if (mouth == 12) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;冬季&quot;);</span></span><br><span class="line"><span class="comment">        &#125; else &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;你输入的月份有误&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进版</span></span><br><span class="line"><span class="keyword">if</span> ((month == <span class="number">1</span>) || (month == <span class="number">2</span>) || (month == <span class="number">12</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((month == <span class="number">3</span>) || (month == <span class="number">4</span>) || (month == <span class="number">5</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((month == <span class="number">6</span>) || (month == <span class="number">7</span>) || (month == <span class="number">8</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((month == <span class="number">9</span>) || (month == <span class="number">10</span>) || (month == <span class="number">11</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你输入的月份有误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：根据指定的月份输出对应季节（switch语句）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 需求：指定一个月份，输出该月份对应的季节。</span></span><br><span class="line"><span class="comment"> * 一年有四季</span></span><br><span class="line"><span class="comment"> * 3,4,5春季</span></span><br><span class="line"><span class="comment"> * 6,7,8夏季</span></span><br><span class="line"><span class="comment"> * 9,10,11秋季</span></span><br><span class="line"><span class="comment"> * 12,1,2冬季</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析：</span></span><br><span class="line"><span class="comment"> * A:指定一个月份</span></span><br><span class="line"><span class="comment"> * B:判断该月份是几月,根据月份输出对应的季节</span></span><br><span class="line"><span class="comment"> * if</span></span><br><span class="line"><span class="comment"> * switch</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchTest02</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//指定一个月份</span></span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">switch(month) &#123;</span></span><br><span class="line"><span class="comment">            case 1:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;冬季&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 2:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;冬季&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 3:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;春季&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 4:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;春季&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 5:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;春季&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 6:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;夏季&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 7:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;夏季&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 8:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;夏季&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 9:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;秋季&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 10:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;秋季&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 11:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;秋季&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 12:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;冬季&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            default:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;你输入的月份有误&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改进版 </span></span><br><span class="line"><span class="keyword">switch</span>(month) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;你输入的月份有误&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常见错误实现1："><a href="#常见错误实现1：" class="headerlink" title="常见错误实现1："></a>常见错误实现1：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>:<span class="comment">//3|4|5 用了位运算符，11 | 100 | 101结果是 111是7</span></span><br><span class="line">System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>:<span class="comment">//6|7|8用了位运算符，110 | 111 | 1000结果是1111是15</span></span><br><span class="line">System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>|<span class="number">10</span>|<span class="number">11</span>:<span class="comment">//9|10|11用了位运算符，1001 | 1010 | 1011结果是1011是11</span></span><br><span class="line">System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>|<span class="number">1</span>|<span class="number">2</span>:<span class="comment">//12|1|2 用了位运算符，1100 | 1 | 10 结果是1111，是15</span></span><br><span class="line">System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;输入有误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常见错误实现2："><a href="#常见错误实现2：" class="headerlink" title="常见错误实现2："></a>常见错误实现2：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译不通过</span></span><br><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>,<span class="number">1</span>,<span class="number">2</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;输入有误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Switch 表达式也是作为预览语言功能的第一个语言改动被引入Java12 中，开始支持如下写法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(month) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> -&gt; System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span> -&gt; System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span> -&gt; System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>,<span class="number">1</span>,<span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line"><span class="keyword">default</span>-&gt;System.out.println(<span class="string">&quot;月份输入有误！&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">★★★★</span><br></pre></td></tr></table></figure><h2 id="3-8-循环结构：while循环"><a href="#3-8-循环结构：while循环" class="headerlink" title="3.8 循环结构：while循环"></a>3.8 循环结构：while循环</h2><h3 id="需求：打印10次的HelloWorld"><a href="#需求：打印10次的HelloWorld" class="headerlink" title="需求：打印10次的HelloWorld"></a>需求：打印10次的HelloWorld</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//控制台输出10次HelloWorld，不使用循环</span></span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用循环改进，循环10次</span></span><br><span class="line"><span class="comment">//定义变量从10开始，循环条件为&lt;=10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= <span class="number">10</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、while循环语句标准格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (循环条件语句①) &#123;</span><br><span class="line">    循环体语句②；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">     循环体语句;<span class="comment">//如果此时循环体中没有跳出循环的语句，也是死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>while(循环条件)中循环条件必须是boolean类型</p></blockquote><p>执行流程：</p><ul><li>第一步：执行循环条件语句①，看循环条件语句的值是true，还是false；<ul><li>如果是true，执行第二步；</li><li>如果是false，循环语句中止，循环不再执行。</li></ul></li><li>第二步：执行循环体语句②；</li><li>第三步：循环体语句执行完后，重新从第一步开始再执行一遍</li></ul><p>2、while循环语句扩展格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句①；</span><br><span class="line"><span class="keyword">while</span> (循环条件语句②) &#123;</span><br><span class="line">    循环体语句③；</span><br><span class="line">    迭代语句④；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ul><li>第一步：执行初始化语句①，完成循环变量的初始化；</li><li>第二步：执行循环条件语句②，看循环条件语句的值是true，还是false；<ul><li>如果是true，执行第三步；</li><li>如果是false，循环语句中止，循环不再执行。</li></ul></li><li>第三步：执行循环体语句③</li><li>第四步：执行迭代语句④，针对循环变量重新赋值</li><li>第五步：根据循环变量的新值，重新从第二步开始再执行一遍</li></ul><h3 id="语法演示案例1：求1加到100的和"><a href="#语法演示案例1：求1加到100的和" class="headerlink" title="语法演示案例1：求1加到100的和"></a>语法演示案例1：求1加到100的和</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><h2 id="3-9-循环结构：do…while循环"><a href="#3-9-循环结构：do…while循环" class="headerlink" title="3.9 循环结构：do…while循环"></a>3.9 循环结构：do…while循环</h2><p>1、do…while循环语句标准格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环体语句①；</span><br><span class="line">&#125; <span class="keyword">while</span> (循环条件语句②)；</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>（1）while(循环条件)中循环条件必须是boolean类型</p><p>（2）do{}while();最后有一个分号</p><p>（3）do…while结构的循环体语句是至少会执行一次，这个和for和while是不一样的</p></blockquote><p>执行流程：</p><ul><li>第一步：执行循环体语句①；</li><li>第二步：执行循环条件语句②，看循环条件语句的值是true，还是false；<ul><li>如果是true，执行第三步；</li><li>如果是false，循环语句终止，循环不再执行。</li></ul></li><li>第三步：循环条件语句执行完后，重新从第一步开始再执行一遍</li></ul><p>2、do…while循环语句扩展格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句①</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环体语句②；</span><br><span class="line">    迭代语句③；</span><br><span class="line">&#125; <span class="keyword">while</span> (循环条件语句④)；</span><br></pre></td></tr></table></figure><p>执行流程：</p><ul><li>第一步：执行初始化语句①，完成循环变量的初始化；</li><li>第二步：执行循环体语句②；</li><li>第三步：执行迭代语句③，针对循环变量重新赋值；</li><li>第四步：执行循环条件语句④，看循环条件语句的值是true，还是false；<ul><li>如果是true，根据循环变量的新值，重新从第二步开始再执行一遍；</li><li>如果是false，循环语句中止，循环不再执行。</li></ul></li></ul><h3 id="语法演示案例2：输入密码和确认密码，比较是否一致"><a href="#语法演示案例2：输入密码和确认密码，比较是否一致" class="headerlink" title="语法演示案例2：输入密码和确认密码，比较是否一致"></a>语法演示案例2：输入密码和确认密码，比较是否一致</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入密码和确认密码，如果两次密码一致则显示注册成功，两次密码不一致则提示重新输入</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">   <span class="type">String</span> <span class="variable">pwdOne</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">pwdTwo</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">       pwdOne = input.next();</span><br><span class="line">       System.out.println(<span class="string">&quot;请输入确认密码&quot;</span>);</span><br><span class="line">       pwdTwo = input.next();</span><br><span class="line">       <span class="keyword">if</span>(!pwdOne.equals(pwdTwo))&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;两次密码不一致，请重新输入&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;<span class="keyword">while</span>(!pwdOne.equals(pwdTwo));</span><br><span class="line">System.out.println(<span class="string">&quot;注册成功&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="练习：猜数"><a href="#练习：猜数" class="headerlink" title="练习：猜数"></a>练习：猜数</h3><p>随机生成一个100以内的数，猜数字游戏</p><p>从键盘输入数，如果大了提示，大了，如果小了，提示小了，如果对了，就不再猜了，并统计一共猜了多少次</p><p>提示：随机数  Math.random()</p><p>double num &#x3D; Math.random();&#x2F;&#x2F; [0,1)的小数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//随机生成一个100以内的整数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Math.random() ==&gt; [0,1)的小数</span></span><br><span class="line"><span class="comment">Math.random()* 100 ==&gt; [0,100)的小数</span></span><br><span class="line"><span class="comment">(int)(Math.random()* 100) ==&gt; [0,100)的整数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.random()* <span class="number">100</span>);</span><br><span class="line"><span class="comment">//System.out.println(num);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个变量，用来存储猜的次数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line"><span class="type">int</span> guess;<span class="comment">//提升作用域</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;请输入100以内的整数：&quot;</span>);</span><br><span class="line">guess = input.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入一次，就表示猜了一次</span></span><br><span class="line">count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(guess &gt; num)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;大了&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(guess &lt; num)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;小了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(num != guess);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;一共猜了：&quot;</span> + count+<span class="string">&quot;次&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-10-循环语句：for循环"><a href="#3-10-循环语句：for循环" class="headerlink" title="3.10 循环语句：for循环"></a>3.10 循环语句：for循环</h2><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复执行这个循环体时，需要通过修改循环变量使得循环判断条件为false，从而结束循环，否则循环将一直执行下去，形成死循环。</p><p>1、for循环语句格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句①; 循环条件语句②; 迭代语句④)&#123;</span><br><span class="line">循环体语句③</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    循环体语句块；<span class="comment">//如果循环体中没有跳出循环体的语句，那么就是死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>（1）for(;;)中的两个；是不能多也不能少</p><p>（2）循环条件必须是boolean类型</p><p>（3）如果循环条件语句②省略的话，就默认为循环条件成立</p></blockquote><p>执行流程：</p><ul><li>第一步：执行初始化语句①，完成循环变量的初始化；</li><li>第二步：执行循环条件语句②，看循环条件语句的值是true，还是false；<ul><li>如果是true，执行第三步；</li><li>如果是false，循环语句中止，循环不再执行。</li></ul></li><li>第三步：执行循环体语句③</li><li>第四步：执行迭代语句④，针对循环变量重新赋值</li><li>第五步：根据循环变量的新值，重新从第二步开始再执行一遍</li></ul><h3 id="语法演示案例3：求出1-100之间偶数和"><a href="#语法演示案例3：求出1-100之间偶数和" class="headerlink" title="语法演示案例3：求出1-100之间偶数和"></a>语法演示案例3：求出1-100之间偶数和</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 练习：求出1-100之间偶数和</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析：</span></span><br><span class="line"><span class="comment"> * 1.定义求和变量，初始化值是0</span></span><br><span class="line"><span class="comment"> * 2.获取1-100之间的数据，用for循环实现</span></span><br><span class="line"><span class="comment"> * 3.把获取到的数据进行判断，看是否是偶数</span></span><br><span class="line"><span class="comment"> * 如果是，就累加</span></span><br><span class="line"><span class="comment"> * 4.输出求和结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest03</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//定义求和变量，初始化值是0</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取1-100之间的数据，用for循环实现</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">1</span>; x&lt;=<span class="number">100</span>; x++) &#123;</span><br><span class="line"><span class="comment">//把获取到的数据进行判断，看是否是偶数</span></span><br><span class="line"><span class="keyword">if</span>(x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">sum += x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出求和结果</span></span><br><span class="line">System.out.println(<span class="string">&quot;sum:&quot;</span>+sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-11-循环语句的区别"><a href="#3-11-循环语句的区别" class="headerlink" title="3.11 循环语句的区别"></a>3.11 循环语句的区别</h2><ul><li><p>从循环次数角度分析</p><ul><li>do…while循环至少执行一次循环体语句</li><li>for和while循环先循环条件语句是否成立，然后决定是否执行循环体，至少执行零次循环体语句</li></ul></li><li><p>从循环变量的生命周期角度分析</p><ul><li>for循环的循环变量在for()中声明的，在循环语句结束后，不可以被访问；</li><li>while和do…while循环的循环变量因为在外面声明的，所以while和do…while结束后可以被继续使用的；</li></ul></li><li><p>如何选择</p><ul><li>遍历有明显的循环次数（范围）的需求，选择for循环</li><li>遍历没有明显的循环次数（范围）的需求，循环while循环</li><li>如果循环体语句块至少执行一次，可以考虑使用do…while循环</li><li>本质上：三种循环之间是可以互相转换的，都能实现循环的功能</li></ul></li><li><p>三种循环结构都具有四要素：</p><ul><li>（1）循环变量的初始化表达式</li><li>（2）循环条件</li><li>（3）循环变量的修改的迭代表达式</li><li>（4）循环体语句块</li></ul></li></ul><h2 id="3-12-控制语句"><a href="#3-12-控制语句" class="headerlink" title="3.12  控制语句"></a>3.12  控制语句</h2><h3 id="3-12-1-break"><a href="#3-12-1-break" class="headerlink" title="3.12.1 break"></a>3.12.1 break</h3><ul><li><strong>使用场景：终止switch或者当前循环</strong><ul><li><p>在选择结构switch语句中</p></li><li><p>在循环语句中</p></li><li><p>离开使用场景的存在是没有意义的</p></li></ul></li></ul><h4 id="语法案例演示1：判断某个数是否是素数"><a href="#语法案例演示1：判断某个数是否是素数" class="headerlink" title="语法案例演示1：判断某个数是否是素数"></a>语法案例演示1：判断某个数是否是素数</h4><p>案例：从键盘输入一个大于1的自然数，判断它是否是素数<br>提示：素数是指大于1的自然数中，除了1和它本身以外不能再有其他因数的自然数，即某个素数n，在[2,n-1]范围内没有其他自然数可以把n整除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test07BreakExer1</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//true是常量，常量是编译期间就可以确定的值</span></span><br><span class="line">System.out.print(<span class="string">&quot;请输入一个大于1的自然数：&quot;</span>);</span><br><span class="line">num = input.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;num = &quot;</span> + num);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//假设num是素数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断它是否是素数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;num; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(num % i ==<span class="number">0</span>)&#123;<span class="comment">//num被某个i整除了，num就不是素数</span></span><br><span class="line">System.out.println(num + <span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//找到其中一个可以把num整除的数，就可以结束了，因为num已经可以判定不是素数了</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有把[2,num-1]之间的所有数都检查过了，才能下定结论，num是素数</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">System.out.println(num + <span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test07BreakExer1_2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//true是常量，常量是编译期间就可以确定的值</span></span><br><span class="line">System.out.print(<span class="string">&quot;请输入一个大于1的自然数：&quot;</span>);</span><br><span class="line">num = input.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;num = &quot;</span> + num);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//假设num是素数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断它是否是素数</span></span><br><span class="line"><span class="comment">//在[2, num的平方根]之间如果都没有一个自然数可以把num整除，那么num就是素数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">不是素数</span></span><br><span class="line"><span class="comment">9的平方根是3，除1和它本身外的因数：3</span></span><br><span class="line"><span class="comment">16的平方根是4，除1和它本身外的因数：2,4,8</span></span><br><span class="line"><span class="comment">25的平方根是5，除1和它本身外的因数：5</span></span><br><span class="line"><span class="comment">是素数</span></span><br><span class="line"><span class="comment">7的平方根是2.64，除1和它本身外的只需要判断2，如果2不是，那么就不是</span></span><br><span class="line"><span class="comment">无须判断，3,4,5,6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=Math.sqrt(num); i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(num % i ==<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(num + <span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(num + (flag?<span class="string">&quot;是&quot;</span>:<span class="string">&quot;不是&quot;</span>) + <span class="string">&quot;素数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="语法案例演示2：统计正数、负数个数"><a href="#语法案例演示2：统计正数、负数个数" class="headerlink" title="语法案例演示2：统计正数、负数个数"></a>语法案例演示2：统计正数、负数个数</h4><p>案例：从键盘输入不断输入整数，输入0表示结束，统计一共有几个正数、负数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">positive</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">negative</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;请输入整数（0）结束：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">positive++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">negative++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;正数：&quot;</span> + positive + <span class="string">&quot;，负数：&quot;</span> + negative);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="语法案例演示3：break同时存在switch和循环中"><a href="#语法案例演示3：break同时存在switch和循环中" class="headerlink" title="语法案例演示3：break同时存在switch和循环中"></a>语法案例演示3：break同时存在switch和循环中</h4><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;ATM&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>    1、存款<br>    2、取款<br>    3、显示余额<br>    4、退出<br>请选择：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">java.util.<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个变量表示余额</span></span><br><span class="line"><span class="type">double</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(flag)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;=========ATM=======&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;\t1、存款&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;\t2、取款&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;\t3、显示余额&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;\t4、退出&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">select</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(select)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.print(<span class="string">&quot;存款的金额：&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line">balance += money;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.print(<span class="string">&quot;取款的金额：&quot;</span>);</span><br><span class="line">money = input.nextDouble();</span><br><span class="line">balance -= money;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;现在的余额：&quot;</span> + balance);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//只能结束switch</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-12-2-continue"><a href="#3-12-2-continue" class="headerlink" title="3.12.2 continue"></a>3.12.2 continue</h3><ul><li><strong>使用场景：结束本次循环，继续下一次的循环</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//需求:不打印3的倍数</span></span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习：打印1-100之间的整数，跳过7的倍数和7结尾的数"><a href="#练习：打印1-100之间的整数，跳过7的倍数和7结尾的数" class="headerlink" title="练习：打印1-100之间的整数，跳过7的倍数和7结尾的数"></a>练习：打印1-100之间的整数，跳过7的倍数和7结尾的数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//打印1-100之间的整数，跳过7的倍数和7结尾的数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">7</span>==<span class="number">0</span> || i%<span class="number">10</span>==<span class="number">7</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-13-嵌套循环"><a href="#3-13-嵌套循环" class="headerlink" title="3.13 嵌套循环"></a>3.13 嵌套循环</h2><ul><li><strong>所谓嵌套循环</strong>，是指一个循环的循环体是另一个循环。比如for循环里面还有一个for循环，就是嵌套循环。总共的循环次数&#x3D;外循环次数*内循环次数。当然可以是三种循环任意互相嵌套。</li><li><strong>嵌套循环格式：</strong></li></ul><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句①; 循环条件语句②; 迭代语句⑦) &#123;</span><br><span class="line">    <span class="keyword">for</span>(初始化语句③; 循环条件语句④; 迭代语句⑥) &#123;</span><br><span class="line">      循环体语句⑤;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法案例演示1：打印5行5列矩形"><a href="#语法案例演示1：打印5行5列矩形" class="headerlink" title="语法案例演示1：打印5行5列矩形"></a>语法案例演示1：打印5行5列矩形</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法案例演示2：打印5行直角三角形"><a href="#语法案例演示2：打印5行直角三角形" class="headerlink" title="语法案例演示2：打印5行直角三角形"></a>语法案例演示2：打印5行直角三角形</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">123</span></span><br><span class="line"><span class="comment">1234</span></span><br><span class="line"><span class="comment">12345</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//外循环控制行数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="comment">//内循环控制每一行打印的数字</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当i=1，外循环第1次，第1行，j=1</span></span><br><span class="line"><span class="comment">当i=2，外循环第2次，第2行，j=1,2</span></span><br><span class="line"><span class="comment">当i=3，外循环第3次，第3行，j=1,2,3</span></span><br><span class="line"><span class="comment">当i=4，外循环第4次，第4行，j=1,2,3,4</span></span><br><span class="line"><span class="comment">当i=5，外循环第5次，第5行，j=1,2,3,4,5</span></span><br><span class="line"><span class="comment">j=1,j&lt;=i</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=i; j++)&#123;</span><br><span class="line">System.out.print(j);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习2："><a href="#练习2：" class="headerlink" title="练习2："></a>练习2：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">22</span></span><br><span class="line"><span class="comment">333</span></span><br><span class="line"><span class="comment">4444</span></span><br><span class="line"><span class="comment">55555</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="comment">//内循环控制每一行打印的数字</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当i=1，外循环第1次，第1行，1，    1个i，j=1</span></span><br><span class="line"><span class="comment">当i=2，外循环第2次，第2行，222个i，j=1,2</span></span><br><span class="line"><span class="comment">当i=3，外循环第3次，第3行，3333个i，j=1,2,3</span></span><br><span class="line"><span class="comment">当i=4，外循环第4次，第4行，44444个i，j=1,2,3,4</span></span><br><span class="line"><span class="comment">当i=5，外循环第5次，第5行，555555个i，j=1,2,3,4,5</span></span><br><span class="line"><span class="comment">说明，打印的是i的值，打印几个i</span></span><br><span class="line"><span class="comment">j=1,j&lt;=i</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=i; j++)&#123;</span><br><span class="line">System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaSE-第三章【流程控制语句】&quot;&gt;&lt;a href=&quot;#JavaSE-第三章【流程控制语句】&quot; class=&quot;headerlink&quot; title=&quot;JavaSE_第三章【流程控制语句】&quot;&gt;&lt;/a&gt;JavaSE_第三章【流程控制语句】&lt;/h1&gt;&lt;h2 id=&quot;今</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第2章 Java基础语法</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC2%E7%AB%A0-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC2%E7%AB%A0-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2022-07-28T05:03:27.000Z</published>
    <updated>2022-10-16T04:43:25.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaSE-第2章-Java基础语法"><a href="#JavaSE-第2章-Java基础语法" class="headerlink" title="JavaSE_第2章 Java基础语法"></a>JavaSE_第2章 Java基础语法</h1><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>数据类型</li><li>运算符</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><input disabled="" type="checkbox"> 了解进制</li><li><input disabled="" type="checkbox"> 理解基本数据类型的自动类型转换</li><li><input disabled="" type="checkbox"> 理解基本数据类型的强制类型转换</li><li><input disabled="" type="checkbox"> 了解ASCII编码表和Unicode编码表</li><li><input disabled="" type="checkbox"> 理解int类型和char类型的运算原理</li><li><input disabled="" type="checkbox"> 理解运算符++ –的运算方式</li><li><input disabled="" type="checkbox"> 理解+符号在字符串中的作用</li><li><input disabled="" type="checkbox"> 掌握算术运算符</li><li><input disabled="" type="checkbox"> 掌握赋值运算符</li><li><input disabled="" type="checkbox"> 掌握比较运算符</li><li><input disabled="" type="checkbox"> 理解逻辑运算符</li><li><input disabled="" type="checkbox"> 掌握三元运算符的格式和计算结果</li><li><input disabled="" type="checkbox"> 了解位运算符</li></ul><h1 id="第二章-Java基础知识（续）"><a href="#第二章-Java基础知识（续）" class="headerlink" title="第二章 Java基础知识（续）"></a>第二章 Java基础知识（续）</h1><h2 id="2-8-计算机如何存储数据"><a href="#2-8-计算机如何存储数据" class="headerlink" title="2.8  计算机如何存储数据"></a>2.8  计算机如何存储数据</h2><p>计算机世界中只有二进制。那么在计算机中存储和运算的所有数据都要转为二进制。包括数字、字符、图片、声音、视频等。</p><p> <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E8%BF%9B%E5%88%B6.jpg" alt="img"> </p><h3 id="2-8-1-进制（了解）"><a href="#2-8-1-进制（了解）" class="headerlink" title="2.8.1 进制（了解）"></a>2.8.1 进制（了解）</h3><p> 进制也就是进位计数制，是人为定义的带进位的计数方法 。</p><h4 id="1、进制的分类"><a href="#1、进制的分类" class="headerlink" title="1、进制的分类"></a>1、进制的分类</h4><p>（1）十进制：<br>数字组成：0-9<br>进位规则：逢十进一</p><p>（2）二进制：<br>数字组成：0-1<br>进位规则：逢二进一</p><p>十进制的256，二进制：100000000，为了缩短二进制的表示，又要贴近二进制，在程序中引入八进制和十六进制</p><p>（3）八进制：很少使用<br>数字组成：0-7<br>进位规则：逢八进一</p><p>与二进制换算规则：每三位二进制是一位八进制值</p><p>（4）十六进制<br>数字组成：0-9，a-f<br>进位规则：逢十六进一</p><p>与二进制换算规则：每四位二进制是一位十六进制值</p><h4 id="2、进制的换算"><a href="#2、进制的换算" class="headerlink" title="2、进制的换算"></a>2、进制的换算</h4><table><thead><tr><th>十进制</th><th>二进制</th><th>八进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td><td>2</td><td>2</td></tr><tr><td>3</td><td>11</td><td>3</td><td>3</td></tr><tr><td>4</td><td>100</td><td>4</td><td>4</td></tr><tr><td>5</td><td>101</td><td>5</td><td>5</td></tr><tr><td>6</td><td>110</td><td>6</td><td>6</td></tr><tr><td>7</td><td>111</td><td>7</td><td>7</td></tr><tr><td>8</td><td>1000</td><td>10</td><td>8</td></tr><tr><td>9</td><td>1001</td><td>11</td><td>9</td></tr><tr><td>10</td><td>1010</td><td>12</td><td>a或A</td></tr><tr><td>11</td><td>1011</td><td>13</td><td>b或B</td></tr><tr><td>12</td><td>1100</td><td>14</td><td>c或C</td></tr><tr><td>13</td><td>1101</td><td>15</td><td>d或D</td></tr><tr><td>14</td><td>1110</td><td>16</td><td>e或E</td></tr><tr><td>15</td><td>1111</td><td>17</td><td>f或F</td></tr><tr><td>16</td><td>10000</td><td>20</td><td>10</td></tr></tbody></table><ul><li><p><strong>十进制数据转成二进制数据：</strong>使用除以2倒取余数的方式<br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6.jpg"></p></li><li><p><strong>二进制数据转成十进制数据：</strong></p><p>从右边开始依次是2的0次，2的1次，2的2次。。。。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6.jpg"></p></li><li><p>二进制数据转八进制数据</p><p>​从右边开始，三位一组</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/2%E3%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%8E%E5%85%AB%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2.png"></p></li><li><p>二进制数据转十六进制数据</p><p>​从右边开始，四位一组</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/3%E3%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%8E%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2.png"></p></li></ul><h4 id="3、在代码中如何表示四种进制的值"><a href="#3、在代码中如何表示四种进制的值" class="headerlink" title="3、在代码中如何表示四种进制的值"></a>3、在代码中如何表示四种进制的值</h4><p>请分别用四种类型的进制来表示10，并输出它的结果：（了解）</p><p>（1）十进制：正常表示</p><p>System.out.println(10);</p><p>（2）二进制：0b或0B开头</p><p>System.out.println(0B10);</p><p>（3）八进制：0开头 </p><p>System.out.println(010);</p><p>（4）十六进制：0x或0X开头</p><p>System.out.println(0X10);</p><h3 id="2-8-2-计算机存储单位"><a href="#2-8-2-计算机存储单位" class="headerlink" title="2.8.2 计算机存储单位"></a>2.8.2 计算机存储单位</h3><ul><li><p><strong>字节（Byte）：</strong>是计算机信息技术用于计量存储容量的一种计量单位，一字节等于八位。</p></li><li><p><strong>位（bit）：</strong>是数据存储的最小单位。也就是二进制。二进制数系统中，每个0或1就是一个位，叫做bit（比特），其中8 bit 就称为一个字节(Byte)。</p></li><li><p><strong>转换关系：</strong></p><ul><li>8 bit &#x3D; 1 Byte</li><li>1024 Byte &#x3D; 1 KB</li><li>1024 KB &#x3D; 1 MB</li><li>1024 MB &#x3D; 1 GB</li><li>1024 GB &#x3D; 1 TB</li></ul></li></ul><h3 id="2-8-3-Java的基本数据类型的存储范围"><a href="#2-8-3-Java的基本数据类型的存储范围" class="headerlink" title="2.8.3 Java的基本数据类型的存储范围"></a>2.8.3 Java的基本数据类型的存储范围</h3><h4 id="1、整型系列"><a href="#1、整型系列" class="headerlink" title="1、整型系列"></a>1、整型系列</h4><p>（1）byte：字节类型</p><ul><li><p>占内存：1个字节</p></li><li><p>存储范围：-128~127</p></li></ul><p>（2）short：短整型类型</p><ul><li><p>占内存：2个字节</p></li><li><p>存储范围：-32768~32767</p></li></ul><p>（3）int：整型</p><ul><li><p>占内存：4个字节</p></li><li><p>存储范围：-2的31次方 ~ 2的31次方-1</p></li></ul><p>（4）long：整型</p><ul><li><p>占内存：8个字节</p></li><li><p>存储范围：-2的63次方 ~ 2的63次方-1</p></li></ul><blockquote><p>注意：如果要表示某个超过int范围的常量整数它是long类型，那么需要在数字后面加L</p></blockquote><h4 id="2、浮点型系列（小数）"><a href="#2、浮点型系列（小数）" class="headerlink" title="2、浮点型系列（小数）"></a>2、浮点型系列（小数）</h4><p>（1）float：单精度浮点型</p><ul><li><p>占内存：4个字节</p></li><li><p>精度：科学记数法的小数点后6~7位</p></li></ul><blockquote><p>注意：如果要表示某个常量小数是float类型，那么需要在数字后面加F或f，否则就是double类型</p></blockquote><p>（2）double：双精度浮点型</p><ul><li><p>占内存：8个字节</p></li><li><p>精度：科学记数法的小数点后15~16位</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">12.0F</span>;<span class="comment">//右边如果赋值小数常量值，那么必须加F或f</span></span><br></pre></td></tr></table></figure><h4 id="3、单字符类型：char"><a href="#3、单字符类型：char" class="headerlink" title="3、单字符类型：char"></a>3、单字符类型：char</h4><ul><li>占内存：2个字节</li></ul><h4 id="4、布尔类型"><a href="#4、布尔类型" class="headerlink" title="4、布尔类型"></a>4、布尔类型</h4><p>boolean：只能存储true或false</p><blockquote><p>虽然计算机底层使用0和1表示false和true，但是在代码中不能给boolean类型的变量赋值0和1，只能赋值false和true</p></blockquote><h3 id="2-8-4-计算机如何存储数据"><a href="#2-8-4-计算机如何存储数据" class="headerlink" title="2.8.4 计算机如何存储数据"></a>2.8.4 计算机如何存储数据</h3><h4 id="1、补码与符号位"><a href="#1、补码与符号位" class="headerlink" title="1、补码与符号位"></a>1、补码与符号位</h4><p><em>计算机数据的存储使用二进制补码形式存储，并且最高位是符号位，1是负数，0是正数。</em></p><p><em>规定：正数的补码与反码、原码一样，称为三码合一；</em></p><p>​    <em>负数的补码与反码、原码不一样：</em></p><p>​   <em>负数的原码：把十进制转为二进制，然后最高位设置为1</em></p><p>​   <em>负数的反码：在原码的基础上，最高位不变，其余位取反（0变1,1变0）</em></p><p>​   <em>负数的补码：反码+1</em></p><p><em>例如：byte类型（1个字节，8位）</em></p><p><em>25 &#x3D;&#x3D;&gt; 原码  0001 1001 &#x3D;&#x3D;&gt; 反码  0001 1001 –&gt;补码  0001 1001</em></p><p><em>-25 &#x3D;&#x3D;&gt;原码  1001 1001 &#x3D;&#x3D;&gt; 反码1110 0110 &#x3D;&#x3D;&gt;补码 1110 0111</em></p><p>底层是用加法代替减法：-128&#x3D;&#x3D;》-127-1&#x3D;&#x3D;》-127+(-1)</p><p>​       -127- -1 &#x3D;&#x3D;&gt; -127 + 1</p><h4 id="2、一个字节可以存储的数据范围是多少？"><a href="#2、一个字节可以存储的数据范围是多少？" class="headerlink" title="2、一个字节可以存储的数据范围是多少？"></a>2、一个字节可以存储的数据范围是多少？</h4><p>（1）无符号：不考虑正负数</p><p>（2）有符号 </p><p>1个字节：8位</p><p>0000 0001  ~  0111 111 &#x3D;&#x3D;&gt; 1~127</p><p>1000 0001 ~ 1111 1111 &#x3D;&#x3D;&gt; -127 ~ -1</p><p>0000 0000 &#x3D;&#x3D;&gt;0</p><p>1000 0000 &#x3D;&#x3D;&gt; -128（特殊规定）</p><h4 id="3、如何存储小数"><a href="#3、如何存储小数" class="headerlink" title="3、如何存储小数"></a>3、如何存储小数</h4><ul><li><p>为什么float（4个字节）比long（8个字节）的存储范围大？</p></li><li><p>为什么double（8个字节）比float（4个字节）精度范围大？</p></li><li><p>为什么float和double不精确</p></li></ul><p>因为float、double底层也是二进制，先把小数转为二进制，然后把二进制表示为科学记数法，然后只保存：</p><p>①符号位②指数位③尾数位</p><blockquote><p><em>详见《float型和double型数据的存储方式.docx》</em></p></blockquote><h4 id="4、如何存储字符"><a href="#4、如何存储字符" class="headerlink" title="4、如何存储字符"></a>4、如何存储字符</h4><ul><li>Java中使用的字符集：Unicode字符集</li></ul><h5 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h5><p>在计算机的内部都是二进制的0、1数据，如何让计算机可以直接识别人类文字的问题呢？就产生出了编码表的概念。<strong>编码表</strong> ：就是将人类的文字和一个十进制数进行对应起来组成一张表格。例如：</p><table><thead><tr><th align="center">字符</th><th align="center">数值</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">48</td></tr><tr><td align="center">A</td><td align="center">65</td></tr><tr><td align="center">a</td><td align="center">97</td></tr></tbody></table><p>将所有的英文字母，数字，符号都和十进制进行了对应，因此产生了世界上第一张编码表ASCII（American Standard Code for Information Interchange 美国标准信息交换码）。</p><p>Unicode(统一码、万国码、单一码)是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p><h5 id="字符常量的几种表示方式"><a href="#字符常量的几种表示方式" class="headerlink" title="字符常量的几种表示方式"></a>字符常量的几种表示方式</h5><p>（1）’一个字符’</p><p>例如：’A’，’0’，’尚’</p><p>（2）转义字符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\n：换行</span><br><span class="line">\r：回车</span><br><span class="line">\t：Tab键</span><br><span class="line">\\：\</span><br><span class="line">\&quot;：&quot;</span><br><span class="line">\&#x27;：&#x27;</span><br><span class="line">\b：删除键Backspace</span><br><span class="line"></span><br><span class="line">System.out.println(&#x27;\\&#x27;);</span><br><span class="line">System.out.println(&quot;hello\tworld\njava&quot;);</span><br></pre></td></tr></table></figure><p>（3）\u字符的Unicode编码值的十六进制型</p><p>例如：’\u5c1a’代表’尚’</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;\u5c1a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;尚&#x27;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&#x27;尚&#x27;</span>;<span class="comment">//错误的，哪怕是一个字符，也要使用双引号</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;<span class="comment">//错误，单引号中有且只能有一个字符</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="comment">//可以，双引号中可以没有其他字符，表示是空字符串</span></span><br></pre></td></tr></table></figure><p>（4）直接给char类型变量赋值十进制的0~65535之间的Unicode编码值</p><p>例如：’尚’ 的编码值是23578</p><p>​         ‘a’的编码值是97</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">23578</span>;</span><br><span class="line">System.out.println(c1);<span class="comment">//尚</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="number">97</span>;</span><br><span class="line">System.out.println(c2);<span class="comment">//a</span></span><br></pre></td></tr></table></figure><h2 id="2-9-基本数据类型转换（Conversion）"><a href="#2-9-基本数据类型转换（Conversion）" class="headerlink" title="2.9  基本数据类型转换（Conversion）"></a>2.9  基本数据类型转换（Conversion）</h2><p>在Java程序中，不同的基本数据类型的值经常需要进行相互转换。Java语言所提供的<strong>七种数值类型</strong>之间可以相互转换，基本数据类型转换有两种转换方式：自动类型转换和强制类型转换。</p><h4 id="1、自动类型转换（隐式类型转换）"><a href="#1、自动类型转换（隐式类型转换）" class="headerlink" title="1、自动类型转换（隐式类型转换）"></a>1、自动类型转换（隐式类型转换）</h4><p><strong>自动转换</strong>：</p><ul><li>将<code>取值范围小的类型</code>自动提升为<code>取值范围大的类型</code> 。</li></ul><p>基本数据类型的转换规则</p><p>小结：通过上面案例我们可以得出数据类型的转换关系（取值范围从小到大），如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%9B%BE1.jpg"></p><p>（1）当把存储范围小的值（常量值、变量的值、表达式计算的结果值）赋值给了存储范围大的变量时，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;<span class="comment">//char自动升级为int</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//int自动升级为double</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>; <span class="comment">//右边的整数常量值必须在-128~127范围内</span></span><br><span class="line"><span class="comment">//byte bigB = 130;//错误，右边的整数常量值超过byte范围</span></span><br><span class="line"><span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1234567</span>; <span class="comment">//右边的整数常量值如果在int范围呢，编译和运行都可以通过，这里涉及到数据类型转换</span></span><br><span class="line"><span class="type">long</span> <span class="variable">bigNum</span> <span class="operator">=</span> <span class="number">12345678912L</span>;<span class="comment">//右边的整数常量值如果超过int范围，必须加L，否则编译不通过</span></span><br></pre></td></tr></table></figure><p>（2）当存储范围小的数据类型与存储范围大的数据类型一起混合运算时，会按照其中最大的类型运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> i + b + d;<span class="comment">//混合运算，升级为double</span></span><br></pre></td></tr></table></figure><p>（3）当byte,short,char数据类型进行算术运算时，按照int类型处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> b1 + b2;<span class="comment">//编译报错，b1 + b2自动升级为int</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">System.out.println(c1 + c2);<span class="comment">//113 </span></span><br></pre></td></tr></table></figure><p>（4）boolean类型不参与</p><h4 id="2、强制类型转换（显示类型转换）"><a href="#2、强制类型转换（显示类型转换）" class="headerlink" title="2、强制类型转换（显示类型转换）"></a>2、强制类型转换（显示类型转换）</h4><p>将<code>1.5</code> 赋值到<code>int</code> 类型变量会发生什么？产生编译失败，肯定无法赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3.14</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>想要赋值成功，只有通过强制类型转换，将<code>double</code> 类型强制转换成<code>int</code> 类型才能赋值。</p><ul><li><strong>强制类型转换</strong>：将<code>取值范围大的类型</code>强制转换成<code>取值范围小的类型</code>。</li></ul><p> 比较而言，自动转换是Java自动执行的，而强制转换需要我们自己手动执行。</p><p><strong>转换格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = （数据类型）被强转数据值；</span><br></pre></td></tr></table></figure><p>（1）当把存储范围大的值（常量值、变量的值、表达式计算的结果值）赋值给了存储范围小的变量时，需要强制类型转换，提示：有风险，可能会损失精度或溢出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">3.14</span>;<span class="comment">//强制类型转换，损失精度</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1.2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>)d;<span class="comment">//损失精度</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;<span class="comment">//溢出</span></span><br></pre></td></tr></table></figure><p>（2）boolean类型不参与</p><p>（3）当某个值想要提升数据类型时，也可以使用强制类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">shang</span> <span class="operator">=</span> (<span class="type">double</span>)i/j;</span><br></pre></td></tr></table></figure><p>提示：这个情况的强制类型转换是没有风险的。</p><h4 id="3、特殊的数据类型转换"><a href="#3、特殊的数据类型转换" class="headerlink" title="3、特殊的数据类型转换"></a>3、特殊的数据类型转换</h4><p>1、任意数据类型的数据与String类型进行“+”运算时，结果一定是String类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;&quot;</span> + <span class="number">1</span> + <span class="number">2</span>);<span class="comment">//12</span></span><br></pre></td></tr></table></figure><p>2、但是String类型不能通过强制类型()转换，转为其他的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>)str;<span class="comment">//错误的</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(str);<span class="comment">//后面才能讲到，借助包装类的方法才能转</span></span><br></pre></td></tr></table></figure><h4 id="4、练习"><a href="#4、练习" class="headerlink" title="4、练习"></a>4、练习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、练习题：判断如下代码是否编译通过，如果能，结果是多少？</span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s3</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、练习题：判断如下代码是否编译通过，如果能，结果是多少？</span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">s3</span> <span class="operator">=</span> (<span class="type">byte</span>)(s1 + s2);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、练习题：判断如下代码是否编译通过，如果能，结果是多少？</span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> c1 + c2;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、练习题：判断如下代码是否编译通过，如果能，结果是多少？</span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">System.out.println(c1 + c2);</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、练习题：判断如下代码是否编译通过，如果能，结果是多少？</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">120</span>; <span class="comment">//因为右边120默认是int类型，int的值赋值给long类型是可以的，会自动类型转换，但是要求这个int值不能超过int的存储范围，如果超过int的存储范围必须加L.</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">34</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">1.2</span>;<span class="comment">//因为右边1.2默认是double类型，double的值是不能直接赋值给float的，要么加F要么使用强制类型转换。</span></span><br><span class="line"></span><br><span class="line">System.out.println(i + j + d + f);<span class="comment">//最后是double</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、练习题：判断如下代码是否编译通过，如果能，结果是多少？</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> i/j;</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure><h2 id="2-10-运算符（Operator）"><a href="#2-10-运算符（Operator）" class="headerlink" title="2.10 运算符（Operator）"></a>2.10 运算符（Operator）</h2><ul><li>表达式：用运算符连接起来的式子</li><li>运算符的分类：<br>按照功能分：算术运算符、赋值运算符、比较运算符、逻辑运算、条件运算符…</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">算术运算符</td><td align="center"><code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>++</code>、<code>--</code></td></tr><tr><td align="center">赋值运算符</td><td align="center"><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>等</td></tr><tr><td align="center">关系运算符</td><td align="center"><code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>==</code>、<code>!=</code></td></tr><tr><td align="center">逻辑运算符</td><td align="center"><code>&amp;</code>、&#96;</td></tr><tr><td align="center">条件运算符</td><td align="center"><code>(条件表达式)?结果1:结果2；</code></td></tr><tr><td align="center">位运算符（了解）</td><td align="center"><code>&amp;</code>、&#96;</td></tr></tbody></table><ul><li><p>按照操作数个数分：一元运算符（单目运算符）、二元运算符（双目运算符）、三元运算符 （三目运算符）</p><p>一元运算符：操作数只有一个<br>例如：正号（+）  +a<br>      负号（-）  -a<br>      自增自减   ++i  i++<br>      逻辑非：   !true<br>二元运算符：操作数有两个<br>例如：加法：a+b<br>      减法：a-b<br>      大于：a&gt;b<br>      逻辑与：a&amp;b<br>三元运算符：条件 ? 结果1 ： 结果2</p></li></ul><h3 id="2-10-1-算术运算符"><a href="#2-10-1-算术运算符" class="headerlink" title="2.10.1 算术运算符"></a>2.10.1 算术运算符</h3><table><thead><tr><th align="center">算术运算符</th><th align="center">符号解释</th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">加法运算，字符串连接运算，正号</td></tr><tr><td align="center"><code>-</code></td><td align="center">减法运算，负号</td></tr><tr><td align="center"><code>*</code></td><td align="center">乘法运算</td></tr><tr><td align="center"><code>/</code></td><td align="center">除法运算，整数&#x2F;整数结果还是整数</td></tr><tr><td align="center"><code>%</code></td><td align="center">求余运算，余数的符号只看被除数</td></tr><tr><td align="center"><code>++</code> 、  <code>--</code></td><td align="center">自增自减运算</td></tr></tbody></table><h4 id="1、加减乘除模"><a href="#1、加减乘除模" class="headerlink" title="1、加减乘除模"></a>1、加减乘除模</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a + b);<span class="comment">// 7</span></span><br><span class="line">System.out.println(a - b);<span class="comment">// -1</span></span><br><span class="line">System.out.println(a * b);<span class="comment">// 12</span></span><br><span class="line">System.out.println(a / b);<span class="comment">// 计算机结果是0，为什么不是0.75呢？</span></span><br><span class="line">System.out.println(a % b);<span class="comment">// 3</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="number">5</span>%<span class="number">2</span>);<span class="comment">//1</span></span><br><span class="line">System.out.println(<span class="number">5</span>%-<span class="number">2</span>);<span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">5</span>%<span class="number">2</span>);<span class="comment">//-1</span></span><br><span class="line">System.out.println(-<span class="number">5</span>%-<span class="number">2</span>);<span class="comment">//-1</span></span><br><span class="line"><span class="comment">//商*除数 + 余数 = 被除数</span></span><br><span class="line"><span class="comment">//5%-2  ==&gt;商是-2，余数时1    (-2)*(-2)+1 = 5</span></span><br><span class="line"><span class="comment">//-5%2  ==&gt;商是-2，余数是-1   (-2)*2+(-1) = -4-1=-5</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、“-”号的两种用法"><a href="#2、“-”号的两种用法" class="headerlink" title="2、“+”号的两种用法"></a>2、“+”号的两种用法</h4><ul><li>第一种：对于<code>+</code>两边都是数值的话，<code>+</code>就是加法的意思</li><li>第二种：对于<code>+</code>两边至少有一边是字符串得话，<code>+</code>就是拼接的意思</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo02</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 字符串类型的变量基本使用</span></span><br><span class="line"><span class="comment">// 数据类型 变量名称 = 数据值;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">System.out.println(str1); <span class="comment">// Hello</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span> + <span class="string">&quot;World&quot;</span>); <span class="comment">// HelloWorld</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line"><span class="comment">// String + int --&gt; String</span></span><br><span class="line">System.out.println(str2 + <span class="number">520</span>); <span class="comment">// Java520</span></span><br><span class="line"><span class="comment">// String + int + int</span></span><br><span class="line"><span class="comment">// String+ int</span></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line">System.out.println(str2 + <span class="number">5</span> + <span class="number">20</span>); <span class="comment">// Java520</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、自加自减运算"><a href="#3、自加自减运算" class="headerlink" title="3、自加自减运算"></a>3、自加自减运算</h4><p><strong>理解：</strong><code>++</code>  <strong>运算，变量自己的值加1</strong>。反之，<code>--</code> 运算，变量自己的值减少1，用法与<code>++</code> 一致。</p><p>1、单独使用</p><ul><li>变量在单独运算的时候，变量<code>前++</code>和变量<code>后++</code>，变量的是一样的；</li><li>变量<code>前++</code>   ：例如 <code>++a</code> 。</li><li>变量<code>后++</code>   ：例如 <code>a++</code> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 定义一个int类型的变量a</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">//++a;</span></span><br><span class="line">a++;</span><br><span class="line">        <span class="comment">// 无论是变量前++还是变量后++，结果都是4</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、复合使用</p><ul><li>和<code>其他变量放在一起使用</code>或者和<code>输出语句放在一起使用</code>，<code>前++</code>和<code>后++</code>就产生了不同。</li></ul><ul><li>变量<code>前++</code> ：变量先自身加1，然后再取值。</li><li>变量<code>后++</code> ：变量先取值，然后再自身加1。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo03</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 其他变量放在一起使用</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">//int y = ++x; // y的值是4，x的值是4，</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x++; <span class="comment">// y的值是3，x的值是4</span></span><br><span class="line"></span><br><span class="line">System.out.println(x);</span><br><span class="line">System.out.println(y);</span><br><span class="line">System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 和输出语句一起</span></span><br><span class="line"><span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">//System.out.println(++z);// 输出结果是6，z的值也是6</span></span><br><span class="line">System.out.println(z++);<span class="comment">// 输出结果是5，z的值是6</span></span><br><span class="line">System.out.println(z);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        a = a++;<span class="comment">//(1)先取a的值“1”放操作数栈(2)a再自增,a=2(3)再把操作数栈中的&quot;1&quot;赋值给a,a=1</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i++ + ++i * i++;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        从左往右加载</span></span><br><span class="line"><span class="comment">        (1)先算i++</span></span><br><span class="line"><span class="comment">        ①取i的值“1”放操作数栈</span></span><br><span class="line"><span class="comment">        ②i再自增 i=2</span></span><br><span class="line"><span class="comment">        （2）再算++i</span></span><br><span class="line"><span class="comment">        ①i先自增 i=3</span></span><br><span class="line"><span class="comment">        ②再取i的值“3”放操作数栈</span></span><br><span class="line"><span class="comment">        （3）再算i++</span></span><br><span class="line"><span class="comment">        ①取i的值“3”放操作数栈</span></span><br><span class="line"><span class="comment">        ②i再自增 i=4</span></span><br><span class="line"><span class="comment">        （4）先算乘法</span></span><br><span class="line"><span class="comment">        用操作数栈中3 * 3 = 9，并把9压会操作数栈</span></span><br><span class="line"><span class="comment">        （5）再算求和</span></span><br><span class="line"><span class="comment">        用操作数栈中的 1 + 9 = 10</span></span><br><span class="line"><span class="comment">        （6）最后算赋值</span></span><br><span class="line"><span class="comment">        j = 10</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小结：<ul><li><strong>++在前，先自加，后使用；</strong></li><li><strong>++在后，先使用，后自加。</strong></li></ul></li></ul><h4 id="4、练习-1"><a href="#4、练习-1" class="headerlink" title="4、练习"></a>4、练习</h4><h5 id="（1）获取一个四位数的个位，十位，百位，千位"><a href="#（1）获取一个四位数的个位，十位，百位，千位" class="headerlink" title="（1）获取一个四位数的个位，十位，百位，千位"></a>（1）获取一个四位数的个位，十位，百位，千位</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String [] args)</span> &#123;</span><br><span class="line"><span class="comment">//1.定义一个四位数，例如1234</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1234</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//2.通过运算操作求出个位，十位，百位，千位</span></span><br><span class="line"><span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> ？</span><br><span class="line"><span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> ？</span><br><span class="line"><span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> ？</span><br><span class="line"><span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> ？</span><br><span class="line"></span><br><span class="line">System.out.println(num + <span class="string">&quot;这个四位数个位上的数字是：&quot;</span> + ge);</span><br><span class="line">System.out.println(num + <span class="string">&quot;这个四位数十位上的数字是：&quot;</span> + shi);</span><br><span class="line">System.out.println(num + <span class="string">&quot;这个四位数百位上的数字是：&quot;</span> + bai);</span><br><span class="line">System.out.println(num + <span class="string">&quot;这个四位数千位上的数字是：&quot;</span> + qian);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（2）自增自减练习"><a href="#（2）自增自减练习" class="headerlink" title="（2）自增自减练习"></a>（2）自增自减练习</h5><p>判断如下代码的运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i++;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i++ * ++j + ++i * j++;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">System.out.println(<span class="string">&quot;j = &quot;</span> + j);</span><br><span class="line">System.out.println(<span class="string">&quot;k = &quot;</span> + k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i++;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i++ * ++j + --i * j--;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">System.out.println(<span class="string">&quot;j = &quot;</span> + j);</span><br><span class="line">System.out.println(<span class="string">&quot;k = &quot;</span> + k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> ++i + i++ * ++i + i++;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">System.out.println(<span class="string">&quot;j = &quot;</span> + j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> ++i/--i;</span><br><span class="line">System.out.println(<span class="string">&quot;result=&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-10-2-赋值运算符"><a href="#2-10-2-赋值运算符" class="headerlink" title="2.10.2 赋值运算符"></a>2.10.2 赋值运算符</h3><p>注意：所有的赋值运算符的&#x3D;左边一定是一个变量</p><table><thead><tr><th align="center">赋值运算符</th><th align="center">符号解释</th></tr></thead><tbody><tr><td align="center"><code>=</code></td><td align="center">将符号右边的值，赋值给左边的变量</td></tr><tr><td align="center"><code>+=</code></td><td align="center">将符号**<code>左边的值</code><strong>和</strong><code>右边的值</code><strong>进行相加操作，最后将结果</strong><code>赋值给左边的变量</code>**</td></tr><tr><td align="center"><code>-=</code></td><td align="center">将符号**<code>左边的值</code><strong>和</strong><code>右边的值</code><strong>进行相减操作，最后将结果</strong><code>赋值给左边的变量</code>**</td></tr><tr><td align="center"><code>*=</code></td><td align="center">将符号**<code>左边的值</code><strong>和</strong><code>右边的值</code><strong>进行相乘操作，最后将结果</strong><code>赋值给左边的变量</code>**</td></tr><tr><td align="center"><code>/=</code></td><td align="center">将符号**<code>左边的值</code><strong>和</strong><code>右边的值</code><strong>进行相除操作，最后将结果</strong><code>赋值给左边的变量</code>**</td></tr><tr><td align="center"><code>%=</code></td><td align="center">将符号**<code>左边的值</code><strong>和</strong><code>右边的值</code><strong>进行取余操作，最后将结果</strong><code>赋值给左边的变量</code>**</td></tr></tbody></table><h4 id="1、基本赋值运算符课堂案例"><a href="#1、基本赋值运算符课堂案例" class="headerlink" title="1、基本赋值运算符课堂案例"></a>1、基本赋值运算符课堂案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">a = a + b; </span><br><span class="line">System.out.println(a); <span class="comment">// 7</span></span><br><span class="line">System.out.println(b); <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、扩展赋值运算符课堂案例"><a href="#2、扩展赋值运算符课堂案例" class="headerlink" title="2、扩展赋值运算符课堂案例"></a>2、扩展赋值运算符课堂案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">b += a;<span class="comment">// 相当于 b = b + a ; </span></span><br><span class="line">System.out.println(a); <span class="comment">// 3</span></span><br><span class="line">System.out.println(b); <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">// s = s + 4; 代码编译报错，因为将int类型的结果赋值给short类型的变量s时，可能损失精度</span></span><br><span class="line">s += <span class="number">4</span>; <span class="comment">// 代码没有报错</span></span><br><span class="line">        <span class="comment">//因为在得到int类型的结果后，JVM自动完成一步强制类型转换，将int类型强转成short</span></span><br><span class="line">System.out.println(s);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">j += ++j * j++;<span class="comment">//相当于  j = j + (++j * j++);</span></span><br><span class="line">System.out.println(j);<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>扩展赋值运算符在<strong>将最后的结果赋值给左边的变量前，都做了一步强制类型转换</strong>。</li></ul><h4 id="3、练习"><a href="#3、练习" class="headerlink" title="3、练习"></a>3、练习</h4><p>交换两个变量的值<br>int m &#x3D; 1;<br>int n &#x3D; 2;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> m;</span><br><span class="line">m = n;</span><br><span class="line">n = temp;</span><br></pre></td></tr></table></figure><h3 id="2-10-3-关系运算符-x2F-比较运算符"><a href="#2-10-3-关系运算符-x2F-比较运算符" class="headerlink" title="2.10.3 关系运算符&#x2F;比较运算符"></a>2.10.3 关系运算符&#x2F;比较运算符</h3><table><thead><tr><th align="center">关系运算符</th><th align="center">符号解释</th></tr></thead><tbody><tr><td align="center"><code>&lt;</code></td><td align="center">比较符号左边的数据是否小于右边的数据，如果小于结果是true。</td></tr><tr><td align="center"><code>&gt;</code></td><td align="center">比较符号左边的数据是否大于右边的数据，如果大于结果是true。</td></tr><tr><td align="center"><code>&lt;=</code></td><td align="center">比较符号左边的数据是否小于或者等于右边的数据，如果大于结果是false。</td></tr><tr><td align="center"><code>&gt;=</code></td><td align="center">比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是false。</td></tr><tr><td align="center"><code>==</code></td><td align="center">比较符号两边数据是否相等，相等结果是true。</td></tr><tr><td align="center"><code>！=</code></td><td align="center">不等于符号 ，如果符号两边的数据不相等，结果是true。</td></tr></tbody></table><ul><li>比较运算符，是两个数据之间进行比较的运算，运算结果一定是boolean值<code>true</code>或者<code>false</code> 。</li><li>其中&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;不支持boolean，String类型，&#x3D;&#x3D;和!&#x3D;支持boolean和String。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo05</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a &lt; b); <span class="comment">// true</span></span><br><span class="line">System.out.println(a &gt; b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a &lt;= b); <span class="comment">// true</span></span><br><span class="line">System.out.println(a &gt;= b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a == b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a != b); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习：判断如下程序的运行结果"><a href="#练习：判断如下程序的运行结果" class="headerlink" title="练习：判断如下程序的运行结果"></a>练习：判断如下程序的运行结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(flag=<span class="literal">true</span>)&#123;</span><br><span class="line">c = a++ + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag=<span class="literal">false</span>)&#123;</span><br><span class="line">c = ++a - b;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">System.out.println(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-10-4-逻辑运算符"><a href="#2-10-4-逻辑运算符" class="headerlink" title="2.10.4 逻辑运算符"></a>2.10.4 逻辑运算符</h3><ul><li>逻辑运算符，是用来连接两个布尔类型结果的运算符（<code>!</code>除外），运算结果一定是boolean值<code>true</code>或者<code>false</code></li></ul><table><thead><tr><th align="center">逻辑运算符</th><th align="center">符号解释</th><th align="center">符号特点</th></tr></thead><tbody><tr><td align="center"><code>&amp;</code></td><td align="center">与，且</td><td align="center">有<code>false</code>则<code>false</code></td></tr><tr><td align="center">&#96;</td><td align="center">&#96;</td><td align="center">或</td></tr><tr><td align="center"><code>^</code></td><td align="center">异或</td><td align="center">相同为<code>false</code>，不同为<code>true</code></td></tr><tr><td align="center"><code>!</code></td><td align="center">非</td><td align="center">非<code>false</code>则<code>true</code>，非<code>true</code>则<code>false</code></td></tr><tr><td align="center"><code>&amp;&amp;</code></td><td align="center">双与，短路与</td><td align="center">左边为false，则右边就不看</td></tr><tr><td align="center">&#96;</td><td align="center"></td><td align="center">&#96;</td></tr></tbody></table><h4 id="1、课堂案例"><a href="#1、课堂案例" class="headerlink" title="1、课堂案例"></a>1、课堂案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo06</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp; 与，且；有false则false</span></span><br><span class="line">System.out.println((a &gt; b) &amp; (a &gt; c)); </span><br><span class="line">System.out.println((a &gt; b) &amp; (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) &amp; (a &gt; c)); </span><br><span class="line">System.out.println((a &lt; b) &amp; (a &lt; c)); </span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">// | 或；有true则true</span></span><br><span class="line">System.out.println((a &gt; b) | (a &gt; c)); </span><br><span class="line">System.out.println((a &gt; b) | (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) | (a &gt; c));</span><br><span class="line">System.out.println((a &lt; b) | (a &lt; c));</span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">// ^ 异或；相同为false，不同为true</span></span><br><span class="line">System.out.println((a &gt; b) ^ (a &gt; c));</span><br><span class="line">System.out.println((a &gt; b) ^ (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) ^ (a &gt; c)); </span><br><span class="line">System.out.println((a &lt; b) ^ (a &lt; c)); </span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">// ! 非；非false则true，非true则false</span></span><br><span class="line">System.out.println(!<span class="literal">false</span>);</span><br><span class="line">System.out.println(!<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-amp-amp-和-amp-区别，-和-区别"><a href="#2、-amp-amp-和-amp-区别，-和-区别" class="headerlink" title="2、&amp;&amp;和&amp;区别，||和|区别"></a>2、&amp;&amp;和&amp;区别，||和|区别</h4><ul><li>**<code>&amp;&amp;</code>和<code>&amp;</code>**区别：<ul><li><code>&amp;&amp;</code>和<code>&amp;</code>结果一样，<code>&amp;&amp;</code>有短路效果，左边为false，右边不执行；<code>&amp;</code>左边无论是什么，右边都会执行。</li></ul></li><li>**<code>||</code>和<code>|</code>**区别：<ul><li><code>||</code>和<code>|</code>结果一样，<code>||</code>有短路效果，左边为true，右边不执行；<code>|</code>左边无论是什么，右边都会执行。</li></ul></li></ul><h4 id="3、面试题1"><a href="#3、面试题1" class="headerlink" title="3、面试题1"></a>3、面试题1</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561431178935.png" alt="1561431178935"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogicExer1</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x==2 ,x++  false  x = 2 左边为false</span></span><br><span class="line"><span class="comment">//右边继续</span></span><br><span class="line"><span class="comment">//++y  y==2  y=2  y==2成立  右边为true</span></span><br><span class="line"><span class="comment">//false &amp; true 结果false</span></span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">2</span> &amp; ++y==<span class="number">2</span>)&#123;</span><br><span class="line">x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;x=&quot;</span>+x+<span class="string">&quot;,y=&quot;</span>+y);<span class="comment">//x=2,y=2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogicExer2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>,y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x==2,x++  左边条件为false，x=2</span></span><br><span class="line"><span class="comment">//因为短路与，右边不算</span></span><br><span class="line"><span class="comment">//false &amp;&amp; ? 结果是false</span></span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">2</span> &amp;&amp; ++y==<span class="number">2</span>)&#123;</span><br><span class="line">x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;x=&quot;</span>+x+<span class="string">&quot;,y=&quot;</span>+y);<span class="comment">//x=2,y=1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogicExer3</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>,y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x==1,x++  左边为true，x=2</span></span><br><span class="line"><span class="comment">//因为是逻辑与,右边继续  </span></span><br><span class="line"><span class="comment">//++y, y==1  y=2 右边为false</span></span><br><span class="line"><span class="comment">//条件true | false，最终为true</span></span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">1</span> | ++y==<span class="number">1</span>)&#123;</span><br><span class="line">x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;x=&quot;</span>+x+<span class="string">&quot;,y=&quot;</span>+y);<span class="comment">//x=7,y=2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogicExer4</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>,y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x==1,x++  左边为true，x=2</span></span><br><span class="line"><span class="comment">//因为是短路或，左边为true，右边就不看了</span></span><br><span class="line"><span class="comment">//整个条件为true</span></span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">1</span> || ++y==<span class="number">1</span>)&#123;</span><br><span class="line">x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;x=&quot;</span>+x+<span class="string">&quot;,y=&quot;</span>+y);<span class="comment">//x=7,y=1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、面试题2"><a href="#4、面试题2" class="headerlink" title="4、面试题2"></a>4、面试题2</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561431208735.png" alt="1561431208735"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogicExer5</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String []  args)</span>  &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">x</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">y</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果if((z++==42)&amp;&amp;(y==true))条件成立，执行z++，不成立，就不执行z++</span></span><br><span class="line"><span class="comment">//左边的条件：z==42,z++  z==42成立,z++变成43</span></span><br><span class="line"><span class="comment">//中间虽然是短路与，因为左边现在是true,右边还要看</span></span><br><span class="line"><span class="comment">//右边 y==true   不成立</span></span><br><span class="line"><span class="comment">//true &amp;&amp; false 结果为false</span></span><br><span class="line"><span class="keyword">if</span>((z++==<span class="number">42</span>)&amp;&amp;(y==<span class="literal">true</span>))z++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左边为x=false,赋值  结果就为false</span></span><br><span class="line"><span class="comment">//中间虽然为短路或，因为左边是false,右边继续看</span></span><br><span class="line"><span class="comment">//++z,z==45  ++z变成44，z==45是否成立，不成立</span></span><br><span class="line"><span class="comment">//false || false  结果为false</span></span><br><span class="line"><span class="keyword">if</span>((x=<span class="literal">false</span>) || (++z==<span class="number">45</span>))  z++;</span><br><span class="line"></span><br><span class="line">System. out.println(<span class="string">&quot;z=&quot;</span>+z);<span class="comment">//44</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">Test4_2</span>  &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String []  args)</span>  &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">x</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">y</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果if(y=true)条件成立，接着判断if((z++==42)&amp;&amp;(y==true))z++;</span></span><br><span class="line"><span class="comment">//如果不成立，if((z++==42)&amp;&amp;(y==true))z++;不看的</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(y = true)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if((z++==42)&amp;&amp;(y==true))z++;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if((x=false) || (++z==45))  z++;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//标准</span></span><br><span class="line"><span class="comment">//y=true赋值，y就被修改为true,if(true)成立</span></span><br><span class="line"><span class="keyword">if</span>(y=<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//左边：z==42,z++  成立,z变成43</span></span><br><span class="line"><span class="comment">//&amp;&amp;短路与，不满足短路的情况，右边继续</span></span><br><span class="line"><span class="comment">//y==true 成立</span></span><br><span class="line"><span class="comment">//true &amp;&amp; true，结果为true</span></span><br><span class="line"><span class="keyword">if</span>((z++==<span class="number">42</span>)&amp;&amp;(y==<span class="literal">true</span>))&#123;</span><br><span class="line"><span class="comment">//z++变成44</span></span><br><span class="line">z++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左边：x=false不成立</span></span><br><span class="line"><span class="comment">//中间虽然是短路或，但是没满足短路的情况，右边继续</span></span><br><span class="line"><span class="comment">//++z,z==45  ++z变成45，z==45成立</span></span><br><span class="line"><span class="keyword">if</span>((x=<span class="literal">false</span>) || (++z==<span class="number">45</span>))&#123;</span><br><span class="line"><span class="comment">//z++，变成46</span></span><br><span class="line">z++;</span><br><span class="line">&#125;</span><br><span class="line">System. out.println(<span class="string">&quot;z=&quot;</span>+z);<span class="comment">//46</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-10-5-条件运算符"><a href="#2-10-5-条件运算符" class="headerlink" title="2.10.5 条件运算符"></a>2.10.5 条件运算符</h3><ul><li>条件运算符格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件表达式？结果<span class="number">1</span>：结果<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>条件运算符计算方式：<ul><li>条件判断的结果是true，条件运算符整体结果为结果1，赋值给变量。</li><li>判断条件的结果是false，条件运算符整体结果为结果2，赋值给变量。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="number">1</span>==<span class="number">2</span> ? <span class="number">100</span> : <span class="number">200</span>);</span><br><span class="line">    System.out.println(i);<span class="comment">//200</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> (<span class="number">3</span>&lt;=<span class="number">4</span> ? <span class="number">500</span> : <span class="number">600</span>);</span><br><span class="line">    System.out.println(j);<span class="comment">//500</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>1、声明三个整型的变量,a,b,c,要求找出最大值<br>2、声明一个整型的变量，判断它是正数还是负数，还是0</p><h3 id="2-10-6运算符优先级"><a href="#2-10-6运算符优先级" class="headerlink" title="2.10.6运算符优先级"></a>2.10.6运算符优先级</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1553858424335.png" alt="1553858424335"></p><p>提示说明：</p><p>（1）表达式不要太复杂</p><p>（2）先算的使用()</p><p>大体的排序：算术-&gt;位–&gt;比较–&gt;逻辑–&gt;三元–&gt;赋值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaSE-第2章-Java基础语法&quot;&gt;&lt;a href=&quot;#JavaSE-第2章-Java基础语法&quot; class=&quot;headerlink&quot; title=&quot;JavaSE_第2章 Java基础语法&quot;&gt;&lt;/a&gt;JavaSE_第2章 Java基础语法&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第1章 Java概述</title>
    <link href="https://manamn.space/2022/07/28/%E7%AC%AC1%E7%AB%A0-Java%E6%A6%82%E8%BF%B0/"/>
    <id>https://manamn.space/2022/07/28/%E7%AC%AC1%E7%AB%A0-Java%E6%A6%82%E8%BF%B0/</id>
    <published>2022-07-28T05:02:19.000Z</published>
    <updated>2022-10-16T04:43:25.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第1章-Java概述"><a href="#第1章-Java概述" class="headerlink" title="第1章 Java概述"></a>第1章 Java概述</h2><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>Java语言的发展历史</li><li>安装JDK</li><li>配置环境变化</li><li>编写HelloWorld程序</li><li>Java注释</li><li>Java关键字</li><li>标识符</li><li>常量</li><li>变量</li><li>Java基本数据类型</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><input disabled="" type="checkbox"> 能够使用常见的DOS命令</li><li><input disabled="" type="checkbox"> 理解Java语言的跨平台实现原理</li><li><input disabled="" type="checkbox"> 理解JDK&#x2F;JRE&#x2F;JVM的组成和作用</li><li><input disabled="" type="checkbox"> 能够配置环境变量JAVA_HOME（会参照笔记配置）</li><li><input disabled="" type="checkbox"> 能够编写HelloWorld程序编译并执行</li><li><input disabled="" type="checkbox"> 会使用单行注释和多行注释</li><li><input disabled="" type="checkbox"> 能够辨识关键字</li><li><input disabled="" type="checkbox"> 理解标识符的含义</li><li><input disabled="" type="checkbox"> 理解Java中的基本数据类型分类</li><li><input disabled="" type="checkbox"> 能够理解常量的概念</li><li><input disabled="" type="checkbox"> 能够定义8种基本数据集类型的变量</li><li><input disabled="" type="checkbox"> 能够分清楚两种输出语句的区别</li></ul><h1 id="第一章-Java概述"><a href="#第一章-Java概述" class="headerlink" title="第一章 Java概述"></a>第一章 Java概述</h1><h2 id="1-1-JavaSE课程体系介绍"><a href="#1-1-JavaSE课程体系介绍" class="headerlink" title="1.1 JavaSE课程体系介绍"></a>1.1 JavaSE课程体系介绍</h2><p>JavaSE知识图解</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/JavaSE%E8%AF%BE%E7%A8%8B%E5%86%85%E5%AE%B9%E4%BB%8B%E7%BB%8D.png" alt="1561379629326"></p><p>JavaSE知识模块介绍</p><ul><li><strong>第一部分：计算机编程语言核心结构：</strong><code>数据类型</code>、<code>运算符</code>、<code>流程控制</code>、<code>数组</code>、…</li><li><strong>第二部分：Java面向对象核心逻辑：</strong><code>类和对象</code>、<code>封装</code>、<code>继承</code>、<code>多态</code>、<code>抽象</code>、<code>接口</code>、…</li><li><strong>第三部分：JavaSE核心高级应用：</strong><code>集合</code>、<code>I/O</code>、<code>多线程</code>、<code>网络编程</code>、<code>反射机制</code>、…</li><li><strong>第四部分：Java新特性：</strong><code>Lambda表达式</code>、<code>函数式编程</code>、<code>新Date/Time API</code>、<code>接口的默认、静态和私有方法</code>、…</li><li><strong>第五部分：MySQL&#x2F;JDBC核心技术：</strong><code>SQL语句</code>、<code>数据库连接池</code>、<code>DBUtils</code>、<code>事务管理</code>、<code>批处理</code>、…</li></ul><h2 id="1-2-计算机语言介绍（了解）"><a href="#1-2-计算机语言介绍（了解）" class="headerlink" title="1.2 计算机语言介绍（了解）"></a>1.2 计算机语言介绍（了解）</h2><h3 id="计算机语言是什么"><a href="#计算机语言是什么" class="headerlink" title="计算机语言是什么"></a>计算机语言是什么</h3><p>所谓计算机编程语言，就是人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。</p><h3 id="计算机语言发展"><a href="#计算机语言发展" class="headerlink" title="计算机语言发展"></a>计算机语言发展</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1602830735505.png" alt="1602830735505"></p><p><em><strong>·第一代语言：机器语言(相当于人类的原始阶段)</strong></em></p><p>机器语言由数字组成所有指令。当让你使用数字编程，写几百个数字、甚至几千个数字，每天面对的是纯数字，我大胆预测：“程序员群体100%会有精神问题”。</p><p>机器语言通常由数字串组成（最终被简化成01），对于人类来说，机器语言过于繁琐。使用机器语言，人类无法编出复杂的程序。如下为一段典型的机器码：</p><blockquote><ol><li><p>0000,0000,000000010000 代表 LOAD A, 16</p></li><li><p>0000,0001,000000000001 代表 ADD    B, 1</p></li><li><p>0001,0001,000000010000 代表 STORE C, 16</p></li></ol></blockquote><p><em><strong>·第二代语言：汇编语言（相当于人类的手工业阶段）</strong></em></p><p>为了编程的方便，以及解决更加复杂的问题。程序员开始改进机器语言，使用英文缩写的助记符来表示基本的计算机操作。这些助记符构成了汇编语言的基础。如下是一些常见的汇编语言助记符(单词)比如：LOAD、MOVE之类，这样人更容易使用了。识别几百、几千个单词，感觉要比几百几千个数字，美妙多了。汇编语言相当于人类的手工业社会，需要技术极其娴熟的工匠，但是开发效率也非常低。</p><p>汇编语言虽然能编写高效率的程序，但是学习和使用都不是易事，并且很难调试。另一个复杂的问题，汇编语言以及早期的计算机语言（Basic、Fortran等）没有考虑结构化设计原则，而是使用goto语句来作为程序流程控制的主要方法。这样做的后果是：一大堆混乱的调转语句使得程序几乎不可能被读懂。对于那个时代的程序员，能读懂上个月自己写的代码都成为一种挑战。</p><p>​汇编语言仍然应用于工业电子编程领域、软件的加密解密、计算机病毒分析等。</p><p><em><strong>·第三代：高级语言（相当于人类的工业阶段）</strong></em></p><p>对于简单的任务，汇编语言可以胜任。但是随着计算机的发展，渗透到了工作生活的更多的方面，一些复杂的任务出现了，汇编语言就显得力不从心（应该说是程序员使用汇编语言解决复杂问题出现了瓶颈）。于是，出现了高级语言。像我们熟知的C、C++、Java等等都是高级语言。</p><p>高级语言允许程序员使用接近日常英语的指令来编写程序。例如，实现一个简单的任务：A+B&#x3D;C  , 使用机器语言、汇编语言和高级语言的的实现 </p><p><strong>从上面这个简单的加法计算，可以看出越到高级语言，越接近人的思维，人使用起来就越方便。</strong></p><p>高级语言的出现，尤其是面向对象语言的出现，相当于人类的工业社会，高级语言极其易用，编程门槛和难度大大降低，大量的人员进入软件开发行业，为软件爆发性的增长提供了充足的人力资源。目前以及可预见的将来，计算机语言仍然处于“第三代高级语言”阶段。</p><h3 id="计算机语言排行榜"><a href="#计算机语言排行榜" class="headerlink" title="计算机语言排行榜"></a>计算机语言排行榜</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/TIOBE%E8%AF%AD%E8%A8%80%E6%8E%92%E8%A1%8C.png" alt="1564370752557"></p><h3 id="计算机语言走势"><a href="#计算机语言走势" class="headerlink" title="计算机语言走势"></a>计算机语言走势</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/TIOBE%E7%A4%BE%E5%8C%BA%E8%AF%AD%E8%A8%80%E5%8F%91%E5%B1%95%E6%8C%87%E6%95%B0.png" alt="1561382254180"></p><h2 id="1-3-Java语言概述（了解）"><a href="#1-3-Java语言概述（了解）" class="headerlink" title="1.3 Java语言概述（了解）"></a>1.3 Java语言概述（了解）</h2><h3 id="Java生态圈"><a href="#Java生态圈" class="headerlink" title="Java生态圈"></a>Java生态圈</h3><p><strong>Java是目前应用最为广泛的软件开发平台之一。</strong>随着Java以及Java社区的不断壮大，Java 也早已不再是简简单单的一门计算机语言了，它更是一个平台、一种文化、一个社区。</p><p><strong>作为一个平台，</strong>Java虚拟机扮演着举足轻重的作用。除了 Java语言，任何一种能够被编译成字节码的计算机语言都属于Java这个平台。Groovy、Scala、 JRuby、Kotlin等都是Java平台的一部分，它们依赖于Java虚拟机，同时，Java平台也因为它们变得更加丰富多彩。</p><p><strong>作为一种文化，</strong>Java几乎成为了 “开源”的代名词。在Java程序中，有着数不清的开源软件和框架。如Tomcat、Struts, Hibernate, Spring等。就连JDK和JVM自身也有不少开源的实现，如OpenJDK、Apache Harmony。可以说，“共享”的精神在Java世界里体现得淋漓尽致。</p><p><strong>作为一个社区，</strong>Java拥有全世界最多的技术拥护者和开源社区支持，有数不清的论坛和资料。从桌面应用软件、嵌入式开发到企业级应用、后台服务器、中间件，都可以看到Java的身影。其应用形式之复杂、参与人数之众多也令人咋舌。可以说，Java社区已经俨然成为了一个良好而庞大的生态系统。<strong>其实这才是Java最大的优势和财富。</strong></p><h3 id="Java-是最好的语言吗？"><a href="#Java-是最好的语言吗？" class="headerlink" title="Java 是最好的语言吗？"></a>Java 是最好的语言吗？</h3><p>不是，因为在每个领域都有更合适的编程语言。</p><ul><li><p>C 语言无疑是现代计算机软件编程语言的王者，几乎所有的操作系统都是 C 语言写成的。C++ 是面向对象的 C 语言，一直在不断的改进。</p></li><li><p>JavaScript 是能运行在浏览器中的语言，丰富的前端界面离不开 Javascript 的功劳。近年来的 Node.js 又在后端占有一席之地。</p></li><li><p>Python 用于系统管理，并通过高性能预编译的库，提供 API 来进行科学计算，文本处理等，是 Linux 必选的解释性语言。</p></li><li><p>Ruby 强于 DSL（领域特定语言），程序员可以定义丰富的语义来充分表达自己的思想。</p></li><li><p>Erlang 就是为分布式计算设计的，能保证在大规模并发访问的情况下，保持强壮和稳定性。</p></li><li><p>Go 语言内置了并发能力，可以编译成本地代码。当前新的网络相关项目，很大比例是由 Go 语言编写的，如 Docker、Kubernetes 等。</p></li><li><p>编写网页用 PHP，函数式编程有 Lisp，编写 iOS 程序有 Swift&#x2F;Objective-C。</p></li><li><p>R的思想是：它可以提供一些集成的统计工具，但更大量的是它提供各种数学计算、统计计算的<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0/301912">函数</a>，从而使使用者能灵活机动的进行数据分析，甚至创造出符合需要的新的统计计算方法 </p></li><li><p>SQL 是用于访问和处理数据库的标准的计算机语言， 这类数据库包括：MySQL，Oracle, Sybase, SQL Server, DB2, Access 等等</p></li></ul><p>一句话概括，<strong>能留在排行榜之上的语言，都是好的语言，在其所在的领域能做到最好。</strong></p><h3 id="Java语言发展历史"><a href="#Java语言发展历史" class="headerlink" title="Java语言发展历史"></a>Java语言发展历史</h3><p>Java诞生于SUN（Stanford University Network），09年SUN被Oracle（甲骨文）收购。</p><p>Java之父是詹姆斯.高斯林(James Gosling)。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1602832163311.png" alt="1602832163311"></p><p>1996年发布JDK1.0版。</p><p>目前最新的版本是Java13。我们学习的Java8。</p><table><thead><tr><th align="center">发行版本</th><th align="center">发行时间</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">Java</td><td align="center">1995.05.23</td><td align="center">Sun公司在Sun world会议上正式发布Java和HotJava浏览器</td></tr><tr><td align="center">Java 1.0</td><td align="center">1996.01.23</td><td align="center">Sun公司发布了Java的第一个开发工具包</td></tr><tr><td align="center">Java 1.1</td><td align="center">1997.02.19</td><td align="center"></td></tr><tr><td align="center">Java 1.2</td><td align="center">1998.12.08</td><td align="center">拆分成：J2SE（标准版）、J2EE（企业版）、J2ME（小型版）</td></tr><tr><td align="center">Java 1.3</td><td align="center">2000.05.08</td><td align="center"></td></tr><tr><td align="center">Java1.4</td><td align="center">2004.02.06</td><td align="center"></td></tr><tr><td align="center"><strong>Java 5.0</strong></td><td align="center">2004.09.30</td><td align="center">①版本号从1.4直接更新至5.0；②平台更名为JavaSE、JavaEE、JavaME</td></tr><tr><td align="center">Java 6.0</td><td align="center">2006.12.11</td><td align="center">2009.04.20 Oracle宣布收购SUN公司</td></tr><tr><td align="center">Java 7.0</td><td align="center">2011.07.02</td><td align="center"></td></tr><tr><td align="center"><strong>Java 8.0</strong></td><td align="center">2014.03.18</td><td align="center"></td></tr><tr><td align="center">Java 9.0</td><td align="center">2017.09.22</td><td align="center">①每半年更新一次；②Java 9.0开始不再支持windows 32位系统</td></tr><tr><td align="center">Java 10.0</td><td align="center">2018.03.21</td><td align="center"></td></tr><tr><td align="center">Java 11.0</td><td align="center">2018.09.25</td><td align="center">JDK安装包取消独立JRE安装包</td></tr><tr><td align="center">Java 12.0</td><td align="center">2019.03.19</td><td align="center"></td></tr><tr><td align="center">Java 13.0</td><td align="center">2019.9.18</td><td align="center"></td></tr></tbody></table><h3 id="Java技术体系平台"><a href="#Java技术体系平台" class="headerlink" title="Java技术体系平台"></a>Java技术体系平台</h3><ul><li><p>JavaSE（Java Platform, Standard Edition标准版）：允许您在桌面和服务器上开发和部署Java应用程序。Java提供了丰富的用户界面、性能、多功能性、可移植性和当今应用程序所需的安全性。</p></li><li><p>JavaEE（Java Platform, Enterprise Edition企业版）：是为开发企业环境下的应用程序提供的一套解决方案，主要针对于Web应用程序开发。</p></li><li><p>JavaME（Java Platform, Micro Edition 小型版）：为互联网上的嵌入式和移动设备上运行的应用提供了一个健壮、灵活的环境：微控制器、传感器、网关、移动电话、个人数字助理（PDA）、电视机顶盒、打印机等等。JavaME包括灵活的用户界面、健壮的安全性、内置的网络协议，以及支持动态下载的网络和离线应用程序。基于JavaME的应用程序在许多设备上都是可移植的，但是利用了每个设备的本机功能。</p><ul><li><p>Java Embedded: 用于解锁物联网的智能设备的价值：<br>通过远程市场更新和刷新功能延长产品生命周期和价值；<br>利用Java的可伸缩性、健壮性、可移植性和全套功能，提高生产效率，降低成本，缩短上市时间；<br>在边缘启用快速数据功能；</p></li><li><p>Java Card：使安全元件（如智能卡和其他防篡改安全芯片）能够承载采用Java技术的应用程序。Java card提供了一个安全的、可互操作的执行平台，它可以在一个资源受限的设备上存储和更新多个应用程序，同时保持最高的认证级别和与标准的兼容性。</p></li><li><p>Java TV：是一种基于JavaME的技术，它为开发在tv和机顶盒设备上运行的java应用程序提供了一个性能良好、安全且易于实现的解决方案。使用Java TV运行时，开发人员可以轻松创建应用程序，例如电子节目指南（EPG）、视频点播（VOD）客户端、游戏和教育应用程序、用于访问Internet数据的应用程序（例如天气、新闻播报器、社交网络）以及大多数蓝光光盘标题上的用户界面和奖金内容。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1597635498066.png" alt="1597635498066"></p></li></ul></li></ul><h2 id="1-4-Java语言跨平台原理"><a href="#1-4-Java语言跨平台原理" class="headerlink" title="1.4 Java语言跨平台原理"></a>1.4 Java语言跨平台原理</h2><h3 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h3><ul><li><strong>完全面向对象：</strong>Java语言支持封装、继承、多态，面向对象编程，让程序更好达到<code>高内聚</code>，<code>低耦合</code>的标准。</li><li><strong>支持分布式：</strong>Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。</li><li><strong>健壮型：</strong>Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。</li><li><strong>安全：</strong>Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。如：安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查。</li><li><strong>跨平台性：</strong>Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。</li></ul><h3 id="Java语言的跨平台原理"><a href="#Java语言的跨平台原理" class="headerlink" title="Java语言的跨平台原理"></a>Java语言的跨平台原理</h3><ul><li><strong>跨平台</strong>：任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为<strong>Java语言的跨平台特性</strong>。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM运行在操作系统上。</li><li><strong>JVM</strong>（Java Virtual Machine ）：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境之一，也是Java 最具吸引力的特性之一。我们编写的Java代码，都运行在<strong>JVM</strong> 之上。</li></ul><p>![imgs\1602837063456.png)</p><p>如图所示，Java的虚拟机本身是不具备跨平台功能的，每个操作系统下都有不同版本的虚拟机。</p><ul><li>**JRE ** (Java Runtime Environment) ：是Java程序的运行时环境，包含<code>JVM</code> 和运行时所需要的<code>核心类库</code>。</li><li><strong>JDK</strong>  (Java Development Kit)：是Java程序开发工具包，包含<code>JRE</code> 和开发人员使用的工具。</li></ul><p>我们想要运行一个已有的Java程序，那么只需安装<code>JRE</code> 即可。</p><p>我们想要开发一个全新的Java程序，那么必须安装<code>JDK</code> ，其内部包含<code>JRE</code>。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/JDKJRE.jpg"></p><p><img src="/imgs/JDKJREJVM.png" alt="1561383524152"></p><h2 id="1-5-JDK下载和安装"><a href="#1-5-JDK下载和安装" class="headerlink" title="1.5 JDK下载和安装"></a>1.5 JDK下载和安装</h2><h3 id="JDK的下载"><a href="#JDK的下载" class="headerlink" title="JDK的下载"></a>JDK的下载</h3><ul><li><p>下载网址：<a href="http://www.oracle.com/">www.oracle.com</a> </p></li><li><p>下载步骤：</p><ul><li><p>登录Oracle公司官网，<a href="http://www.oracle.com，如图所示：在底部选择Developers开发者">www.oracle.com，如图所示：在底部选择Developers开发者</a></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%8B%E8%BD%BD1.png" alt="1572254490435"></p></li><li><p>在<strong>Developers</strong>页面中间的技术分类部分，选择<code>Java</code>，单击进入，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%8B%E8%BD%BD2.png" alt="1572309624793"></p></li><li><p>下拉页面，找到<strong>Java</strong>，在此选择<code>JavaSEDownload</code>，单击进入，如图所示：</p></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%8B%E8%BD%BD3.png" alt="1572309711034"></p><ul><li>选择Downloads选项卡，默认是最新版的Java13下载，在此处选择<code>Oracle JDK DOWNLOAD</code>，单击进入可以下载JDK13，如图所示：</li></ul></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%8B%E8%BD%BD4.png" alt="1572309841433"></p><p>选择<strong>Accept License Agreement</strong>，并选择对应的操作系统类型，如图所示</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%8B%E8%BD%BD5.png" alt="1572310014408"></p><ul><li>如果要下载之前JDK版本，那么在刚才JavaSE&#x2F;Download页面，下拉到最下面，找到Java Archive（Java档案馆），单击Download</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%8B%E8%BD%BD6.png" alt="1572310151403"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%8B%E8%BD%BD7.png"></p><p>例如：这里选择JavaSE 8(8U211 and later)，选择<strong>Accept License Agreement</strong>，并选择对应的操作系统类型。早期版本分为32位&#x2F;64位操作系统区分，其中x86表示32位，x64表示64位。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%8B%E8%BD%BD8.png" alt="1572310481782"></p><h3 id="JDK的安装"><a href="#JDK的安装" class="headerlink" title="JDK的安装"></a>JDK的安装</h3><ul><li><p>安装步骤：</p><ul><li><p>双击<code>jdk-8u202-windows-x64.exe</code>文件，并单击<code>下一步</code>，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdk1.jpg"></p></li><li><p>取消独立JRE的安装，单击<code>公共JRE前的下拉列表</code>，选择<code>此功能将不可用</code>如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdk2.jpg"></p></li><li><p>修改安装路径，单击更改，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdk3.jpg"></p></li><li><p>将安装路径修改为<code>D:\develop\Java\jdk1.8.0_202\</code>，并单击确定，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdk4.jpg"></p></li><li><p>单击下一步，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdk5.jpg"></p></li><li><p>稍后几秒，安装完成，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdk6.jpg"></p></li><li><p>目录结构，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdk7.png" alt="1561386792819"></p></li></ul></li></ul><h2 id="1-6-常用DOS命令（了解）"><a href="#1-6-常用DOS命令（了解）" class="headerlink" title="1.6  常用DOS命令（了解）"></a>1.6  常用DOS命令（了解）</h2><h3 id="什么是DOS"><a href="#什么是DOS" class="headerlink" title="什么是DOS"></a>什么是DOS</h3><p>Java语言的初学者，学习一些DOS命令，会非常有帮助。DOS是一个早期的操作系统，现在已经被Windows系统取代，对于我们开发人员，目前需要在DOS中完成一些事情，因此就需要掌握一些必要的命令。</p><p>Dos： Disk Operating System 磁盘操作系统, 简单说一下windows的目录结构。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213095127784.png" alt="image-20200213095127784"></p><h3 id="进入DOS操作窗口"><a href="#进入DOS操作窗口" class="headerlink" title="进入DOS操作窗口"></a>进入DOS操作窗口</h3><ul><li><p>按下<code>Windows+R</code>键，打开运行窗口，输入<code>cmd</code>回车，进入到DOS的操作窗口。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E8%BF%90%E8%A1%8C%E7%AA%97%E5%8F%A3.jpg" alt="运行窗口"></p></li><li><p>打开DOS命令行后，看到一个路径 <code>C:\Users\...</code>  就表示我们现在操作的磁盘是C盘的Users的final目录。</p></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213083838587.png" alt="image-20200213083838587"></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="进入目录命令：cd"><a href="#进入目录命令：cd" class="headerlink" title="进入目录命令：cd"></a>进入目录命令：cd</h4><p>（1）回到根目录</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /  或  <span class="built_in">cd</span> \</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213103050182.png" alt="image-20200213103050182"></p><p>（2）切换到上一级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213102356751.png" alt="image-20200213102356751"></p><p>（3）当前盘的其他目录下</p><p>绝对路径：从根目录开始定位，例如：cd d:\test200\1  或者  cd d:&#x2F;test200&#x2F;1</p><p>相对路径：从当前目录开始定位，例如：..\..\..\test200\1   或者  ..&#x2F;..&#x2F;..&#x2F;test200&#x2F;1</p><p>例如：现在在d:&#x2F;test100&#x2F;hello&#x2F;a目录，要切换到d:&#x2F;test200&#x2F;1目录</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213101458688.png" alt="image-20200213101458688"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213101428222.png" alt="image-20200213101428222"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213101246431.png" alt="image-20200213101246431"></p><h4 id="切换盘符命令"><a href="#切换盘符命令" class="headerlink" title="切换盘符命令"></a>切换盘符命令</h4><p>（1）直接盘符:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：要切换到D盘，直接d:</span><br></pre></td></tr></table></figure><p>（2）使用cd命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：要切换到E盘，可以使用<span class="built_in">cd</span> /D e:</span><br></pre></td></tr></table></figure><p>使用 &#x2F;D 开关，除了改变驱动器的当前目录之外，还可改变当前驱动器。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213101745482.png" alt="image-20200213101745482"></p><h4 id="查看当前目录下有什么命令：dir"><a href="#查看当前目录下有什么命令：dir" class="headerlink" title="查看当前目录下有什么命令：dir"></a>查看当前目录下有什么命令：dir</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213101952912.png" alt="image-20200213101952912"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213102043229.png" alt="image-20200213102043229"></p><h4 id="新建目录命令：md-make-directory"><a href="#新建目录命令：md-make-directory" class="headerlink" title="新建目录命令：md (make directory)"></a>新建目录命令：md (make directory)</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//在当前目录下创建hello文件夹</span><br><span class="line"><span class="built_in">md</span> hello</span><br><span class="line"></span><br><span class="line">//在当前目录下创建a,b,c三个文件夹</span><br><span class="line"><span class="built_in">md</span> a b c</span><br><span class="line"></span><br><span class="line">//在d盘test200下创建ok200文件夹</span><br><span class="line"><span class="built_in">md</span> d:\test200\ok200</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213103500670.png" alt="image-20200213103500670"></p><h4 id="删除文件命令：del"><a href="#删除文件命令：del" class="headerlink" title="删除文件命令：del"></a>删除文件命令：del</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//删除指定文件</span><br><span class="line"><span class="built_in">del</span> 文件名.扩展名</span><br><span class="line"><span class="built_in">del</span> 目标目录\文件名.扩展名</span><br><span class="line"></span><br><span class="line">删除所有文件并询问</span><br><span class="line"><span class="built_in">del</span> *.*</span><br><span class="line"></span><br><span class="line">删除所有文件不询问</span><br><span class="line"><span class="built_in">del</span> /Q *.*</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213104335172.png" alt="image-20200213104335172"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213104501033.png" alt="image-20200213104501033"></p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213104938765.png" alt="image-20200213104938765" style="zoom:80%;" /><h4 id="删除目录命令：rd（remove-directory"><a href="#删除目录命令：rd（remove-directory" class="headerlink" title="删除目录命令：rd（remove directory)"></a>删除目录命令：rd（remove directory)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//删除空目录</span><br><span class="line">rd 空目录名</span><br><span class="line"></span><br><span class="line">//删除目录以及下面的子目录和文件，带询问</span><br><span class="line">rd /S 非空目录名</span><br><span class="line"></span><br><span class="line">//删除目录以及下面的子目录和文件，不带询问</span><br><span class="line">rd /S/Q 非空目录名</span><br></pre></td></tr></table></figure><p>注意：你在d:\test100\hello\a中，你不能删除test100、hello、a这几个目录</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213105002765.png" alt="image-20200213105002765"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200213105012075.png" alt="image-20200213105012075"></p><h4 id="清屏命令：cls"><a href="#清屏命令：cls" class="headerlink" title="清屏命令：cls"></a>清屏命令：cls</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cls</span></span><br></pre></td></tr></table></figure><h4 id="退出命令：exit"><a href="#退出命令：exit" class="headerlink" title="退出命令：exit"></a>退出命令：exit</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="1-7-配置环境变量"><a href="#1-7-配置环境变量" class="headerlink" title="1.7 配置环境变量"></a>1.7 配置环境变量</h2><p>为什么配置path？</p><p>希望在命令行使用javac.exe等工具时，任意目录下都可以找到这个工具所在的目录。</p><p>例如：我们在C:\Users\Irene目录下使用java命令，结果如下：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572317249341.png" alt="1572317249341"></p><p>我们在JDK的安装目录的bin目录下使用java命令，结果如下：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1572317330332.png" alt="1572317330332"></p><p>我们不可能每次使用java.exe，javac.exe等工具的时候都进入到JDK的安装目录下，太麻烦了。我们希望在任意目录下都可以使用JDK的bin目录的开发工具，因此我们需要告诉操作系统去哪里找这些开发工具，这就需要配置path环境变量。</p><h3 id="1-7-1-只配置path"><a href="#1-7-1-只配置path" class="headerlink" title="1.7.1 只配置path"></a>1.7.1 只配置path</h3><ul><li><p>步骤：</p><ul><li><p>打开桌面上的计算机，进入后在左侧找到<code>计算机</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F1.jpg"></p></li><li><p>选择<code>高级系统设置</code>，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.jpg"></p></li><li><p>在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F3.jpg"></p></li><li><p>在<code>系统变量</code>中，选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ,如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F6.jpg"></p></li><li><p>在变量值的最前面，键入<code>D:\develop\Java\jdk1.8.0_202\bin;</code>  分号必须要写，而且还要是<strong>英文符号</strong>。如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F9.png" alt="1561386643207"></p></li><li><p>环境变量配置完成，<strong>重新开启</strong>DOS命令行，在任意目录下输入<code>javac</code> 命令，运行成功。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F8.jpg"></p></li></ul></li></ul><h3 id="1-7-2-配置JAVA-HOME-path"><a href="#1-7-2-配置JAVA-HOME-path" class="headerlink" title="1.7.2 配置JAVA_HOME+path"></a>1.7.2 配置JAVA_HOME+path</h3><ul><li><p>步骤：</p><ul><li><p>打开桌面上的计算机，进入后在左侧找到<code>计算机</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F1.jpg"></p></li><li><p>选择<code>高级系统设置</code>，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.jpg"></p></li><li><p>在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F3.jpg"></p></li><li><p>在<code>系统变量</code>中，单击<code>新建</code> ，创建新的环境变量，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F4.jpg"></p></li><li><p>变量名输入<code>JAVA_HOME</code>，变量值输入 <code>D:\develop\Java\jdk1.8.0_202</code> ，并单击<code>确定</code>，如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F5.jpg"></p></li><li><p>选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ,如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F6.jpg"></p></li><li><p>在变量值的最前面，键入<code>%JAVA_HOME%\bin;</code>  分号必须要写，而且还要是<strong>英文符号</strong>。如图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F7.jpg"></p></li><li><p>环境变量配置完成，<strong>重新开启</strong>DOS命令行，在任意目录下输入<code>javac</code> 命令，运行成功。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F8.jpg"></p></li></ul></li></ul><h2 id="1-8-入门程序HelloWorld"><a href="#1-8-入门程序HelloWorld" class="headerlink" title="1.8 入门程序HelloWorld"></a>1.8 入门程序HelloWorld</h2><h3 id="1-8-1-HelloWorld案例"><a href="#1-8-1-HelloWorld案例" class="headerlink" title="1.8.1 HelloWorld案例"></a>1.8.1 HelloWorld案例</h3><h4 id="程序开发步骤说明"><a href="#程序开发步骤说明" class="headerlink" title="程序开发步骤说明"></a>程序开发步骤说明</h4><p>JDK安装完毕，可以开发我们第一个Java程序了。</p><p>Java程序开发三步骤：<strong>编写</strong>、<strong>编译</strong>、<strong>运行</strong>。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4.jpg" alt="开发步骤"></p><h4 id="编写Java源程序"><a href="#编写Java源程序" class="headerlink" title="编写Java源程序"></a>编写Java源程序</h4><ol><li><p>在<code>D:\atguigu\day01_code</code> 目录下新建文本文件，完整的文件名修改为<code>HelloWorld.java</code>，其中文件名为<code>HelloWorld</code>，后缀名必须为<code>.java</code> 。</p></li><li><p>用记事本或notepad++等文本编辑器打开</p></li><li><p>在文件中键入文本并保存，代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>友情提示：</p><p>每个字母和符号必须与示例代码一模一样。</p></blockquote><p>第一个<code>HelloWord</code> 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的<code>Java源文件</code> 编译成JVM可以看懂的<code>字节码文件</code> ，也就是<code>.class</code>文件。</p><p>编译Java源文件</p><p>在DOS命令行中，<strong>进入</strong><code>D:\atguigu\javaee\JavaSE20190624\code\day01_code</code><strong>目录</strong>，使用<code>javac</code> 命令进行编译。</p><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Java源文件名.后缀名</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/HelloWorld%E7%BC%96%E8%AF%91%E7%BB%93%E6%9E%9C.png" alt="1561387081272"></p><p>编译成功后，命令行没有任何提示。打开<code>D:\atguigu\javaee\JavaSE20190624\code\day01_code</code>目录，发现产生了一个新的文件 <code>HelloWorld.class</code>，该文件就是编译后的文件，是Java的可运行文件，称为<strong>字节码文件</strong>，有了字节码文件，就可以运行程序了。 </p><blockquote><p>Java源文件的编译工具<code>javac.exe</code></p></blockquote><h4 id="运行Java程序"><a href="#运行Java程序" class="headerlink" title="运行Java程序"></a>运行Java程序</h4><p>在DOS命令行中，<strong>进入Java源文件的目录</strong>，使用<code>java</code> 命令进行运行。</p><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java 类名字</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><blockquote><p>友情提示：</p><p>java HelloWord  不要写 不要写 不要写 .class</p></blockquote><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/HelloWorld%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="1561387134284"></p><blockquote><p>Java字节码文件的运行工具：java.exe</p></blockquote><h3 id="1-8-2-HelloWorld案例常见错误"><a href="#1-8-2-HelloWorld案例常见错误" class="headerlink" title="1.8.2 HelloWorld案例常见错误"></a>1.8.2 HelloWorld案例常见错误</h3><ul><li><pre><code>单词拼写问题</code></pre><ul><li>正确：class错误：Class</li><li>正确：String              错误：string</li><li>正确：System            错误：system</li><li>正确：main错误：mian</li></ul></li><li><pre><code>Java语言是一门严格区分大小写的语言</code></pre></li><li><pre><code>标点符号使用问题</code></pre><ul><li>不能用中文符号，英文半角的标点符号（正确）</li><li>括号问题，成对出现</li></ul></li></ul><h3 id="1-8-3-Java程序的结构与格式"><a href="#1-8-3-Java程序的结构与格式" class="headerlink" title="1.8.3 Java程序的结构与格式"></a>1.8.3 Java程序的结构与格式</h3><p>结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">类&#123;</span><br><span class="line">    方法&#123;</span><br><span class="line">        语句;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式：</p><p>（1）每一级缩进一个Tab键</p><p>（2）{}的左半部分在行尾，右半部分单独一行，与和它成对的”{“的行首对齐</p><h3 id="1-8-4-Java程序的入口"><a href="#1-8-4-Java程序的入口" class="headerlink" title="1.8.4 Java程序的入口"></a>1.8.4 Java程序的入口</h3><p>Java程序的入口是main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-5-编写Java程序时应该注意的问题"><a href="#1-8-5-编写Java程序时应该注意的问题" class="headerlink" title="1.8.5 编写Java程序时应该注意的问题"></a>1.8.5 编写Java程序时应该注意的问题</h3><p>1、字符编码问题</p><p>当cmd命令行窗口的字符编码与.java源文件的字符编码不一致，如何解决？</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%AF%91%E4%B9%B1%E7%A0%81.png" alt="1557881223916"></p><p>解决方案一：</p><pre><code>在Notepad++等编辑器中，修改源文件的字符编码</code></pre><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/Notepad%E4%BF%AE%E6%94%B9%E6%BA%90%E6%96%87%E4%BB%B6%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.png" alt="1557881271819"></p><p>解决方案二：</p><pre><code>在使用javac命令式，可以指定源文件的字符编码</code></pre><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -encoding utf-<span class="number">8</span> Review01.java</span><br></pre></td></tr></table></figure><p>2、大小写问题</p><p>（1）源文件名：</p><pre><code>不区分大小写，我们建议大家还是区分</code></pre><p>（2）字节码文件名与类名</p><pre><code>区分大小写</code></pre><p>（3）代码中</p><pre><code>区分大小写</code></pre><p>3、源文件名与类名一致问题？</p><p>（1）源文件名是否必须与类名一致？public呢？</p><p>如果这个类不是public，那么源文件名可以和类名不一致。</p><p>如果这个类是public，那么要求源文件名必须与类名一致。</p><p>我们建议大家，不管是否是public，都与源文件名保持一致，而且一个源文件尽量只写一个类，目的是为了好维护。</p><p>（2）一个源文件中是否可以有多个类？public呢？</p><p>一个源文件中可以有多个类，编译后会生成多个.class字节码文件。</p><p>但是一个源文件只能有一个public的类。</p><p>（3）main必须在public的类中吗？</p><p>不是。</p><p>但是后面写代码时，基本上main习惯上都在public类中。</p><h1 id="第二章-Java基础知识"><a href="#第二章-Java基础知识" class="headerlink" title="第二章  Java基础知识"></a>第二章  Java基础知识</h1><h2 id="2-1-注释（annotation）"><a href="#2-1-注释（annotation）" class="headerlink" title="2.1 注释（annotation）"></a>2.1 注释（<em>annotation</em>）</h2><ul><li><p><strong>注释</strong>：就是对代码的解释和说明。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须要的，它不影响程序的编译和运行。</p></li><li><p>Java中有<code>单行注释</code>、<code>多行注释</code>和<code>文档注释</code></p><ul><li><p>单行注释以 <code>//</code>开头，以<code>换行</code>结束，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释内容</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释以 <code>/*</code>开头，以<code>*/</code>结束，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注释内容</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>文档注释以<code>/**</code>开头，以<code>*/</code>结束 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">注释内容</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-2-关键字（keyword）"><a href="#2-2-关键字（keyword）" class="headerlink" title="2.2 关键字（keyword）"></a>2.2 关键字（<em>keyword</em>）</h2><p><strong>关键字</strong>：是指在程序中，Java已经定义好的单词，具有特殊含义。</p><ul><li>HelloWorld案例中，出现的关键字有 <code>public </code> 、<code>class</code> 、 <code>static</code> 、  <code>void</code>  等，这些单词已经被Java定义好</li><li>关键字的特点：全部都是<code>小写字母</code>。</li><li>关键字比较多，不需要死记硬背，学到哪里记到哪里即可。</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E5%85%B3%E9%94%AE%E5%AD%97%E8%A1%A8.png" alt="1555209180504"></p><blockquote><p> <strong>关键字一共50个，其中const和goto是保留字。</strong></p></blockquote><blockquote><p><strong>true,false,null看起来像关键字，但从技术角度，它们是特殊的布尔值和空值。</strong></p></blockquote><ul><li><ul><li><blockquote></blockquote></li></ul></li></ul><h2 id="2-3-标识符-identifier"><a href="#2-3-标识符-identifier" class="headerlink" title="2.3 标识符( identifier)"></a>2.3 标识符( identifier)</h2><p>简单的说，凡是程序员自己命名的部分都可以称为标识符。</p><p>即给类、变量、方法、包等命名的字符序列，称为标识符。</p><p>1、标识符的命名规则（必须遵守）</p><p>（1）Java的标识符只能使用26个英文字母大小写，0-9的数字，下划线_，美元符号$</p><p>（2）不能使用Java的关键字（包含保留字）和特殊值</p><p>（3）数字不能开头</p><p>（4）不能包含空格</p><p>（5）严格区分大小写</p><p>2、标识符的命名规范（遭受鄙视）</p><p>（1）见名知意</p><p>（2）类名、接口名等：每个单词的首字母都大写，形式：XxxYyyZzz，</p><p>例如：HelloWorld，String，System等</p><p>（3）变量、方法名等：从第二个单词开始首字母大写，其余字母小写，形式：xxxYyyZzz，</p><p>例如：age,name,bookName,main</p><p>（4）包名等：每一个单词都小写，单词之间使用点.分割，形式：xxx.yyy.zzz，</p><p>例如：java.lang</p><p>（5）常量名等：每一个单词都大写，单词之间使用下划线_分割，形式：XXX_YYY_ZZZ，</p><p>例如：MAX_VALUE,PI</p><h2 id="2-4-初识数据类型-data-type"><a href="#2-4-初识数据类型-data-type" class="headerlink" title="2.4 初识数据类型(data type)"></a>2.4 初识数据类型(data type)</h2><h3 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h3><p>Java的数据类型分为两大类：</p><ul><li><strong>基本数据类型</strong>：包括 <code>整数</code>、<code>浮点数</code>、<code>字符</code>、<code>布尔</code>。 </li><li><strong>引用数据类型</strong>：包括 <code>类</code>、<code>数组</code>、<code>接口</code>。</li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>四类八种基本数据类型：</p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%8C%83%E5%9B%B4.jpg" style="zoom:67%;" /><blockquote><p>Java中的默认类型：整数类型是<code>int</code> 、浮点类型是<code>double</code> 。</p></blockquote><h2 id="2-5-常量（constant）"><a href="#2-5-常量（constant）" class="headerlink" title="2.5 常量（constant）"></a>2.5 常量（<em>constant</em>）</h2><ul><li><p><strong>常量：在程序执行的过程中，其值不可以发生改变的量</strong></p></li><li><p>常量的分类：</p><ul><li><p>自定义常量：通过final关键字定义（后面在面向对象部分讲解）</p></li><li><p>字面值常量：</p><table><thead><tr><th align="center">字面值常量</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">字符串常量</td><td align="center">”HelloWorld“</td></tr><tr><td align="center">整数常量</td><td align="center">12，-23</td></tr><tr><td align="center">浮点常量</td><td align="center">12.34</td></tr><tr><td align="center">字符常量</td><td align="center">‘a’，’0’，‘我’</td></tr><tr><td align="center">布尔常量</td><td align="center">true，false</td></tr><tr><td align="center">空常量</td><td align="center">null</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//字符串常量</span></span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//整数常量</span></span><br><span class="line">System.out.println(<span class="number">12</span>);</span><br><span class="line">System.out.println(-<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//小数常量</span></span><br><span class="line">System.out.println(<span class="number">12.34</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符常量</span></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">System.out.println(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&#x27;我&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔常量</span></span><br><span class="line">System.out.println(<span class="literal">true</span>);</span><br><span class="line">System.out.println(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><p>​字符常量，单引号里面有且仅有一个字符</p><p>​空常量，不可以在输出语句中直接打印</p></blockquote></li></ul></li></ul><h2 id="2-6-变量（variable）"><a href="#2-6-变量（variable）" class="headerlink" title="2.6 变量（variable）"></a>2.6 变量（<em>variable</em>）</h2><h3 id="2-6-1-变量的概念"><a href="#2-6-1-变量的概念" class="headerlink" title="2.6.1 变量的概念"></a>2.6.1 变量的概念</h3><p><strong>变量：在程序执行的过程中，其值可以发生改变的量</strong></p><p>变量的作用：用来存储数据，代表内存的一块存储区域，这块内存中的值是可以改变的。</p><h3 id="2-6-2-变量的三要素"><a href="#2-6-2-变量的三要素" class="headerlink" title="2.6.2 变量的三要素"></a>2.6.2 变量的三要素</h3><p>1、数据类型</p><p>2、变量名</p><p>3、值</p><h3 id="2-6-3-变量的使用应该注意什么？"><a href="#2-6-3-变量的使用应该注意什么？" class="headerlink" title="2.6.3 变量的使用应该注意什么？"></a>2.6.3 变量的使用应该注意什么？</h3><p>1、先声明后使用</p><blockquote><p>如果没有声明，会报“找不到符号”错误</p></blockquote><p>2、在使用之前必须初始化</p><blockquote><p>如果没有初始化，会报“未初始化”错误</p></blockquote><p>3、变量有作用域</p><blockquote><p>如果超过作用域，也会报“找不到符号”错误</p></blockquote><p>4、在同一个作用域中不能重名</p><h3 id="2-6-4-变量的声明和赋值、使用的语法格式？"><a href="#2-6-4-变量的声明和赋值、使用的语法格式？" class="headerlink" title="2.6.4 变量的声明和赋值、使用的语法格式？"></a>2.6.4 变量的声明和赋值、使用的语法格式？</h3><p>1、变量的声明的语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据类型  变量名;</span><br><span class="line">例如：</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">double</span> weight;</span><br><span class="line"><span class="type">char</span> gender;</span><br><span class="line"><span class="type">boolean</span> isMarry;</span><br></pre></td></tr></table></figure><p>2、变量的赋值的语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">变量名 = 值;</span><br><span class="line">例如：</span><br><span class="line">age = <span class="number">18</span>;</span><br><span class="line">name = <span class="string">&quot;古力娜扎&quot;</span>; <span class="comment">//字符串的值必须用&quot;&quot;</span></span><br><span class="line">weight = <span class="number">44.4</span>;</span><br><span class="line">gender = <span class="string">&#x27;女&#x27;</span>;<span class="comment">//单字符的值必须使用&#x27;&#x27;</span></span><br><span class="line">isMarry = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>3、变量的使用的语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">通过变量名直接引用</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">(<span class="number">1</span>)输出变量的值</span><br><span class="line">System.out.println(age);</span><br><span class="line">System.out.println(name);</span><br><span class="line">System.out.println(weight);</span><br><span class="line">System.out.println(gender);</span><br><span class="line">System.out.println(isMarry);</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)计算</span><br><span class="line">age = age + <span class="number">1</span>;<span class="comment">//年龄增加1岁</span></span><br></pre></td></tr></table></figure><h3 id="2-6-7-练习：定义所有基本数据类型的变量和字符串变量并输出"><a href="#2-6-7-练习：定义所有基本数据类型的变量和字符串变量并输出" class="headerlink" title="2.6.7 练习：定义所有基本数据类型的变量和字符串变量并输出"></a>2.6.7 练习：定义所有基本数据类型的变量和字符串变量并输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 定义字节型变量</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="comment">// 定义短整型变量</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">// 定义整型变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">123456</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">// 定义长整型变量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">12345678900L</span>;</span><br><span class="line">        System.out.println(l);</span><br><span class="line">        <span class="comment">// 定义单精度浮点型变量</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">5.5F</span>;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        <span class="comment">// 定义双精度浮点型变量</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">8.5</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        <span class="comment">// 定义布尔型变量</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">bool</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.println(bool);</span><br><span class="line">        <span class="comment">// 定义字符型变量</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义字符串变量</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>long类型：如果赋值的常量整数超过int范围，那么需要在数字后面加L。</strong></p><p><strong>float类型：如果赋值为常量小数，那么需要在小数后面加F。</strong></p><p><strong>char类型：使用单引号’’</strong></p><p><strong>String类型：使用双引号””</strong></p></blockquote><h2 id="2-7-两种常见的输出语句"><a href="#2-7-两种常见的输出语句" class="headerlink" title="2.7 两种常见的输出语句"></a>2.7 两种常见的输出语句</h2><ul><li><p><strong>换行输出语句</strong>：输出内容，完毕后进行换行，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(输出内容);</span><br></pre></td></tr></table></figure></li><li><p><strong>直接输出语句</strong>：输出内容，完毕后不做任何处理，格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(输出内容);</span><br></pre></td></tr></table></figure></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;古力娜扎&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">对比如下两组代码：</span><br><span class="line">System.out.println(name);</span><br><span class="line">System.out.println(age);</span><br><span class="line"></span><br><span class="line">System.out.print(name);</span><br><span class="line">System.out.print(age);</span><br><span class="line"></span><br><span class="line">对比如下两组代码：</span><br><span class="line">System.out.print(<span class="string">&quot;姓名：&quot;</span> + name +<span class="string">&quot;,&quot;</span>);<span class="comment">//&quot;&quot;中的内容会原样显示</span></span><br><span class="line">System.out.println(<span class="string">&quot;年龄：&quot;</span> + age);<span class="comment">//&quot;&quot;中的内容会原样显示</span></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><p>​换行输出语句，括号内可以什么都不写，只做换行处理</p><p>​直接输出语句，括号内什么都不写的话，编译报错</p><p>​如果()中有多项内容，那么必须使用 + 连接起来</p><p>​如果某些内容想要原样输出，就用””引起来，而要输出变量中的内容，则不要把变量名用””引起来</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第1章-Java概述&quot;&gt;&lt;a href=&quot;#第1章-Java概述&quot; class=&quot;headerlink&quot; title=&quot;第1章 Java概述&quot;&gt;&lt;/a&gt;第1章 Java概述&lt;/h2&gt;&lt;h2 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;head</summary>
      
    
    
    
    <category term="重学Java基础" scheme="https://manamn.space/categories/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="重学Java基础" scheme="https://manamn.space/tags/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>IDEA快捷键大全</title>
    <link href="https://manamn.space/2022/07/28/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
    <id>https://manamn.space/2022/07/28/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</id>
    <published>2022-07-28T05:01:11.000Z</published>
    <updated>2022-10-16T04:43:25.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Idea快捷键大全（Windows）"><a href="#Idea快捷键大全（Windows）" class="headerlink" title="Idea快捷键大全（Windows）"></a>Idea快捷键大全（Windows）</h1><h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Ctrl + F</td><td align="left">在当前文件进行文本查找 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + R</td><td align="left">在当前文件进行文本替换 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Z</td><td align="left">撤销 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Y</td><td align="left">删除光标所在行 或 删除选中的行 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + X</td><td align="left">剪切光标所在行 或 剪切选择内容</td></tr><tr><td align="left">Ctrl + C</td><td align="left">复制光标所在行 或 复制选择内容</td></tr><tr><td align="left">Ctrl + D</td><td align="left">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + W</td><td align="left">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + E</td><td align="left">显示最近打开的文件记录列表</td></tr><tr><td align="left">Ctrl + N</td><td align="left">根据输入的 <strong>类名</strong> 查找类文件</td></tr><tr><td align="left">Ctrl + G</td><td align="left">在当前文件跳转到指定行处</td></tr><tr><td align="left">Ctrl + J</td><td align="left">插入自定义动态代码模板</td></tr><tr><td align="left">Ctrl + P</td><td align="left">方法参数提示显示</td></tr><tr><td align="left">Ctrl + Q</td><td align="left">光标所在的变量 &#x2F; 类名 &#x2F; 方法名等上面（也可以在提示补充的时候按），显示文档内容</td></tr><tr><td align="left">Ctrl + U</td><td align="left">前往当前光标所在的方法的父类的方法 &#x2F; 接口定义</td></tr><tr><td align="left">Ctrl + B</td><td align="left">进入光标所在的方法&#x2F;变量的接口或是定义出，等效于 <code>Ctrl + 左键单击</code></td></tr><tr><td align="left">Ctrl + K</td><td align="left">版本控制提交项目，需要此项目有加入到版本控制才可用</td></tr><tr><td align="left">Ctrl + T</td><td align="left">版本控制更新项目，需要此项目有加入到版本控制才可用</td></tr><tr><td align="left">Ctrl + H</td><td align="left">显示当前类的层次结构</td></tr><tr><td align="left">Ctrl + O</td><td align="left">选择可重写的方法</td></tr><tr><td align="left">Ctrl + I</td><td align="left">选择可继承的方法</td></tr><tr><td align="left">Ctrl + +</td><td align="left">展开代码</td></tr><tr><td align="left">Ctrl + -</td><td align="left">折叠代码</td></tr><tr><td align="left">Ctrl + &#x2F;</td><td align="left">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + [</td><td align="left">移动光标到当前所在代码的花括号开始位置</td></tr><tr><td align="left">Ctrl + ]</td><td align="left">移动光标到当前所在代码的花括号结束位置</td></tr><tr><td align="left">Ctrl + F1</td><td align="left">在光标所在的错误代码出显示错误信息</td></tr><tr><td align="left">Ctrl + F3</td><td align="left">调转到所选中的词的下一个引用位置</td></tr><tr><td align="left">Ctrl + F4</td><td align="left">关闭当前编辑文件</td></tr><tr><td align="left">Ctrl + F8</td><td align="left">在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td></tr><tr><td align="left">Ctrl + F9</td><td align="left">执行 Make Project 操作</td></tr><tr><td align="left">Ctrl + F11</td><td align="left">选中文件 &#x2F; 文件夹，使用助记符设定 &#x2F; 取消书签</td></tr><tr><td align="left">Ctrl + F12</td><td align="left">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td></tr><tr><td align="left">Ctrl + Tab</td><td align="left">编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td></tr><tr><td align="left">Ctrl + Enter</td><td align="left">智能分隔行</td></tr><tr><td align="left">Ctrl + End</td><td align="left">跳到文件尾</td></tr><tr><td align="left">Ctrl + Home</td><td align="left">跳到文件头</td></tr><tr><td align="left">Ctrl + Space</td><td align="left">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code> <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Delete</td><td align="left">删除光标后面的单词或是中文句</td></tr><tr><td align="left">Ctrl + BackSpace</td><td align="left">删除光标前面的单词或是中文句</td></tr><tr><td align="left">Ctrl + 1,2,3…9</td><td align="left">定位到对应数值的书签位置</td></tr><tr><td align="left">Ctrl + 左键单击</td><td align="left">在打开的文件标题上，弹出该文件路径</td></tr><tr><td align="left">Ctrl + 光标定位</td><td align="left">按 Ctrl 不要松开，会显示光标所在的类信息摘要</td></tr><tr><td align="left">Ctrl + 左方向键</td><td align="left">光标跳转到当前单词 &#x2F; 中文句的左侧开头位置</td></tr><tr><td align="left">Ctrl + 右方向键</td><td align="left">光标跳转到当前单词 &#x2F; 中文句的右侧开头位置</td></tr><tr><td align="left">Ctrl + 前方向键</td><td align="left">等效于鼠标滚轮向前效果</td></tr><tr><td align="left">Ctrl + 后方向键</td><td align="left">等效于鼠标滚轮向后效果</td></tr></tbody></table><h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Alt + &#96;</td><td align="left">显示版本控制常用操作菜单弹出层</td></tr><tr><td align="left">Alt + Q</td><td align="left">弹出一个提示，显示当前类的声明 &#x2F; 上下文信息</td></tr><tr><td align="left">Alt + F1</td><td align="left">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td></tr><tr><td align="left">Alt + F2</td><td align="left">对于前面页面，显示各类浏览器打开目标选择弹出层</td></tr><tr><td align="left">Alt + F3</td><td align="left">选中文本，逐个往下查找相同文本，并高亮显示</td></tr><tr><td align="left">Alt + F7</td><td align="left">查找光标所在的方法 &#x2F; 变量 &#x2F; 类被调用的地方</td></tr><tr><td align="left">Alt + F8</td><td align="left">在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td></tr><tr><td align="left">Alt + Home</td><td align="left">定位 &#x2F; 显示到当前文件的 <code>Navigation Bar</code></td></tr><tr><td align="left">Alt + Enter</td><td align="left">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 <code>（必备）</code></td></tr><tr><td align="left">Alt + Insert</td><td align="left">代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等</td></tr><tr><td align="left">Alt + 左方向键</td><td align="left">按左方向切换当前已打开的文件视图</td></tr><tr><td align="left">Alt + 右方向键</td><td align="left">按右方向切换当前已打开的文件视图</td></tr><tr><td align="left">Alt + 前方向键</td><td align="left">当前光标跳转到当前文件的前一个方法名位置</td></tr><tr><td align="left">Alt + 后方向键</td><td align="left">当前光标跳转到当前文件的后一个方法名位置</td></tr><tr><td align="left">Alt + 1,2,3…9</td><td align="left">显示对应数值的选项卡，其中 1 是 Project 用得最多</td></tr></tbody></table><h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Shift + F1</td><td align="left">如果有外部文档可以连接外部文档</td></tr><tr><td align="left">Shift + F2</td><td align="left">跳转到上一个高亮错误 或 警告位置</td></tr><tr><td align="left">Shift + F3</td><td align="left">在查找模式下，查找匹配上一个</td></tr><tr><td align="left">Shift + F4</td><td align="left">对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td></tr><tr><td align="left">Shift + F6</td><td align="left">对文件 &#x2F; 文件夹 重命名</td></tr><tr><td align="left">Shift + F7</td><td align="left">在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td></tr><tr><td align="left">Shift + F8</td><td align="left">在 Debug 模式下，跳出，表现出来的效果跟 <code>F9</code> 一样</td></tr><tr><td align="left">Shift + F9</td><td align="left">等效于点击工具栏的 <code>Debug</code> 按钮</td></tr><tr><td align="left">Shift + F10</td><td align="left">等效于点击工具栏的 <code>Run</code> 按钮</td></tr><tr><td align="left">Shift + F11</td><td align="left">弹出书签显示层</td></tr><tr><td align="left">Shift + Tab</td><td align="left">取消缩进</td></tr><tr><td align="left">Shift + ESC</td><td align="left">隐藏当前 或 最后一个激活的工具窗口</td></tr><tr><td align="left">Shift + End</td><td align="left">选中光标到当前行尾位置</td></tr><tr><td align="left">Shift + Home</td><td align="left">选中光标到当前行头位置</td></tr><tr><td align="left">Shift + Enter</td><td align="left">开始新一行。光标所在行下空出一行，光标定位到新行位置</td></tr><tr><td align="left">Shift + 左键单击</td><td align="left">在打开的文件名上按此快捷键，可以关闭当前打开文件</td></tr><tr><td align="left">Shift + 滚轮前后滚动</td><td align="left">当前文件的横向滚动轴滚动</td></tr></tbody></table><h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Ctrl + Alt + L</td><td align="left">格式化代码，可以对当前文件和整个包目录使用 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Alt + O</td><td align="left">优化导入的类，可以对当前文件和整个包目录使用 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Alt + I</td><td align="left">光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td></tr><tr><td align="left">Ctrl + Alt + T</td><td align="left">对选中的代码弹出环绕选项弹出层</td></tr><tr><td align="left">Ctrl + Alt + J</td><td align="left">弹出模板选择窗口，讲选定的代码加入动态模板中</td></tr><tr><td align="left">Ctrl + Alt + H</td><td align="left">调用层次</td></tr><tr><td align="left">Ctrl + Alt + B</td><td align="left">在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td></tr><tr><td align="left">Ctrl + Alt + V</td><td align="left">快速引进变量</td></tr><tr><td align="left">Ctrl + Alt + Y</td><td align="left">同步、刷新</td></tr><tr><td align="left">Ctrl + Alt + S</td><td align="left">打开 IntelliJ IDEA 系统设置</td></tr><tr><td align="left">Ctrl + Alt + F7</td><td align="left">显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td></tr><tr><td align="left">Ctrl + Alt + F11</td><td align="left">切换全屏模式</td></tr><tr><td align="left">Ctrl + Alt + Enter</td><td align="left">光标所在行上空出一行，光标定位到新行</td></tr><tr><td align="left">Ctrl + Alt + Home</td><td align="left">弹出跟当前文件有关联的文件弹出层</td></tr><tr><td align="left">Ctrl + Alt + Space</td><td align="left">类名自动完成</td></tr><tr><td align="left">Ctrl + Alt + 左方向键</td><td align="left">退回到上一个操作的地方 <code>（必备）**（注意与其他软件快捷键冲突）**</code></td></tr><tr><td align="left">Ctrl + Alt + 右方向键</td><td align="left">前进到上一个操作的地方 <code>（必备）**（注意与其他软件快捷键冲突）**</code></td></tr><tr><td align="left">Ctrl + Alt + 前方向键</td><td align="left">在查找模式下，跳到上个查找的文件</td></tr><tr><td align="left">Ctrl + Alt + 后方向键</td><td align="left">在查找模式下，跳到下个查找的文件</td></tr></tbody></table><h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Ctrl + Shift + F</td><td align="left">根据输入内容查找整个项目 或 指定目录内文件 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + R</td><td align="left">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + J</td><td align="left">自动将下一行合并到当前行末尾 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + Z</td><td align="left">取消撤销 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + W</td><td align="left">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + N</td><td align="left">通过文件名定位 &#x2F; 打开文件 &#x2F; 目录，打开目录需要在输入的内容后面多加一个正斜杠 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + U</td><td align="left">对选中的代码进行大 &#x2F; 小写轮流转换 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + T</td><td align="left">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td></tr><tr><td align="left">Ctrl + Shift + C</td><td align="left">复制当前文件磁盘路径到剪贴板</td></tr><tr><td align="left">Ctrl + Shift + V</td><td align="left">弹出缓存的最近拷贝的内容管理器弹出层</td></tr><tr><td align="left">Ctrl + Shift + E</td><td align="left">显示最近修改的文件列表的弹出层</td></tr><tr><td align="left">Ctrl + Shift + H</td><td align="left">显示方法层次结构</td></tr><tr><td align="left">Ctrl + Shift + B</td><td align="left">跳转到类型声明处</td></tr><tr><td align="left">Ctrl + Shift + I</td><td align="left">快速查看光标所在的方法 或 类的定义</td></tr><tr><td align="left">Ctrl + Shift + A</td><td align="left">查找动作 &#x2F; 设置</td></tr><tr><td align="left">Ctrl + Shift + &#x2F;</td><td align="left">代码块注释 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + [</td><td align="left">选中从光标所在位置到它的顶部中括号位置</td></tr><tr><td align="left">Ctrl + Shift + ]</td><td align="left">选中从光标所在位置到它的底部中括号位置</td></tr><tr><td align="left">Ctrl + Shift + +</td><td align="left">展开所有代码</td></tr><tr><td align="left">Ctrl + Shift + -</td><td align="left">折叠所有代码</td></tr><tr><td align="left">Ctrl + Shift + F7</td><td align="left">高亮显示所有该选中文本，按Esc高亮消失</td></tr><tr><td align="left">Ctrl + Shift + F8</td><td align="left">在 Debug 模式下，指定断点进入条件</td></tr><tr><td align="left">Ctrl + Shift + F9</td><td align="left">编译选中的文件 &#x2F; 包 &#x2F; Module</td></tr><tr><td align="left">Ctrl + Shift + F12</td><td align="left">编辑器最大化</td></tr><tr><td align="left">Ctrl + Shift + Space</td><td align="left">智能代码提示</td></tr><tr><td align="left">Ctrl + Shift + Enter</td><td align="left">自动结束代码，行末自动添加分号 <code>（必备）</code></td></tr><tr><td align="left">Ctrl + Shift + Backspace</td><td align="left">退回到上次修改的地方</td></tr><tr><td align="left">Ctrl + Shift + 1,2,3…9</td><td align="left">快速添加指定数值的书签</td></tr><tr><td align="left">Ctrl + Shift + 左方向键</td><td align="left">在代码文件上，光标跳转到当前单词 &#x2F; 中文句的左侧开头位置，同时选中该单词 &#x2F; 中文句</td></tr><tr><td align="left">Ctrl + Shift + 右方向键</td><td align="left">在代码文件上，光标跳转到当前单词 &#x2F; 中文句的右侧开头位置，同时选中该单词 &#x2F; 中文句</td></tr><tr><td align="left">Ctrl + Shift + 左方向键</td><td align="left">在光标焦点是在工具选项卡上，缩小选项卡区域</td></tr><tr><td align="left">Ctrl + Shift + 右方向键</td><td align="left">在光标焦点是在工具选项卡上，扩大选项卡区域</td></tr><tr><td align="left">Ctrl + Shift + 前方向键</td><td align="left">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td></tr><tr><td align="left">Ctrl + Shift + 后方向键</td><td align="left">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td></tr></tbody></table><h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Alt + Shift + N</td><td align="left">选择 &#x2F; 添加 task</td></tr><tr><td align="left">Alt + Shift + F</td><td align="left">显示添加到收藏夹弹出层</td></tr><tr><td align="left">Alt + Shift + C</td><td align="left">查看最近操作项目的变化情况列表</td></tr><tr><td align="left">Alt + Shift + F</td><td align="left">添加到收藏夹</td></tr><tr><td align="left">Alt + Shift + I</td><td align="left">查看项目当前文件</td></tr><tr><td align="left">Alt + Shift + F7</td><td align="left">在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td></tr><tr><td align="left">Alt + Shift + F9</td><td align="left">弹出 <code>Debug</code> 的可选择菜单</td></tr><tr><td align="left">Alt + Shift + F10</td><td align="left">弹出 <code>Run</code> 的可选择菜单</td></tr><tr><td align="left">Alt + Shift + 左键双击</td><td align="left">选择被双击的单词 &#x2F; 中文句，按住不放，可以同时选择其他单词 &#x2F; 中文句</td></tr><tr><td align="left">Alt + Shift + 前方向键</td><td align="left">移动光标所在行向上移动</td></tr><tr><td align="left">Alt + Shift + 后方向键</td><td align="left">移动光标所在行向下移动</td></tr></tbody></table><h2 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Ctrl + Shift + Alt + V</td><td align="left">无格式黏贴</td></tr><tr><td align="left">Ctrl + Shift + Alt + N</td><td align="left">前往指定的变量 &#x2F; 方法</td></tr><tr><td align="left">Ctrl + Shift + Alt + S</td><td align="left">打开当前项目设置</td></tr><tr><td align="left">Ctrl + Shift + Alt + C</td><td align="left">复制参考信息</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">F2</td><td align="left">跳转到下一个高亮错误 或 警告位置 <code>（必备）</code></td></tr><tr><td align="left">F3</td><td align="left">在查找模式下，定位到下一个匹配处</td></tr><tr><td align="left">F4</td><td align="left">编辑源</td></tr><tr><td align="left">F7</td><td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td align="left">F8</td><td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td align="left">F9</td><td align="left">在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td></tr><tr><td align="left">F11</td><td align="left">添加书签</td></tr><tr><td align="left">F12</td><td align="left">回到前一个工具窗口</td></tr><tr><td align="left">Tab</td><td align="left">缩进</td></tr><tr><td align="left">ESC</td><td align="left">从工具窗口进入代码文件窗口</td></tr><tr><td align="left">连按两次Shift</td><td align="left">弹出 <code>Search Everywhere</code> 弹出层</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Idea快捷键大全（Windows）&quot;&gt;&lt;a href=&quot;#Idea快捷键大全（Windows）&quot; class=&quot;headerlink&quot; title=&quot;Idea快捷键大全（Windows）&quot;&gt;&lt;/a&gt;Idea快捷键大全（Windows）&lt;/h1&gt;&lt;h2 id=&quot;C</summary>
      
    
    
    
    <category term="工具类" scheme="https://manamn.space/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
    <category term="工具类" scheme="https://manamn.space/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    <category term="IDEA" scheme="https://manamn.space/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理：最详细笔记</title>
    <link href="https://manamn.space/2022/07/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%EF%BC%9A%E6%9C%80%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/"/>
    <id>https://manamn.space/2022/07/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%EF%BC%9A%E6%9C%80%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/</id>
    <published>2022-07-18T09:26:53.000Z</published>
    <updated>2022-10-16T04:43:25.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机组成原理：最详细笔记"><a href="#计算机组成原理：最详细笔记" class="headerlink" title="计算机组成原理：最详细笔记"></a>计算机组成原理：最详细笔记</h1><blockquote><p>计算机组成原理比较经典的书籍有：</p><ul><li>唐朔飞的《计算机组成原理》、《计算机组成原理——学习指导与习题解答》</li><li>自中英的《计算机组成原理》</li><li>李春葆的《计算机组成原理联考辅导教程》</li></ul></blockquote><h1 id="第一章-计算机系统概述"><a href="#第一章-计算机系统概述" class="headerlink" title="第一章 计算机系统概述"></a>第一章 计算机系统概述</h1><p><img src="https://img-blog.csdnimg.cn/20210117160451896.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="【复习提示】"><a href="#【复习提示】" class="headerlink" title="【复习提示】"></a>【复习提示】</h2><p>本章是组成原理的概述，考查时易针对有关概念或性能指标出选择题，也可能综合后续章节的内容出有关性能分析的综合题。掌握本章的基本概念，是学好后续章节的基础。部分知识点在初学时理解不深刻也无须担忧，相信随着后续章节的学习，一定会有更为深入的理解。本章中读者要重点掌握各个性能指标的计算，这部分内容在历年真题中出现的频率很高。</p><p>学习本章时，请读者思考以下问题：</p><ul><li>1)计算机由哪几部分组成？以哪部分为中心？</li><li>2)主频高的CPU一定比主频低的CPU快吗？为什么？</li><li>3)翻译程序、汇编程序、编译程序、解释程序有什么差别？各自的特性是什么？</li><li>4)不同级别的语言编写的程序有什么区别？哪种语言编写的程序能被硬件直接执行？</li></ul><p>请读者在学习本章的过程中寻找答案，本章末尾会给出参考答案。</p><h2 id="1-1-计算机发展历程"><a href="#1-1-计算机发展历程" class="headerlink" title="1.1 计算机发展历程"></a>1.1 计算机发展历程</h2><h3 id="1-1-1-计算机硬件的发展"><a href="#1-1-1-计算机硬件的发展" class="headerlink" title="1.1.1 计算机硬件的发展"></a>1.1.1 计算机硬件的发展</h3><p>计算机系统&#x3D;硬件+软件</p><p>计算机硬件的发展：</p><ul><li>第一代计算机：(使用电子管)，</li><li>第二代计算机：(使用晶体管)，</li><li>第三代计算机：(使用较小规模的集成)，</li><li>第四代计算机：(使用较大规模的集成)，</li></ul><p>已经经历了4代，计算机的速度越来越快，并且体积变得越来越小。<br>发展趋势：更微型、多用途；更巨型、超高速</p><blockquote><p>晶体管之父：肖克利（1956年诺贝尔物理学奖得主）</p><p>1957年，”八叛徒”创立了仙童半导体<br>1959年，仙童半导体发明了“集成电路”<br>1968年，摩尔离开仙童，创立intel<br>1969年，仙童销售部负责人桑德斯离开仙童，创立AMD</p></blockquote><p>摩尔定律，集成电路上的晶体管数量每18月就会翻一翻，所以每18月计算机的处理效率就会提高一倍。</p><h3 id="1-1-2-计算机软件的发展"><a href="#1-1-2-计算机软件的发展" class="headerlink" title="1.1.2 计算机软件的发展"></a>1.1.2 计算机软件的发展</h3><p>计算机软件技术的发展，促进计算机系统的发展。</p><p>计算机语言的发展经历了面向机器的机器语言和汇编语言、面向问题的高级语言。其中高级语言的发展真正促进了软件的发展，它经历了从科学计算和工程计算的 FORTRAN、<strong>结构化程序设计的 PASCAL</strong>到**面向对象的C++**和**适应网络环境的Java**。</p><p>同时，直接影响计算机系统性能提升的各种系统软件也有了长足的发展，特别是操作系统，如 Windows、UNIX、 <strong>Linux</strong>等。</p><h3 id="1-1-3-计算机的分类与发展方向"><a href="#1-1-3-计算机的分类与发展方向" class="headerlink" title="1.1.3 计算机的分类与发展方向"></a>1.1.3 计算机的分类与发展方向</h3><p>可以分为：</p><ul><li>电子模拟计算机和电子数字计算机。</li></ul><p>数字计算机又可以按照用途分为：</p><ul><li>专用计算机和通用计算机</li><li>通用计算机又分为：巨型机、大型机、中型机、小型机、微型机和单片机6类。</li></ul><p>按照指令和数据流可以分为：</p><ul><li>单指令流和单数据流系统（SISD），即传统的冯·诺依曼体系结构。</li><li>单指令流和多数据流系统（SIMD），包括阵列处理器和向量处理器系统。</li><li>多指令流和单数据流系统（MISD），这种计算机实际上不存在。</li><li>多指令流和多数据流系统（MIMD），包括多处理器和计算机系统。</li></ul><h2 id="1-2-计算机系统层次结构"><a href="#1-2-计算机系统层次结构" class="headerlink" title="1.2 计算机系统层次结构"></a>1.2 计算机系统层次结构</h2><h3 id="1-2-1计算机系统的组成"><a href="#1-2-1计算机系统的组成" class="headerlink" title="1.2.1计算机系统的组成"></a>1.2.1计算机系统的组成</h3><p>计算机系统由硬件系统和软件系统共同构建起来</p><h3 id="1-2-2-计算机硬件的基本组成"><a href="#1-2-2-计算机硬件的基本组成" class="headerlink" title="1.2.2 计算机硬件的基本组成"></a>1.2.2 计算机硬件的基本组成</h3><h4 id="1-早期的冯·诺依曼机"><a href="#1-早期的冯·诺依曼机" class="headerlink" title="1.早期的冯·诺依曼机"></a>1.早期的冯·诺依曼机</h4><blockquote><p>美籍匈牙利科学家冯·诺依曼最先提出“程序存储”的思想，并成功将其运用在计算机的设计之中，根据这一原理制造的计算机被称为冯·诺依曼结构计算机。由于他对现代计算机技术的突出贡献，因此冯·诺依曼又被称为“现代计算机之父”。</p><p>什么是存储程序原理？按此原理，计算机应具有哪几大功能？</p><p>“程序存储”：指令以代码的形式事先输入到计算机的主存储器中，然后按其在存储器中的首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其他指令，直至程序执行结束。即按地址访问并顺序执行指令</p><p>计算机按照此原理应具有5大功能：数据传送功能、数据存储功能、数据处理功能、操作控制功能、操作判断功能</p></blockquote><ul><li>冯诺曼体系结构特点:</li></ul><ol><li>计算机硬件系统由五大部件组成(存储器、运算器、控制器、输出设备、输入设备)</li><li>指令和数据以同等地位存于存储器，可按地址寻访</li><li>指令和数据用二进制表示</li><li>指令由操作码和地址码组成</li><li>存储程序</li><li>以<strong>运算器</strong>为中心</li></ol><blockquote><p>早期的冯·诺依曼机以运算器为中心，且是单处理机，<strong>最根本的特征</strong>是采用“<strong>存储程序</strong>”原理，基本工作方式是控制流驱动方式！</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210117142226114.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-现代计算机的组织结构"><a href="#2-现代计算机的组织结构" class="headerlink" title="2.现代计算机的组织结构"></a>2.现代计算机的组织结构</h4><p><img src="https://img-blog.csdnimg.cn/20210117142257606.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-计算机的功能部件"><a href="#3-计算机的功能部件" class="headerlink" title="3.计算机的功能部件"></a>3.计算机的功能部件</h4><p>主机：主存、运算器、控制器<br><img src="https://img-blog.csdnimg.cn/2021011714554763.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>五大部分：</p><ul><li><p>&lt;1&gt; 输入设备，是指将外部信息以计算机能读懂的方式输入进来，如键盘，鼠标等</p></li><li><p>&lt;2&gt; 输出设备，就是将计算机处理的信息以人所能接受的方式输出出来，比如显示屏，打印机。</p></li><li><p>&lt;3&gt; 存储器，存储器分为 主存储器(内存储器，CPU能直接访问)和 辅助存储器(外存储器，协助主存储器记忆更多的信息，辅助存储器的信息需要导入到主存储器中，才可以被CPU访问)。</p><p><strong>主存储器</strong>的工作方式是按存储单元的地址进行存取，这种存取方式称为按地址存取方式(<strong>相联存储器</strong>既可以既可以按照<strong>地址寻址</strong>，又可以按照<strong>内容寻址</strong>，为了与传统存储器区别，又称为<strong>内容寻址的存储器</strong>！)</p><p>主存储器是由地址寄存器(MAR)，数据寄存器(MDR)，存储体，时序控制逻辑，地址寄存器存放访存地址，经过地址译码后找到所选的存储单元。数据寄存器，是存储器与其他部件的中介，用于暂存要从存储器读或写的信息。时序控制逻辑用于产生存储器操作所需的各种时序信号。在现代CPU，MAR和MDR是在CPU中的。<br><img src="https://img-blog.csdnimg.cn/20210117142540792.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>&lt;4&gt; 运算器，是计算机的运算单元，用于算术运算和逻辑运算<br>运算器的核心单元是算术逻辑单元(ALU)<br><img src="https://img-blog.csdnimg.cn/20210117142756847.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>&lt;5&gt; 控制器，控制器是计算机的指挥中心，有其指挥各部件自动协调第进行工作，现代计算机将运算器和控制器集成到一个芯片上，合成为中央处理器，简称CPU。有程序计数器(PC)、指令寄存器(IR)和控制单元(CU)。<br><img src="https://img-blog.csdnimg.cn/20210117143001482.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><p>一般将运算器和控制器集成到同一个芯片上，称为中央处理器(CPU)。CPU和主存储器共同构成主机，而除主机外的其他硬件装置(外存、I&#x2F;O设备等)统称为外部设备，简称外设。</p><p>图1.4所示为冯・诺依曼结构的模型机。CPU包含ALU、通用寄存器组GPRs、标志寄存器、控制器、指令寄存器IR、程序计数器PC、存储器地址寄存器MAR和存储器数据寄存器MDR。图中从控制器送出的虚线就是控制信号，可以控制如何修改PC以得到下一条指令的地址，可以控制ALU执行什么运算，可以控制主存是进行读操作还是写操作(读&#x2F;写控制信号)。<br><img src="https://img-blog.csdnimg.cn/20210121090349881.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>CPU和主存之间通过一组总线相连，总线中有地址、控制和数据3组信号线。MAR中的地址信息会直接送到地址线上，用于指向读&#x2F;写操作的主存存储单元；控制线中有读&#x2F;写信号线，指出数据是从CPU写入主存还是从主存读出到CPU,根据是读操作还是写操作来控制将MDR中的数据是直接送到数据线上还是将数据线上的数据接收到MDR中。</p><h3 id="1-2-3-计算机软件的分类"><a href="#1-2-3-计算机软件的分类" class="headerlink" title="1.2.3 计算机软件的分类"></a>1.2.3 计算机软件的分类</h3><h4 id="1-系统软件和应用软件"><a href="#1-系统软件和应用软件" class="headerlink" title="1.系统软件和应用软件"></a>1.系统软件和应用软件</h4><p>计算机软件，一般分为系统软件和应用软件</p><ul><li>系统软件包括 操作系统，数据库管理系统，语言处理系统(比如编译器)，分布式软件系统，网络软件系统，标准库系统，服务性系统(比如连接程序)。</li><li>应用软件包括各种科学计算类程序，工程设计类程序，数据统计与处理程序。</li></ul><p>注意：数据库管理系统和数据库系统是有区别的。数据库管理系统是系统软件。而数据库系统一般是由数据库，数据库管理系统，数据库管理员和应用系统构成。所以只能说它里面有系统软件，但并不能说它为系统软件。</p><h4 id="2-三个级别的语言"><a href="#2-三个级别的语言" class="headerlink" title="2.三个级别的语言"></a>2.三个级别的语言</h4><ul><li>1)<strong>机器语言</strong>。又称二进制代码语言，需要编程人员记忆每条指令的二进制编码。机器语言是计算机唯一可以直接识别和执行的语言。</li><li>2)<strong>汇编语言</strong>。汇编语言用英文单词或其缩写代替二进制的指令代码，更容易为人们记忆和理解。使用汇编语言编辑的程序，必须经过一个称为汇编程序的系统软件的翻译，将其转换为计算机的机器语言后，才能在计算机的硬件系统上执行。</li><li>3)<strong>高级语言</strong>。高级语言(如C、C++、Java等)是为方便程序设计人员写出解决问题的处理方案和解题过程的程序。通常高级语言需要经过编译程序编译成汇编语言程序，然后经过汇编操作得到机器语言程序，或直接由高级语言程序翻译成机器语言程序。</li></ul><p>由高级语言转换到汇编语言的过程叫做编译，由汇编语言转换到机器语言的过程叫做汇编，边翻译边执行的叫做解析。</p><p>机器语言是唯一可以控制cpu的语言，因为它的符号不利于人识别和书写，为了方便理解和记忆，将机器语言换一些通俗易懂的符号，这就变成了汇编语言。一般来说在在编译器中高级语言先转换为汇编在转换为机器语言，也有直接转换为机器语言的情况。</p><blockquote><p>机器语言是计算机唯一可以直接执行的语言，汇编语言用助记符编写，以便记忆。而正则语言是编译原理中符合正则文法的语言。</p><p>解释程序的特点是翻译一句执行一句，边翻译边执行：由高级语言转化为汇编语言的过程称为编译，把汇编语言源程序翻译成机器语言程序的过程称为汇编。</p></blockquote><h3 id="1-2-4-计算机的工作过程"><a href="#1-2-4-计算机的工作过程" class="headerlink" title="1.2.4 计算机的工作过程"></a>1.2.4 计算机的工作过程</h3><h4 id="2-指令执行过程的描述-点击链接，视频20min处有详细讲解"><a href="#2-指令执行过程的描述-点击链接，视频20min处有详细讲解" class="headerlink" title="2.指令执行过程的描述(点击链接，视频20min处有详细讲解)"></a>2.指令执行过程的描述<a href="https://www.bilibili.com/video/BV1BE411D7ii?p=5">(点击链接，视频20min处有详细讲解)</a></h4><p><img src="https://img-blog.csdnimg.cn/20210117172058667.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117172600539.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117172909779.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117173204649.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117173316604.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210117151423946.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117173446275.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>IR存放当下<strong>欲执行的指令</strong>；PC存放<strong>下一条指令的地址</strong>；</p><p>MAR存放<strong>欲访问的存储单元地址</strong>；MDR存放<strong>从存储单元取来的数据</strong>！</p><p>地址译码器是<strong>主存的构成部分，不属于CPU</strong>；地址寄存器虽然一般属于主存，但是现代计算机中绝大多数CPU内集成了地址寄存器！</p><p>关于CPU存取速度的比较：寄存器（CPU内部）&gt; Cache(高速的SRAM) &gt; 内存 （SDRAM）</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210117132729679.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上图是计算机的工作流程，首先PC将指令地址发送给MAR，MAR根据地址在存储体中找到指令数据存放在MDR中，之后MDR将指令存放在IR中，取指令结束，之后指令中的操作码进入CU中，地址码重复上述取指令步骤，将数据发送到ACC中，执行指令结束。注意区分指令和数据的依据:指令周期的不同阶段</p><h2 id="1-3-计算机性能指标"><a href="#1-3-计算机性能指标" class="headerlink" title="1.3 计算机性能指标"></a>1.3 计算机性能指标</h2><p><img src="https://img-blog.csdnimg.cn/20210117153043725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>机器字长<br>计算机的位数（机器字长），表示计算机进行一次整数运算(即定点整数运算)所能处理的二进制数据的位数。计算机字长通常选定为字节(8位)的整数倍，通常是2,4,8倍。不同的计算机，字节可能不同</li></ol><blockquote><p>机器字长、指令字长、存储字长的区别和联系是什么？</p><ul><li><p><strong>机器字长</strong>：计算机能直接处理的二进制数据的位数，机器字长<strong>一般等于内部寄存器的大小</strong>，它决定了<strong>计算机的运算精度</strong>。</p></li><li><p>指令字长：一个指令字中包含的二进制代码的位数。</p></li><li><p>存储字长：一个存储单元存储的二进制代码的长度。等于MDR的位数， 它们都必须是字节的整数倍。</p></li><li><p>数据字长：数据总线一次能传送信息的位数，它可以不等于MDR的位数。</p><p>指令字长一般取存储字长的整数倍，若指令字长等于存储字长的2倍，则需要2次访存来取出一条指令，因此取指周期为机器周期的2倍；若指令字长等于存储字长，则取指周期等于机器周期。</p><p>早期的计算机存储字长一般和机器的指令字长与数据字长相等，因此访问一次主存便可取出一条指令或一个数据。随着计算机的发展，指令字长可变，数据字长也可变，但它们必须都是字节的整数倍。</p><p>请注意64位操作系统是指特别为64位架构的计算机而设计的操作系统，它能够利用64位处理器的优势。但64位机器既可以使用64位操作系统，又可以使用32位操作系统。而32位处理器是无法使用64位操作系统的。</p></li></ul></blockquote><ol><li>数据通路带宽<br>数据总线一次所能传送信息的位数。</li><li>主存容量<br>MAR的位数反映存储单元的个数，如MAR为16位，表示存储单元为216 &#x3D; 64K;若MDR为32位，则存储容量为216x32.<br><img src="https://img-blog.csdnimg.cn/20210117151129290.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>运算速度</li></ol><blockquote><p>吞吐量，指系统在单位时间内处理请求的数量 ；从用户观点看，它是评价计算机系统性能的综合参数！</p><p>响应时间，指从用户向计算机发送一个请求，到系统对该请求做出响应并获得所需结构的等待时间。</p></blockquote><blockquote><p>CPU时钟周期。通常为节拍脉冲或T周期，即主频的倒数，它是CPU中最小的时间单位，每个动作至少需要1个时钟周期。</p><p>主频(CPU时钟频率)。机器内部主时钟的频率，是衡量机器速度的重要参数。</p><ul><li>CPU周期又称为机器周期，由多个时钟周期组成！</li><li>指令周期&gt;CPU周期&gt;时钟周期</li></ul></blockquote><blockquote><p>CPI（Clock cycle Per Instruction），即执行一条指令所需的时钟周期数。</p></blockquote><blockquote><p>CPU执行时间，指运行一个程序所花费的时间。<br>CPU执行时间 &#x3D; CPU时钟周期数&#x2F;主频 &#x3D; (指令条数xCPI)&#x2F;主频<br>CPU的性能取决于三个要素:主频、CPI 、指令条数</p></blockquote><blockquote><p>IPS(Instructions Per Second) &#x3D;主频&#x2F;平均CPI，每秒执行多少指令</p><p>MIPS(Million Instructions Per Second)&#x3D;即每秒执行多少百万条指令。</p><p>MFLOPS(Mega Floating-point Operations Per Second)&#x3D;浮点操作次数&#x2F;(执行时间x106),即每秒执行多少百万次浮点运算。</p><p>GFLOPS(Giga Floating-point Operations Per Second)&#x3D;浮点操作次数&#x2F;(执行时间x109)，即每秒执行多少十亿次浮点运算。</p><p>TFLOPS(Tera Floating-point Operations Per Second)&#x3D;浮点操作次数&#x2F;(执行时间x1012)，即每秒执行多少万亿次浮点运算。</p></blockquote><h2 id="1-4本章开头提出的问题回答"><a href="#1-4本章开头提出的问题回答" class="headerlink" title="1.4本章开头提出的问题回答"></a>1.4本章开头提出的问题回答</h2><h3 id="1-计算机由哪几部分组成？以哪部分为中心？"><a href="#1-计算机由哪几部分组成？以哪部分为中心？" class="headerlink" title="1) 计算机由哪几部分组成？以哪部分为中心？"></a>1) 计算机由哪几部分组成？以哪部分为中心？</h3><ul><li><p>1)计算机由哪几部分组成？以哪部分为中心？</p><p>计算机由运算器、控制器、存储器、输入设备及输出设备五大部分构成，现代计算机通常把运算器和控制器集成在一个芯片上，合称为中央处理器。<br>而在微处理器面世之前(早期的冯·诺依曼机)，运算器和控制器分离，而且存储器的容量很小，因此设计成以运算器为中心的结构，其他部件都通过运算器完成信息的传递。<br>随着微电子技术的进步，同时计算机需要处理、加工的信息量也与日俱增，大量IO设备的速度和CPU的速度差距悬殊，因此以运算器为中心的结构不能满足计算机发展的要求。现代计算机已经发展为以存储器为中心，使IO操作尽可能地绕过CPU,直接在IO设备和存储器之间完成，以提高系统的整体运行效率。</p></li></ul><h3 id="2-主频高的CPU一定比主频低的CPU快吗？为什么？"><a href="#2-主频高的CPU一定比主频低的CPU快吗？为什么？" class="headerlink" title="2) 主频高的CPU一定比主频低的CPU快吗？为什么？"></a>2) 主频高的CPU一定比主频低的CPU快吗？为什么？</h3><ul><li><p>2)主频高的CPU一定比主频低的CPU快吗？为什么？</p><p>衡量CPU运算速度的指标有很多，不能以单独的某个指标来判断CPU的好坏。CPU的主频，即CPU内核工作的时钟频率。CPU的主频表示CPU内数字脉冲信号振荡的速度，主频和实际的运算速度存在一定的关系，但目前还没有一个确定的公式能够定量两者的数值关系，因为CPU的运算速度还要看CPU的流水线的各方面的性能指标（架构、缓存、指令集、CPU的位数、 Cache大小等）。由于主频并不直接代表运算速度，因此在一定情况下很可能会出现主频较高的CPU实际运算速度较低的现象</p></li></ul><blockquote><p>来看看小编的配置，感受一下，以后计算机组成原理中的Cache和主频等<br><img src="https://img-blog.csdnimg.cn/20210121093352285.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="3-翻译程序、汇编程序、编译程序、解释程序有什么差别？各自的特性是什么？"><a href="#3-翻译程序、汇编程序、编译程序、解释程序有什么差别？各自的特性是什么？" class="headerlink" title="3)翻译程序、汇编程序、编译程序、解释程序有什么差别？各自的特性是什么？"></a>3)翻译程序、汇编程序、编译程序、解释程序有什么差别？各自的特性是什么？</h3><ul><li><p>3)翻译程序、汇编程序、编译程序、解释程序有什么差别？各自的特性是什么？</p><p>翻译程序是指把高级语言源程序翻译成机器语言程序（目标代码）的软件。<br>翻译程序有两种：一种是编译程序，它将高级语言源程序一次全部翻译成目标程序，每次执行程序时，只需执行目标程序，因此只要源程序不变，就无须重新翻译，请注意同一种高级语言在不同体系结构下，编译成目标程序是不一样的，目标程序与体系结构相关，但仍不是计算机硬件能够直接执行的程序。另一种是解释程序，它将源程序的一条语句翻译成对应的机器目标代码，并立即执行，然后翻译下一条源程序语句并执行，直至所有源程序语句全部被翻译并执行完。所以解释程序的执行过程是翻译一句执行一句，并且不会生成目标程序。<br>汇编程序也是一种语言翻译程序，它把汇编语言源程序翻译为机器语言程序。汇编语言是种面向机器的低级语言，是机器语言的符号表示，与机器语言一一对应。<br>编译程序与汇编程序的区別：若源语言是诸如C、C++、Java等“高级语言”，而目标语言是诸如汇编语言或机器语言之类的“低级语言”，则这样的一个翻译程序称为编译程序。若源语言是汇编语言，而目标语言是机器语言，则这样的一个翻译程序称为汇编程序。</p></li></ul><h3 id="4-不同级别的语言编写的程序有什么区别？哪种语言编写的程序能被硬件直接执行？"><a href="#4-不同级别的语言编写的程序有什么区别？哪种语言编写的程序能被硬件直接执行？" class="headerlink" title="4)不同级别的语言编写的程序有什么区别？哪种语言编写的程序能被硬件直接执行？"></a>4)不同级别的语言编写的程序有什么区别？哪种语言编写的程序能被硬件直接执行？</h3><ul><li><p>4)不同级别的语言编写的程序有什么区别？哪种语言编写的程序能被硬件直接执行？</p><p>机器语言和汇编语言与机器指令对应，而高级语言不与指令直接对应，具有较好的可移植性。其中机器语言可以被硬件直接执行。</p></li></ul><h2 id="1-5-常见问题"><a href="#1-5-常见问题" class="headerlink" title="1.5 常见问题"></a>1.5 常见问题</h2><h3 id="1-同一个功能既可以由软件实现又可以由硬件实现吗？"><a href="#1-同一个功能既可以由软件实现又可以由硬件实现吗？" class="headerlink" title="1.同一个功能既可以由软件实现又可以由硬件实现吗？"></a>1.同一个功能既可以由软件实现又可以由硬件实现吗？</h3><ul><li><p>1.同一个功能既可以由软件实现又可以由硬件实现吗？</p><p>软件和硬件是两种完全不同的形态，硬件是实体，是物质基础；软件是一种信息，看不见、摸不到。但在逻辑功能上，软件和硬件是等效的。因此，在计算机系统中，许多功能既可以由硬件直接实现，又可以在硬件的配合下由软件实现。<br>一个最大的区别就是，硬件实现比软件实现的速度快很多，但是成本也高！所以，芯片在流片之后，如果发现bug可以用软件修复就用软件修复！<br>例如，乘法运算既可用专门的乘法器（主要由加法器和移位器组成）实现，也可用乘法子程序（主要由加法指令和移位指令等组成）来实现。</p></li></ul><h3 id="2-翻译程序、汇编程序、编译程序、解释程序的区别和联系是什么？"><a href="#2-翻译程序、汇编程序、编译程序、解释程序的区别和联系是什么？" class="headerlink" title="2.翻译程序、汇编程序、编译程序、解释程序的区别和联系是什么？"></a>2.翻译程序、汇编程序、编译程序、解释程序的区别和联系是什么？</h3><ul><li>见本章开头提出的问题</li></ul><h3 id="3-什么是透明性？透明是指什么都能看见吗？"><a href="#3-什么是透明性？透明是指什么都能看见吗？" class="headerlink" title="3.什么是透明性？透明是指什么都能看见吗？"></a>3.什么是透明性？透明是指什么都能看见吗？</h3><ul><li><p>3.什么是透明性？透明是指什么都能看见吗？</p><p>在计算机领域中，站在某类用户的角度，若感觉不到某个事物或属性的存在，即“看”不到某个事物或属性，则称为“对该用户而言，某个事物或属性是透明的”。这与日常生活中的“透明”概念(公开、看得见)正好相反。<br>例如，对于高级语言程序员来说，浮点数格式、乘法指令等这些指令的格式、数据如何在运算器中运算等都是透明的；而对于机器语言或汇编语言程序员来说，指令的格式、机器结构、数据格式等则不是透明的。<br>在CPU中，IR、MAR和MDR对各类程序员都是透明的。</p></li></ul><h3 id="4-机器字长、指令字长、存储字长的区别和联系是什么？"><a href="#4-机器字长、指令字长、存储字长的区别和联系是什么？" class="headerlink" title="4.机器字长、指令字长、存储字长的区别和联系是什么？"></a>4.机器字长、指令字长、存储字长的区别和联系是什么？</h3><ul><li><p>4.机器字长、指令字长、存储字长的区别和联系是什么？</p></li><li><p><strong>机器字长</strong>：计算机能直接处理的二进制数据的位数，机器字长<strong>一般等于内部寄存器的大小</strong>，它决定了<strong>计算机的运算精度</strong>。<br>指令字长：一个指令字中包含的二进制代码的位数。<br>存储字长：一个存储单元存储的二进制代码的长度。等于MDR的位数， 它们都必须是字节的整数倍。<br>数据字长：数据总线一次能传送信息的位数，它可以不等于MDR的位数。</p><p>指令字长一般取存储字长的整数倍，若指令字长等于存储字长的2倍，则需要2次访存来取出一条指令，因此取指周期为机器周期的2倍；若指令字长等于存储字长，则取指周期等于机器周期。</p><p>早期的计算机存储字长一般和机器的指令字长与数据字长相等，因此访问一次主存便可取出一条指令或一个数据。随着计算机的发展，指令字长可变，数据字长也可变，但它们必须都是字节的整数倍。</p><p>请注意64位操作系统是指特别为64位架构的计算机而设计的操作系统，它能够利用64位处理器的优势。但64位机器既可以使用64位操作系统，又可以使用32位操作系统。而32位处理器是无法使用64位操作系统的。</p></li></ul><h3 id="5-计算机体系结构和计算机组成的区别和联系是什么？"><a href="#5-计算机体系结构和计算机组成的区别和联系是什么？" class="headerlink" title="5.计算机体系结构和计算机组成的区别和联系是什么？"></a>5.计算机体系结构和计算机组成的区别和联系是什么？</h3><ul><li><p>5.计算机体系结构和计算机组成的区别和联系是什么？</p><p>计算机体系结构是指机器语言或汇编语言程序员所看得到的传统机器的属性，包括指令集、数据类型、存储器寻址技术等，大都属于抽象的属性。<br>计算机组成是指如何实现计算机体系结构所体现的属性，它包含对许多对程序员来说透明的硬件细节。例如，指令系统属于结构的问题，但指令的实现即如何取指令、分析指令、取操作数如何运算等都属于组成的问题。因此，当两台机器指令系统相同时，只能认为它们具有相同的结构，至于这两台机器如何实现其指令，完全可以不同，即可以认为它们的组成方式是不同的。例如，一台机器是否具备乘法指令是一个结构的问题，但实现乘法指令采用什么方式则是一个组成的问题。（简言之，看<strong>有没有</strong>这个属性，就是<strong>结构</strong>问题；看<strong>怎么实现</strong>，就是<strong>组成问题</strong>）<br>许多计算机厂商提供一系列体系结构相同的计算机，而它们的组成却有相当大的差别，即使是同一系列的不同型号机器，其性能和价格差异也很大。例如， IBM System&#x2F;370结构就包含了多种价位和性能的机型。</p></li></ul><h3 id="6-基准程序执行得越快说明杺器的性能越好吗？"><a href="#6-基准程序执行得越快说明杺器的性能越好吗？" class="headerlink" title="6.基准程序执行得越快说明杺器的性能越好吗？"></a>6.基准程序执行得越快说明杺器的性能越好吗？</h3><ul><li><p>6.基准程序执行得越快说明机器的性能越好吗？</p><p>一般情况下，基准测试程序能够反映机器性能的好坏。但是，由于基准程序中的语句存在频度的差异，因此运行结果并不能完全说明问题。</p></li></ul><h1 id="第二章-数据的表示与运算"><a href="#第二章-数据的表示与运算" class="headerlink" title="第二章 数据的表示与运算"></a>第二章 数据的表示与运算</h1><p><img src="https://img-blog.csdnimg.cn/20210118085022452.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="【复习提示】-1"><a href="#【复习提示】-1" class="headerlink" title="【复习提示】"></a>【复习提示】</h2><p>本章内容较为繁杂，由于计算机中数的表示和运算方法与人们日常生活中的表示和运算方法不同，因此理解也较为困难。纵观近几年的真题，不难发现 unsigned、shot、int、long、foat、 double等在C语言中的表示、运算、溢出判断、隐式类型转换、强制类型转换、IEEE754浮点数的表示，以及浮点数的运算，都是考研考查的重点，需要牢固掌握。</p><p>在学习本章时，请读者思考以下问题：</p><ul><li>1)在计算机中，为什么要采用二进制来表示数据？</li><li>2)计算机在字长足够的情况下能够精确地表示每个数吗？若不能，请举例说明。</li><li>3)字长相同的情况下，浮点数和定点数的表示范围与精度有什么区别？</li><li>4)用移码表示浮点数的阶码有什么好处？</li></ul><p>请读者在本章的学习过程中寻找答案，本章末尾会给出参考答案。</p><h2 id="2-1-数制与编码"><a href="#2-1-数制与编码" class="headerlink" title="2.1 数制与编码"></a>2.1 数制与编码</h2><p>还是要系统学习一下，不然之前的0x1010还查了好久！</p><h3 id="2-1-1-进位计数制及其相互转化"><a href="#2-1-1-进位计数制及其相互转化" class="headerlink" title="2.1.1 进位计数制及其相互转化"></a>2.1.1 进位计数制及其相互转化</h3><h4 id="知识点回顾与重点考点（如果知道了，就不用看了）"><a href="#知识点回顾与重点考点（如果知道了，就不用看了）" class="headerlink" title="知识点回顾与重点考点（如果知道了，就不用看了）"></a>知识点回顾与重点考点（如果知道了，就不用看了）</h4><p><img src="https://img-blog.csdnimg.cn/20210117191955803.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117183943164.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117185238778.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117185618834.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117185725631.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117190345649.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117190721548.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>四级网络工程师考试，就用这个方法，妙！<br><img src="https://img-blog.csdnimg.cn/20210117191021486.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h4 id="知识回顾与重点考点"><a href="#知识回顾与重点考点" class="headerlink" title="知识回顾与重点考点"></a>知识回顾与重点考点</h4><p><img src="https://img-blog.csdnimg.cn/20210117191955803.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-1-2-BCD码（Binary-Code-Decimal码）"><a href="#2-1-2-BCD码（Binary-Code-Decimal码）" class="headerlink" title="2.1.2 BCD码（Binary-Code Decimal码）"></a>2.1.2 BCD码（Binary-Code Decimal码）</h3><p>注意：这是为了表示0和9，所以1010~1111都是违法的，以前都没在意！<br><img src="https://img-blog.csdnimg.cn/20210117193109970.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117193518270.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="知识回顾与重要考点"><a href="#知识回顾与重要考点" class="headerlink" title="知识回顾与重要考点"></a>知识回顾与重要考点</h4><p><img src="https://img-blog.csdnimg.cn/20210117193657777.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-1-4-字符与字符串"><a href="#2-1-4-字符与字符串" class="headerlink" title="2.1.4 字符与字符串"></a>2.1.4 字符与字符串</h3><p><img src="https://img-blog.csdnimg.cn/20210117193803381.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="1-字符编码ASCII码"><a href="#1-字符编码ASCII码" class="headerlink" title="1.字符编码ASCII码"></a>1.字符编码ASCII码</h4><p><img src="https://img-blog.csdnimg.cn/20210117194317905.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117194843132.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117200407446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p><img src="https://img-blog.csdnimg.cn/20210117195816708.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117195936696.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="知识回顾与重要考点-1"><a href="#知识回顾与重要考点-1" class="headerlink" title="知识回顾与重要考点"></a>知识回顾与重要考点</h4><p><img src="https://img-blog.csdnimg.cn/20210117200115324.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-1-5-校验码"><a href="#2-1-5-校验码" class="headerlink" title="2.1.5 校验码"></a>2.1.5 校验码</h3><p><img src="https://img-blog.csdnimg.cn/20210117201426544.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>任意两个码字之间最少变化的二进制位数称为码距，码距大于等于2的数据校验码开始具有检错的能力。码距越大，检错、纠错能力越强。奇偶校验码的码距等于2,可以检测出一位错误（或奇数位错误），但不能确定出错的位置，也不能检测出偶数位错误；海明码的码距大于2,因此不仅可以发现错误，还能指出错误的位置。仅靠增加奇偶校验位的位数不能提高正确性，还要考虑码距。</p><p>具有检、纠错能力的数据校验码的实现原理：在编码中，除合法码字外，再加入一些非法码字，当某个合法码字出现错误时，就变为非法码字。合理安排非法码字的数量和编码规则就能达到纠错的目的。</p></blockquote><h4 id="1-奇偶校验码"><a href="#1-奇偶校验码" class="headerlink" title="1.奇偶校验码"></a>1.奇偶校验码</h4><p>原编码上加一个校验位，码距等于2！<br><img src="https://img-blog.csdnimg.cn/20210117201754590.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210117202320100.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>知识回顾与重要考点</p><p><img src="https://img-blog.csdnimg.cn/20210117202609126.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-海明（汉明）校验码"><a href="#2-海明（汉明）校验码" class="headerlink" title="2.海明（汉明）校验码"></a>2.海明（汉明）校验码</h4><p><img src="https://img-blog.csdnimg.cn/20210118080256138.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118080501589.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118081711303.png?k,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118081852709.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118081938619.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021011808201964.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118082050560.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-循环冗余校验（CRC）码"><a href="#3-循环冗余校验（CRC）码" class="headerlink" title="3. 循环冗余校验（CRC）码"></a>3. 循环冗余校验（CRC）码</h4><p>终于知道了《UVM实战》中的CRC校验是什么回事了！<br><img src="https://img-blog.csdnimg.cn/2021011808234085.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118084534498.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118082908894.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118083019225.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118083336843.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118083714247.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>CRC校验码是可以纠错的，前面这个是因为信息位太长</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210118084033953.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118084104650.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-2-定点数的表示和运算"><a href="#2-2-定点数的表示和运算" class="headerlink" title="2.2 定点数的表示和运算"></a>2.2 定点数的表示和运算</h2><h2 id="2-3-浮点数的表示与运算"><a href="#2-3-浮点数的表示与运算" class="headerlink" title="2.3 浮点数的表示与运算"></a>2.3 浮点数的表示与运算</h2><h2 id="2-4-算数逻辑单元（ALU）"><a href="#2-4-算数逻辑单元（ALU）" class="headerlink" title="2.4 算数逻辑单元（ALU）"></a>2.4 算数逻辑单元（ALU）</h2><h2 id="2-5-本章开头提出的问题回答"><a href="#2-5-本章开头提出的问题回答" class="headerlink" title="2.5 本章开头提出的问题回答"></a>2.5 本章开头提出的问题回答</h2><h3 id="1-在计算机中，为什么要采用二进制来表示数据？"><a href="#1-在计算机中，为什么要采用二进制来表示数据？" class="headerlink" title="1)在计算机中，为什么要采用二进制来表示数据？"></a>1)在计算机中，为什么要采用二进制来表示数据？</h3><ul><li><p>1)在计算机中，为什么要采用二进制来表示数据？</p><p>从可行性来说，采用二进制，只有0和1两个状态，能够表示0、1两种状态的电子器件很多，如开关的接通和断开、晶体管的导通和截止、磁元件的正负剩磁、电位电平的高与低等，都可表示0、1两个数码。使用二进制，电子器件具有实现的可行性。<br>从运算的简易性来说，二进制数的运算法则少，运算简单，使计算机运算器的硬件结构大大简化(十进制的乘法九九口诀表有55条公式，而二进制乘法只有4条规则)从逻辑上来说，由于二进制0和1正好和逻辑代数的假( false)和真(true)相对应，有逻辑代数的理论基础，用二进制表示二值逻辑很自然。</p></li></ul><h3 id="2-计算机在字长足够的情况下能够精确地表示每个数吗？若不能，请举例说明。"><a href="#2-计算机在字长足够的情况下能够精确地表示每个数吗？若不能，请举例说明。" class="headerlink" title="2)计算机在字长足够的情况下能够精确地表示每个数吗？若不能，请举例说明。"></a>2)计算机在字长足够的情况下能够精确地表示每个数吗？若不能，请举例说明。</h3><ul><li><p>2)计算机在字长足够的情况下能够精确地表示每个数吗？若不能，请举例说明。</p><p>计算机采用二进制来表示数据，在字长足够时，可以表示任何一个整数。而二进制表示小数时只能够用1(2)的和的任意组合表示，即使字长很长，也不可能精确表示出所有小数，只能无限逼近。例如0.1就无法用二进制精确地表示。</p></li></ul><h3 id="3-字长相同的情况下，浮点数和定点数的表示范围与精度有什么区别？"><a href="#3-字长相同的情况下，浮点数和定点数的表示范围与精度有什么区别？" class="headerlink" title="3)字长相同的情况下，浮点数和定点数的表示范围与精度有什么区别？"></a>3)字长相同的情况下，浮点数和定点数的表示范围与精度有什么区别？</h3><ul><li><p>3)字长相同的情况下，浮点数和定点数的表示范围与精度有什么区别？</p><p>字长相同时，浮点数取字长的一部分作为阶码，所以表示范围比定点数要大，而取一部分作为阶码也就代表着尾数部位的有效位数减少，而定点数字长的全部位都用来表示数值本身，精度要比同字长的浮点数更大。</p></li></ul><h3 id="4-用移码表示浮点数的阶码有什么好处？"><a href="#4-用移码表示浮点数的阶码有什么好处？" class="headerlink" title="4)用移码表示浮点数的阶码有什么好处？"></a>4)用移码表示浮点数的阶码有什么好处？</h3><ul><li><p>4)用移码表示浮点数的阶码有什么好处？</p><p>移码的两个好处<br>①浮点数进行加减运算时，时常要比较阶码的大小，相对于原码和补码，移码比较大小更方便。<br>②检验移码的特殊值(0和max)时比较容易。阶码以移码编码时的特殊值如下。<strong>0</strong>:表示指数为负无穷大，相当于分数分母无穷大，整个数无穷接近0,在尾数也为0时可用来表示0:尾数不为零表示未正规化的数。<strong>max</strong>:表示指数正无穷大，若尾数为0,则表示浮点数超出表示范围（正负无穷大）；尾数不为0,则表示浮点数运算错误</p></li></ul><h2 id="2-6-常见问题"><a href="#2-6-常见问题" class="headerlink" title="2.6 常见问题"></a>2.6 常见问题</h2><h3 id="1-如何表示一个数值数据？计算机中的数値数据都是二进制数吗？"><a href="#1-如何表示一个数值数据？计算机中的数値数据都是二进制数吗？" class="headerlink" title="1.如何表示一个数值数据？计算机中的数値数据都是二进制数吗？"></a>1.如何表示一个数值数据？计算机中的数値数据都是二进制数吗？</h3><ul><li><p>1.如何表示一个数值数据？计算机中的数値数据都是二进制数吗？</p><p>在计算机内部，数值数据的表示方法有以下两大类。<br>①直接用二进制数表示。分为无符号数和有符号数，有符号数又分为定点数表示和浮点数表示。无符号数用来表示无符号整数（如地址等信息）；定点数用来表示整数；浮点数用来表示实数。<br>②二进制编码的十进制数，一般都采用8421码(也称NBCD码)来表示，用来表示整数。<br>所以，计算机中的数值数据虽然都用二进制来编码表示，但不全是二进制数，也有用十进制数表示的。后面一章有关指令类型的内容中，就有对应的二进制加法指令和十进制加法指令。</p></li></ul><h3 id="2-在高级语言编程中所定义的-unsigned-x2F-short-x2F-int-x2F-long-x2F-float-x2F-double型数据是怎么表示的？什么称为无符号整数的“溢出”？"><a href="#2-在高级语言编程中所定义的-unsigned-x2F-short-x2F-int-x2F-long-x2F-float-x2F-double型数据是怎么表示的？什么称为无符号整数的“溢出”？" class="headerlink" title="2.在高级语言编程中所定义的 unsigned&#x2F;short&#x2F;int&#x2F;long&#x2F;float&#x2F;double型数据是怎么表示的？什么称为无符号整数的“溢出”？"></a>2.在高级语言编程中所定义的 unsigned&#x2F;short&#x2F;int&#x2F;long&#x2F;float&#x2F;double型数据是怎么表示的？什么称为无符号整数的“溢出”？</h3><ul><li><p>2.在高级语言编程中所定义的 unsigned&#x2F;short&#x2F;int&#x2F;long&#x2F;float&#x2F;double型数据是怎么表示的？什么称为无符号整数的“溢出”？</p><p>unsigned型数据就是无符号整数，不考虑符号位。直接用全部二进制位对数值进行编码得到的就是无符号数，一般都用补码表示。</p><p>int型数据就是定点整数，一般用补码表示。int型数据的位数与运行平台和编译器有关，一般是32位或16位。例如，真值是-12的int型整数，在机器内存储的机器数（假定用32位寄存器寄存）是1111-1111-1111-1111-1111-1111-1111-0100.</p><p>long型数据和short型数据也都是定点整数，只是位数不同，分别是长整型和短整型数，通常用补码表示。</p><p>float型数据是用来表示实数的浮点数。现代计算机用IEEE754标准表示浮点数，其中32位单精度浮点数就是float型，64位双精度浮点数就是 double型。</p><p>需要注意的是，C语言中的int型和 unsigned型变量的存储方式没有区别，都按照补码的形式存储，在不溢出范围内的加减法运算也是相同的，只是int型变量的最高位代表符号位，而unsigned型中的最高位表示数值位，两者在C语言中的区别体现在输出时到底是采用%d还是采用%u。</p><p>对于无符号定点整数来说，若寄存器位数不够，则计算机运算过程中一般保留低n位，舍弃高位。这样，会产生以下两种结果。<br>①保留的低n位数不能正确表示运算结果。在这种情况下，意味着运算的结果超出了计算机所能表达的范围，有效数值进到了第n+1位，称此时发生了“溢出”现象<br>②保留的低n位数能正确表达计算结果，即高位的舍去并不影响其运算结果。</p></li></ul><h3 id="3-如何判断一个浮点数是否是规格化数？"><a href="#3-如何判断一个浮点数是否是规格化数？" class="headerlink" title="3.如何判断一个浮点数是否是规格化数？"></a>3.如何判断一个浮点数是否是规格化数？</h3><ul><li><p>3.如何判断一个浮点数是否是规格化数？</p><p>为了使浮点数能尽量多地表示有效位数，一般要求运算结果用规格化数形式表示。“规格化浮点数的尾数小数点后的第一位一定是个非零数。因此，对于原码编码的尾数来说，只要看尾数的第一位是否为1就行：对于补码表示的尾数，只要看符号位和尾数最高位是否相反。需要注意的是，IEEE754标准的浮点数尾数是用原码编码的。</p></li></ul><h3 id="4-对于位数相同的定点数和浮点数，可表示的浮点数个数比定点数个数多吗？"><a href="#4-对于位数相同的定点数和浮点数，可表示的浮点数个数比定点数个数多吗？" class="headerlink" title="4.对于位数相同的定点数和浮点数，可表示的浮点数个数比定点数个数多吗？"></a>4.对于位数相同的定点数和浮点数，可表示的浮点数个数比定点数个数多吗？</h3><ul><li><p>4.对于位数相同的定点数和浮点数，可表示的浮点数个数比定点数个数多吗？</p><p>不是，可表示的数据个数取决于编码所采用的位数。编码位数一定，编码出来的数据个数就是一定的。m位编码只能表示2m个数，所以对于相同位数的定点数和浮点数来说，可表示的数据个数应该一样多(有时可能由于一个值有两个或多个编码对应，编码个数会有少量差异)。</p></li></ul><h3 id="5-浮点数如何进行舍入？"><a href="#5-浮点数如何进行舍入？" class="headerlink" title="5.浮点数如何进行舍入？"></a>5.浮点数如何进行舍入？</h3><ul><li><p>5.浮点数如何进行舍入？</p><p>舍入方法选择的原则是：①尽量使误差范围对称，使得平均误差为0,即有舍有入，以防误差积累。②方法要简单，以加快速度。<br>IEEE754有4种舍入方式。<br>①就近舍入：舍入为最近可表示的数，若结果值正好落在两个可表示数的中间，则一般选择舍入结果为偶数。<br>②正向舍入：朝+∞方向舍入，即取右边的那个数<br>③负向舍入：朝-∞方向舍入，即取左边的那个数。<br>④截去：朝0方向舍入，即取绝对值较小的那个数</p></li></ul><h3 id="6-现代计算机中是否要考虑原码加减运算？如何实现"><a href="#6-现代计算机中是否要考虑原码加减运算？如何实现" class="headerlink" title="6.现代计算机中是否要考虑原码加减运算？如何实现?"></a>6.现代计算机中是否要考虑原码加减运算？如何实现?</h3><ul><li><p>6.现代计算机中是否要考虑原码加减运算？如何实现?</p><p>因为现代计算机中浮点数采用IEEE754标准，所以在进行两个浮点数的加减运算时，必须考虑原码的加减运算，因为IEEE754规定浮点数的尾数都用原码表示。<br>原码的加减运算可以有以下两种实现方式<br>1)转换为补码后，用补码加减法实现，结果再转换为原码。<br>2)直接用原码进行加减运算，符号和数值部分分开进行（具体过程见原码加减运算部分）。</p></li></ul><h3 id="7-长度为n-1的定点数，按照不同的编码方式，表示的数值范围是多少？"><a href="#7-长度为n-1的定点数，按照不同的编码方式，表示的数值范围是多少？" class="headerlink" title="7.长度为n+1的定点数，按照不同的编码方式，表示的数值范围是多少？"></a>7.长度为n+1的定点数，按照不同的编码方式，表示的数值范围是多少？</h3><ul><li><p>7.长度为n+1的定点数，按照不同的编码方式，表示的数值范围是多少？</p><p>各编码方式的数值范围见表2.8<br><img src="https://img-blog.csdnimg.cn/20210121105658823.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h3 id="8-设阶码和尾数均用补码表示，阶码部分共K-1位-含1位阶符-，尾数部分共n-1位（含1位数符），则这样的浮点数的表示范围是多少？"><a href="#8-设阶码和尾数均用补码表示，阶码部分共K-1位-含1位阶符-，尾数部分共n-1位（含1位数符），则这样的浮点数的表示范围是多少？" class="headerlink" title="8.设阶码和尾数均用补码表示，阶码部分共K+1位(含1位阶符)，尾数部分共n+1位（含1位数符），则这样的浮点数的表示范围是多少？"></a>8.设阶码和尾数均用补码表示，阶码部分共K+1位(含1位阶符)，尾数部分共n+1位（含1位数符），则这样的浮点数的表示范围是多少？</h3><ul><li><p>8.设阶码和尾数均用补码表示，阶码部分共K+1位(含1位阶符)，尾数部分共n+1位（含1位数符），则这样的浮点数的表示范围是多少？</p><p>浮点数的表示范围见表2.9。<br><img src="https://img-blog.csdnimg.cn/20210121110204602.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h1 id="第三章-存储系统"><a href="#第三章-存储系统" class="headerlink" title="第三章 存储系统"></a>第三章 存储系统</h1><p><img src="https://img-blog.csdnimg.cn/20210118103433182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="【复习提示】-2"><a href="#【复习提示】-2" class="headerlink" title="【复习提示】"></a>【复习提示】</h2><p>本章是历年考査的重点，特别是有关 Cache和存储器扩展的知识点容易出综合题。此外，存储器的分类与特点，存储器的扩展(芯片选择、连接方式、地址范围等)，低位交叉存储器，Cache的相关计算与替换算法，虚拟存储器与快表也容易出选择题。读者应在掌握基本原理和理论的基础上，多结合习题进行练习复习，以加深和巩固。另外，读者还需掌握存在 Cache和TLB的计算机中的地址翻译与 Cache映射问题，该问题在《操作系统考研复习指导》中有详细说明。<br>本章有两个难点：一是 ache映射规律、容量计算及替换特性；二是交又存储器访问时间和访问效率。二者都可与第5章的大题综合，或与第6章总线访问内存时间的计算问题综合。</p><p>在学习本章时，请读者思考以下问题：</p><ul><li>1)存储器的层次结构主要体现在何处？为何要分这些层次？计算机如何管理这些层次？</li><li>2)存取周期和存取时间有何区别？</li><li>3)在虚拟存储器中，页面是设置得大一些好还是设置得小一些好？</li></ul><p>请读者在学习本章的过程中寻找答案，本章末尾会给出参考答案。<br><img src="https://img-blog.csdnimg.cn/2021011810360993.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-1-存储器概述"><a href="#3-1-存储器概述" class="headerlink" title="3.1 存储器概述"></a>3.1 存储器概述</h2><h3 id="3-1-1-存储器的分类"><a href="#3-1-1-存储器的分类" class="headerlink" title="3.1.1 存储器的分类"></a>3.1.1 存储器的分类</h3><blockquote><p>相联存储器的基本原理是把存储单元所存内容的某一部分作为检索项（即关键字项）去检索该存储器，并将存储器中与该检索项符合的存储单元内容进行读出或写入。所以它是 按内容或地址进行寻址的，价格较为昂贵。 一般用来制作TLB、相联 Cache等。</p></blockquote><p>按在计算机中的作用对存储器分类：</p><ul><li>1&gt; 主存储器,简称主存。CPU可以直接随机地对其进行访问，也可以和高速缓存器及辅助存储器交换数据。</li><li>2&gt; 辅助存储器,简称辅存，不能与CPU直接相连，用来存放当前暂时不用的程序和数据</li><li>3&gt; 高速缓冲存储器,位于主存和CPU之间，用来存放正在执行的程序段和数据</li></ul><p>按存储介质分类：</p><ul><li>磁表面存储器（磁盘，磁带），磁心存储器半导体存储器（MOS型存储器，双极存储器）和光存储器（光盘）。</li></ul><p>按存取方式分类：</p><ul><li>1&gt; 随机存储器（RAM）。存储器的任何一个存储单元的内容都可以随机存取，而且存取时间与存取单元的物理位置无关，主要用作主存或高速缓冲存储器。</li><li>2&gt; 只读存储器（ROM）。存储器的内容只能随机读出而不能写入。。即使断电，内容也不会丢失。</li><li>3&gt; 串行访问存储器。对存储单元进行读&#x2F;写操作时，需按其物理位置的先后顺序寻址，包括顺序存取存储器（如<strong>磁带</strong>）与直接存取存储器（如<strong>磁盘</strong>）。</li></ul><p>按信息的可保存性分类：</p><ul><li>断电后，存储信息即消失的存储器，称为易失性存储器，如RAM。断电后信息仍然保持的存储器，称为非易失性存储器，如ROM，磁表面存储器和光存储器。若某个存储单元所存储的信息被读出时，原存储信息被破坏，则称为破坏性读出；若读出时，被读单元原存储信息不被破坏，则称为非破坏性读出。具有破坏性读出性能的存储器，每次读出操作后，必须紧接一个再生的操作，以便恢复被破坏的信息。<br><img src="https://img-blog.csdnimg.cn/20210118124526918.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118124836703.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118125012658.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="3-1-2-存储器的性能指标"><a href="#3-1-2-存储器的性能指标" class="headerlink" title="3.1.2 存储器的性能指标"></a>3.1.2 存储器的性能指标</h3><p>存储器的性能指标，有3个主要的性能指标，存储容量，单位成本和存储速度</p><ul><li>1&gt; 存储容量：存储字数*字长</li><li>2&gt; 单位成本：每位价格&#x3D;总成本&#x2F;总容量</li><li>3&gt; 存储速度：数据传输率&#x3D;数据的宽度&#x2F;存储周期</li></ul><p>存取时间：存取时间时指从启动一次存储器操作到完成该操作所经历的时间，分为读出时间和写入时间。</p><p>存取周期：它是指存储器进行一次完整的读写操作所需的全部时间，即连续两次独立访问存储器操作（读或写操作）之间所需的最小时间间隔。</p><p>主存带宽：主存带宽又称数据传输率，表示每秒从主存进出信息的最大数量，单位为字&#x2F;秒，字节&#x2F;秒<br>存取时间不等于存储周期，通常存储周期大于存取时间。因为任何一种存储器，在读写操作之后，总要有一段恢复内部状态的复原时间。</p><p><img src="https://img-blog.csdnimg.cn/20210118125344491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-2-存储器的层次结构"><a href="#3-2-存储器的层次结构" class="headerlink" title="3.2 存储器的层次结构"></a>3.2 存储器的层次结构</h2><p><img src="https://img-blog.csdnimg.cn/20210118125626787.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118125753602.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2021011811115092.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2021011811142778.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118111601687.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118112030572.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118112546228.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-3-半导体随机存储器"><a href="#3-3-半导体随机存储器" class="headerlink" title="3.3 半导体随机存储器"></a>3.3 半导体随机存储器</h2><h3 id="3-3-1-SRAM和DRAM"><a href="#3-3-1-SRAM和DRAM" class="headerlink" title="3.3.1 SRAM和DRAM"></a>3.3.1 SRAM和DRAM</h3><p><img src="https://img-blog.csdnimg.cn/20210118120319811.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118121332468.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118121733617.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118122206696.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118122500900.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118122635264.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118122754849.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-3-2-只读存储器"><a href="#3-3-2-只读存储器" class="headerlink" title="3.3.2 只读存储器"></a>3.3.2 只读存储器</h3><p><img src="https://img-blog.csdnimg.cn/20210118123203340.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118123813543.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021011812392214.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-3-3-主存的基本组成（存储系统）"><a href="#3-3-3-主存的基本组成（存储系统）" class="headerlink" title="3.3.3 主存的基本组成（存储系统）"></a>3.3.3 主存的基本组成（存储系统）</h3><h2 id="3-4-主存储器与CPU的连接"><a href="#3-4-主存储器与CPU的连接" class="headerlink" title="3.4 主存储器与CPU的连接"></a>3.4 主存储器与CPU的连接</h2><h3 id="3-4-2-主存容量的扩展"><a href="#3-4-2-主存容量的扩展" class="headerlink" title="3.4.2 主存容量的扩展"></a>3.4.2 主存容量的扩展</h3><h4 id="1-位扩展"><a href="#1-位扩展" class="headerlink" title="1.位扩展"></a>1.位扩展</h4><p><img src="https://img-blog.csdnimg.cn/20210118131138347.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118131242359.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-字扩展"><a href="#2-字扩展" class="headerlink" title="2.字扩展"></a>2.字扩展</h4><p><img src="https://img-blog.csdnimg.cn/20210118131602758.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118131821650.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>原来译码器的功能在这里可以使用！<br><img src="https://img-blog.csdnimg.cn/20210118132217258.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118132312933.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118132515341.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118132725555.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210118132847588.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-字位同时扩展法"><a href="#3-字位同时扩展法" class="headerlink" title="3.字位同时扩展法"></a>3.字位同时扩展法</h4><p><img src="https://img-blog.csdnimg.cn/20210118133202267.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118133331377.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设CPU有16根地址线，8根数据线，并用MREQ作为访存控制信号（低电平有效），用WR作为读&#x2F;写控制信号（高电平为读，低电平为写）。现有下列存储芯片：1K×4位RAM，4K×8位RAM，8K×8位RAM，2K×8位ROM，4K×8位ROM，8K×8位ROM及74LS138译码器和各种门电路。画出CPU与存储器的连接图，要求：<br>1）主存地址空间分配：6000H～67FFH为系统程序区；6800H～6BFFH为用户程序区。<br>2）合理选用上述存储芯片，说明各选几片？<br>3）详细画出存储芯片的片选逻辑图。<br>补充：系统程序区用ROM，用户程序区用RAM<br><img src="https://img-blog.csdnimg.cn/20210118134716117.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118135038578.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118140033660.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118140221267.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>MAR和MDR是直接做在CPU芯片上面的！</p><h2 id="3-5-双端口RAM和多模块存储器"><a href="#3-5-双端口RAM和多模块存储器" class="headerlink" title="3.5 双端口RAM和多模块存储器"></a>3.5 双端口RAM和多模块存储器</h2><h3 id="3-5-1-双端口RAM"><a href="#3-5-1-双端口RAM" class="headerlink" title="3.5.1 双端口RAM"></a>3.5.1 双端口RAM</h3><p><img src="https://img-blog.csdnimg.cn/2021011814115163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-5-2-多模块存储器"><a href="#3-5-2-多模块存储器" class="headerlink" title="3.5.2 多模块存储器"></a>3.5.2 多模块存储器</h3><p><img src="https://img-blog.csdnimg.cn/20210118141608410.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118142221658.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118142720710.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118143106156.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>交叉存储器实际上是一种模块式的存储器，它能并行执行多个独立的读&#x2F;写操作。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210118143226136.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-6-高速缓冲存储器"><a href="#3-6-高速缓冲存储器" class="headerlink" title="3.6 高速缓冲存储器"></a>3.6 高速缓冲存储器</h2><p><img src="https://img-blog.csdnimg.cn/20210118152531151.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-6-1-程序访问的局部性原理"><a href="#3-6-1-程序访问的局部性原理" class="headerlink" title="3.6.1 程序访问的局部性原理"></a>3.6.1 程序访问的局部性原理</h3><p><img src="https://img-blog.csdnimg.cn/20210118153706155.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118154054452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118154622198.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2021011815471179.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-6-2-Cache的基本工作原理"><a href="#3-6-2-Cache的基本工作原理" class="headerlink" title="3.6.2 Cache的基本工作原理"></a>3.6.2 <a href="https://www.bilibili.com/video/BV1BE411D7ii?p=67">Cache的基本工作原理</a></h3><p>直接好家伙！<br><img src="https://img-blog.csdnimg.cn/20210118155220907.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118160044877.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118161005288.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118161717189.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118161908289.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118162110824.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-6-4-Cache中主存块的替换算法"><a href="#3-6-4-Cache中主存块的替换算法" class="headerlink" title="3.6.4 Cache中主存块的替换算法"></a>3.6.4 Cache中主存块的替换算法</h3><ol><li>随机算法(RAND):随机地确定替换的 Cache块。它的实现比较简单，但没有依据程序访问的局部性原理，故可能命中率较低</li><li>先进先出算法(FIFO):选择最早调入的行进行替换。它比较容易实现，但也没有依据程序访问的局部性原理，可能会把一些需要经常使用的程序块（如循环程序）也作为最早进入 Cache的块替换掉。</li><li>近期最少使用算法（LRU):依据程序访问的局部性原理选择近期内长久未访问过的存储行作为替换的行，平均命中率要比FFO要高，是堆栈类算法。<br>LRU算法对每行设置一个计数器， Cache每命中一次，命中行计数器清0,而其他各行计数器均加1,需要替换时比较各特定行的计数值，将计数值最大的行换出。</li><li>最不经常使用算法(LFU):将一段时间内被访问次数最少的存储行换出。每行也设置一个计数器，新行建立后从0开始计数，每访问一次，被访问的行计数器加1,需要替换时比较各特定行的计数值，将计数值最小的行换出。</li></ol><p><img src="https://img-blog.csdnimg.cn/20210118165532966.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118165814310.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118170111197.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118170304797.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118170454838.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210118170712263.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118170905141.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118170952485.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118171022149.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118171131890.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021011817132510.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Cache例题"><a href="#Cache例题" class="headerlink" title="Cache例题"></a>Cache例题</h4><p><img src="https://img-blog.csdnimg.cn/20210118180753574.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118181530140.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118182718274.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118183406215.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118183544596.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118183841211.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118184200685.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118184345299.png?,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-7-虚拟存储器"><a href="#3-7-虚拟存储器" class="headerlink" title="3.7 虚拟存储器"></a>3.7 虚拟存储器</h2><p><img src="https://img-blog.csdnimg.cn/2021011818453286.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-7-1-虚拟存储器的基本概念"><a href="#3-7-1-虚拟存储器的基本概念" class="headerlink" title="3.7.1 虚拟存储器的基本概念"></a>3.7.1 虚拟存储器的基本概念</h3><p><img src="https://img-blog.csdnimg.cn/20210118185557288.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118190505251.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118190638653.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-7-5-段页式虚拟存储器"><a href="#3-7-5-段页式虚拟存储器" class="headerlink" title="3.7.5 段页式虚拟存储器"></a>3.7.5 段页式虚拟存储器</h3><p>把程序按逻辑结构分段，每段再划分为固定大小的页，<br>主存空间也划分为大小相等的页，<br>程序对主存的调入、调出仍以页为基本传送单位。<br>每个程序对应一个段表，每段对应一个页表<br>虚拟地址：段号+段内页号+页内地址</p><h3 id="3-7-3-快表（TLB）"><a href="#3-7-3-快表（TLB）" class="headerlink" title="3.7.3 快表（TLB）"></a>3.7.3 快表（TLB）</h3><p>页表、段表存放在主存中，收到虚拟地址后要先访问主存，査询页表、段表，进行虚实地址转换。<br>放在主存中的页表称为慢表(Page)<br>提高变换速度→用高速绥沖存储器存放常用的页表项 → 快表(TLB)<br><img src="https://img-blog.csdnimg.cn/20210118191319965.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210118191640275.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-8-本章开头提出的问题回答"><a href="#3-8-本章开头提出的问题回答" class="headerlink" title="3.8 本章开头提出的问题回答"></a>3.8 本章开头提出的问题回答</h2><h3 id="1-存储器的层次结构主要体现在何处？为何要分这些层次？计算机如何管理这些层次？"><a href="#1-存储器的层次结构主要体现在何处？为何要分这些层次？计算机如何管理这些层次？" class="headerlink" title="1)存储器的层次结构主要体现在何处？为何要分这些层次？计算机如何管理这些层次？"></a>1)存储器的层次结构主要体现在何处？为何要分这些层次？计算机如何管理这些层次？</h3><ul><li><p>1)存储器的层次结构主要体现在何处？为何要分这些层次？计算机如何管理这些层次？</p><p>存储器的层次结构主要体现在 Cache-主存和 主存-辅存这两个存储层次上。<br>Cache-主存层次在存储系统中主要 对CPU访存起加速作用，即从整体运行的效果分析，CPU访存速度加快，接近于 Cache的速度，而寻址空间和位价却接近于主存。<br>主存-辅存层次在存储系统中主要 起扩容作用，即从程序员的角度看，他所使用的存储器的容量和位价接近于辅存，而速度接近于主存。<br>综合上述两个存储层次的作用，从整个存储系统来看，就达到了速度快、容量大、位价低的优化效果。<br>主存与 Cache之间的信息调度功能全部由硬件自动完成。而主存与辅存层次的调度目前广泛采用虚拟存储技术实现，即将主存与辅存的一部分通过软&#x2F;硬结合的技术组成虚拟存储器，程序员可用这个比主存实际空间（物理地址空间）大得多的虚拟地址空间（逻辑地址空间）编程，当程序运行时，再由软&#x2F;硬件自动配合完成虚拟地址空间与主存实际物理空间的转换。因此，这两个层次上的调度或转换操作对于程序员来说都是透明的。</p></li></ul><h3 id="2-存取周期和存取时间有何区别？"><a href="#2-存取周期和存取时间有何区别？" class="headerlink" title="2)存取周期和存取时间有何区别？"></a>2)存取周期和存取时间有何区别？</h3><ul><li><p>2)存取周期和存取时间有何区别？</p><p>存取周期和存取时间的主要区别是：存取时间仅为完成一次操作的时间；而存取周期不仅包含操作时间，而且包含操作后线路的恢复时间，即存取周期&#x3D;存取时间+恢复时间。(这是不是也可以解释，为什么IC前端，时序分析中有建立时间和保持时间吧)</p></li></ul><h3 id="3-在虚拟存储器中，页面是设置得大一些好还是设置得小一些好？"><a href="#3-在虚拟存储器中，页面是设置得大一些好还是设置得小一些好？" class="headerlink" title="3)在虚拟存储器中，页面是设置得大一些好还是设置得小一些好？"></a>3)在虚拟存储器中，页面是设置得大一些好还是设置得小一些好？</h3><ul><li><p>3)在虚拟存储器中，页面是设置得大一些好还是设置得小一些好？</p><p>页面不能设置得过大，也不能设置得过小。因为页面太小时，平均页内剩余空间较少，可节省存储空间，但会使得页表增大，而且页面太小时不能充分利用访存的空间局部性来提高命中率；页面太大时，可减少页表空间，但平均页内剩余空间较大，会浪费较多存储空间，页面太大还会使页面调入&#x2F;调出的时间较长</p></li></ul><h2 id="3-9-常见问题"><a href="#3-9-常见问题" class="headerlink" title="3.9 常见问题"></a>3.9 常见问题</h2><h3 id="1-存取时间Ta就是存储周期Tm吗？"><a href="#1-存取时间Ta就是存储周期Tm吗？" class="headerlink" title="1.存取时间Ta就是存储周期Tm吗？"></a>1.存取时间Ta就是存储周期Tm吗？</h3><ul><li><p>1.存取时间Ta就是存储周期Tm吗？</p><p>不是。存取时间Ta是执行一次读操作或写操作的时间，分为读出时间和写入时间。读出时间是从主存接收到有效地址开始到数据稳定为止的时间；写入时间是从主存接收到有效地址开始到数据写入被写单元为止的时间。<br>存储周期Tm是指存储器进行连续两次独立地读或写操作所需的最小时间间隔。所以存取时间Ta不等于存储周期Tm。通常存储周期Tm大于存取时间Ta。</p></li></ul><h3 id="2-Cache行的大小和命中率之间有什么关系？"><a href="#2-Cache行的大小和命中率之间有什么关系？" class="headerlink" title="2. Cache行的大小和命中率之间有什么关系？"></a>2. Cache行的大小和命中率之间有什么关系？</h3><ul><li><p>2.Cache行的大小和命中率之间有什么关系？</p><p>行的长度较大，可以充分利用程序访问的空间局部性，使一个较大的局部空间被一起调到Cache中，因而可以增加命中机会。但是，行长也不能太大，主要原因有两个：<br>1)行长大使失效损失变大。也就是说，若未命中，则需花更多时间从主存读块。<br>2)行长太大， Cache项数变少，因而命中的可能性变小</p></li></ul><h3 id="3-发生取指令-Cache缺失的处理过程是什么？"><a href="#3-发生取指令-Cache缺失的处理过程是什么？" class="headerlink" title="3.发生取指令 Cache缺失的处理过程是什么？"></a>3.发生取指令 Cache缺失的处理过程是什么？</h3><ul><li><p>3.发生取指令 Cache缺失的处理过程是什么？</p><p>1)程序计数器恢复当前指令的值。<br>2)对主存进行读的操作。<br>3)将读入的指令写入 Cache中，更改有效位和标记位。<br>4)重新执行当前指令。</p></li></ul><h3 id="4-关于-Cache的一些小知识"><a href="#4-关于-Cache的一些小知识" class="headerlink" title="4.关于 Cache的一些小知识"></a>4.关于 Cache的一些小知识</h3><ul><li><p>4.关于 Cache的一些小知识。</p><p>1)<strong>多级 Cache</strong>。现代计算机系统中，一般采用多级的 Cache系统。CPU执行指令时，先到速度最快的一级 Cache( LI Cache)中寻找指令或数据，找不到时，再到速度次快的二级Cache(L2 Cache)中找…最后到主存中找。<br>2)<strong>指令 Cache和数据 Cache</strong>。指令和数据可以分别存储在不同的 Cache中（ LI Cache一般会这么做），这种结构也称哈佛 Cache,其特点是允许CPU在同一个 Cache存储周期内同时提取指令和数据，由于指令执行过程取指和取数据都有可能访问 Cache,因此这一特性可以保证不同的指令同时访存。</p></li></ul><h1 id="第四章-指令系统"><a href="#第四章-指令系统" class="headerlink" title="第四章 指令系统"></a>第四章 指令系统</h1><p><img src="https://img-blog.csdnimg.cn/20210119195316544.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="【复习提示】-3"><a href="#【复习提示】-3" class="headerlink" title="【复习提示】"></a>【复习提示】</h2><p>指令系统是表征一台计算机性能的重要因素。读者应注意扩展操作码技术，各种寻址方式的特点及有效地址的计算，相对寻址有关的计算，CISC与RISC的特点与区别。本章知识点出选择题的概率较大，但也有可能结合其他章节出有关指令的综合题。2014年、2015年已连续两次出现指令系统和指令流水线的大题。指令系统格式和指令寻址方式与CPU指令执行过程部分紧密结合，希望读者引起重视。</p><p>在学习本章时，请读者思考以下问题</p><ul><li>1)什么是指令？什么是指令系统？为什么要引入指令系统？</li><li>2)一般来说，指令分为哪些部分？每部分有什么用处？</li><li>3)对于一个指令系统来说，寻址方式多和少有什么影响？</li></ul><p>请读者在本章的学习过程中寻找答案，本章末尾会给出参考答案。<br><img src="https://img-blog.csdnimg.cn/20210119075927711.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-1-指令格式"><a href="#4-1-指令格式" class="headerlink" title="4.1 指令格式"></a>4.1 指令格式</h2><p><img src="https://img-blog.csdnimg.cn/20210119080130248.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-1-1-指令的基本格式"><a href="#4-1-1-指令的基本格式" class="headerlink" title="4.1.1 指令的基本格式"></a>4.1.1 指令的基本格式</h3><p><img src="https://img-blog.csdnimg.cn/20210119080328115.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119080751543.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210119080907495.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119081243715.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119081412855.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119081728969.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119082005821.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119082700651.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119082835355.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119083045779.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119083155606.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-2-指令寻址方式"><a href="#4-2-指令寻址方式" class="headerlink" title="4.2 指令寻址方式"></a>4.2 指令寻址方式</h2><p><img src="https://img-blog.csdnimg.cn/20210119083804299.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119084236506.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119084516263.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-2-1-指令的寻址方式"><a href="#4-2-1-指令的寻址方式" class="headerlink" title="4.2.1 指令的寻址方式"></a>4.2.1 指令的寻址方式</h3><p><img src="https://img-blog.csdnimg.cn/20210119084909639.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119085110343.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-2-2-常见的数据寻址方式"><a href="#4-2-2-常见的数据寻址方式" class="headerlink" title="4.2.2 常见的数据寻址方式"></a>4.2.2 常见的数据寻址方式</h3><p><img src="https://img-blog.csdnimg.cn/2021011908542061.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119085615596.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119085738146.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119085848678.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="隐含寻址"><a href="#隐含寻址" class="headerlink" title="隐含寻址"></a>隐含寻址</h4><p><img src="https://img-blog.csdnimg.cn/20210119091626348.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h4><p><img src="https://img-blog.csdnimg.cn/20210119090126687.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h4><p><img src="https://img-blog.csdnimg.cn/20210119090404850.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119090647364.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="间接寻址"><a href="#间接寻址" class="headerlink" title="间接寻址"></a>间接寻址</h4><p><img src="https://img-blog.csdnimg.cn/20210119090909241.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h4><p><img src="https://img-blog.csdnimg.cn/2021011909123018.png?type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h4><p><img src="https://img-blog.csdnimg.cn/20210119091458907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2021011909173797.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="偏移寻址"><a href="#偏移寻址" class="headerlink" title="偏移寻址"></a>偏移寻址</h4><p><img src="https://img-blog.csdnimg.cn/20210119093328746.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119093521307.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210119093931734.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119101038975.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119101749652.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119101949246.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119102220360.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119102957480.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119103151148.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="堆栈寻址"><a href="#堆栈寻址" class="headerlink" title="堆栈寻址"></a>堆栈寻址</h4><p><img src="https://img-blog.csdnimg.cn/20210119103839345.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021011910392940.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-3-CISC和RISC的基本概念"><a href="#4-3-CISC和RISC的基本概念" class="headerlink" title="4.3 CISC和RISC的基本概念"></a>4.3 CISC和RISC的基本概念</h2><p><img src="https://img-blog.csdnimg.cn/20210119104028680.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119104517320.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119104936411.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119105339671.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-4本章开头提出的问题回答"><a href="#4-4本章开头提出的问题回答" class="headerlink" title="4.4本章开头提出的问题回答"></a>4.4本章开头提出的问题回答</h2><h3 id="1-什么是指令？什么是指令系统？为什么要引入指令系统？"><a href="#1-什么是指令？什么是指令系统？为什么要引入指令系统？" class="headerlink" title="1)什么是指令？什么是指令系统？为什么要引入指令系统？"></a>1)什么是指令？什么是指令系统？为什么要引入指令系统？</h3><ul><li><p>1)什么是指令？什么是指令系统？为什么要引入指令系统？</p><p>指令就是要计算机执行某种操作的命令，一台计算机中所有机器指令的集合，称为这台计算机的指令系统。引入指令系统后，避免了用户与二进制代码直接接触，使得用户编写程序更为方便。另外，<strong>指令系统</strong>是表征一台计算机性能的重要因素，它的格式与功能不仅直接影响到机器的硬件结构，而且也直接影响到系统软件，影响到机器的适用范围。</p></li></ul><h3 id="2-一般来说，指令分为哪些部分？每部分有什么用处？"><a href="#2-一般来说，指令分为哪些部分？每部分有什么用处？" class="headerlink" title="2)一般来说，指令分为哪些部分？每部分有什么用处？"></a>2)一般来说，指令分为哪些部分？每部分有什么用处？</h3><ul><li><p>2)一般来说，指令分为哪些部分？每部分有什么用处？</p><p>一条指令通常包括操作码字段和地址码字段两部分。其中，操作码指出指令中该指令应该<strong>执行什么性质的操作和具有何种功能</strong>，它是识别指令、了解指令功能与区分操作数地址内容的组成和使用方法等的关键信息。地址码用于给出被操作的信息（指令或数据）的地址，包括参加运算的一个或多个操作数所在的地址、运算结果的保存地址、程序的转移地址、被调用子程序的入口地址等。</p></li></ul><h3 id="3-对于一个指令系统来说，寻址方式多和少有什么影响？"><a href="#3-对于一个指令系统来说，寻址方式多和少有什么影响？" class="headerlink" title="3)对于一个指令系统来说，寻址方式多和少有什么影响？"></a>3)对于一个指令系统来说，寻址方式多和少有什么影响？</h3><ul><li><p>3)对于一个指令系统来说，寻址方式多和少有什么影响？</p><p>寻址方式的多样化能让用户编程更为方便，但多重寻址方式会造成CPU结构的复杂化（详见下章），也不利于指令流水线的运行。而寻址方式太少虽然能够提高CPU的效率，但对于用户而言，少数几种寻址方式会使编程变得复杂，很难满足用户的需求。</p></li></ul><h2 id="4-5常见问题"><a href="#4-5常见问题" class="headerlink" title="4.5常见问题"></a>4.5常见问题</h2><h3 id="1-简述各常见指令寻址方式的特点和适用情况"><a href="#1-简述各常见指令寻址方式的特点和适用情况" class="headerlink" title="1.简述各常见指令寻址方式的特点和适用情况"></a>1.简述各常见指令寻址方式的特点和适用情况</h3><ul><li><p>1.简述各常见指令寻址方式的特点和适用情况</p><p>立即寻址操作数获取便捷，通常用于给寄存器赋初值。<br>直接寻址相对于立即寻址，缩短了指令长度<br>间接寻址扩大了寻址范围，便于编制程序，易于完成子程序返回。<br>寄存器寻址的指令字较短，指令执行速度较快<br>寄存器间接寻址扩大了寻址范围。<br>基址寻址扩大了操作数寻址范围，适用于多道程序设计，常用于为程序或数据分配存储空间。<br>变址寻址主要用于处理数组问题，适合编制循环程序。<br>相对寻址用于控制程序的执行顺序、转移等。<br>基址寻址和变址寻址的区别：两种方式有效地址的形成都是寄存器内容+偏移地址，但是在基址寻址中，程序员操作的是偏移地址，基址寄存器的内容由操作系统控制，在执行过程中是动态调整的；而在变址寻址中，程序员操作的是变址寄存器，偏移地址是固定不变的。</p></li></ul><h3 id="2-一个操作数在内存可能占多个单元，怎样在指令中给出操作数的地址？"><a href="#2-一个操作数在内存可能占多个单元，怎样在指令中给出操作数的地址？" class="headerlink" title="2.一个操作数在内存可能占多个单元，怎样在指令中给出操作数的地址？"></a>2.一个操作数在内存可能占多个单元，怎样在指令中给出操作数的地址？</h3><ul><li><p>2.一个操作数在内存可能占多个单元，怎样在指令中给出操作数的地址？</p><p>现代计算机都采用字节编址方式，即一个内存单元只能存放一字节的信息。一个操作数（如char、int、foat、 double)可能是8位、16位、32位或64位等，因此可能占用1个、2个、4个或8个内存单元。也就是说，一个操作数可能有多个内存地址对应。<br>有两种不同的地址指定方式：大端方式和小端方式。<br>大端方式：指令中给出的地址是操作数最高有效字节(MSB)所在的地址<br>小端方式：指令中给出的地址是操作数最低有效字节(LSB)所在的地址。</p></li></ul><h3 id="3-装入-x2F-存储-Load-x2F-Store-型指令有什么特点？"><a href="#3-装入-x2F-存储-Load-x2F-Store-型指令有什么特点？" class="headerlink" title="3.装入&#x2F;存储(Load&#x2F; Store)型指令有什么特点？"></a>3.装入&#x2F;存储(Load&#x2F; Store)型指令有什么特点？</h3><ul><li><p>3.装入&#x2F;存储(Load&#x2F; Store)型指令有什么特点？</p><p>装入&#x2F;存储型指令是用在规整型指令系统中的一种通用寄存器型指令风格。这种指令风格在RISC指令系统中较为常见。为了规整指令格式，使指令具有相同的长度，规定只有 Load&#x2F;Store指令才能访问内存。而运算指令不能直接访问内存，只能从寄存器取数进行运算，运算的结果也只能送到寄存器。因为寄存器编号较短，而主存地址位数较长，通过某种方式可使运算指令和访存指令的长度一致。<br>这种装入&#x2F;存储型风格的指令系统的最大特点是，指令格式规整，指令长度一致，一般为32位。由于只有 Load&#x2F;Store指令オ能访问内存，程序中可能会包含许多装入指令和存储指令，与ー般通用寄存器型指令风格相比，其程序长度会更长。</p></li></ul><h1 id="第五章-中央处理器"><a href="#第五章-中央处理器" class="headerlink" title="第五章 中央处理器"></a>第五章 中央处理器</h1><p><img src="https://img-blog.csdnimg.cn/20210119195152802.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="【复习提示】-4"><a href="#【复习提示】-4" class="headerlink" title="【复习提示】"></a>【复习提示】</h2><p>中央处理器是计算机的中心，也是本书的难点。其中，数据通路的分析、指令执行阶段的节拍与控制信号的安排、流水线技术与性能分析易出综合题。而关于各种寄存器的特点、指令执行的各种周期与特点、控制器的相关概念、流水线的相关概念也极易出选择题。</p><p>在学习本章时，请读者思考以下问题</p><ul><li>1)CPU分为哪几部分？分别实现什么功能？</li><li>2)指令和数据均存放在内存中，计算机如何从时间和空间上区分它们是指令还是数据？</li><li>3)什么是指令周期、机器周期和时钟周期？它们之间有何关系？</li><li>4)指令周期是否有一个固定值？为什么？</li><li>5)什么是微指令？它和第4章谈到的指令有什么关系？</li><li>6)什么是指令流水线？指令流水线相对于传统计算机体系结构的优势是什么？如何计算指令流水线的加速比？</li></ul><p>请读者在本章的学习过程中寻找答案，本章末尾会给出参考答案。<br><img src="https://img-blog.csdnimg.cn/20210119105804227.png?type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>【复习提示】<br>中央处理器是计算机的中心，也是本书的难点。其中，数据通路的分析、指令执行阶段的节拍与控制信号的安排、流水线技术与性能分析易出综合题。而关于各种寄存器的特点、指令执行的各种周期与特点、控制器的相关概念、流水线的相关概念也极易出选择题。</p><p>在学习本章时，请读者思考以下问题：</p><ul><li>1)CPU分为哪几部分？分别实现什么功能？</li><li>2)指令和数据均存放在内存中，计算机如何从时间和空间上区分它们是指令还是数据？</li><li>3)什么是指令周期、机器周期和时钟周期？它们之间有何关系？</li><li>4)指令周期是否有一个固定值？为什么？</li><li>5)什么是微指令？它和第4章谈到的指令有什么关系？</li><li>6)什么是指令流水线？指令流水线相对于传统计算机体系结构的优势是什么？如何计算指令流水线的加速比？</li></ul><p>请读者在本章的学习过程中寻找答案，本章末尾会给出参考答案。</p><h2 id="5-1-CPU的功能和基本构造"><a href="#5-1-CPU的功能和基本构造" class="headerlink" title="5.1 CPU的功能和基本构造"></a>5.1 CPU的功能和基本构造</h2><h3 id="5-1-1-CPU的基本功能"><a href="#5-1-1-CPU的基本功能" class="headerlink" title="5.1.1 CPU的基本功能"></a>5.1.1 CPU的基本功能</h3><p><img src="https://img-blog.csdnimg.cn/20210119105931494.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>CPU的功能:</p><ol><li>指令控制：完成取指令、分析指令和执行指令的操作，即程序的顺序控制。</li><li>操作控制：一条指令的功能往往是由若干操作信号的组合来实现的。CPU管理并产生由内存取出的每条指令的操作信号，把各种操作信号送往相应的部件，从而控制这些部件按指令的要求进行动作。</li><li>时间控制：对各种操作加以时间上的控制。时间控制要为每条指令按时间顺序提供应有的控制信号。</li><li>数据加工：对数据进行算术和逻辑运算。</li><li>中断处理：对计算机运行过程中出现的异常情况和特殊请求进行处理。</li></ol><p><img src="https://img-blog.csdnimg.cn/20210119110047351.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210119110230138.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-1-2-CPU的基本结构"><a href="#5-1-2-CPU的基本结构" class="headerlink" title="5.1.2 CPU的基本结构"></a>5.1.2 CPU的基本结构</h3><h4 id="1-运算器"><a href="#1-运算器" class="headerlink" title="1.运算器"></a>1.运算器</h4><ul><li>算术逻辑单元ALU</li><li>累加寄存器ACC</li><li>程序字状态寄存器PSW</li><li>计数器CT</li><li>暂存寄存器</li><li>通用寄存器组</li><li>移位器</li></ul><blockquote><p>通用寄存器供用户自由编程，可以存放数据和地址。而指令寄存器是专门用于存放指令的专用寄存器，不能由通用寄存器代替。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210119110727470.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119111049993.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021011911131797.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119111607500.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-控制器"><a href="#2-控制器" class="headerlink" title="2.控制器"></a>2.控制器</h4><ul><li>程序计数器PC:存放下一条指令在主存中的地址，具有自增功能。</li><li>指令寄存器IR：存放当前正在执行的指令。</li><li>指令译码器</li><li>存储器地址寄存器MAR</li><li>存储器数据寄存器MDR</li><li>时序系统</li><li>微操作信号发生器</li></ul><blockquote><p>条件转移指令执行时，需要对标志寄存器的内容进行测试，判断是否满足转移条件。<br>转移指令时，需要判断转移是否成功，若成功则PC修改为转移指令的目标地址，否则下一条指令的地址仍然为PC自增后的地址。</p><p>指令包括操作码字段和地址码字段，但指令译码器仅对操作码字段进行译码，借以确定指令的操作功能。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210119112138911.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>注意：CPU内部寄存器大致可分为两类：一类是用户可见的寄存器，可对这类寄存器编程，如通用寄存器组、程序状态字寄存器；另一类是用户不可见的寄存器，对用户是透明的，不可对这类寄存器编程，如存储器地址寄存器MAR、存储器数据寄存器MDR、指令寄存器IR。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210119112338283.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119112414457.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119112507363.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-2-指令执行过程"><a href="#5-2-指令执行过程" class="headerlink" title="5.2 指令执行过程"></a>5.2 指令执行过程</h2><p><img src="https://img-blog.csdnimg.cn/20210119124234452.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-2-1-指令周期"><a href="#5-2-1-指令周期" class="headerlink" title="5.2.1 指令周期"></a>5.2.1 指令周期</h3><p><img src="https://img-blog.csdnimg.cn/20210119124520329.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119124730846.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119125109768.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119125431174.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-2-2-指令周期的数据流"><a href="#5-2-2-指令周期的数据流" class="headerlink" title="5.2.2 指令周期的数据流"></a>5.2.2 指令周期的数据流</h3><h4 id="取指周期"><a href="#取指周期" class="headerlink" title="取指周期"></a>取指周期</h4><p><img src="https://img-blog.csdnimg.cn/20210119125811367.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="间址周期"><a href="#间址周期" class="headerlink" title="间址周期"></a>间址周期</h4><p><img src="https://img-blog.csdnimg.cn/20210119130156676.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>间址周期的作用是取操作数的有效地址，因此间址周期结束后，MDR的内容为操作数地址。</p></blockquote><h4 id="执行周期"><a href="#执行周期" class="headerlink" title="执行周期"></a>执行周期</h4><p>根据IR中的指令字的操作码和操作数通过ALU操作产生执行结果。不同指令的执行操作不同，因此没有统一的数据流向。</p><h4 id="中断周期"><a href="#中断周期" class="headerlink" title="中断周期"></a>中断周期</h4><p><img src="https://img-blog.csdnimg.cn/20210119130702148.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-2-3-指令执行方案"><a href="#5-2-3-指令执行方案" class="headerlink" title="5.2.3 指令执行方案"></a>5.2.3 指令执行方案</h3><p><img src="https://img-blog.csdnimg.cn/20210119131446274.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119131809244.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-3-数据通路的功能和基本结构"><a href="#5-3-数据通路的功能和基本结构" class="headerlink" title="5.3 数据通路的功能和基本结构"></a>5.3 数据通路的功能和基本结构</h2><p><img src="https://img-blog.csdnimg.cn/20210119133221226.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119133339824.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119135135687.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119140006571.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119140339151.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>实际考试中，建议把间址周期合并到执行周期，因为每个人对间址周期的理解是不一样的<br><img src="https://img-blog.csdnimg.cn/20210119141120865.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119141228858.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="专用数据通路方式"><a href="#专用数据通路方式" class="headerlink" title="专用数据通路方式"></a>专用数据通路方式</h4><p><img src="https://img-blog.csdnimg.cn/20210119151756526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119152318465.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119152404724.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119152635439.png?type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119152835322.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119153049854.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119153220468.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意ALU不是通用寄存器？<br><img src="https://img-blog.csdnimg.cn/20210119153251251.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-4-控制器的功能和工作原理"><a href="#5-4-控制器的功能和工作原理" class="headerlink" title="5.4 控制器的功能和工作原理"></a>5.4 控制器的功能和工作原理</h2><h3 id="5-4-1-控制器的结构和功能"><a href="#5-4-1-控制器的结构和功能" class="headerlink" title="5.4.1 控制器的结构和功能"></a>5.4.1 控制器的结构和功能</h3><p><img src="https://img-blog.csdnimg.cn/20210119154106238.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>控制器是计算机系统的指挥中心，控制器的主要功能有：</p><ul><li>1)从主存中取出一条指令，并指出下一条指令在主存中的位置。</li><li>2)对指令进行译码或测试，产生相应的操作控制信号，以便启动规定的动作。</li><li>3)指挥并控制CPU、主存、输入和输出设备之间的数据流动方向。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210119154739341.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-4-2-硬布线控制器"><a href="#5-4-2-硬布线控制器" class="headerlink" title="5.4.2 硬布线控制器"></a>5.4.2 硬布线控制器</h3><h4 id="1-硬布线控制单元图"><a href="#1-硬布线控制单元图" class="headerlink" title="1. 硬布线控制单元图"></a>1. 硬布线控制单元图</h4><p><img src="https://img-blog.csdnimg.cn/20210119155253622.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-硬布线控制器的时序及微操作"><a href="#2-硬布线控制器的时序及微操作" class="headerlink" title="2.硬布线控制器的时序及微操作"></a>2.硬布线控制器的时序及微操作</h4><h4 id="3-CPU控制方式"><a href="#3-CPU控制方式" class="headerlink" title="3.CPU控制方式"></a>3.CPU控制方式</h4><p><img src="https://img-blog.csdnimg.cn/20210119155503373.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119155647626.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-硬布线控制单元设计步骤"><a href="#4-硬布线控制单元设计步骤" class="headerlink" title="4.硬布线控制单元设计步骤"></a>4.硬布线控制单元设计步骤</h4><p><img src="https://img-blog.csdnimg.cn/20210119160720283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119160842794.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119161125769.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119161613254.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021011916185724.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119162208814.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119162312620.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119162600242.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021011916283621.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119163108466.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119163129234.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119163225404.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-4-3-微程序控制器"><a href="#5-4-3-微程序控制器" class="headerlink" title="5.4.3 微程序控制器"></a>5.4.3 微程序控制器</h3><p><img src="https://img-blog.csdnimg.cn/20210119164005442.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210119164352577.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="1-微程序控制的基本概念"><a href="#1-微程序控制的基本概念" class="headerlink" title="1.微程序控制的基本概念"></a>1.微程序控制的基本概念</h4><p><img src="https://img-blog.csdnimg.cn/20210119171918581.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-微程序控制组成和工作过程"><a href="#2-微程序控制组成和工作过程" class="headerlink" title="2.微程序控制组成和工作过程"></a>2.微程序控制组成和工作过程</h4><p><img src="https://img-blog.csdnimg.cn/20210119164726269.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119165101204.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="5-微指令的格式"><a href="#5-微指令的格式" class="headerlink" title="5.微指令的格式"></a>5.微指令的格式</h4><p><img src="https://img-blog.csdnimg.cn/20210119165505141.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-微指令的编码方式"><a href="#3-微指令的编码方式" class="headerlink" title="3.微指令的编码方式"></a>3.微指令的编码方式</h4><p><img src="https://img-blog.csdnimg.cn/20210119165852245.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119170147777.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119170308182.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119170432723.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-微指令的地址形成方式"><a href="#4-微指令的地址形成方式" class="headerlink" title="4.微指令的地址形成方式"></a>4.微指令的地址形成方式</h4><p><img src="https://img-blog.csdnimg.cn/20210119170635131.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119171544326.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="6-微程序控制单元的设计"><a href="#6-微程序控制单元的设计" class="headerlink" title="6.微程序控制单元的设计"></a>6.微程序控制单元的设计</h4><p>设计步骤：</p><ol><li>分析每个阶段的微操作序列</li><li>写出对应机器指令的微操作命令及节拍安排</li><li>确定微指令格式</li><li>编写微指令码点</li></ol><p><img src="https://img-blog.csdnimg.cn/2021011917242881.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119172506538.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119172624806.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="7-动态微程序设计和毫微程序设计"><a href="#7-动态微程序设计和毫微程序设计" class="headerlink" title="7. 动态微程序设计和毫微程序设计"></a>7. 动态微程序设计和毫微程序设计</h4><p><img src="https://img-blog.csdnimg.cn/20210119172816851.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="8-硬布线和微程序控制器的特点"><a href="#8-硬布线和微程序控制器的特点" class="headerlink" title="8.硬布线和微程序控制器的特点"></a>8.硬布线和微程序控制器的特点</h4><p><img src="https://img-blog.csdnimg.cn/20210119173018709.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119173221780.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-5-指令流水线"><a href="#5-5-指令流水线" class="headerlink" title="5.5 指令流水线"></a>5.5 指令流水线</h2><p><img src="https://img-blog.csdnimg.cn/20210119185058869.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-5-1-指令流水的基本概念"><a href="#5-5-1-指令流水的基本概念" class="headerlink" title="5.5.1 指令流水的基本概念"></a>5.5.1 指令流水的基本概念</h3><p><img src="https://img-blog.csdnimg.cn/20210119185445548.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119185834152.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119190342616.png?xtype_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119190735588.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119190859710.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119191114548.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119191305725.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119191538491.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-5-3-影响流水线的因素"><a href="#5-5-3-影响流水线的因素" class="headerlink" title="5.5.3 影响流水线的因素"></a>5.5.3 影响流水线的因素</h3><p><img src="https://img-blog.csdnimg.cn/2021011919174694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119192005692.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119192228295.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119192625138.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119193034304.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119193257802.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119193414445.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="5-5-2-流水线的分类"><a href="#5-5-2-流水线的分类" class="headerlink" title="5.5.2 流水线的分类"></a>5.5.2 流水线的分类</h4><p>1.部件功能级、处理机级和处理机间级流水线</p><ul><li>根据流水线使用的级别的不同，流水线可分为部件功能级流水线、处理机级流水线和处理机间流水线。</li><li>部件功能级流水就是将复杂的算术逻辑运算组成流水线工作方式。例如，可将浮点加法操作分成求阶差、对阶、尾数相加以及结果规格化等4个子过程。</li><li>处理机级流水是把一条指令解释过程分成多个子过程，如前面提到的取指、译码、执行、访存及写回5个子过程。</li><li>处理机间流水是一种宏流水，其中每一个处理机完成某一专门任务，各个处理机所得到的结果需存放在与下一个处理机所共享的存储器中。</li></ul><p>2.单功能流水线和多功能流水线</p><ul><li>按流水线可以完成的功能，流水线可分为单功能流水线和多功能流水线。</li><li>单功能流水线指只能实现一种固定的专门功能的流水线；</li><li>多功能流水线指通过各段间的不同连接方式可以同时或不同时地实现多种功能的流水线。</li></ul><p>3.动态流水线和静态流水线</p><ul><li>按同一时间内各段之问的连接方式，流水线可分为静态流水线和动态流水线。</li><li>静态流水线指在同一时间内，流水线的各段只能按同一种功能的连接方式工作。</li><li>动态流水线指在同一时间内，当某些段正在实现某种运算时，另一些段却正在进行另一种运算。这样对提高流水线的效率很有好处，但会使流水线控制变得很复杂。<br>4.线性流水线和非线性流水线</li><li>按流水线的各个功能段之间是否有反馈信号，流水线可分为线性流水线与非线性流水线。</li><li>线性流水线中，从输入到输出，每个功能段只允许经过一次，不存在反馈回路。</li><li>作线性流水线存在反馈回路，从输入到输出过程中，某些功能段将数次通过流水线，这种流水线适合进行线性递归的运算。</li></ul><h3 id="5-5-5-超标量流水线的基本概念"><a href="#5-5-5-超标量流水线的基本概念" class="headerlink" title="5.5.5 超标量流水线的基本概念"></a>5.5.5 超标量流水线的基本概念</h3><h4 id="1-超标量流水技术"><a href="#1-超标量流水技术" class="headerlink" title="1.超标量流水技术"></a>1.超标量流水技术</h4><p><img src="https://img-blog.csdnimg.cn/20210119194250666.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-超流水技术"><a href="#2-超流水技术" class="headerlink" title="2.超流水技术"></a>2.超流水技术</h4><p><img src="https://img-blog.csdnimg.cn/20210119194432988.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-超长指令集"><a href="#3-超长指令集" class="headerlink" title="3.超长指令集"></a>3.超长指令集</h4><p><img src="https://img-blog.csdnimg.cn/20210119194552962.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210119194647396.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-6本章开头提出的问题回答"><a href="#5-6本章开头提出的问题回答" class="headerlink" title="5.6本章开头提出的问题回答"></a>5.6本章开头提出的问题回答</h2><h3 id="1-CPU分为哪几部分？分别实现什么功能？"><a href="#1-CPU分为哪几部分？分别实现什么功能？" class="headerlink" title="1)CPU分为哪几部分？分别实现什么功能？"></a>1)CPU分为哪几部分？分别实现什么功能？</h3><ul><li><p>1)CPU分为哪几部分？分别实现什么功能？</p><p>CPU分为运算器和控制器。其中运算器主要负责数据的加工，即对数据进行算术和逻辑运算控制器是整个系统的指挥中枢，对整个计算机系统进行有效的控制，包括指令控制、操作控制、时间控制和中断处理。</p></li></ul><h3 id="2-指令和数据均存放在内存中，计算机如何从时间和空间上区分它们是指令还是数据？"><a href="#2-指令和数据均存放在内存中，计算机如何从时间和空间上区分它们是指令还是数据？" class="headerlink" title="2)指令和数据均存放在内存中，计算机如何从时间和空间上区分它们是指令还是数据？"></a>2)指令和数据均存放在内存中，计算机如何从时间和空间上区分它们是指令还是数据？</h3><ul><li><p>2)指令和数据均存放在内存中，计算机如何从时间和空间上区分它们是指令还是数据？</p><p>从时间上讲，取指令事件发生在“取指周期”，取数据事件发生在“执行周期”。从空间上讲，从内存读出的<strong>指令流</strong>流向控制器（指令寄存器），从内存读出的<strong>数据流</strong>流向运算器（通用寄存器）。</p></li></ul><h3 id="3-什么是指令周期、机器周期和时钟周期？它们之间有何关系？"><a href="#3-什么是指令周期、机器周期和时钟周期？它们之间有何关系？" class="headerlink" title="3)什么是指令周期、机器周期和时钟周期？它们之间有何关系？"></a>3)什么是指令周期、机器周期和时钟周期？它们之间有何关系？</h3><ul><li><p>3)什么是指令周期、机器周期和时钟周期？它们之间有何关系？</p><p>CPU每取出并执行一条指令所需的全部时间称为指令周期；机器周期是在同步控制的机器中，执行指令周期中一步相对完整的操作（指令步）所需的时间，通常安排机器周期长度&#x3D;主存周期；时钟周期是指计算机主时钟的周期时间，它是计算机运行时最基本的时序单位，对应完成一个微操作所需的时间，通常时钟周期&#x3D;计算机主频的倒数</p></li></ul><h3 id="4-指令周期是否有一个固定值？为什么？"><a href="#4-指令周期是否有一个固定值？为什么？" class="headerlink" title="4)指令周期是否有一个固定值？为什么？"></a>4)指令周期是否有一个固定值？为什么？</h3><ul><li><p>4)指令周期是否有一个固定值？为什么？</p><p>由于计算机中各种指令执行所需的时间差异很大，因此为了提高CPU的运行效率，即使在同步控制的机器中，不同指令的指令周期长度都是不一致的，即指令周期对不同的指令来说不是个固定值。</p></li></ul><h3 id="5-什么是微指令？它和第4章谈到的指令有什么关系？"><a href="#5-什么是微指令？它和第4章谈到的指令有什么关系？" class="headerlink" title="5)什么是微指令？它和第4章谈到的指令有什么关系？"></a>5)什么是微指令？它和第4章谈到的指令有什么关系？</h3><ul><li><p>5)什么是微指令？它和第4章谈到的指令有什么关系？</p><p>控制部件通过控制线向执行部件发出各种控制命令，通常把这种控制命令称为微命令，而一组实现一定操作功能的微命令的组合，构成一条微指令。许多条微指令组成的序列构成微程序，微程序完成对指令的解释执行。指令，即指机器指令。每条指令可以完成一个独立的算术运算或逻辑运算操作。在采用微程序控制器的CPU中，一条指令对应一个微程序，一个微程序由许多微指令构成，一条微指令会发出很多不同的微命令。</p></li></ul><h3 id="6-什么是指令流水线？指令流水线相对于传统计算机体系结构的优势是什么？如何计算指令流水线的加速比？"><a href="#6-什么是指令流水线？指令流水线相对于传统计算机体系结构的优势是什么？如何计算指令流水线的加速比？" class="headerlink" title="6)什么是指令流水线？指令流水线相对于传统计算机体系结构的优势是什么？如何计算指令流水线的加速比？"></a>6)什么是指令流水线？指令流水线相对于传统计算机体系结构的优势是什么？如何计算指令流水线的加速比？</h3><ul><li><p>6)什么是指令流水线？指令流水线相对于传统计算机体系结构的优势是什么？如何计算指令流水线的加速比？</p><p>指令流水线是把指令分解为若干子过程，通过将每个子过程与其他子过程并行执行，来提高计算机的吞吐率的技术。采用流水线技术只需增加少量硬件就能把计算机的运算速度提高几倍，因此成为计算机中普遍使用的一种并行处理技术，通过在同一个时间段使用各功能部件，使得利用率明显提高。<br>流水线的加速比指的是完成同样一批任务，不使用流水线所用的时间与使用流水线所用的时间之比。一条k段流水线理论上的最大加速比为Smax&#x3D;k。因此，在现代计算机中提高流水线段数有利于提高计算机的吞吐量。具体的加速比要使用时空图来计算。</p></li></ul><h2 id="5-7-常见问题"><a href="#5-7-常见问题" class="headerlink" title="5.7 常见问题"></a>5.7 常见问题</h2><h3 id="1-流水线越多，并行度就越高。是否流水段越多，指令执行越快？"><a href="#1-流水线越多，并行度就越高。是否流水段越多，指令执行越快？" class="headerlink" title="1.流水线越多，并行度就越高。是否流水段越多，指令执行越快？"></a>1.流水线越多，并行度就越高。是否流水段越多，指令执行越快？</h3><ul><li><p>1.流水线越多，并行度就越高。是否流水段越多，指令执行越快？</p><p>错误，因为如下：<br>1)流水段缓冲之间的额外开销增大。每个流水段有一些额外开销用于缓冲间传送数据、进行各种准备和发送等功能，这些开销加长了一条指令的整个执行时间，当指令间逻辑上相互依赖时，开销更大。<br>2)流水段间控制逻辑变多、变复杂。用于流水线优化和存储器（或寄存器）冲突处理的控制逻辑将随流水段的增加而大增，这可能导致用于流水段之间控制的逻辑比段本身的控制逻辑更复杂。</p></li></ul><h3 id="2-有关指令相关、数据相关的几个概念"><a href="#2-有关指令相关、数据相关的几个概念" class="headerlink" title="2.有关指令相关、数据相关的几个概念"></a>2.有关指令相关、数据相关的几个概念</h3><ul><li><p>2.有关指令相关、数据相关的几个概念</p><p>1)两条连续的指令读取相同的寄存器时，会产生读后读( Read After Read,RAR)相关，这种相关不会影响流水线。<br>2)某条指令要读取上一条指令所写入的寄存器时，会产生写后读( Read After Write,RAW)相关，它称数据相关或真相关，影响流水线。按序流动的流水线只可能出现RAW相关。<br>3)某条指令的上条指令要读&#x2F;写该指令的输出寄存器时，会产生读后写（ Write After Read,WAR)和写后写( Write After Write,WAW)相关。在非按序流动的流水线中，既可能发生RAW相关，又可能发生WAR相关和WAW相关。<br><strong>对流水线影响最严重的指令相关是数据相关。</strong></p></li></ul><h1 id="第六章-总线"><a href="#第六章-总线" class="headerlink" title="第六章 总线"></a>第六章 总线</h1><p><img src="https://img-blog.csdnimg.cn/20210119200448840.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="【复习提示】-5"><a href="#【复习提示】-5" class="headerlink" title="【复习提示】"></a>【复习提示】</h2><p>本章的知识点较少，其中总线仲裁及总线操作和定时方式是难点。本章内容通常以选择题的形式出现，特别是系统总线的特点、性能指标、各种仲裁方式的特点、异步定时方式及常见的总线标准和特点等。总线带宽的计算也可能结合其他章节出综合题</p><p>在学习本章时，请读者思考以下问题：</p><ul><li>1)引入总线结构有什么好处？</li><li>2)引入总线结构会导致什么问题？如何解决？</li></ul><p>请读者在学习本章的过程中寻找答案，本章末尾会给出参考答案。<br><img src="https://img-blog.csdnimg.cn/2021012008075435.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-1-总线的概述"><a href="#6-1-总线的概述" class="headerlink" title="6.1 总线的概述"></a>6.1 总线的概述</h2><h3 id="6-1-1-总线基本概念"><a href="#6-1-1-总线基本概念" class="headerlink" title="6.1.1 总线基本概念"></a>6.1.1 总线基本概念</h3><p><img src="https://img-blog.csdnimg.cn/20210120081324146.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120081427322.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-总线的特性"><a href="#3-总线的特性" class="headerlink" title="3.总线的特性"></a>3.总线的特性</h4><ol><li>机械特性：尺寸、形状、管脚数、排列顺序</li><li>电气特性：传输方向和有效的电平范围</li><li>功能特性：每根传输线的功能(地址、数据、控制)</li><li>时间特性：信号的时序关系</li></ol><h3 id="6-1-2-总线的分类"><a href="#6-1-2-总线的分类" class="headerlink" title="6.1.2 总线的分类"></a>6.1.2 总线的分类</h3><p><img src="https://img-blog.csdnimg.cn/20210120082335300.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120082438589.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120082941849.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210120083119763.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210120083207120.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021012008335890.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120083732931.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120083918649.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120084056105.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120084407305.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-1-4-总线的性能指标"><a href="#6-1-4-总线的性能指标" class="headerlink" title="6.1.4 总线的性能指标"></a>6.1.4 总线的性能指标</h3><p>总线的性能指标<br>1.总线的传输周期（总线周期）<br>2.总线时钟周期<br>3.总线的工作频率<br>4.总线的时钟频率<br>5.总线宽度<br>6.总线带宽<br>7.总线复用<br>8.信号线数</p><p><img src="https://img-blog.csdnimg.cn/20210120085029526.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120085417624.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120090024262.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120090218707.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120090406298.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021012009044716.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-2-总线仲裁"><a href="#6-2-总线仲裁" class="headerlink" title="6.2 总线仲裁"></a>6.2 总线仲裁</h2><p><img src="https://img-blog.csdnimg.cn/20210120090623344.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120090841429.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120091731942.png?type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021012009211387.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120092416938.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120092456227.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-2-2-分布仲裁方式"><a href="#6-2-2-分布仲裁方式" class="headerlink" title="6.2.2 分布仲裁方式"></a>6.2.2 分布仲裁方式</h3><p>特点：不需要中央仲裁器，每个潜在的主模块都有自己的仲裁器和仲裁号，多个仲裁器竞争使用总线。</p><ul><li>当设备有总线请求时，它们就把各自唯一的仲裁号发送到共享的仲裁总线上</li><li>每个仲裁器将从仲裁总线上得到的仲裁号与自己的仲裁号进行比较；</li><li>如果仲裁总线上的号优先级高，则它的总线请求不予响应，并撤销它的仲裁号；</li><li>最后，获胜者的仲裁号保留在仲裁总线上。</li></ul><h2 id="6-3-总线操作和定时"><a href="#6-3-总线操作和定时" class="headerlink" title="6.3 总线操作和定时"></a>6.3 总线操作和定时</h2><p><img src="https://img-blog.csdnimg.cn/20210120092959621.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/202101200932152.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120093356624.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120093450810.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120093928801.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120094049852.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120094337814.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120095701690.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021012009592410.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120100027820.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-4-总线标准"><a href="#6-4-总线标准" class="headerlink" title="6.4 总线标准"></a>6.4 总线标准</h2><p>总线标准的基本概念：</p><ul><li>总线标准是国际上公布或推荐的互连各个模块的标准，它是把各种不同的模块组成计算机系统时必须遵守的规范。按总线标准设计的接口可视为通用接口，在接口的两端，任何一方只需根据总线标准的要求完成自身方面的功能要求，而无须了解对方接口的要求。</li><li>系统总线标准：ISA、EISA、VESA、PCI、PCI- Express等。</li><li>设备总线标准：IDE、AGP、RS-232C、USB、SATA、SCSI、 PCMCIA等。</li><li>局部总线标准：在ISA.总线和CPU总线之间增加的一级总线或管理层，如PCI、PCI-E、VESA、AGP等，可以节省系统的总带宽。</li><li>即插即用( Plug-and-Play)的作用是自动配置（低层）计算机中的板卡和其他设备，然后告诉对应的设备都做了什么。把物理设备和软件（设备驱动程序）相配合，并操作设备，在每个设备和它的驱动程序之间建立通信信道</li><li>热插拔( hot-plugging或 Hot Swap)即带电插拔，热插拔功能就是允许用户在不关闭系统，不切断电源的情况下取出和更换损坏的硬盘、电源或板卡等部件，从而提高了系统对灾难的及时恢复能力、扩展性和灵活性等，例如一些面向高端应用的磁盘镜像系统都可以提供磁盘的热插拔功能。</li></ul><h3 id="6-4-1-常见的总线标准"><a href="#6-4-1-常见的总线标准" class="headerlink" title="6.4.1 常见的总线标准"></a>6.4.1 常见的总线标准</h3><p><img src="https://img-blog.csdnimg.cn/20210120100602267.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120100815313.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120100904157.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120101127778.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120101242330.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120101351712.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/202101201014395.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/202101201016167.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120101635739.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021012010180662.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120101935775.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120102024342.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120102128334.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120102148994.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120102239282.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120102307343.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120102355517.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120102427389.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021012010254174.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120102921711.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120103119807.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-5本章开头提出的问题回答"><a href="#6-5本章开头提出的问题回答" class="headerlink" title="6.5本章开头提出的问题回答"></a>6.5本章开头提出的问题回答</h2><h3 id="1-引入总线结构有什么好处？"><a href="#1-引入总线结构有什么好处？" class="headerlink" title="1)引入总线结构有什么好处？"></a>1)引入总线结构有什么好处？</h3><ul><li><p>1)引入总线结构有什么好处？</p><p>引入总线结构主要有以下优点<br>①简化了系统结构，便于系统设计制造。<br>②大大减少了连线数目，便于布线，减小体积，提高系统的可靠性<br>③便于接口设计，所有与总线连接的设备均采用类似的接口。<br>④便于系统的扩充、更新与灵活配置，易于实现系统的模块化<br>⑤便于设备的软件设计，所有接口的软件对不同的接口地址进行操作。<br>⑥便于故障诊断和维修，同时也能降低成本。</p></li></ul><h3 id="2-引入总线会导致什么问题？如何解决？"><a href="#2-引入总线会导致什么问题？如何解决？" class="headerlink" title="2)引入总线会导致什么问题？如何解决？"></a>2)引入总线会导致什么问题？如何解决？</h3><ul><li><p>2)引入总线会导致什么问题？如何解决？</p><p>引入总线后，总线上的各个设备分时共享同一总线，当总线上多个设备同时要求使用总线时就会导致总线的冲突。为解决多个主设备同时竞争总线控制权的问题，应当采用总线仲裁部件，以某种方式选择一个主设备优先获得总线控制权，只有获得了总线控制权的设备才能开始数据传送。</p></li></ul><h2 id="6-6-常见问题"><a href="#6-6-常见问题" class="headerlink" title="6.6 常见问题"></a>6.6 常见问题</h2><h3 id="1-同一个总线不能既采用同步方式又采用异步方式通信吗？"><a href="#1-同一个总线不能既采用同步方式又采用异步方式通信吗？" class="headerlink" title="1.同一个总线不能既采用同步方式又采用异步方式通信吗？"></a>1.同一个总线不能既采用同步方式又采用异步方式通信吗？</h3><ul><li><p>1.同一个总线不能既采用同步方式又采用异步方式通信吗？</p><p>半同步通信总线可以。这类总线既保留了同步通信的特点，又能采用异步应答方式连接速度相差较大的设备。通过在异步总线中引入时钟信号，其就绪和应答等信号都在时钟的上升沿或下降沿有效，而不受其他时间的信号干扰。<br>例如，某个采用半同步方式的总线总是从某个时钟开始，在每个时钟到来时，采样Wait信号，若无效，则说明数据未准备好，下个时钟到来时，再采样Wait信号，直到检测到有效，再去数据线上取数据。PCI总线也是一种半同步总线，它的所有事件都在时钟下降沿同步，总线设备在时钟开始的上升沿采样总线信号。</p></li></ul><h3 id="2-一个总线在某一时刻可以有多对主从设备进行通信吗？"><a href="#2-一个总线在某一时刻可以有多对主从设备进行通信吗？" class="headerlink" title="2.一个总线在某一时刻可以有多对主从设备进行通信吗？"></a>2.一个总线在某一时刻可以有多对主从设备进行通信吗？</h3><ul><li><p>2.一个总线在某一时刻可以有多对主从设备进行通信吗？</p><p>不可以。在某个总线周期内，总线上只有一个主设备控制总线，选择一个从设备与之进行通信（即一对一的关系），或对所有设备进行广播通信（即一对多的关系）。所以一个总线在某一时刻不能有多对主从设备进行通信，否则会发生数据冲突。</p></li></ul><h1 id="第七章-输入-x2F-输出系统"><a href="#第七章-输入-x2F-输出系统" class="headerlink" title="第七章 输入&#x2F;输出系统"></a>第七章 输入&#x2F;输出系统</h1><p><img src="https://img-blog.csdnimg.cn/20210119200603623.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="【复习提示】-6"><a href="#【复习提示】-6" class="headerlink" title="【复习提示】"></a>【复习提示】</h2><p>I&#x2F;O方式是本章的重点和难点，每年不仅会以选择题的形式考查基本概念和原理，而且可能会以综合题的形式考査，特别是各种IO方式效率的相关计算，中断方式的各种原理、特点、处理过程、中断屏蔽，DMA方式的特点、传输过程、与中断方式的区别等。</p><p>在学习本章时，请读者思考以下问题</p><ul><li>1)IO设备有哪些编址方式？各有何特点？</li><li>2)CPU响应中断应具备哪些条件？</li></ul><p>请读者在学习本章的过程中寻找答案，本章末尾会给出参考答案。<br><img src="https://img-blog.csdnimg.cn/20210118102514764.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>【复习提示】<br>I&#x2F;O方式是本章的重点和难点，每年不仅会以选择题的形式考査基本概念和原理，而且可能会以综合题的形式考査，特别是各种IO方式效率的相关计算，中断方式的各种原理、特点、处理过程、中断屏蔽，DMA方式的特点、传输过程、与中断方式的区别等。<br>在学习本章时，请读者思考以下问题：</p><ul><li>1)I&#x2F;O设备有哪些编址方式？各有何特点？</li><li>2)CPU响应中断应具备哪些条件？</li></ul><p>请读者在学习本章的过程中寻找答案，本章末尾会给出参考答案。</p><h2 id="7-1-I-x2F-O系统基本概念"><a href="#7-1-I-x2F-O系统基本概念" class="headerlink" title="7.1 I&#x2F;O系统基本概念"></a>7.1 I&#x2F;O系统基本概念</h2><h3 id="7-1-1-输入-x2F-输出系统"><a href="#7-1-1-输入-x2F-输出系统" class="headerlink" title="7.1.1 输入&#x2F;输出系统"></a>7.1.1 输入&#x2F;输出系统</h3><p>输入、输出是以主机为中心谈论的！输入、输出设备都属于外部设备<br><img src="https://img-blog.csdnimg.cn/20210120105942936.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120110325900.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120110518182.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-1-2-I-x2F-O控制方式"><a href="#7-1-2-I-x2F-O控制方式" class="headerlink" title="7.1.2 I&#x2F;O控制方式"></a>7.1.2 I&#x2F;O控制方式</h3><p><img src="https://img-blog.csdnimg.cn/20210120110937684.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120111048677.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-1-4-解析"><a href="#7-1-4-解析" class="headerlink" title="7.1.4 解析"></a>7.1.4 解析</h3><ol><li>I&#x2F;O设备不可能直接与主板总线相连，它总是通过设备控制器来相连的</li><li>I&#x2F;O指令是指令系统的一部分，是机器指令的一类，但其为了反映与I&#x2F;O设备交互的特点，格式和其他通用指令相比有所不同。</li><li>通道程序存放在主存而非通道中，由通道从主存中取出并执行。通道程序由通道执行，且只能在具有通道的I&#x2F;O系统中执行</li></ol><h2 id="7-2-外部设备"><a href="#7-2-外部设备" class="headerlink" title="7.2 外部设备"></a>7.2 外部设备</h2><ul><li>外部设备<br>外部设备也称外围设备，是除了主机以外的、能直接或间接与计算机交换信息的装置。<br><img src="https://img-blog.csdnimg.cn/20210120111535581.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="7-2-1-输入设备"><a href="#7-2-1-输入设备" class="headerlink" title="7.2.1 输入设备"></a>7.2.1 输入设备</h3><p>用于向计算机系统输入命令和文本、数据等信息的部件。键盘和鼠标是最基本的输入设备。<br><img src="https://img-blog.csdnimg.cn/20210120111952239.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-2-2-输出设备"><a href="#7-2-2-输出设备" class="headerlink" title="7.2.2 输出设备"></a>7.2.2 输出设备</h3><p>用于将计算机系统中的信息输出到计算机外部进行显示、交换等的部件。显示器和打印机是最基本的输出设备。<br><img src="https://img-blog.csdnimg.cn/20210120112337680.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120112419757.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120112512797.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120112846219.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210120112752571.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120113031328.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打印机从打字原理的角度可以分为：击打式和非击打式！<br><img src="https://img-blog.csdnimg.cn/20210120113202531.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120113304718.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120113323753.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-2-3-外存设备"><a href="#7-2-3-外存设备" class="headerlink" title="7.2.3 外存设备"></a>7.2.3 外存设备</h3><p>是指除计算机内存及CPU缓存等以外的存储器。硬磁盘、光盘等是最基本的外存设备。<br><img src="https://img-blog.csdnimg.cn/20210120122317646.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120122805431.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120123204130.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120123600331.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120123713603.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120125023450.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>串行：不能同时写和读！<br><img src="https://img-blog.csdnimg.cn/20210120125222974.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120125253209.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120125434130.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-光盘存储器"><a href="#3-光盘存储器" class="headerlink" title="3.光盘存储器"></a>3.光盘存储器</h4><p><img src="https://img-blog.csdnimg.cn/20210120125538701.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-固态硬盘"><a href="#4-固态硬盘" class="headerlink" title="4.固态硬盘"></a>4.固态硬盘</h4><p><img src="https://img-blog.csdnimg.cn/20210120125639707.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120125849762.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-2-5-解析"><a href="#7-2-5-解析" class="headerlink" title="7.2.5 解析"></a>7.2.5 解析</h3><ul><li>存取一个扇区的平均延迟时间为旋转半周的时间。</li><li>磁盘存储器的最小读写单位为一个扇区，即磁盘按块存取。</li></ul><h2 id="7-3-I-x2F-O接口"><a href="#7-3-I-x2F-O接口" class="headerlink" title="7.3 I&#x2F;O接口"></a>7.3 I&#x2F;O接口</h2><p><img src="https://img-blog.csdnimg.cn/20210120130210540.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120130511159.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120130738612.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120131000927.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120131209430.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120131540410.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120131813794.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120132007317.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-4-I-x2F-O方式"><a href="#7-4-I-x2F-O方式" class="headerlink" title="7.4 I&#x2F;O方式"></a>7.4 I&#x2F;O方式</h2><p><img src="https://img-blog.csdnimg.cn/2021012013362735.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2021012013390569.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/202101201342067.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021012013440456.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120135010720.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120135231238.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021012014161292.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120141926967.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120142304772.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120142425467.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120142804716.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120143042355.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120143108902.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120143551516.png?k,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120143949802.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120144400388.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021012014454146.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120145123868.png?-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120145353321.png?-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120150308433.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120150356462.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-4-2-程序中断方式"><a href="#7-4-2-程序中断方式" class="headerlink" title="7.4.2 程序中断方式"></a>7.4.2 程序中断方式</h3><p><img src="https://img-blog.csdnimg.cn/20210120150607820.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120150843694.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120151113869.png?-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120151611248.png?-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120151646307.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-4-3-DMA方式"><a href="#7-4-3-DMA方式" class="headerlink" title="7.4.3 DMA方式"></a>7.4.3 DMA方式</h3><p><img src="https://img-blog.csdnimg.cn/20210120151846128.png?-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120152205404.png?-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120153622980.png?-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120153749657.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120153908734.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120153952935.png?oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120154049766.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120154432194.png?-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120154822413.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120155144682.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120155537747.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120155811934.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210120155910155.png?-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2ppZV9kdWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-5-本章开头提出的问题回答"><a href="#7-5-本章开头提出的问题回答" class="headerlink" title="7.5 本章开头提出的问题回答"></a>7.5 本章开头提出的问题回答</h2><h3 id="1-I-x2F-O设备有哪些编址方式？各有何特点？"><a href="#1-I-x2F-O设备有哪些编址方式？各有何特点？" class="headerlink" title="1)I&#x2F;O设备有哪些编址方式？各有何特点？"></a>1)I&#x2F;O设备有哪些编址方式？各有何特点？</h3><p>1)I&#x2F;O设备有哪些编址方式？各有何特点？</p><p>统一编址和独立编址。统一编址是在主存地址中划出一定的范围作为I&#x2F;O地址，以便通过访存指令即可实现对I&#x2F;O的访问，但主存的容量相应减少。独立编址是指IO地址和主存是分开的，I&#x2F;O地址不占主存空间，但访存需专门的I&#x2F;O指令。</p><h3 id="2-CPU响应中断应具备哪些条件？"><a href="#2-CPU响应中断应具备哪些条件？" class="headerlink" title="2)CPU响应中断应具备哪些条件？"></a>2)CPU响应中断应具备哪些条件？</h3><ul><li><p>2)CPU响应中断应具备哪些条件？</p><p>①在CPU内部设置的中断屏蔽触发器必须是开放的<br>②外设有中断请求时，中断请求触发器必须处于“1”状态，保持中断请求信号。<br>③外设(接ロ)中断允许触发器必须为“1”，这样才能把外设中断请求送至CPU。<br>具备上述三个条件时，CPU在现行指令结束的最后一个状态周期响应中断。</p></li></ul><h2 id="7-6-常见问题"><a href="#7-6-常见问题" class="headerlink" title="7.6 常见问题"></a>7.6 常见问题</h2><h3 id="1-中断响应优先级和中断处理优先级分别指什么？"><a href="#1-中断响应优先级和中断处理优先级分别指什么？" class="headerlink" title="1.中断响应优先级和中断处理优先级分别指什么？"></a>1.中断响应优先级和中断处理优先级分别指什么？</h3><ul><li><p>1.中断响应优先级和中断处理优先级分别指什么？</p><p>中断响应优先级是由硬件排队线路或中断查询程序的查询顺序决定的，不可动态改变；而中断处理优先级可以由中断屏蔽字来改变，反映的是正在处理的中断是否比新发生的中断的处理优先级低(屏蔽位为“0”，对新中断开放)，若是，则中止正在处理的中断，转到新中断去处理，<br>处理完后再回到刚才被中止的中断继续处理。</p></li></ul><h3 id="2-向量中断、中断向量、向量地址三个概念是什么关系？"><a href="#2-向量中断、中断向量、向量地址三个概念是什么关系？" class="headerlink" title="2.向量中断、中断向量、向量地址三个概念是什么关系？"></a>2.向量中断、中断向量、向量地址三个概念是什么关系？</h3><ul><li><p>2.向量中断、中断向量、向量地址三个概念是什么关系？</p><p>中断向量：每个中断源都有对应的处理程序，这个处理程序称为中断服务程序，其入口地址称为中断向量。所有中断的中断服务程序入口地址构成一个表，称为中断向量表；也有的机器把中断服务程序入口的跳转指令构成一张表，称为中断向量跳转表。<br>向量地址：中断向量表或中断向量跳转表中每个表项所在的内存地址或表项的索引值，称为向量地址或中断类型号。<br>向量中断：指一种识别中断源的技术或方式。识别中断源的目的是找到中断源对应的中断服务程序的入口地址的地址，即获得向量地址。</p></li></ul><h3 id="3-程序中断和调用子程序有何区别？"><a href="#3-程序中断和调用子程序有何区别？" class="headerlink" title="3.程序中断和调用子程序有何区别？"></a>3.程序中断和调用子程序有何区别？</h3><ul><li><p>3.程序中断和调用子程序有何区别？</p><p>两者的根本区别主要表现在服务时间和服务对象上不一样。<br>1)调用子程序过程发生的时间是已知的和固定的，即在主程序中的调用指令(CALL)执行时发生主程序调用子程序过程，调用指令所在位置是已知的和固定的。而中断过程发生的时间一般是随机的，CPU在执行某个主程序时收到中断源提出的中断申请，就发生中断过程，而中断申请一般由硬件电路产生，申请提出时间是随机的。也可以说，调用子程序是程序设计者事先安排的，而执行中断服务程序是由系统工作环境随机决定的<br>2)子程序完全为主程序服务，两者属于主从关系。主程序需要子程序时就去调用子程序，并把调用结果带回主程序继续执行。而中断服务程序与主程序二者一般是无关的，不存在谁为谁服务的问题，两者是平行关系。<br>3)主程序调用子程序的过程完全属于软件处理过程，不需要专门的硬件电路；而中断处理系统是一个软&#x2F;硬件结合的系统，需要专门的硬件电路才能完成中断处理的过程<br>4)子程序嵌套可实现若干级，嵌套的最多级数受计算机内存开辟的堆栈大小限制；而中断嵌套级数主要由中断优先级来决定，一般优先级数不会很大。<br>从宏观上看，虽然程序中断方式克服了程序査询方式中的CPU“踏步”现象，实现了CPU与I&#x2F;O并行工作，提高了CPU的资源利用率，但从微观操作分析，CPU在处理中断服务程序时，仍需暂停原程序的正常运行，尤其是当高速I&#x2F;O设备或辅助存储器频繁地、成批地与主存交换信息时，需要不断打断CPU执行现行程序，而执行中断服务程序。</p></li></ul><h3 id="4-IO指令和通道指令有何区别？"><a href="#4-IO指令和通道指令有何区别？" class="headerlink" title="4.IO指令和通道指令有何区别？"></a>4.IO指令和通道指令有何区别？</h3><ul><li><p>4.IO指令和通道指令有何区别？</p><p><strong>I&#x2F;O指令是CPU指令系统的一部分</strong>，是CPU用来控制输入&#x2F;输出操作的指令，由CPU译码后执行。在具有通道结构的机器中，I&#x2F;O指令不实现I&#x2F;O数据传送，主要完成启、停I&#x2F;O设备，査询通道和I&#x2F;O设备的状态，及控制通道进行其他一些操作等。<br><strong>通道指令是通道本身的指令</strong>，用来执行I&#x2F;O操作，如读、写、磁带走带及磁盘找道等操作。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机组成原理：最详细笔记&quot;&gt;&lt;a href=&quot;#计算机组成原理：最详细笔记&quot; class=&quot;headerlink&quot; title=&quot;计算机组成原理：最详细笔记&quot;&gt;&lt;/a&gt;计算机组成原理：最详细笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;计算机组成原理比较经典的书</summary>
      
    
    
    
    <category term="计算机组成原理" scheme="https://manamn.space/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="笔记" scheme="https://manamn.space/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机组成原理" scheme="https://manamn.space/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>

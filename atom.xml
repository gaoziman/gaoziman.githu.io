<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱笑的Gao的个人博客</title>
  
  <subtitle>生活明朗 万物可爱</subtitle>
  <link href="https://manamn.space/atom.xml" rel="self"/>
  
  <link href="https://manamn.space/"/>
  <updated>2022-06-05T13:27:32.044Z</updated>
  <id>https://manamn.space/</id>
  
  <author>
    <name>Gao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>终于搞懂了Java中基本数据类型和引用数据类型的区别啦！</title>
    <link href="https://manamn.space/2022/06/05/%E7%BB%88%E4%BA%8E%E6%90%9E%E6%87%82%E4%BA%86Java%E4%B8%AD%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E5%95%A6%EF%BC%81/"/>
    <id>https://manamn.space/2022/06/05/%E7%BB%88%E4%BA%8E%E6%90%9E%E6%87%82%E4%BA%86Java%E4%B8%AD%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E5%95%A6%EF%BC%81/</id>
    <published>2022-06-05T13:25:30.000Z</published>
    <updated>2022-06-05T13:27:32.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="终于搞懂了Java中基本数据类型和引用数据类型的区别啦！"><a href="#终于搞懂了Java中基本数据类型和引用数据类型的区别啦！" class="headerlink" title="终于搞懂了Java中基本数据类型和引用数据类型的区别啦！"></a>终于搞懂了Java中基本数据类型和引用数据类型的区别啦！</h1><h2 id="1-数据类型有哪些？"><a href="#1-数据类型有哪些？" class="headerlink" title="1. 数据类型有哪些？"></a>1. 数据类型有哪些？</h2><h3 id="1-1-基本数据类型"><a href="#1-1-基本数据类型" class="headerlink" title="1.1 基本数据类型"></a>1.1 基本数据类型</h3><p>基本数据类型只有<strong>8</strong>个:<strong>byte、short、int、long、float、double、char、boolean</strong></p><p><strong>注意:　String不是基本数据类型！！！是引用类型</strong></p><h3 id="1-2-引用数据类型"><a href="#1-2-引用数据类型" class="headerlink" title="1.2 引用数据类型"></a>1.2 引用数据类型</h3><ol><li>引用类型：都可以用null值作为值，也就是说可以在初始化的时候赋值为null，例如：String是引用类型，也就是说可以使用null作为值，即：String s &#x3D; null;</li><li>引用数据类型分3种：<strong>类，接口，数组</strong>；</li></ol><h2 id="2-Java数据类型在内存中存储"><a href="#2-Java数据类型在内存中存储" class="headerlink" title="2. Java数据类型在内存中存储"></a>2. Java数据类型在内存中存储</h2><h3 id="2-1-Java对象的内存模型"><a href="#2-1-Java对象的内存模型" class="headerlink" title="2.1 Java对象的内存模型"></a>2.1 Java对象的内存模型</h3><ol><li>堆内存:保存的是对象的具体信息，在程序之中堆内存空间的开辟是通过new完成的</li><li>栈内存:保存的是一块堆内存的地址，即:通过地址找到堆内存，而后找到对象内容，但是为了分析简化，可以简单地理解为：<strong>对象名称保存在栈内存中</strong>。</li></ol><h3 id="2-2-数据类型存储原理"><a href="#2-2-数据类型存储原理" class="headerlink" title="2.2 数据类型存储原理"></a>2.2 数据类型存储原理</h3><p>1）基本数据类型的存储原理：所有的简单数据类型不存在“引用”的概念，基本数据类型都是直接存储在内存中的<strong>内存栈</strong>上的，数据<strong>本身的值</strong>就是存储在<strong>栈空间</strong>里面，而Java语言里面八种数据类型是这种存储模型；</p><p>2）引用类型的存储原理:引用类型继承于Object类（也是引用类型）都是按照Java里面存储对象的内存模型来进行数据存储的，使用Java内存堆和内存栈来进行这种类型的数据存储，简单地讲，<strong>“引用”是存储在有序的内存栈上的，而对象本身的值存储在内存堆上的；</strong></p><p><strong>综上：不论是基本数据类型还是引用数据类型，他们都会先在栈中分配一块内存，对于基本类型来说，这块区域包含的是基本类型的内容；而对于引用数据类型来说，这块区域包含的是指向真正内容的指针，真正的内容被手动的分配在堆上</strong>。</p><h2 id="3-参数传递过程中的不同"><a href="#3-参数传递过程中的不同" class="headerlink" title="3. 参数传递过程中的不同"></a>3. 参数传递过程中的不同</h2><h3 id="3-1-传递的是基本数据类型时"><a href="#3-1-传递的是基本数据类型时" class="headerlink" title="3.1 传递的是基本数据类型时"></a>3.1 传递的是基本数据类型时</h3><p>如果传递的是基本数据类型，此时<strong>形参是值本身</strong>，如果修改的形参值本身，那么当形参修改时，实参不会一起发生修改。这就类似于C语言中，如果传递的是值本身而不是传递变量的指针（地址），那么当形参发送修改时，实参不变。</p><h3 id="3-2-传递的是引用数据类型时"><a href="#3-2-传递的是引用数据类型时" class="headerlink" title="3.2 传递的是引用数据类型时"></a>3.2 传递的是引用数据类型时</h3><p>如果传递的是引用数据类型，<strong>实参传给形参的值是对象的引用</strong>。如果修改形参引用的对象，那么实参引用的对象也会发生同样的变化。因为实参的引用拷贝给了形参，所以实参和形参引用同一个对象，对形参引用对象的修改就相当于对实参引用对象的修改。简单理解就是此时形参传递的是一个指向实际值的地址，当形参发生改变的时候，所执行的那个值也会发生改变。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;终于搞懂了Java中基本数据类型和引用数据类型的区别啦！&quot;&gt;&lt;a href=&quot;#终于搞懂了Java中基本数据类型和引用数据类型的区别啦！&quot; class=&quot;headerlink&quot; title=&quot;终于搞懂了Java中基本数据类型和引用数据类型的区别啦！&quot;&gt;&lt;/a&gt;终于</summary>
      
    
    
    
    <category term="Java" scheme="https://manamn.space/categories/Java/"/>
    
    
    <category term="Java" scheme="https://manamn.space/tags/Java/"/>
    
    <category term="数据类型" scheme="https://manamn.space/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
</feed>

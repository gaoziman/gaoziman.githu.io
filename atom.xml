<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱笑的Gao的个人博客</title>
  
  <subtitle>生活明朗 万物可爱</subtitle>
  <link href="https://manamn.space/atom.xml" rel="self"/>
  
  <link href="https://manamn.space/"/>
  <updated>2022-10-18T03:12:26.012Z</updated>
  <id>https://manamn.space/</id>
  
  <author>
    <name>Gao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习MyBatis-Plus3这一篇就够了</title>
    <link href="https://manamn.space/2022/10/18/%E5%AD%A6%E4%B9%A0MyBatis-Plus3%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
    <id>https://manamn.space/2022/10/18/%E5%AD%A6%E4%B9%A0MyBatis-Plus3%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/</id>
    <published>2022-10-18T03:11:26.000Z</published>
    <updated>2022-10-18T03:12:26.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-MyBatis-Plus3概述"><a href="#第一章-MyBatis-Plus3概述" class="headerlink" title="第一章 MyBatis-Plus3概述"></a>第一章 MyBatis-Plus3概述</h2><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p>我们的愿景是成为 MyBatis 最好的搭档，就像魂斗罗中的1P、2P，基友搭配，效率翻倍。</p><h3 id="1-2、特性"><a href="#1-2、特性" class="headerlink" title="1.2、特性"></a>1.2、特性</h3><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑 </li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作 </li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求 </li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错 </li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题 </li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作 </li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ） </li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用 </li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询 </li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库 </li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询 </li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h3 id="1-3、框架结构"><a href="#1-3、框架结构" class="headerlink" title="1.3、框架结构"></a>1.3、框架结构</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/65f466de040a62eab8cda68ecab3578a.png" alt="img"></p><h3 id="1-4、项目地址"><a href="#1-4、项目地址" class="headerlink" title="1.4、项目地址"></a>1.4、项目地址</h3><p><strong>官网地址</strong>： <a href="https://baomidou.com/">点击打开</a></p><p><strong>源码地址</strong>： <a href="https://github.com/baomidou/mybatis-plus">点击打开</a></p><p><strong>文档地址</strong>： <a href="https://baomidou.com/guide/">点击打开</a></p><p><strong>配置地址</strong>： <a href="https://baomidou.com/config/">点击打开</a></p><h3 id="1-5、版本介绍"><a href="#1-5、版本介绍" class="headerlink" title="1.5、版本介绍"></a>1.5、版本介绍</h3><p>全新的 MyBatis-Plus 3.0 版本基于 JDK8，提供了 lambda 形式的调用，所以安装集成 MP3.0 要求如下：</p><ul><li>JDK 8+ </li><li>Maven or Gradle</li></ul><h3 id="1-6、快速安装"><a href="#1-6、快速安装" class="headerlink" title="1.6、快速安装"></a>1.6、快速安装</h3><ul><li><p>Spring Boot </p><ul> -  Maven： <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.4.0</version></dependency>  -  Gradle： compile group: 'com.baomidou', name: 'mybatis-plus-boot-starter', version: '3.4.0'  </ul>  </li><li><p>Spring MVC </p><ul> -  Maven： <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus</artifactId> <version>3.4.0</version></dependency>  -  Gradle： compile group: 'com.baomidou', name: 'mybatis-plus', version: '3.4.0'  </ul> </li></ul><blockquote><p>警告：引入 <code>MyBatis-Plus</code> 之后请不要再次引入 <code>MyBatis</code> 以及 <code>MyBatis-Spring</code>，以避免因版本差异导致的问题。</p></blockquote><h3 id="1-7、开发环境"><a href="#1-7、开发环境" class="headerlink" title="1.7、开发环境"></a>1.7、开发环境</h3><ul><li>Jdk：jdk1.8.0_261 </li><li>Idea：IntelliJ IDEA 2020.1.2 x64 </li><li>Maven：apache-maven-3.3.9 </li><li>MySQL：mysql-5.5.61-win64</li></ul><h2 id="第二章-MyBatis-Plus3增删改查"><a href="#第二章-MyBatis-Plus3增删改查" class="headerlink" title="第二章 MyBatis-Plus3增删改查"></a>第二章 MyBatis-Plus3增删改查</h2><h3 id="2-1、项目搭建"><a href="#2-1、项目搭建" class="headerlink" title="2.1、项目搭建"></a>2.1、项目搭建</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/8be2ec054e4a7b740f7adb4df6906189.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6c3b9654874782e1102fff95eef1bcd7.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/7e7a8d317a71928953d45116e5dd061e.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/af2a6e8b43a2be67485d3f4887c66917.png" alt="img"></p><p>新建完成以后，打开pom.xml后添加以下依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.4</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">5.1</span><span class="number">.49</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.18</span><span class="number">.12</span>&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在src/main/java目录中，创建以下包文件</p><ul><li>com.caochenlei.mpdemo.pojo </li><li>com.caochenlei.mpdemo.mapper</li></ul><h3 id="2-2、项目配置（1）"><a href="#2-2、项目配置（1）" class="headerlink" title="2.2、项目配置（1）"></a>2.2、项目配置（1）</h3><p>MyBatis-Plus 的配置异常的简单，我们仅需要一些简单的配置即可使用 MyBatis-Plus 的强大功能！</p><ul><li><p>Spring Boot 工程： </p><p><ul> </p><ul><li>配置 MapperScan 注解 <pre><code class="prism language-java"><span class="token annotation punctuation">@SpringBootApplication</span><br><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">“com.caochenlei.mpdemo.mapper”</span><span class="token punctuation">)</span><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpDemoApplication</span> <span class="token punctuation">&#123;</li></ul></li></ul><pre><code>  &lt;!-- --&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;  &lt;!-- --&gt;&lt;/span&gt;    &lt;span class=&quot;token class-name&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MpDemoApplication&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;</code></pre><p><span class="token punctuation">}</span><br>&lt;/code&gt;&lt;/pre&gt;<br> &lt;/ul&gt;  </p><ul><li><p>Spring MVC 工程： </p><ul> -  配置 MapperScan 对象 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> <property name="basePackage" value="com.caochenlei.mpdemo.mapper"/></bean>  -  调整 SqlSessionFactory 为 MyBatis-Plus 的 SqlSessionFactory <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"> <property name="dataSource" ref="dataSource"/></bean>  </ul> </li></ul><h3 id="2-3、项目配置（2）"><a href="#2-3、项目配置（2）" class="headerlink" title="2.3、项目配置（2）"></a>2.3、项目配置（2）</h3><p>application.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#mysql</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/mp?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">#mybatis-plus</span><br><span class="line">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><h3 id="2-4、数据导入"><a href="#2-4、数据导入" class="headerlink" title="2.4、数据导入"></a>2.4、数据导入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">## 创建库</span><br><span class="line">CREATE DATABASE mp;</span><br><span class="line">## 使用库</span><br><span class="line">USE mp;</span><br><span class="line">## 创建表</span><br><span class="line">CREATE TABLE <span class="title function_">tbl_employee</span><span class="params">(</span></span><br><span class="line"><span class="params">   id INT(<span class="number">11</span>)</span> PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">   last_name <span class="title function_">VARCHAR</span><span class="params">(<span class="number">50</span>)</span>,</span><br><span class="line">   email <span class="title function_">VARCHAR</span><span class="params">(<span class="number">50</span>)</span>,</span><br><span class="line">   gender <span class="title function_">CHAR</span><span class="params">(<span class="number">1</span>)</span>,</span><br><span class="line">   age INT</span><br><span class="line">);</span><br><span class="line">## 导入数据</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;tom@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">22</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;jerry@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">25</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Black&#x27;</span>,<span class="string">&#x27;black@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">30</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;White&#x27;</span>,<span class="string">&#x27;white@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">35</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Tiger&#x27;</span>,<span class="string">&#x27;tiger@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">28</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Bobby&#x27;</span>,<span class="string">&#x27;bobby@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line">## 查询数据</span><br><span class="line">SELECT * FROM tbl_employee;</span><br></pre></td></tr></table></figure><h3 id="2-5、创建实体"><a href="#2-5、创建实体" class="headerlink" title="2.5、创建实体"></a>2.5、创建实体</h3><p>com.caochenlei.mpdemo.pojo.Employee</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tbl_employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;last_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;email&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;gender&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;age&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender, Integer age)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastName</span><span class="params">(String lastName)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(Integer gender)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, lastName=&#x27;&quot;</span> + lastName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&quot;</span> + gender +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6、创建接口"><a href="#2-6、创建接口" class="headerlink" title="2.6、创建接口"></a>2.6、创建接口</h3><p>com.caochenlei.mpdemo.mapper.EmployeeMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Employee&gt; &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7、测试准备"><a href="#2-7、测试准备" class="headerlink" title="2.7、测试准备"></a>2.7、测试准备</h3><p>com.caochenlei.mpdemo.MpDemoApplicationTests</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MpDemoApplicationTests</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        List&lt;Employee&gt; employees = employeeMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        employees.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-8、增删改查"><a href="#2-8、增删改查" class="headerlink" title="2.8、增删改查"></a>2.8、增删改查</h3><h4 id="2-8-1、insert"><a href="#2-8-1、insert" class="headerlink" title="2.8.1、insert"></a>2.8.1、insert</h4><p><strong>需求描述</strong>：插入一个员工，员工姓名为“张三”、邮箱为”zhangsan@qq.com”、男性、25岁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> employeeMapper.insert(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="literal">null</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>, <span class="number">0</span>, <span class="number">25</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-8-2、updateById"><a href="#2-8-2、updateById" class="headerlink" title="2.8.2、updateById"></a>2.8.2、updateById</h4><p><strong>需求信息</strong>：将id为1的员工的姓名更改为”Jennie”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 先查询</span></span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    employee.setLastName(<span class="string">&quot;Jennie&quot;</span>);</span><br><span class="line">    <span class="comment">// 再修改</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> employeeMapper.updateById(employee);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-8-3、selectById"><a href="#2-8-3、selectById" class="headerlink" title="2.8.3、selectById"></a>2.8.3、selectById</h4><p><strong>需求描述</strong>：查询id为1的员工信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-8-4、selectByMap"><a href="#2-8-4、selectByMap" class="headerlink" title="2.8.4、selectByMap"></a>2.8.4、selectByMap</h4><p><strong>需求描述</strong>：查询性别为男性（0）且年龄在25岁的员工信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectByMap</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;gender&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">25</span>);</span><br><span class="line">    List&lt;Employee&gt; employees = employeeMapper.selectByMap(map);</span><br><span class="line">    employees.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-8-5、selectBatchIds"><a href="#2-8-5、selectBatchIds" class="headerlink" title="2.8.5、selectBatchIds"></a>2.8.5、selectBatchIds</h4><p><strong>需求描述</strong>：查询id分别为1、2、3的员工的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectBatchIds</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    List&lt;Employee&gt; employees = employeeMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    employees.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-8-6、deleteById"><a href="#2-8-6、deleteById" class="headerlink" title="2.8.6、deleteById"></a>2.8.6、deleteById</h4><p><strong>需求信息</strong>：删除id为1的员工信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> employeeMapper.deleteById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-8-7、deleteByMap"><a href="#2-8-7、deleteByMap" class="headerlink" title="2.8.7、deleteByMap"></a>2.8.7、deleteByMap</h4><p><strong>需求描述</strong>：删除性别为男性（0）且年龄在25岁的员工信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;gender&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, <span class="number">25</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> employeeMapper.deleteByMap(map);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-8-8、deleteBatchIds"><a href="#2-8-8、deleteBatchIds" class="headerlink" title="2.8.8、deleteBatchIds"></a>2.8.8、deleteBatchIds</h4><p><strong>需求描述</strong>：删除id分别为4、5、6的员工的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteBatchIds</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> employeeMapper.deleteBatchIds(Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三章-MyBatis-Plus3注解介绍"><a href="#第三章-MyBatis-Plus3注解介绍" class="headerlink" title="第三章 MyBatis-Plus3注解介绍"></a>第三章 MyBatis-Plus3注解介绍</h2><h3 id="3-1、-TableName"><a href="#3-1、-TableName" class="headerlink" title="3.1、@TableName"></a>3.1、@TableName</h3><p>描述：表名注解</p><h3 id="3-2、-TableId"><a href="#3-2、-TableId" class="headerlink" title="3.2、@TableId"></a>3.2、@TableId</h3><p>描述：主键注解</p><p><strong>IdType</strong></p><h3 id="3-3、-TableField"><a href="#3-3、-TableField" class="headerlink" title="3.3、@TableField"></a>3.3、@TableField</h3><p>描述：字段注解(非主键)</p><p><strong>FieldStrategy</strong></p><p><strong>FieldFill</strong></p><h3 id="3-4、-Version"><a href="#3-4、-Version" class="headerlink" title="3.4、@Version"></a>3.4、@Version</h3><p>描述：乐观锁注解、标记 @Verison 在字段上</p><h3 id="3-5、-EnumValue"><a href="#3-5、-EnumValue" class="headerlink" title="3.5、@EnumValue"></a>3.5、@EnumValue</h3><p>描述：通枚举类注解（注解在枚举字段上）</p><h3 id="3-6、-TableLogic"><a href="#3-6、-TableLogic" class="headerlink" title="3.6、@TableLogic"></a>3.6、@TableLogic</h3><p>描述：表字段逻辑处理注解（逻辑删除）</p><h3 id="3-7、-SqlParser"><a href="#3-7、-SqlParser" class="headerlink" title="3.7、@SqlParser"></a>3.7、@SqlParser</h3><p>描述：租户注解，支持method上以及mapper接口上</p><h3 id="3-8、-KeySequence"><a href="#3-8、-KeySequence" class="headerlink" title="3.8、@KeySequence"></a>3.8、@KeySequence</h3><p>描述：序列主键策略 oracle</p><p>属性：value、resultMap</p><h2 id="第四章-MyBatis-Plus3条件构造器"><a href="#第四章-MyBatis-Plus3条件构造器" class="headerlink" title="第四章 MyBatis-Plus3条件构造器"></a>第四章 MyBatis-Plus3条件构造器</h2><h3 id="4-1、数据导入"><a href="#4-1、数据导入" class="headerlink" title="4.1、数据导入"></a>4.1、数据导入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">## 使用库</span><br><span class="line">USE mp;</span><br><span class="line">## 清空表</span><br><span class="line">TRUNCATE TABLE tbl_employee;</span><br><span class="line">## 导入数据</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Allan0&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">21</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Allan1&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">22</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Allan2&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">23</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Allan3&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">24</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Allan4&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">25</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Allan5&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">26</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Allan6&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">27</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Allan7&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">28</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Allan8&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">29</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Allan9&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">30</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Baby0&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">21</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Baby1&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">22</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Baby2&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">23</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Baby3&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">24</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Baby4&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">25</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Baby5&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">26</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Baby6&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">27</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Baby7&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">28</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Baby8&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">29</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Baby9&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">30</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Tom0&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">21</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Tom1&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">22</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Tom2&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">23</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Tom3&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">24</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Tom4&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">25</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Tom5&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">26</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Tom6&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">27</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Tom7&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">28</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Tom8&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">1</span>,<span class="number">29</span>);</span><br><span class="line">INSERT INTO <span class="title function_">tbl_employee</span><span class="params">(last_name,email,gender,age)</span> VALUES(<span class="string">&#x27;Tom9&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>,<span class="number">0</span>,<span class="number">30</span>);</span><br><span class="line">## 查询数据</span><br><span class="line">SELECT * FROM tbl_employee;</span><br></pre></td></tr></table></figure><h3 id="4-2、构造器简介"><a href="#4-2、构造器简介" class="headerlink" title="4.2、构造器简介"></a>4.2、构造器简介</h3><p>MyBatis-Plus 通过 EntityWrapper（简称 EW，MP 封装的一个查询条件构造器）或者 Condition（与 EW 类似） 来让用户自由的构建查询条件，简单便捷，没有额外的负担， 能够有效提高开发效率，它主要用于处理 sql 拼接，排序，实体参数查询等。</p><blockquote><p>注意：使用的是数据库字段，不是 Java 属性！</p><p>警告：MyBatis-Plus不支持以及不赞成在 RPC 调用中把 Wrapper 进行传输，Wrapper 很重，传输 Wrapper 可以类比为你的 controller 用 map 接收值(开发一时爽，维护火葬场)，正确的 RPC 调用姿势是写一个 DTO 进行传输，被调用方再根据 DTO 执行相应的操作。</p></blockquote><h3 id="4-3、构造器使用（1）"><a href="#4-3、构造器使用（1）" class="headerlink" title="4.3、构造器使用（1）"></a>4.3、构造器使用（1）</h3><h4 id="4-3-1、带条件的查询"><a href="#4-3-1、带条件的查询" class="headerlink" title="4.3.1、带条件的查询"></a>4.3.1、带条件的查询</h4><p><strong>需求描述</strong>：查询所有姓名的包含B、且姓名为女（1）、且年龄大于24岁的员工信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectList1</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    QueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper</span><br><span class="line">            .like(<span class="string">&quot;last_name&quot;</span>,<span class="string">&quot;B&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;gender&quot;</span>,<span class="number">1</span>)</span><br><span class="line">            .gt(<span class="string">&quot;age&quot;</span>,<span class="number">24</span>);</span><br><span class="line">    List&lt;Employee&gt; employees = employeeMapper.selectList(queryWrapper);</span><br><span class="line">    employees.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需求描述</strong>：查询所有员工信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectList2</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    List&lt;Employee&gt; employees = employeeMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    employees.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需求描述</strong>：查询所有女生的数量（1）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectList3</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    QueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;gender&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> employeeMapper.selectCount(queryWrapper);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2、带条件的修改"><a href="#4-3-2、带条件的修改" class="headerlink" title="4.3.2、带条件的修改"></a>4.3.2、带条件的修改</h4><p><strong>需求信息</strong>：将年龄大于25岁的女生（1）的性别修改为男生（0）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    UpdateWrapper&lt;Employee&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper</span><br><span class="line">        .eq(<span class="string">&quot;gender&quot;</span>, <span class="number">1</span>)</span><br><span class="line">        .gt(<span class="string">&quot;age&quot;</span>, <span class="number">25</span>)</span><br><span class="line">        ;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    employee.setGender(<span class="number">0</span>);</span><br><span class="line">    employeeMapper.update(employee, updateWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3、带条件的删除"><a href="#4-3-3、带条件的删除" class="headerlink" title="4.3.3、带条件的删除"></a>4.3.3、带条件的删除</h4><p><strong>需求信息</strong>：将姓名带有“Tom”的员工信息删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    QueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(<span class="string">&quot;last_name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> employeeMapper.delete(queryWrapper);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4、构造器使用（2）"><a href="#4-4、构造器使用（2）" class="headerlink" title="4.4、构造器使用（2）"></a>4.4、构造器使用（2）</h3><p><strong>参数说明</strong>：</p><ul><li>以下出现的第一个入参boolean condition表示该条件<strong>是否</strong>加入最后生成的sql中 </li><li>以下代码块内的多个方法均为从上往下补全个别boolean类型的入参，默认为true </li><li>以下出现的泛型Param均为Wrapper的子类实例(均具有AbstractWrapper的所有方法) </li><li>以下方法在入参中出现的R为泛型，在普通wrapper中是String，在LambdaWrapper中是<strong>函数</strong>(例：Entity::getId,Entity为实体类，getId为字段id的<strong>getMethod</strong>) </li><li>以下方法入参中的R column均表示数据库字段，当R具体类型为String时则为数据库字段名(<strong>字段名是数据库关键字的自己用转义符包裹</strong>)！而不是实体类数据字段名，另当R具体类型为SFunction时项目runtime不支持eclipse自家的编译器 </li><li>以下举例均为使用普通wrapper，入参为Map和List的均以json形式表现 </li><li>使用中如果入参的Map或者List为<strong>空</strong>，则不会加入最后生成的sql中</li></ul><p><strong>AbstractWrapper</strong>：</p><p>说明：AbstractWrapper 是 QueryWrapper(LambdaQueryWrapper) 和 UpdateWrapper(LambdaUpdateWrapper) 的父类用于生成 sql 的 where 条件，entity 属性也用于生成 sql 的 where 条件，注意 entity 生成的 where 条件与使用各个 api 生成的 where 条件<strong>没有任何关联行为</strong></p><h4 id="4-4-1、allEq"><a href="#4-4-1、allEq" class="headerlink" title="4.4.1、allEq"></a>4.4.1、allEq</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allEq(Map&lt;R, V&gt; params)</span><br><span class="line">allEq(Map&lt;R, V&gt; params, <span class="type">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="type">boolean</span> condition, Map&lt;R, V&gt; params, <span class="type">boolean</span> null2IsNull)</span><br></pre></td></tr></table></figure><ul><li>全部 eq (或个别 isNull）</li></ul><p>个别参数说明：</p><p>params：key为数据库字段名，value为字段值 null2IsNull：为true则在map的value为null时调用 isNull方法，为false时则忽略value为null的</p><ul><li>例1: allEq({id:1,name:”老王”,age:null})—&gt;id = 1 and name = ‘老王’ and age is null </li><li>例2: allEq({id:1,name:”老王”,age:null}, false)—&gt;id = 1 and name = ‘老王’</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params)</span><br><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, <span class="type">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="type">boolean</span> condition, BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, <span class="type">boolean</span> null2IsNull)</span><br></pre></td></tr></table></figure><p>个别参数说明：</p><p>filter : 过滤函数，是否允许字段传入比对条件中 params 与 null2IsNull : 同上</p><ul><li>例1: allEq((k,v) -&gt; k.indexOf(“a”) &gt;= 0, {id:1,name:”老王”,age:null})—&gt;name = ‘老王’ and age is null </li><li>例2: allEq((k,v) -&gt; k.indexOf(“a”) &gt;= 0, {id:1,name:”老王”,age:null}, false)—&gt;name = ‘老王’</li></ul><h4 id="4-4-2、eq"><a href="#4-4-2、eq" class="headerlink" title="4.4.2、eq"></a>4.4.2、eq</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eq(R column, Object val)</span><br><span class="line">eq(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>等于 = </li><li>例: eq(“name”, “老王”)—&gt;name = ‘老王’</li></ul><h4 id="4-4-3、ne"><a href="#4-4-3、ne" class="headerlink" title="4.4.3、ne"></a>4.4.3、ne</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ne(R column, Object val)</span><br><span class="line">ne(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>不等于 &lt;&gt; </li><li>例: ne(“name”, “老王”)—&gt;name &lt;&gt; ‘老王’</li></ul><h4 id="4-4-4、gt"><a href="#4-4-4、gt" class="headerlink" title="4.4.4、gt"></a>4.4.4、gt</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gt(R column, Object val)</span><br><span class="line">gt(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>大于 &gt; </li><li>例: gt(“age”, 18)—&gt;age &gt; 18</li></ul><h4 id="4-4-5、ge"><a href="#4-4-5、ge" class="headerlink" title="4.4.5、ge"></a>4.4.5、ge</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ge(R column, Object val)</span><br><span class="line">ge(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>大于等于 &gt;= </li><li>例: ge(“age”, 18)—&gt;age &gt;= 18</li></ul><h4 id="4-4-6、lt"><a href="#4-4-6、lt" class="headerlink" title="4.4.6、lt"></a>4.4.6、lt</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lt(R column, Object val)</span><br><span class="line">lt(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>小于 &lt; </li><li>例: lt(“age”, 18)—&gt;age &lt; 18</li></ul><h4 id="4-4-7、le"><a href="#4-4-7、le" class="headerlink" title="4.4.7、le"></a>4.4.7、le</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">le(R column, Object val)</span><br><span class="line">le(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>小于等于 &lt;= </li><li>例: le(“age”, 18)—&gt;age &lt;= 18</li></ul><h4 id="4-4-8、between"><a href="#4-4-8、between" class="headerlink" title="4.4.8、between"></a>4.4.8、between</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">between(R column, Object val1, Object val2)</span><br><span class="line">between(<span class="type">boolean</span> condition, R column, Object val1, Object val2)</span><br></pre></td></tr></table></figure><ul><li>BETWEEN 值1 AND 值2 </li><li>例: between(“age”, 18, 30)—&gt;age between 18 and 30</li></ul><h4 id="4-4-9、notBetween"><a href="#4-4-9、notBetween" class="headerlink" title="4.4.9、notBetween"></a>4.4.9、notBetween</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notBetween(R column, Object val1, Object val2)</span><br><span class="line">notBetween(<span class="type">boolean</span> condition, R column, Object val1, Object val2)</span><br></pre></td></tr></table></figure><ul><li>NOT BETWEEN 值1 AND 值2 </li><li>例: notBetween(“age”, 18, 30)—&gt;age not between 18 and 30</li></ul><h4 id="4-4-10、like"><a href="#4-4-10、like" class="headerlink" title="4.4.10、like"></a>4.4.10、like</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">like(R column, Object val)</span><br><span class="line">like(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>LIKE ‘%值%’ </li><li>例: like(“name”, “王”)—&gt;name like ‘%王%’</li></ul><h4 id="4-4-11、notLike"><a href="#4-4-11、notLike" class="headerlink" title="4.4.11、notLike"></a>4.4.11、notLike</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notLike(R column, Object val)</span><br><span class="line">notLike(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>NOT LIKE ‘%值%’ </li><li>例: notLike(“name”, “王”)—&gt;name not like ‘%王%’</li></ul><h4 id="4-4-12、likeLeft"><a href="#4-4-12、likeLeft" class="headerlink" title="4.4.12、likeLeft"></a>4.4.12、likeLeft</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">likeLeft(R column, Object val)</span><br><span class="line">likeLeft(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>LIKE ‘%值’ </li><li>例: likeLeft(“name”, “王”)—&gt;name like ‘%王’</li></ul><h4 id="4-4-13、likeRight"><a href="#4-4-13、likeRight" class="headerlink" title="4.4.13、likeRight"></a>4.4.13、likeRight</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">likeRight(R column, Object val)</span><br><span class="line">likeRight(<span class="type">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure><ul><li>LIKE ‘值%’ </li><li>例: likeRight(“name”, “王”)—&gt;name like ‘王%’</li></ul><h4 id="4-4-14、isNull"><a href="#4-4-14、isNull" class="headerlink" title="4.4.14、isNull"></a>4.4.14、isNull</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isNull(R column)</span><br><span class="line">isNull(<span class="type">boolean</span> condition, R column)</span><br></pre></td></tr></table></figure><ul><li>字段 IS NULL </li><li>例: isNull(“name”)—&gt;name is null</li></ul><h4 id="4-4-15、isNotNull"><a href="#4-4-15、isNotNull" class="headerlink" title="4.4.15、isNotNull"></a>4.4.15、isNotNull</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isNotNull(R column)</span><br><span class="line">isNotNull(<span class="type">boolean</span> condition, R column)</span><br></pre></td></tr></table></figure><ul><li>字段 IS NOT NULL </li><li>例: isNotNull(“name”)—&gt;name is not null</li></ul><h4 id="4-4-16、in"><a href="#4-4-16、in" class="headerlink" title="4.4.16、in"></a>4.4.16、in</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in(R column, Collection&lt;?&gt; value)</span><br><span class="line">in(<span class="type">boolean</span> condition, R column, Collection&lt;?&gt; value)</span><br></pre></td></tr></table></figure><ul><li>字段 IN (value.get(0), value.get(1), …) </li><li>例: in(“age”,{1,2,3})—&gt;age in (1,2,3)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in(R column, Object... values)</span><br><span class="line">in(<span class="type">boolean</span> condition, R column, Object... values)</span><br></pre></td></tr></table></figure><ul><li>字段 IN (v0, v1, …) </li><li>例: in(“age”, 1, 2, 3)—&gt;age in (1,2,3)</li></ul><h4 id="4-4-17、notIn"><a href="#4-4-17、notIn" class="headerlink" title="4.4.17、notIn"></a>4.4.17、notIn</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notIn(R column, Collection&lt;?&gt; value)</span><br><span class="line">notIn(<span class="type">boolean</span> condition, R column, Collection&lt;?&gt; value)</span><br></pre></td></tr></table></figure><ul><li>字段 NOT IN (value.get(0), value.get(1), …) </li><li>例: notIn(“age”,{1,2,3})—&gt;age not in (1,2,3)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notIn(R column, Object... values)</span><br><span class="line">notIn(<span class="type">boolean</span> condition, R column, Object... values)</span><br></pre></td></tr></table></figure><ul><li>字段 NOT IN (v0, v1, …) </li><li>例: notIn(“age”, 1, 2, 3)—&gt;age not in (1,2,3)</li></ul><h4 id="4-4-18、inSql"><a href="#4-4-18、inSql" class="headerlink" title="4.4.18、inSql"></a>4.4.18、inSql</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inSql(R column, String inValue)</span><br><span class="line">inSql(<span class="type">boolean</span> condition, R column, String inValue)</span><br></pre></td></tr></table></figure><ul><li>字段 IN ( sql语句 ) </li><li>例: inSql(“age”, “1,2,3,4,5,6”)—&gt;age in (1,2,3,4,5,6) </li><li>例: inSql(“id”, “select id from table where id &lt; 3”)—&gt;id in (select id from table where id &lt; 3)</li></ul><h4 id="4-4-19、notInSql"><a href="#4-4-19、notInSql" class="headerlink" title="4.4.19、notInSql"></a>4.4.19、notInSql</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notInSql(R column, String inValue)</span><br><span class="line">notInSql(<span class="type">boolean</span> condition, R column, String inValue)</span><br></pre></td></tr></table></figure><ul><li>字段 NOT IN ( sql语句 ) </li><li>例: notInSql(“age”, “1,2,3,4,5,6”)—&gt;age not in (1,2,3,4,5,6) </li><li>例: notInSql(“id”, “select id from table where id &lt; 3”)—&gt;id not in (select id from table where id &lt; 3)</li></ul><h4 id="4-4-20、groupBy"><a href="#4-4-20、groupBy" class="headerlink" title="4.4.20、groupBy"></a>4.4.20、groupBy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupBy(R... columns)</span><br><span class="line">groupBy(<span class="type">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure><ul><li>分组：GROUP BY 字段, … </li><li>例: groupBy(“id”, “name”)—&gt;group by id,name</li></ul><h4 id="4-4-21、orderByAsc"><a href="#4-4-21、orderByAsc" class="headerlink" title="4.4.21、orderByAsc"></a>4.4.21、orderByAsc</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orderByAsc(R... columns)</span><br><span class="line">orderByAsc(<span class="type">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure><ul><li>排序：ORDER BY 字段, … ASC </li><li>例: orderByAsc(“id”, “name”)—&gt;order by id ASC,name ASC</li></ul><h4 id="4-4-22、orderByDesc"><a href="#4-4-22、orderByDesc" class="headerlink" title="4.4.22、orderByDesc"></a>4.4.22、orderByDesc</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orderByDesc(R... columns)</span><br><span class="line">orderByDesc(<span class="type">boolean</span> condition, R... columns)</span><br></pre></td></tr></table></figure><ul><li>排序：ORDER BY 字段, … DESC </li><li>例: orderByDesc(“id”, “name”)—&gt;order by id DESC,name DESC</li></ul><h4 id="4-4-23、orderBy"><a href="#4-4-23、orderBy" class="headerlink" title="4.4.23、orderBy"></a>4.4.23、orderBy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orderBy(<span class="type">boolean</span> condition, <span class="type">boolean</span> isAsc, R... columns)</span><br></pre></td></tr></table></figure><ul><li>排序：ORDER BY 字段, … </li><li>例: orderBy(true, true, “id”, “name”)—&gt;order by id ASC,name ASC</li></ul><h4 id="4-4-24、having"><a href="#4-4-24、having" class="headerlink" title="4.4.24、having"></a>4.4.24、having</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">having(String sqlHaving, Object... params)</span><br><span class="line">having(<span class="type">boolean</span> condition, String sqlHaving, Object... params)</span><br></pre></td></tr></table></figure><ul><li>HAVING ( sql语句 ) </li><li>例: having(“sum(age) &gt; 10”)—&gt;having sum(age) &gt; 10 </li><li>例: having(“sum(age) &gt; {0}”, 11)—&gt;having sum(age) &gt; 11</li></ul><h4 id="4-4-25、func"><a href="#4-4-25、func" class="headerlink" title="4.4.25、func"></a>4.4.25、func</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func(Consumer&lt;Children&gt; consumer)</span><br><span class="line">func(<span class="type">boolean</span> condition, Consumer&lt;Children&gt; consumer)</span><br></pre></td></tr></table></figure><ul><li>func 方法(主要方便在出现if…else下调用不同方法能不断链) </li><li>例: func(i -&gt; if(true) {i.eq(“id”, 1)} else {i.ne(“id”, 1)})</li></ul><h4 id="4-4-26、or"><a href="#4-4-26、or" class="headerlink" title="4.4.26、or"></a>4.4.26、or</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">or()</span><br><span class="line">or(<span class="type">boolean</span> condition)</span><br></pre></td></tr></table></figure><ul><li>拼接 OR</li></ul><p>注意事项:</p><p>主动调用or表示紧接着下一个<strong>方法</strong>不是用and连接!(不调用or则默认为使用and连接)</p><ul><li>例: eq(“id”,1).or().eq(“name”,”老王”)—&gt;id = 1 or name = ‘老王’</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">or(Consumer&lt;Param&gt; consumer)</span><br><span class="line">or(<span class="type">boolean</span> condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><ul><li>OR 嵌套 </li><li>例: or(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))—&gt;or (name = ‘李白’ and status &lt;&gt; ‘活着’)</li></ul><h4 id="4-4-27、and"><a href="#4-4-27、and" class="headerlink" title="4.4.27、and"></a>4.4.27、and</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and(Consumer&lt;Param&gt; consumer)</span><br><span class="line">and(<span class="type">boolean</span> condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><ul><li>AND 嵌套 </li><li>例: and(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))—&gt;and (name = ‘李白’ and status &lt;&gt; ‘活着’)</li></ul><h4 id="4-4-28、nested"><a href="#4-4-28、nested" class="headerlink" title="4.4.28、nested"></a>4.4.28、nested</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nested(Consumer&lt;Param&gt; consumer)</span><br><span class="line">nested(<span class="type">boolean</span> condition, Consumer&lt;Param&gt; consumer)</span><br></pre></td></tr></table></figure><ul><li>正常嵌套 不带 AND 或者 OR </li><li>例: nested(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”))—&gt;(name = ‘李白’ and status &lt;&gt; ‘活着’)</li></ul><h4 id="4-4-29、apply"><a href="#4-4-29、apply" class="headerlink" title="4.4.29、apply"></a>4.4.29、apply</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply(String applySql, Object... params)</span><br><span class="line">apply(<span class="type">boolean</span> condition, String applySql, Object... params)</span><br></pre></td></tr></table></figure><ul><li>拼接 sql</li></ul><p>注意事项:</p><p>该方法可用于数据库<strong>函数</strong>动态入参的params对应前面applySql内部的{index}部分，这样是不会有sql注入风险的，反之会有!</p><ul><li>例: apply(“id = 1”)—&gt;id = 1 </li><li>例: apply(“date_format(dateColumn,’%Y-%m-%d’) = ‘2008-08-08’”)—&gt;date_format(dateColumn,’%Y-%m-%d’) = ‘2008-08-08’”) </li><li>例: apply(“date_format(dateColumn,’%Y-%m-%d’) = {0}”, “2008-08-08”)—&gt;date_format(dateColumn,’%Y-%m-%d’) = ‘2008-08-08’”)</li></ul><h4 id="4-4-30、last"><a href="#4-4-30、last" class="headerlink" title="4.4.30、last"></a>4.4.30、last</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">last(String lastSql)</span><br><span class="line">last(<span class="type">boolean</span> condition, String lastSql)</span><br></pre></td></tr></table></figure><ul><li>无视优化规则直接拼接到 sql 的最后</li></ul><p>注意事项:</p><p>只能调用一次，多次调用以最后一次为准，有sql注入的风险，请谨慎使用</p><ul><li>例: last(“limit 1”)</li></ul><h4 id="4-4-31、exists"><a href="#4-4-31、exists" class="headerlink" title="4.4.31、exists"></a>4.4.31、exists</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exists(String existsSql)</span><br><span class="line">exists(<span class="type">boolean</span> condition, String existsSql)</span><br></pre></td></tr></table></figure><ul><li>拼接 EXISTS ( sql语句 ) </li><li>例: exists(“select id from table where age = 1”)—&gt;exists (select id from table where age = 1)</li></ul><h4 id="4-4-32、notExists"><a href="#4-4-32、notExists" class="headerlink" title="4.4.32、notExists"></a>4.4.32、notExists</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notExists(String notExistsSql)</span><br><span class="line">notExists(<span class="type">boolean</span> condition, String notExistsSql)</span><br></pre></td></tr></table></figure><ul><li>拼接 NOT EXISTS ( sql语句 ) </li><li>例: notExists(“select id from table where age = 1”)—&gt;not exists (select id from table where age = 1)</li></ul><h2 id="第五章-MyBatis-Plus3代码生成器"><a href="#第五章-MyBatis-Plus3代码生成器" class="headerlink" title="第五章 MyBatis-Plus3代码生成器"></a>第五章 MyBatis-Plus3代码生成器</h2><h3 id="5-1、数据导入"><a href="#5-1、数据导入" class="headerlink" title="5.1、数据导入"></a>5.1、数据导入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">## 删除表</span><br><span class="line">DROP TABLE IF EXISTS `tbl_user`;</span><br><span class="line">## 创建表</span><br><span class="line">CREATE TABLE `tbl_user` (</span><br><span class="line">  `id` BIGINT(<span class="number">20</span>) NOT NULL AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `name` VARCHAR(<span class="number">30</span>) DEFAULT NULL COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` INT(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `email` VARCHAR(<span class="number">30</span>) DEFAULT NULL COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="title function_">KEY</span> <span class="params">(`id`)</span></span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=<span class="number">6</span> DEFAULT CHARSET=utf8 COMMENT=<span class="string">&#x27;用户&#x27;</span>;</span><br><span class="line">## 导入数据</span><br><span class="line">INSERT  INTO `tbl_user`(`id`,`name`,`age`,`email`) VALUES (<span class="number">1</span>,<span class="string">&#x27;Jone&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;test1@baomidou.com&#x27;</span>);</span><br><span class="line">INSERT  INTO `tbl_user`(`id`,`name`,`age`,`email`) VALUES (<span class="number">2</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;test2@baomidou.com&#x27;</span>);</span><br><span class="line">INSERT  INTO `tbl_user`(`id`,`name`,`age`,`email`) VALUES (<span class="number">3</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;test3@baomidou.com&#x27;</span>);</span><br><span class="line">INSERT  INTO `tbl_user`(`id`,`name`,`age`,`email`) VALUES (<span class="number">4</span>,<span class="string">&#x27;Sandy&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;test4@baomidou.com&#x27;</span>);</span><br><span class="line">INSERT  INTO `tbl_user`(`id`,`name`,`age`,`email`) VALUES (<span class="number">5</span>,<span class="string">&#x27;Billie&#x27;</span>,<span class="number">24</span>,<span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="5-2、代码生成器简介"><a href="#5-2、代码生成器简介" class="headerlink" title="5.2、代码生成器简介"></a>5.2、代码生成器简介</h3><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><h3 id="5-3、代码生成器使用"><a href="#5-3、代码生成器使用" class="headerlink" title="5.3、代码生成器使用"></a>5.3、代码生成器使用</h3><h4 id="5-3-1、添加依赖"><a href="#5-3-1、添加依赖" class="headerlink" title="5.3.1、添加依赖"></a>5.3.1、添加依赖</h4><p>pom.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">        &lt;/exclusions&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">3.4</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">5.1</span><span class="number">.49</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">3.4</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.2</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.18</span><span class="number">.12</span>&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;!-- 插件管理 --&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.5</span>&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">    &lt;!-- 资源管理 --&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**<span class="comment">/*.properties&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                &lt;include&gt;**/</span>*.xml&lt;/include&gt;</span><br><span class="line">                &lt;include&gt;**<span class="comment">/*.conf&lt;/include&gt;</span></span><br><span class="line"><span class="comment">            &lt;/includes&gt;</span></span><br><span class="line"><span class="comment">            &lt;filtering&gt;false&lt;/filtering&gt;</span></span><br><span class="line"><span class="comment">        &lt;/resource&gt;</span></span><br><span class="line"><span class="comment">        &lt;resource&gt;</span></span><br><span class="line"><span class="comment">            &lt;directory&gt;src/main/resources&lt;/directory&gt;</span></span><br><span class="line"><span class="comment">            &lt;includes&gt;</span></span><br><span class="line"><span class="comment">                &lt;include&gt;**/</span>*.properties&lt;/include&gt;</span><br><span class="line">                &lt;include&gt;**<span class="comment">/*.xml&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                &lt;include&gt;**/</span>*.conf&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">            &lt;filtering&gt;<span class="literal">false</span>&lt;/filtering&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h4 id="5-3-2、添加配置"><a href="#5-3-2、添加配置" class="headerlink" title="5.3.2、添加配置"></a>5.3.2、添加配置</h4><p>application.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#server</span><br><span class="line">server.port=<span class="number">8080</span></span><br><span class="line"></span><br><span class="line">#mysql</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/mp?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">#mybatis-plus</span><br><span class="line">mybatis-plus.mapper-locations=classpath*:**/mapper/xml<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h4 id="5-3-3、启动配置"><a href="#5-3-3、启动配置" class="headerlink" title="5.3.3、启动配置"></a>5.3.3、启动配置</h4><p>MpDemoApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.caochenlei.mpdemo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpDemoApplication</span> &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        SpringApplication.run(MpDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-4、代码生成"><a href="#5-3-4、代码生成" class="headerlink" title="5.3.4、代码生成"></a>5.3.4、代码生成</h4><p>CodeGenerator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">scanner</span><span class="params">(String tip)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">help</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        help.append(<span class="string">&quot;请输入&quot;</span> + tip + <span class="string">&quot;：&quot;</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">   </span><br><span class="line">            <span class="type">String</span> <span class="variable">ipt</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class="line">   </span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusException</span>(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);<span class="comment">//设置代码生成路径</span></span><br><span class="line">        gc.setFileOverride(<span class="literal">true</span>);<span class="comment">//是否覆盖以前文件</span></span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);<span class="comment">//是否打开生成目录</span></span><br><span class="line">        gc.setAuthor(<span class="string">&quot;caochenlei&quot;</span>);<span class="comment">//设置项目作者名称</span></span><br><span class="line">        gc.setIdType(IdType.AUTO);<span class="comment">//设置主键策略</span></span><br><span class="line">        gc.setBaseResultMap(<span class="literal">true</span>);<span class="comment">//生成基本ResultMap</span></span><br><span class="line">        gc.setBaseColumnList(<span class="literal">true</span>);<span class="comment">//生成基本ColumnList</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);<span class="comment">//去掉服务默认前缀</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mp?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.caochenlei.mpdemo&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setXml(<span class="string">&quot;mapper.xml&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;pojo&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setServiceImpl(<span class="string">&quot;service.impl&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        sc.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        sc.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        sc.setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line">        sc.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">        sc.setControllerMappingHyphenStyle(<span class="literal">true</span>);</span><br><span class="line">        sc.setTablePrefix(<span class="string">&quot;tbl_&quot;</span>);</span><br><span class="line">        sc.setInclude(scanner(<span class="string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        mpg.setStrategy(sc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成代码</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-5、工程结构"><a href="#5-3-5、工程结构" class="headerlink" title="5.3.5、工程结构"></a>5.3.5、工程结构</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/507411d125be89ac7b1503b464eb90a1.png" alt="img"></p><h4 id="5-3-6、添加代码"><a href="#5-3-6、添加代码" class="headerlink" title="5.3.6、添加代码"></a>5.3.6、添加代码</h4><p>UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> userService.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-7、启动运行"><a href="#5-3-7、启动运行" class="headerlink" title="5.3.7、启动运行"></a>5.3.7、启动运行</h4><p>MpDemoApplication.java 中运行主方法以此来启动整个工程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.caochenlei.mpdemo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpDemoApplication</span> &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        SpringApplication.run(MpDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-8、测试方法"><a href="#5-3-8、测试方法" class="headerlink" title="5.3.8、测试方法"></a>5.3.8、测试方法</h4><p>使用浏览器打开：<a href="http://localhost:8080/user/all">http://localhost:8080/user/all</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/977da9d6221c512517877b24352f06cc.png" alt="img"></p><h4 id="5-3-9、温馨提示"><a href="#5-3-9、温馨提示" class="headerlink" title="5.3.9、温馨提示"></a>5.3.9、温馨提示</h4><p>需要Lombok插件支持，只需要安装一下就可以了，打开 IDEA，进入 File -&gt; Settings -&gt; Plugins，安装完成后重启</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f856df73917ee06e6db169372466527a.png" alt="img"></p><h3 id="5-4、代码生成器方法"><a href="#5-4、代码生成器方法" class="headerlink" title="5.4、代码生成器方法"></a>5.4、代码生成器方法</h3><p>通用 Service CRUD 封装 IService 接口，进一步封装 CRUD 采用 get 查询单行 remove 删除 list 查询集合 page 分页 前缀命名方式区分 Mapper 层避免混淆，泛型 T 为任意实体对象，建议如果存在自定义通用 Service 方法的可能，请创建自己的 IBaseService 继承 Mybatis-Plus 提供的基类，对象 Wrapper 为 条件构造器。</p><h4 id="5-4-1、save"><a href="#5-4-1、save" class="headerlink" title="5.4.1、save"></a>5.4.1、save</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">save</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><h4 id="5-4-2、saveOrUpdate"><a href="#5-4-2、saveOrUpdate" class="headerlink" title="5.4.2、saveOrUpdate"></a>5.4.2、saveOrUpdate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><h4 id="5-4-3、remove"><a href="#5-4-3、remove" class="headerlink" title="5.4.3、remove"></a>5.4.3、remove</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><h4 id="5-4-4、update"><a href="#5-4-4、update" class="headerlink" title="5.4.4、update"></a>5.4.4、update</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 选择修改</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateById</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><h4 id="5-4-5、get"><a href="#5-4-5、get" class="headerlink" title="5.4.5、get"></a>5.4.5、get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">getById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">&lt;V&gt; V <span class="title function_">getObj</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><h4 id="5-4-6、list"><a href="#5-4-6、list" class="headerlink" title="5.4.6、list"></a>5.4.6、list</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 查询所有列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">&lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">&lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><h4 id="5-4-7、page"><a href="#5-4-7、page" class="headerlink" title="5.4.7、page"></a>5.4.7、page</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无条件分页查询</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">page</span><span class="params">(IPage&lt;T&gt; page)</span>;</span><br><span class="line"><span class="comment">// 条件分页查询</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">page</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 无条件分页查询</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">pageMaps</span><span class="params">(IPage&lt;T&gt; page)</span>;</span><br><span class="line"><span class="comment">// 条件分页查询</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">pageMaps</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><h4 id="5-4-8、count"><a href="#5-4-8、count" class="headerlink" title="5.4.8、count"></a>5.4.8、count</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><h4 id="5-4-9、chain"><a href="#5-4-9、chain" class="headerlink" title="5.4.9、chain"></a>5.4.9、chain</h4><p>query</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式查询 普通</span></span><br><span class="line">QueryChainWrapper&lt;T&gt; <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 链式查询 lambda 式。注意：不支持 Kotlin</span></span><br><span class="line">LambdaQueryChainWrapper&lt;T&gt; <span class="title function_">lambdaQuery</span><span class="params">()</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">query().eq(<span class="string">&quot;column&quot;</span>, value).one();</span><br><span class="line">lambdaQuery().eq(Entity::getId, value).list();</span><br></pre></td></tr></table></figure><p>update</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式更改 普通</span></span><br><span class="line">UpdateChainWrapper&lt;T&gt; <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 链式更改 lambda 式。注意：不支持 Kotlin </span></span><br><span class="line">LambdaUpdateChainWrapper&lt;T&gt; <span class="title function_">lambdaUpdate</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">update().eq(<span class="string">&quot;column&quot;</span>, value).remove();</span><br><span class="line">lambdaUpdate().eq(Entity::getId, value).update(entity);</span><br></pre></td></tr></table></figure><h2 id="第六章-MyBatis-Plus3配置详解"><a href="#第六章-MyBatis-Plus3配置详解" class="headerlink" title="第六章 MyBatis-Plus3配置详解"></a>第六章 MyBatis-Plus3配置详解</h2><h3 id="6-1、配置概述"><a href="#6-1、配置概述" class="headerlink" title="6.1、配置概述"></a>6.1、配置概述</h3><p>本文讲解了MyBatis-Plus在使用过程中的配置选项，其中部分配置继承自MyBatis原生所支持的配置。</p><h3 id="6-2、配置方式"><a href="#6-2、配置方式" class="headerlink" title="6.2、配置方式"></a>6.2、配置方式</h3><ul><li><p>Spring Boot： </p><ul> -  application.properties（本文采用） mybatis-plus.mapper-locations=classpath*:**/mapper/xml/*.xmlmybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl......  -  application.yaml（推荐使用） mybatis-plus:......configuration: ......global-config: ...... db-config:   ......  </ul>  </li><li><p>Spring MVC： </p><p><ul> </p><ul><li><bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"><property name="configuration" ref="configuration"/> <!--  非必须  --><property name="globalConfig" ref="globalConfig"/> <!--  非必须  -->......</bean></li></ul></li></ul><bean id="configuration" class="com.baomidou.mybatisplus.core.MybatisConfiguration">    ......</bean><bean id="globalConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig">    <property name="dbConfig" ref="dbConfig"/> <!--  非必须  -->    ......</bean><p><bean id="dbConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig"><br>    ……</bean><br> &lt;/ul&gt; </p><h3 id="6-3、配置选项"><a href="#6-3、配置选项" class="headerlink" title="6.3、配置选项"></a>6.3、配置选项</h3><h4 id="6-3-1、mapperLocations"><a href="#6-3-1、mapperLocations" class="headerlink" title="6.3.1、mapperLocations"></a>6.3.1、mapperLocations</h4><ul><li>类型：String[] </li><li>默认值：[“classpath<em>:/mapper/**/</em>.xml”]</li></ul><p>MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法（XML 中有自定义实现），需要进行该配置，告诉 Mapper 所对应的 XML 文件位置，Maven 多模块项目的扫描路径需以 classpath*: 开头 （即加载多个 jar 包下的 XML 文件）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.mapper-locations=classpath*:**/mapper/xml<span class="comment">/*.xml</span></span><br></pre></td></tr></table></figure><h4 id="6-3-2、typeAliasesPackage"><a href="#6-3-2、typeAliasesPackage" class="headerlink" title="6.3.2、typeAliasesPackage"></a>6.3.2、typeAliasesPackage</h4><ul><li>类型：String </li><li>默认值：null</li></ul><p>MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使用类名，而不用使用全限定的类名（即 XML 中调用的时候不用包含包名）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.type-aliases-<span class="keyword">package</span>=com.caochenlei.mpdemo.pojo</span><br></pre></td></tr></table></figure><h4 id="6-3-3、typeHandlersPackage"><a href="#6-3-3、typeHandlersPackage" class="headerlink" title="6.3.3、typeHandlersPackage"></a>6.3.3、typeHandlersPackage</h4><ul><li>类型：String </li><li>默认值：null</li></ul><p>TypeHandler 扫描路径，如果配置了该属性，SqlSessionFactoryBean 会把该包下面的类注册为对应的 TypeHandler，TypeHandler 通常用于自定义类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.type-handlers-<span class="keyword">package</span>=com.caochenlei.mpdemo.type</span><br></pre></td></tr></table></figure><h4 id="6-3-4、typeEnumsPackage"><a href="#6-3-4、typeEnumsPackage" class="headerlink" title="6.3.4、typeEnumsPackage"></a>6.3.4、typeEnumsPackage</h4><ul><li>类型：String </li><li>默认值：null</li></ul><p>枚举类 扫描路径，如果配置了该属性，会将路径下的枚举类进行注入，让实体类字段能够简单快捷的使用枚举属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.type-enums-<span class="keyword">package</span>=com.caochenlei.mpdemo.myenum</span><br></pre></td></tr></table></figure><h4 id="6-3-5、checkConfigLocation"><a href="#6-3-5、checkConfigLocation" class="headerlink" title="6.3.5、checkConfigLocation"></a>6.3.5、checkConfigLocation</h4><ul><li>类型：boolean </li><li>默认值：false</li></ul><p>启动时是否检查 MyBatis XML 文件的存在，默认不检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.check-config-location=<span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="6-3-6、executorType"><a href="#6-3-6、executorType" class="headerlink" title="6.3.6、executorType"></a>6.3.6、executorType</h4><ul><li>类型：ExecutorType </li><li>默认值：simple</li></ul><p>通过该属性可指定 MyBatis 的执行器，MyBatis 的执行器总共有三种：</p><ul><li>ExecutorType.SIMPLE：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句（PreparedStatement） </li><li>ExecutorType.REUSE：该执行器类型会复用预处理语句（PreparedStatement） </li><li>ExecutorType.BATCH：该执行器类型会批量执行所有的更新语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.executor-type=simple</span><br></pre></td></tr></table></figure><h4 id="6-3-7、configurationProperties"><a href="#6-3-7、configurationProperties" class="headerlink" title="6.3.7、configurationProperties"></a>6.3.7、configurationProperties</h4><ul><li>类型：Properties </li><li>默认值：null</li></ul><p>指定外部化 MyBatis Properties 配置，通过该配置可以抽离配置，实现不同环境的配置部署。</p><h4 id="6-3-8、configuration"><a href="#6-3-8、configuration" class="headerlink" title="6.3.8、configuration"></a>6.3.8、configuration</h4><ul><li>类型：Configuration </li><li>默认值：null</li></ul><p>原生 MyBatis 所支持的配置，本部分（Configuration）的配置大都为 MyBatis 原生支持的配置，这意味着您可以通过 MyBatis XML 配置文件的形式进行配置。</p><h5 id="6-3-8-1、mapUnderscoreToCamelCase"><a href="#6-3-8-1、mapUnderscoreToCamelCase" class="headerlink" title="6.3.8.1、mapUnderscoreToCamelCase"></a>6.3.8.1、mapUnderscoreToCamelCase</h5><ul><li>类型：boolean </li><li>默认值：true</li></ul><p>是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射。此属性在 MyBatis 中原默认值为 false，在 MyBatis-Plus 中，此属性也将用于生成最终的 SQL 的 select body，如果您的数据库命名符合规则无需使用 @TableField 注解指定数据库字段名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.configuration.map-underscore-to-camel-<span class="keyword">case</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="6-3-8-2、defaultEnumTypeHandler"><a href="#6-3-8-2、defaultEnumTypeHandler" class="headerlink" title="6.3.8.2、defaultEnumTypeHandler"></a>6.3.8.2、defaultEnumTypeHandler</h5><ul><li>类型：Class&lt;? extends TypeHandler </li><li>默认值：org.apache.ibatis.type.EnumTypeHandler</li></ul><p>默认枚举处理类，如果配置了该属性，枚举将统一使用指定处理器进行处理。</p><p>需要注意，它的取值可以有以下几种，可以使用内置，也可以自定义：</p><ul><li>org.apache.ibatis.type.EnumTypeHandler : 存储枚举的名称 </li><li>org.apache.ibatis.type.EnumOrdinalTypeHandler : 存储枚举的索引 </li><li>com.baomidou.mybatisplus.extension.handlers.MybatisEnumTypeHandler : 枚举类需要实现IEnum接口或字段标记@EnumValue注解.(3.1.2以下版本为EnumTypeHandler)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.configuration.<span class="keyword">default</span>-<span class="keyword">enum</span>-type-handler=org.apache.ibatis.type.EnumTypeHandler</span><br></pre></td></tr></table></figure><h5 id="6-3-8-3、aggressiveLazyLoading"><a href="#6-3-8-3、aggressiveLazyLoading" class="headerlink" title="6.3.8.3、aggressiveLazyLoading"></a>6.3.8.3、aggressiveLazyLoading</h5><ul><li>类型：boolean </li><li>默认值：true</li></ul><p>当设置为 true 的时候，懒加载的对象可能被任何懒属性全部加载，否则，每个属性都按需加载。需要和 lazyLoadingEnabled 一起使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.configuration.aggressive-lazy-loading=<span class="literal">true</span></span><br><span class="line">mybatis-plus.configuration.lazy-loading-enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="6-3-8-4、autoMappingBehavior"><a href="#6-3-8-4、autoMappingBehavior" class="headerlink" title="6.3.8.4、autoMappingBehavior"></a>6.3.8.4、autoMappingBehavior</h5><ul><li>类型：AutoMappingBehavior </li><li>默认值：partial</li></ul><p>MyBatis 自动映射策略，通过该配置可指定 MyBatis 是否并且如何来自动映射数据表字段与对象的属性，总共有 3 种可选值：</p><ul><li>AutoMappingBehavior.NONE：不启用自动映射 </li><li>AutoMappingBehavior.PARTIAL：只对非嵌套的 resultMap 进行自动映射 </li><li>AutoMappingBehavior.FULL：对所有的 resultMap 都进行自动映射</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.configuration.auto-mapping-behavior=partial</span><br></pre></td></tr></table></figure><h5 id="6-3-8-5、autoMappingUnknownColumnBehavior"><a href="#6-3-8-5、autoMappingUnknownColumnBehavior" class="headerlink" title="6.3.8.5、autoMappingUnknownColumnBehavior"></a>6.3.8.5、autoMappingUnknownColumnBehavior</h5><ul><li>类型：AutoMappingUnknownColumnBehavior </li><li>默认值：NONE</li></ul><p>MyBatis 自动映射时未知列或未知属性处理策略，通过该配置可指定 MyBatis 在自动映射过程中遇到未知列或者未知属性时如何处理，总共有 3 种可选值：</p><ul><li>AutoMappingUnknownColumnBehavior.NONE：不做任何处理 (默认值) </li><li>AutoMappingUnknownColumnBehavior.WARNING：以日志的形式打印相关警告信息 </li><li>AutoMappingUnknownColumnBehavior.FAILING：当作映射失败处理，并抛出异常和详细信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.configuration.auto-mapping-unknown-column-behavior=none</span><br></pre></td></tr></table></figure><h5 id="6-3-8-6、localCacheScope"><a href="#6-3-8-6、localCacheScope" class="headerlink" title="6.3.8.6、localCacheScope"></a>6.3.8.6、localCacheScope</h5><ul><li>类型：String </li><li>默认值：SESSION</li></ul><p>Mybatis一级缓存，默认为 SESSION。</p><ul><li>SESSION：session级别缓存，同一个session相同查询语句不会再次查询数据库 </li><li>STATEMENT：关闭一级缓存</li></ul><p>单服务架构中（有且仅有只有一个程序提供相同服务），一级缓存开启不会影响业务，只会提高性能。 微服务架构中需要关闭一级缓存，原因：Service1先查询数据，若之后Service2修改了数据，之后Service1又再次以同样的查询条件查询数据，因走缓存会出现查处的数据不是最新数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.configuration.local-cache-scope=session</span><br></pre></td></tr></table></figure><h5 id="6-3-8-7、cacheEnabled"><a href="#6-3-8-7、cacheEnabled" class="headerlink" title="6.3.8.7、cacheEnabled"></a>6.3.8.7、cacheEnabled</h5><ul><li>类型：boolean </li><li>默认值：true</li></ul><p>开启Mybatis二级缓存，默认为 true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.configuration.cache-enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="6-3-8-8、callSettersOnNulls"><a href="#6-3-8-8、callSettersOnNulls" class="headerlink" title="6.3.8.8、callSettersOnNulls"></a>6.3.8.8、callSettersOnNulls</h5><ul><li>类型：boolean </li><li>默认值：false</li></ul><p>指定当结果集中值为 null 的时候是否调用映射对象的 Setter（Map 对象时为 put）方法，通常运用于有 Map.keySet() 依赖或 null 值初始化的情况。</p><p>通俗的讲，即 MyBatis 在使用 resultMap 来映射查询结果中的列，如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段，这就导致在调用到该字段的时候由于没有映射，取不到而报空指针异常。</p><p>当您遇到类似的情况，请针对该属性进行相关配置以解决以上问题。</p><blockquote><p>注意：基本类型（int、boolean 等）是不能设置成 null 的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.configuration.call-setters-on-nulls=<span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="6-3-8-9、configurationFactory"><a href="#6-3-8-9、configurationFactory" class="headerlink" title="6.3.8.9、configurationFactory"></a>6.3.8.9、configurationFactory</h5><ul><li>类型：Class&lt;?&gt; </li><li>默认值：null</li></ul><p>指定一个提供 Configuration 实例的工厂类。该工厂生产的实例将用来加载已经被反序列化对象的懒加载属性值，其必须包含一个签名方法static Configuration getConfiguration()。（从 3.2.3 版本开始）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.configuration.configuration-factory=</span><br></pre></td></tr></table></figure><h5 id="6-3-8-10、MyBatis3的配置属性"><a href="#6-3-8-10、MyBatis3的配置属性" class="headerlink" title="6.3.8.10、MyBatis3的配置属性"></a>6.3.8.10、MyBatis3的配置属性</h5><p>这里只列出 MyBatis3 的 settings 标签的属性，更多配置，请自行探索！</p><p>我们这里以日志打印为例，一般使用驼峰命名对应 “ - ”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><h4 id="6-3-9、globalConfig"><a href="#6-3-9、globalConfig" class="headerlink" title="6.3.9、globalConfig"></a>6.3.9、globalConfig</h4><ul><li>类型：com.baomidou.mybatisplus.core.config.GlobalConfig </li><li>默认值：GlobalConfig::new</li></ul><p>MyBatis-Plus 全局策略配置。</p><h5 id="6-3-9-1、banner"><a href="#6-3-9-1、banner" class="headerlink" title="6.3.9.1、banner"></a>6.3.9.1、banner</h5><ul><li>类型：boolean </li><li>默认值：true</li></ul><p>是否控制台 print mybatis-plus 的 LOGO。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.banner=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="6-3-9-2、enableSqlRunner"><a href="#6-3-9-2、enableSqlRunner" class="headerlink" title="6.3.9.2、enableSqlRunner"></a>6.3.9.2、enableSqlRunner</h5><ul><li>类型：boolean </li><li>默认值：false</li></ul><p>是否初始化 SqlRunner(com.baomidou.mybatisplus.extension.toolkit.SqlRunner)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.enable-sql-runner=<span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="6-3-9-3、superMapperClass"><a href="#6-3-9-3、superMapperClass" class="headerlink" title="6.3.9.3、superMapperClass"></a>6.3.9.3、superMapperClass</h5><ul><li>类型：Class </li><li>默认值：com.baomidou.mybatisplus.core.mapper.Mapper.class</li></ul><p>通用Mapper父类(影响sqlInjector，只有这个的子类的 mapper 才会注入 sqlInjector 内的 method)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.<span class="built_in">super</span>-mapper-class=com.baomidou.mybatisplus.core.mapper.Mapper</span><br></pre></td></tr></table></figure><h5 id="6-3-9-4、dbConfig"><a href="#6-3-9-4、dbConfig" class="headerlink" title="6.3.9.4、dbConfig"></a>6.3.9.4、dbConfig</h5><ul><li>类型：com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig </li><li>默认值：null</li></ul><p>MyBatis-Plus 全局策略中的 DB 策略配置。</p><ul><li>类型：com.baomidou.mybatisplus.annotation.IdType </li><li>默认值：ASSIGN_ID</li></ul><p>全局默认主键类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.id-type=assign_id</span><br></pre></td></tr></table></figure><ul><li>类型：String </li><li>默认值：null</li></ul><p>表名前缀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.table-prefix=tbl_</span><br></pre></td></tr></table></figure><ul><li>类型：String </li><li>默认值：null</li></ul><p>schema。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.schema=</span><br></pre></td></tr></table></figure><ul><li>类型：String </li><li>默认值：null</li></ul><p>字段 format，例: %s，(对主键无效)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.column-format=</span><br></pre></td></tr></table></figure><ul><li>类型：String </li><li>默认值：null</li></ul><p>entity 的字段(property)的 format，只有在 column as property 这种情况下生效例: %s，(对主键无效)(since 3.3.0)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.property-format=</span><br></pre></td></tr></table></figure><ul><li>类型：boolean </li><li>默认值：true</li></ul><p>表名是否使用驼峰转下划线命名，只对表名生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.table-underline=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>类型：boolean </li><li>默认值：false</li></ul><p>大写命名，对表名和字段名均生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.capital-mode=<span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>类型：String </li><li>默认值：null</li></ul><p>全局的entity的逻辑删除字段属性名，(逻辑删除下有效)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.logic-delete-field=</span><br></pre></td></tr></table></figure><ul><li>类型：String </li><li>默认值：1</li></ul><p>逻辑已删除值，(逻辑删除下有效)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.logic-delete-value=<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>类型：String </li><li>默认值：0</li></ul><p>逻辑未删除值，(逻辑删除下有效)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.logic-not-delete-value=<span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>类型：com.baomidou.mybatisplus.annotation.FieldStrategy </li><li>默认值：NOT_NULL</li></ul><p>字段验证策略之 insert，在 insert 的时候的字段验证策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.insert-strategy=not_null</span><br></pre></td></tr></table></figure><ul><li>类型：com.baomidou.mybatisplus.annotation.FieldStrategy </li><li>默认值：NOT_NULL</li></ul><p>字段验证策略之 update，在 update 的时候的字段验证策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.update-strategy=not_null</span><br></pre></td></tr></table></figure><ul><li>类型：com.baomidou.mybatisplus.annotation.FieldStrategy </li><li>默认值：NOT_NULL</li></ul><p>字段验证策略之 select，在 select 的时候的字段验证策略既 wrapper 根据内部 entity 生成的 where 条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.select-strategy=not_null</span><br></pre></td></tr></table></figure><h3 id="6-4、配置小结"><a href="#6-4、配置小结" class="headerlink" title="6.4、配置小结"></a>6.4、配置小结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#mybatis-plus</span><br><span class="line">mybatis-plus.mapper-locations=classpath*:**/mapper/xml<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">mybatis-plus.type-aliases-package=com.caochenlei.mpdemo.pojo</span></span><br><span class="line"><span class="comment">mybatis-plus.type-handlers-package=com.caochenlei.mpdemo.type</span></span><br><span class="line"><span class="comment">mybatis-plus.type-enums-package=com.caochenlei.mpdemo.enum</span></span><br><span class="line"><span class="comment">mybatis-plus.check-config-location=false</span></span><br><span class="line"><span class="comment">mybatis-plus.executor-type=simple</span></span><br><span class="line"><span class="comment">#mybatis-plus.configuration</span></span><br><span class="line"><span class="comment">mybatis-plus.configuration.map-underscore-to-camel-case=true</span></span><br><span class="line"><span class="comment">mybatis-plus.configuration.default-enum-type-handler=org.apache.ibatis.type.EnumTypeHandler</span></span><br><span class="line"><span class="comment">mybatis-plus.configuration.aggressive-lazy-loading=true</span></span><br><span class="line"><span class="comment">mybatis-plus.configuration.lazy-loading-enabled=true</span></span><br><span class="line"><span class="comment">mybatis-plus.configuration.auto-mapping-behavior=partial</span></span><br><span class="line"><span class="comment">mybatis-plus.configuration.auto-mapping-unknown-column-behavior=none</span></span><br><span class="line"><span class="comment">mybatis-plus.configuration.local-cache-scope=session</span></span><br><span class="line"><span class="comment">mybatis-plus.configuration.cache-enabled=true</span></span><br><span class="line"><span class="comment">mybatis-plus.configuration.call-setters-on-nulls=false</span></span><br><span class="line"><span class="comment">mybatis-plus.configuration.configuration-factory=</span></span><br><span class="line"><span class="comment">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment">#mybatis-plus.global-config</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.banner=true</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.enable-sql-runner=false</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.super-mapper-class=com.baomidou.mybatisplus.core.mapper.Mapper</span></span><br><span class="line"><span class="comment">#mybatis-plus.global-config.db-config</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.id-type=assign_id</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.table-prefix=tbl_</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.schema=</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.column-format=</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.property-format=</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.table-underline=true</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.capital-mode=false</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.logic-delete-field=</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.logic-delete-value=1</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.logic-not-delete-value=0</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.insert-strategy=not_null</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.update-strategy=not_null</span></span><br><span class="line"><span class="comment">mybatis-plus.global-config.db-config.select-strategy=not_null</span></span><br></pre></td></tr></table></figure><h2 id="第七章-MyBatis-Plus3插件扩展"><a href="#第七章-MyBatis-Plus3插件扩展" class="headerlink" title="第七章 MyBatis-Plus3插件扩展"></a>第七章 MyBatis-Plus3插件扩展</h2><p>创建包：com.caochenlei.mpdemo.config</p><p>新建类：com.caochenlei.mpdemo.config.MybatisPlusConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-1、分页插件"><a href="#7-1、分页插件" class="headerlink" title="7.1、分页插件"></a>7.1、分页插件</h3><p><strong>插件功能</strong>：提供数据分页功能。</p><p><strong>添加插件</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性设置</strong>：</p><p><strong>测试方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPagination</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    Page&lt;Employee&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    Page&lt;Employee&gt; employeePage = employeeMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    employeePage.getRecords().forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span> + employeePage.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span> + employeePage.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;记录数：&quot;</span> + employeePage.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有上一页：&quot;</span> + employeePage.hasPrevious());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有下一页：&quot;</span> + employeePage.hasNext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ef7a42c27c059478bfbe84310c4637d7.png" alt="img"></p><p><strong>数据库截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0e4dbaf11ff219aa5137b4a8f961b6a3.png" alt="img"></p><h3 id="7-2、执行分析插件"><a href="#7-2、执行分析插件" class="headerlink" title="7.2、执行分析插件"></a>7.2、执行分析插件</h3><p><strong>插件功能</strong>：防止全表更新与全表删除，依次保护数据库的安全，建议开发环境使用，不建议生产环境使用。</p><p><strong>添加插件</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">// 添加执行分析插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">BlockAttackInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBlockAttack</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> employeeMapper.delete(<span class="literal">null</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/641483b91f9ed98157682515ef5e60f1.png" alt="img"></p><p><strong>数据库截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/664ba37d9b3b759ff38eb5f4e4695b65.png" alt="img"></p><h3 id="7-3、性能分析插件"><a href="#7-3、性能分析插件" class="headerlink" title="7.3、性能分析插件"></a>7.3、性能分析插件</h3><p><strong>插件功能</strong>：该功能依赖 p6spy 组件，完美的输出打印 SQL 及执行时长， 3.1.0 以上版本支持。</p><p><strong>添加依赖</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;p6spy&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;p6spy&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.9</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>修改配置</strong>：application.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#mysql</span><br><span class="line">#spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">#spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/mp?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">#spring.datasource.username=root</span><br><span class="line">#spring.datasource.password=<span class="number">123456</span></span><br><span class="line">#p6spy</span><br><span class="line">spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver</span><br><span class="line">spring.datasource.url=jdbc:p6spy:mysql:<span class="comment">//localhost:3306/mp</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p><strong>添加配置</strong>：spy.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">3.2</span><span class="number">.1</span>以上使用</span><br><span class="line">modulelist=com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory</span><br><span class="line"># 自定义日志打印</span><br><span class="line">logMessageFormat=com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger</span><br><span class="line"># 日志输出到控制台</span><br><span class="line">appender=com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span><br><span class="line"># 使用日志系统记录 sql</span><br><span class="line">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span><br><span class="line"># 设置 p6spy driver 代理</span><br><span class="line">deregisterdrivers=<span class="literal">true</span></span><br><span class="line"># 取消JDBC URL前缀</span><br><span class="line">useprefix=<span class="literal">true</span></span><br><span class="line"># 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.</span><br><span class="line">excludecategories=info,debug,result,commit,resultset</span><br><span class="line"># 日期格式</span><br><span class="line">dateformat=yyyy-MM-dd HH:mm:ss</span><br><span class="line"># 实际驱动可多个</span><br><span class="line">driverlist=com.mysql.jdbc.Driver</span><br><span class="line"># 是否开启慢SQL记录</span><br><span class="line">outagedetection=<span class="literal">true</span></span><br><span class="line"># 慢SQL记录标准 <span class="number">2</span> 秒</span><br><span class="line">outagedetectioninterval=<span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>注意问题</strong>：</p><ul><li>driver-class-name 为 p6spy 提供的驱动类 </li><li>url 前缀为 jdbc:p6spy 跟着冒号为对应数据库连接地址 </li><li>打印出sql为null，在excludecategories增加commit </li><li>批量操作不打印sql，去除excludecategories中的batch </li><li>批量操作打印重复的问题请使用MybatisPlusLogFactory (3.2.1新增） </li><li>该插件有性能损耗，不建议生产环境使用</li></ul><p><strong>添加插件</strong>：该插件不用添加自动集成</p><p><strong>测试方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPagination</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    Page&lt;Employee&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    Page&lt;Employee&gt; employeePage = employeeMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    employeePage.getRecords().forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span> + employeePage.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span> + employeePage.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;记录数：&quot;</span> + employeePage.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有上一页：&quot;</span> + employeePage.hasPrevious());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有下一页：&quot;</span> + employeePage.hasNext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/26a31d71304c1436eb2704d48992c1b9.png" alt="img"></p><p><strong>数据库截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d88232ccd0d7529af7092cbd64c4bc22.png" alt="img"></p><h3 id="7-4、乐观锁插件"><a href="#7-4、乐观锁插件" class="headerlink" title="7.4、乐观锁插件"></a>7.4、乐观锁插件</h3><p><strong>插件功能</strong>：当要更新一条记录的时候，希望这条记录没有被别人更新，可以使用乐观锁，MyBatis-Plus就提供了乐观锁插件。</p><p><strong>实现方式</strong>：乐观锁实现方式如下</p><ol><li>取出记录时，获取当前version </li><li>更新时，带上这个version </li><li>执行更新时， set version = newVersion where version = oldVersion </li><li>如果version不对，就更新失败</li></ol><p><strong>添加字段</strong>：</p><ul><li>数据库： ALTER TABLE <code>tbl_employee</code> ADD COLUMN <code>version</code> INT(11) DEFAULT ‘1’ NULL AFTER <code>age</code>;  </li><li>实体类： <pre><code class="prism language-java"><span class="token annotation punctuation">@Version</span><br><span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span></li></ul><p><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><pre><code>&lt;!-- --&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; version&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;</code></pre><p><span class="token punctuation">}</span></p><p><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> version<span class="token punctuation">)</span> <span class="token punctuation">{</p><pre><code>&lt;!-- --&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;version &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; version&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;</code></pre><p><span class="token punctuation">}</span><br>&lt;/code&gt;&lt;/pre&gt; </p><p><strong>注意事项</strong>：</p><ul><li>支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime </li><li>整数类型下 newVersion = oldVersion + 1 </li><li>newVersion 会回写到 entity 中 </li><li>仅支持 updateById(id) 与 update(entity, wrapper) 方法 </li><li>在 update(entity, wrapper) 方法下， wrapper 不能复用</li></ul><p><strong>添加插件</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">// 添加执行分析插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">BlockAttackInnerInterceptor</span>());</span><br><span class="line">        <span class="comment">// 添加乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testOptimisticLocker</span><span class="params">()</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    employee.setLastName(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> employeeMapper.updateById(employee);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/821729e40b177862b0abfcf4e4231186.png" alt="img"></p><p><strong>数据库截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a00a4b3630f16ef199493ed1973abd99.png" alt="img"></p><h3 id="7-5、快速开发插件"><a href="#7-5、快速开发插件" class="headerlink" title="7.5、快速开发插件"></a>7.5、快速开发插件</h3><p><strong>插件功能</strong>：可以通过接口方法名直接创建对应mapper中的sql标签，还可以Mapper和xml可以来回跳，更多功能自行探索！</p><p><strong>计划支持：</strong></p><ul><li>连接数据源之后 xml 里自动提示字段 </li><li>sql 增删改查 </li><li>集成 MP 代码生成 </li><li>其它</li></ul><p><strong>安装方法</strong>：</p><p>需要MybatisX插件支持，只需要安装一下就可以了，打开 IDEA，进入 File -&gt; Settings -&gt; Plugins，安装完成后重启</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9b1803a41d1f4694f99347527f8de08f.png" alt="img"></p><h2 id="第八章-MyBatis-Plus3其它功能"><a href="#第八章-MyBatis-Plus3其它功能" class="headerlink" title="第八章 MyBatis-Plus3其它功能"></a>第八章 MyBatis-Plus3其它功能</h2><h3 id="8-1、Sql-注入器"><a href="#8-1、Sql-注入器" class="headerlink" title="8.1、Sql 注入器"></a>8.1、Sql 注入器</h3><p>根据 MybatisPlus 的 AutoSqlInjector 可以自定义各种你想要的 SQL 注入到全局中，相当于自定义 MybatisPlus 自动注入的方法。之前需要在 xml 中进行配置的 SQL 语句，现在通过扩展 AutoSqlInjector 在加载 mybatis 环境时就注入。</p><p><strong>接口方法</strong>：然后在添加一个@Repository注解</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：我们不需要编写xml映射，因为我们会采用sql注入的形式，在 MybatisPlus 启动的时候就注入。</p></blockquote><p><strong>创建对象</strong>：在该com.caochenlei.mpdemo.injector(没有创建)包下创建MyMappedStatement.java、MySqlInjector.java</p><p>MyMappedStatement.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMappedStatement</span> <span class="keyword">extends</span> <span class="title class_">AbstractMethod</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MappedStatement <span class="title function_">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 接口中的方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> <span class="string">&quot;deleteAll&quot;</span>;</span><br><span class="line">        <span class="comment">// 该方法执行语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from &quot;</span> + tableInfo.getTableName();</span><br><span class="line">        <span class="comment">// 创建SqlSource</span></span><br><span class="line">        <span class="type">SqlSource</span> <span class="variable">sqlSource</span> <span class="operator">=</span> languageDriver.createSqlSource(configuration, sql, modelClass);</span><br><span class="line">        <span class="comment">// 构造一个删除的MappedStatement并返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.addDeleteMappedStatement(mapperClass, method, sqlSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MySqlInjector.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySqlInjector</span> <span class="keyword">extends</span> <span class="title class_">DefaultSqlInjector</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title function_">getMethodList</span><span class="params">(Class&lt;?&gt; mapperClass)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        List&lt;AbstractMethod&gt; methodList = <span class="built_in">super</span>.getMethodList(mapperClass);</span><br><span class="line">        methodList.add(<span class="keyword">new</span> <span class="title class_">MyMappedStatement</span>());</span><br><span class="line">        <span class="keyword">return</span> methodList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注释“执行分析插件”</strong>：会影响代码执行，它会阻止全表删除操作，所以先注释掉，反正我们已经学会了</p><p>MybatisPlusConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">// 添加执行分析插件</span></span><br><span class="line">        <span class="comment">//interceptor.addInnerInterceptor(new BlockAttackInnerInterceptor());</span></span><br><span class="line">        <span class="comment">// 添加乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加“自定义SQL注入对象”</strong>：</p><p>MybatisPlusConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">// 添加执行分析插件</span></span><br><span class="line">        <span class="comment">//interceptor.addInnerInterceptor(new BlockAttackInnerInterceptor());</span></span><br><span class="line">        <span class="comment">// 添加乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MySqlInjector <span class="title function_">mySqlInjector</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MySqlInjector</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteAll</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    userMapper.deleteAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台截图</strong>：没有写xml映射代码，它也会执行删除，原因是我们在启动的时候自动注入了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8901fa75eec495fab89d3ffd559d2abf.png" alt="img"></p><p><strong>数据库截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/883cc595767e5fd3017979d14c2cabc9.png" alt="img"></p><h3 id="8-2、逻辑删除"><a href="#8-2、逻辑删除" class="headerlink" title="8.2、逻辑删除"></a>8.2、逻辑删除</h3><p><strong>逻辑删除</strong>：数据删除并不会真正的从数据库中将数据删除掉，而是将当前被删除的这条数据中的一个逻辑删除字段置为删除状态。</p><p><strong>导入数据</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">## 删除表</span><br><span class="line">DROP TABLE IF EXISTS `tbl_student`;</span><br><span class="line">## 创建表</span><br><span class="line">CREATE TABLE `tbl_student` (</span><br><span class="line">  `id` INT(<span class="number">11</span>) NOT NULL AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `name` VARCHAR(<span class="number">255</span>) DEFAULT NULL COMMENT <span class="string">&#x27;学生姓名&#x27;</span>,</span><br><span class="line">  `age` INT(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;学生年龄&#x27;</span>,</span><br><span class="line">  `grade` VARCHAR(<span class="number">255</span>) DEFAULT NULL COMMENT <span class="string">&#x27;学生年纪&#x27;</span>,</span><br><span class="line">  `status` VARCHAR(<span class="number">255</span>) DEFAULT NULL COMMENT <span class="string">&#x27;学生状态&#x27;</span>,</span><br><span class="line">  `deleted` INT(<span class="number">11</span>) DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否删除（0:未删除、1:已删除）&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="title function_">KEY</span> <span class="params">(`id`)</span></span><br><span class="line">) DEFAULT CHARSET=utf8 COMMENT=<span class="string">&#x27;学生&#x27;</span>;</span><br><span class="line">## 导入数据</span><br><span class="line">INSERT  INTO `tbl_student`(`id`,`name`,`age`,`grade`,`status`,`deleted`) VALUES (<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,NULL,NULL,NULL,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>代码生成</strong>：运行代码生成器，生成代码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/92791979b98be99a4ee2ef244f7cf906.png" alt="img"></p><p><strong>添加配置</strong>：application.properties，如果以下配置已经存在，请忽略此步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#那个字段是逻辑删除字段，也可以在字段上添加注解<span class="meta">@TableLogic</span>，在这里边配置是全局生效</span><br><span class="line">mybatis-plus.global-config.db-config.logic-delete-field=deleted</span><br><span class="line">#删除后字段的值为<span class="number">1</span></span><br><span class="line">mybatis-plus.global-config.db-config.logic-delete-value=<span class="number">1</span></span><br><span class="line">#未删除字段的值为<span class="number">0</span></span><br><span class="line">mybatis-plus.global-config.db-config.logic-not-delete-value=<span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>测试方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testLogicDelete</span><span class="params">()</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> studentMapper.deleteById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7daeb4912188a1b2af8ad40085745949.png" alt="img"></p><p><strong>数据库截图</strong>：你会发现数据还存在，只是将其中的逻辑删除标志由0改为了1，代表逻辑删除</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0b556934a55f689bfb3db00b5a6873ca.png" alt="img"></p><h3 id="8-3、通用枚举"><a href="#8-3、通用枚举" class="headerlink" title="8.3、通用枚举"></a>8.3、通用枚举</h3><p>实现自定义枚举有两种方式，一种是使用注解而另一种是使用实现接口IEnum的方式，在接下来的案例中，我们会分别使用这两种进行讲解，这样可以让大家学的更全面一些。</p><h4 id="8-3-1、保存枚举值"><a href="#8-3-1、保存枚举值" class="headerlink" title="8.3.1、保存枚举值"></a>8.3.1、保存枚举值</h4><p><strong>添加配置</strong>：application.properties，如果有以下配置，请忽略此步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.type-enums-<span class="keyword">package</span>=com.caochenlei.mpdemo.myenum</span><br><span class="line">mybatis-plus.configuration.<span class="keyword">default</span>-<span class="keyword">enum</span>-type-handler=org.apache.ibatis.type.EnumOrdinalTypeHandler</span><br></pre></td></tr></table></figure><p><strong>创建枚举类</strong>：com.caochenlei.mpdemo.myenum.AgeEnum</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">AgeEnum</span> <span class="keyword">implements</span> <span class="title class_">IEnum</span>&lt;Integer&gt; &#123;</span><br><span class="line">   </span><br><span class="line">    ONE(<span class="number">1</span>, <span class="string">&quot;一岁&quot;</span>),</span><br><span class="line">    TWO(<span class="number">2</span>, <span class="string">&quot;二岁&quot;</span>),</span><br><span class="line">    THREE(<span class="number">3</span>, <span class="string">&quot;三岁&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    AgeEnum(<span class="type">int</span> value, String desc) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//数值作为枚举值保存到数据库</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改实体类</strong>：com.caochenlei.mpdemo.pojo.Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生年龄</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> AgeEnum age;</span><br></pre></td></tr></table></figure><p><strong>测试方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAgeEnum</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    student.setAge(AgeEnum.THREE);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> studentMapper.insert(student);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bfcf1f48b9b9e90adcdcaf4f954b2eb2.png" alt="img"></p><p><strong>数据库截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8272d33940f9d93110fe427cbe878d4f.png" alt="img"></p><h4 id="8-3-2、保存枚举名称"><a href="#8-3-2、保存枚举名称" class="headerlink" title="8.3.2、保存枚举名称"></a>8.3.2、保存枚举名称</h4><p><strong>添加配置</strong>：application.properties，如果有以下配置，请忽略此步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.type-enums-<span class="keyword">package</span>=com.caochenlei.mpdemo.myenum</span><br><span class="line">mybatis-plus.configuration.<span class="keyword">default</span>-<span class="keyword">enum</span>-type-handler=org.apache.ibatis.type.EnumOrdinalTypeHandler</span><br></pre></td></tr></table></figure><p><strong>创建枚举类</strong>：com.caochenlei.mpdemo.myenum.GradeEnum</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GradeEnum</span> &#123;</span><br><span class="line">   </span><br><span class="line">    PRIMARY(<span class="number">1</span>, <span class="string">&quot;小学&quot;</span>),</span><br><span class="line">    SECONDORY(<span class="number">2</span>, <span class="string">&quot;中学&quot;</span>),</span><br><span class="line">    HIGH(<span class="number">3</span>, <span class="string">&quot;高中&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="meta">@EnumValue</span><span class="comment">//描述作为枚举值保存到数据库</span></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    GradeEnum(<span class="type">int</span> code, String desc) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改实体类</strong>：com.caochenlei.mpdemo.pojo.Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生年纪</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> GradeEnum grade;</span><br></pre></td></tr></table></figure><p><strong>测试方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGradeEnum</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    student.setGrade(GradeEnum.HIGH);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> studentMapper.insert(student);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8ba82a7d54d3985f7d819a229b97d90c.png" alt="img"></p><p><strong>数据库截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6f6e92716d8b48a7aa7c6438850a3312.png" alt="img"></p><h3 id="8-4、自动填充功能"><a href="#8-4、自动填充功能" class="headerlink" title="8.4、自动填充功能"></a>8.4、自动填充功能</h3><p>我们现在有一个需求，每当插入一个学生的时候，自动的给学生状态设置为”插入“，每当修改的时候，如果状态标志位为null，就把标志字段设置为”修改“，这时候就需要自动填充功能了。</p><p>metaobject：元对象，是 Mybatis 提供的一个用于更加方便，更加优雅的访问对象的属性，给对象的属性设置值的一个对象，还会用于包装对象，支持对 Object 、Map、Collection等对象进行包装，本质上 metaObject 获取对象的属性值或者是给对象的属性设置值，最终是要通过 Reflector 获取到属性的对应方法的 Invoker，最终 invoke。</p><p><strong>添加注解</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> String status;</span><br></pre></td></tr></table></figure><p><strong>创建包</strong>：com.caochenlei.mpdemo.metaObjectHandler</p><p><strong>创建自动填充功能处理器</strong>：com.caochenlei.mpdemo.metaObjectHandler.MyMetaObjectHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        System.out.println(<span class="string">&quot;start insert fill ....&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;status&quot;</span>,String.class,<span class="string">&quot;插入&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        System.out.println(<span class="string">&quot;start update fill ....&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;status&quot;</span>,String.class,<span class="string">&quot;更新&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注册自动填充功能处理器</strong>：MybatisPlusConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MyMetaObjectHandler <span class="title function_">myMetaObjectHandler</span><span class="params">()</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyMetaObjectHandler</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试方法</strong>：依次执行两个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testInsertFill</span><span class="params">()</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setName(<span class="string">&quot;小六&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> studentMapper.insert(student);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateFill</span><span class="params">()</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentMapper.selectById(<span class="number">4</span>);</span><br><span class="line">    student.setName(<span class="string">&quot;李四-修改&quot;</span>);</span><br><span class="line">    student.setStatus(<span class="literal">null</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> studentMapper.updateById(student);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台截图</strong>：</p><p>testInsertFill之后</p><p><img src="https://img-blog.csdnimg.cn/img_convert/586a3c21258c9fa468a13ac37c3a2ed3.png" alt="img"></p><p>testUpdateFill之后</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5815d12e6c80e4fe647da717da1e31a9.png" alt="img"></p><p><strong>数据库截图</strong>：</p><p>testInsertFill之后</p><p><img src="https://img-blog.csdnimg.cn/img_convert/508bdb0ae5d4d9aac62446e132cee21e.png" alt="img"></p><p>testUpdateFill之后</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f90de454b8e3e005c3e654bce82d69e0.png" alt="img"></p><h3 id="8-5、字段类型处理器"><a href="#8-5、字段类型处理器" class="headerlink" title="8.5、字段类型处理器"></a>8.5、字段类型处理器</h3><p>字段类型处理器，用于 JavaType 与 JdbcType 之间的转换，用于 PreparedStatement 设置参数值和从 ResultSet 或 CallableStatement 中取出一个值，本文讲解 mybaits-plus 内置常用类型处理器如何通过TableField注解快速注入到 mybatis 容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注意！！ 必须开启映射注解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@TableName</span>(autoResultMap = true)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 以下两种类型处理器，二选一，也可以同时存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意！！ 选择对应的 JSON 处理器也必须存在对应 JSON 解析依赖包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(typeHandler = JacksonTypeHandler.class)</span></span><br><span class="line">    <span class="comment">// @TableField(typeHandler = FastjsonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> OtherInfo otherInfo;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6、自定义ID生成器"><a href="#8-6、自定义ID生成器" class="headerlink" title="8.6、自定义ID生成器"></a>8.6、自定义ID生成器</h3><p><strong>导入数据</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## 删除表</span><br><span class="line">DROP TABLE IF EXISTS `tbl_product`;</span><br><span class="line">## 新建表</span><br><span class="line">CREATE TABLE `tbl_product` (</span><br><span class="line">  `pid` <span class="type">int</span>(<span class="number">11</span>) NOT NULL COMMENT <span class="string">&#x27;商品主键&#x27;</span>,</span><br><span class="line">  `pname` varchar(<span class="number">255</span>) DEFAULT NULL COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="title function_">KEY</span> <span class="params">(`pid`)</span></span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=<span class="string">&#x27;商品&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>生成代码</strong>：运行CodeGenerator</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ab9befd263d092403766e1a247cc7281.png" alt="img"></p><p><strong>温馨提示</strong>：自3.3.0开始，默认使用雪花算法+UUID(不含中划线)</p><p><strong>重写方法</strong>：</p><p><strong>创建包</strong>：com.caochenlei.mpdemo.incrementer</p><p><strong>创建类</strong>：com.caochenlei.mpdemo.incrementer.CustomIdGenerator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomIdGenerator</span> <span class="keyword">implements</span> <span class="title class_">IdentifierGenerator</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicLong</span> <span class="variable">al</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">nextId</span><span class="params">(Object entity)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//可以将当前传入的class全类名来作为bizKey或者提取参数来生成bizKey进行分布式Id调用生成</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bizKey</span> <span class="operator">=</span> entity.getClass().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;bizKey:&quot;</span> + bizKey);</span><br><span class="line">        <span class="type">MetaObject</span> <span class="variable">metaObject</span> <span class="operator">=</span> SystemMetaObject.forObject(entity);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) metaObject.getValue(<span class="string">&quot;pname&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> al.getAndAdd(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;为&quot;</span> + name + <span class="string">&quot;生成主键值-&gt;:&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注册类</strong>：MybatisPlusConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IdentifierGenerator <span class="title function_">customIdGenerator</span><span class="params">()</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomIdGenerator</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改主键策略</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品主键</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableId(value = &quot;pid&quot;, type = IdType.ASSIGN_ID)</span></span><br><span class="line"><span class="keyword">private</span> Long pid;</span><br></pre></td></tr></table></figure><p><strong>测试方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCustomIdGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">    product.setPname(<span class="string">&quot;手机&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> productMapper.insert(product);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/853e9cb8c2bc17468478d61774dc52df.png" alt="img"></p><p><strong>数据库截图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/608baf9ae39a92debdbbd29f121b791b.png" alt="img"></p><h3 id="8-7、Sequence主键"><a href="#8-7、Sequence主键" class="headerlink" title="8.7、Sequence主键"></a>8.7、Sequence主键</h3><p>在实际开发中，我们经常会使用到MySQL和Oracle数据库，但是这两种数据库对于主键有不同的策略，如下：</p><ul><li>MySQL：支持主键自增，type = IdType.Auto </li><li>Oracle：支持序列自增，type = IdType.INPUT</li></ul><p>那我们Oracle又要如何使用主键策略，在这里，我们就不进行一步一步介绍了，我们只提出解决方法</p><ol><li><p>在实体类对象上添加注解@KeySequence(value=”序列名”, clazz=主键属性类型.class)  </p></li><li><p>在实体类对象的主键字段上添加注解@TableId(value = “主键名称”, type = IdType.INPUT) <pre><code class="prism language-java"><span class="token annotation punctuation">@KeySequence</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">“SEQ_ORACLE_INTEGER_KEY”</span><span class="token punctuation">,</span> clazz <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YourEntity</span> <span class="token punctuation">{</p><p><!-- -->&lt;/span&gt;</p><p><span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">“ID”</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span><br><span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span></p></li></ol><p><span class="token punctuation">}</span><br>&lt;/code&gt;&lt;/pre&gt;  </p><ol><li><p>在全局配置中注册com.baomidou.mybatisplus.incrementer.OracleKeyGenerator <pre><code class="prism language-java"><span class="token annotation punctuation">@Bean</span><br><span class="token keyword">public</span> <span class="token class-name">IKeyGenerator</span> <span class="token function">keyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</p><p><!-- -->&lt;/span&gt;<br><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">oracleKeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br>&lt;/code&gt;&lt;/pre&gt; </p></li></ol><p>除了Oracle，MyBatis-Plus还内置支持以下数据库序列：</p><ul><li>DB2KeyGenerator </li><li>H2KeyGenerator </li><li>KingbaseKeyGenerator </li><li>OracleKeyGenerator </li><li>PostgreKeyGenerator</li></ul><p>如果内置支持不满足你的需求，可实现IKeyGenerator接口来进行扩展。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章-MyBatis-Plus3概述&quot;&gt;&lt;a href=&quot;#第一章-MyBatis-Plus3概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 MyBatis-Plus3概述&quot;&gt;&lt;/a&gt;第一章 MyBatis-Plus3概述&lt;/h2&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="MyBatis-Plus" scheme="https://manamn.space/categories/MyBatis-Plus/"/>
    
    
    <category term="MyBatis-Plus" scheme="https://manamn.space/tags/MyBatis-Plus/"/>
    
    <category term="框架" scheme="https://manamn.space/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>学习JavaScript这一篇就够了</title>
    <link href="https://manamn.space/2022/10/18/%E5%AD%A6%E4%B9%A0JavaScript%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
    <id>https://manamn.space/2022/10/18/%E5%AD%A6%E4%B9%A0JavaScript%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/</id>
    <published>2022-10-18T02:51:37.000Z</published>
    <updated>2022-10-18T02:53:38.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1、JavaScript的起源"><a href="#1-1、JavaScript的起源" class="headerlink" title="1.1、JavaScript的起源"></a>1.1、JavaScript的起源</h2><p>JavaScript诞生于1995年，它的出现主要是用于处理网页中的前端验证。所谓的前端验证，就是指检查用户输入的内容是否符合一定的规则。比如：用户名的长度，密码的长度，邮箱的格式等。但是，有的同学可能会有疑问，这些验证，后端不也可以进行验证吗？确实，后端程序的确可以进行这些验证，但你要清楚，在1995年那个年代，网速是非常慢的，向后端发送一个请求，浏览器很久才能得到响应，那这无疑是一种非常不好的用户体验。</p><p>为了解决前端验证的问题，当时的浏览器巨头NetScape（网景）公司就开发出一种脚本语言，起初命名为LiveScript，后来由于SUN公司的介入更名为了JavaScript。但是你要清楚，Java和JavaScript是没有什么关系的，只不过当时Java非常流行，为了蹭热度，才将LiveScript更名为JavaScript，它们的关系就像雷锋和雷峰塔的关系一样，没啥关系。</p><p>但是，浏览器开发商不止网景一家，还有一个大家都知道的公司，微软公司，它们的主打产品是IE（Internet Explorer）浏览器，当网景公司的Netscape Navigator浏览器推出JavaScript语言时，微软就急了啊，好家伙，人网景都推出了专门用于前端验证的语言，不仅大大减少了后端程序的压力，还提高了用户的体验。我微软这么大的公司不也得整一个，在1996年，微软公司在其最新的IE3浏览器中引入了自己对JavaScript的实现JScript。</p><p>于是在市面上存在两个版本的JavaScript，一个网景公司的JavaScript和微软的JScript，虽然当时浏览器的巨头是网景，但是网景的浏览器是收费的，虽然微软的IE浏览器在全球的市场份额远远不及网景，但是微软的拳头产品是Windows操作系统，每一个操作系统都自带一个IE浏览器并且免费，那么，未来的发展大家可能也想到了，网景让微软给干倒闭了，1998年11月，网景被美国在线（AOL）收购。</p><p>老大哥就是老大哥，为了抢先获得规则制定权，网景最先将JavaScript作为草案提交给欧洲计算机制造商协会，也就是ECMA组织，希望能将JavaScript做成行业标准，最终在网景、SUN以及微软等公司的参与下，由一众程序员和相关组织人员组成的第39技术委员会也就是TC39发布了ECMA-262标准，这个标准定义了名为ECMAScript的全新脚本语言，为啥又来了个ECMAScript？</p><p>因为Java是SUN的商标，SUN授权了NetScape可以叫JavaScript，但是ECMA没有SUN的授权就不能叫JavaScript，哪怕NetScape成员特别希望ECMA把它叫做JavaScript，但是ECMA也有成员并不希望这个标准就叫JavaScript，总之经过几轮磋商和博弈，ECMAScript这个名字就定下来。</p><p>我们可以简单看一下历史事件发展表：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/34ceed720299546a8161deab88fe16aa.png" alt="img"></p><h2 id="1-2、JavaScript的组成"><a href="#1-2、JavaScript的组成" class="headerlink" title="1.2、JavaScript的组成"></a>1.2、JavaScript的组成</h2><p>ECMAScript是一个标准，而这个标准需要由各个厂商去实现，不同的浏览器厂商对该标准会有不同的实现。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/584d9295990909d32b3338dbbbe9c037.png" alt="img"></p><p>我们已经知道ECMAScript是JavaScript标准，所以一般情况下这两个词我们认为是一个意思。但是实际上JavaScript的含义却要更大一些。一个完整的JavaScript实现应该由以下三个部分构成：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fafb929ac005ed0e9e2dedb433fe8eab.png" alt="img"></p><p>由此我们也知道了我们所要学习的内容就是这三部分，它们具体的含义后边章节会具体介绍。</p><h2 id="1-3、JavaScript的特点"><a href="#1-3、JavaScript的特点" class="headerlink" title="1.3、JavaScript的特点"></a>1.3、JavaScript的特点</h2><p><strong>解释型语言</strong></p><p>JavaScript是一门解释型语言，所谓解释型值语言是指不需要被编译为机器码在执行，而是直接执行。由于少了编译这一步骤，所以解释型语言开发起来尤为轻松，但是解释型语言运行较慢也是它的劣势。不过解释型语言中使用了JIT技术，使得运行速度得以改善。</p><p><strong>动态语言</strong></p><p>JavaScript是一门动态语言，所谓的动态语言可以暂时理解为在语言中的一切内容都是不确定的。比如一个变量，这一时刻是个整型，下一时刻可能会变成字符串了。当然这个问题我们以后再谈。不过在补充一句动态语言相比静态语言性能上要差一些，不过由于JavaScript中应用的JIT技术，所以JavaScript可能是运行速度最快的动态语言了。</p><p><strong>类似于 C 和 Java 的语法结构</strong></p><p>JavaScript的语法结构与C和Java很像，向for、if、while等语句和Java的基本上是一模一样的。所以有过C和Java基础的同学学习起来会轻松很多。不过JavaScript和与Java的关系也仅仅是看起来像而已。</p><p><strong>基于原型的面向对象</strong></p><p>JavaScript是一门面向对象的语言。啥是对象？下次聊。</p><p>Java也是一门面向对象的语言，但是与Java不同JavaScript是基于原型的面向对象。啥是原型？下次聊。</p><p><strong>严格区分大小写</strong></p><p>JavaScript是严格区分大小写的，也就是abc和Abc会被解析器认为是两个不同的东西。</p><h2 id="1-4、JavaScript的使用"><a href="#1-4、JavaScript的使用" class="headerlink" title="1.4、JavaScript的使用"></a>1.4、JavaScript的使用</h2><h3 id="1-4-1、标签引用"><a href="#1-4-1、标签引用" class="headerlink" title="1.4.1、标签引用"></a>1.4.1、标签引用</h3><p>在HTML中在script标签中就可以编写JavaScript代码，以下是一个简单演示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    alert(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-4-2、文件引用"><a href="#1-4-2、文件引用" class="headerlink" title="1.4.2、文件引用"></a>1.4.2、文件引用</h3><p>在一个单独的js文件中也可以编写JavaScript代码，然后在HTML文件中使用script标签进行引用，以下是一个简单演示。</p><p>main.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;main.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&quot;Hello,World!&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-5、JavaScript的输出"><a href="#1-5、JavaScript的输出" class="headerlink" title="1.5、JavaScript的输出"></a>1.5、JavaScript的输出</h2><h3 id="1-5-1、页面输出"><a href="#1-5-1、页面输出" class="headerlink" title="1.5.1、页面输出"></a>1.5.1、页面输出</h3><p>如何使用JavaScript向页面输出一句话，请参考以下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    document.write(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5-2、控制台输出"><a href="#1-5-2、控制台输出" class="headerlink" title="1.5.2、控制台输出"></a>1.5.2、控制台输出</h3><p>如何使用JavaScript向控制台输出一句话，请参考以下代码。</p><blockquote><p>注意：页面按F12弹出控制台</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    console.log(<span class="string">&quot;输出一条日志&quot;</span>);<span class="comment">//最常用</span></span><br><span class="line">    console.info(<span class="string">&quot;输出一条信息&quot;</span>);</span><br><span class="line">    console.warn(<span class="string">&quot;输出一条警告&quot;</span>);</span><br><span class="line">    console.error(<span class="string">&quot;输出一条错误&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0ce4f104e24737e922449dfcd54951f2.png" alt="img"></p><h3 id="1-5-3、弹出窗口输出"><a href="#1-5-3、弹出窗口输出" class="headerlink" title="1.5.3、弹出窗口输出"></a>1.5.3、弹出窗口输出</h3><p>如何使用JavaScript向弹出窗口输出一句话，请参考以下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    alert(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="1-6、JavaScript的注释"><a href="#1-6、JavaScript的注释" class="headerlink" title="1.6、JavaScript的注释"></a>1.6、JavaScript的注释</h2><p>注释中的内容不会被解析器解析执行，但是会在源码中显示，我们一般会使用注释对程序中的内容进行解释。</p><p>JS中的注释和Java的的一致，分为两种：</p><ul><li>单行注释：// 注释内容 </li><li>多行注释：/<em> 注释内容 </em>/</li></ul><h3 id="1-6-1、单行注释"><a href="#1-6-1、单行注释" class="headerlink" title="1.6.1、单行注释"></a>1.6.1、单行注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 这是注释内容</span></span><br><span class="line">    console.log(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-6-2、多行注释"><a href="#1-6-2、多行注释" class="headerlink" title="1.6.2、多行注释"></a>1.6.2、多行注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是注释内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    console.log(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-1、标识符"><a href="#2-1、标识符" class="headerlink" title="2.1、标识符"></a>2.1、标识符</h2><p>所谓标识符，就是指给变量、函数、属性或函数的参数起名字。</p><p>标识符可以是按照下列格式规则组合起来的一或多个字符：</p><ul><li>第一个字符必须是一个字母、下划线（ _ ）或一个美元符号（ $ ）。 </li><li>其它字符可以是字母、下划线、美元符号或数字。 </li><li>按照惯例，ECMAScript 标识符采用驼峰命名法。 </li><li>标识符不能是关键字和保留字符。</li></ul><p><strong>关键字：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/06bab955dce3d478eb0ee1880efdbf13.png" alt="img"></p><p><strong>保留字符：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/321c5fb7e148d7fa99e59440083b0a4b.png" alt="img"></p><p><strong>其它不建议使用的标识符：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/612f0462d3cde3f2fa410ccd8b6da15b.png" alt="img"></p><p><strong>单个单词的标识符举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name、age、gender、hobby</span><br></pre></td></tr></table></figure><p><strong>多个单词的标识符举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">studentName、studentAge、studentGender、studentHobby</span><br></pre></td></tr></table></figure><h2 id="2-2、字面量和变量"><a href="#2-2、字面量和变量" class="headerlink" title="2.2、字面量和变量"></a>2.2、字面量和变量</h2><h3 id="2-2-1、字面量"><a href="#2-2-1、字面量" class="headerlink" title="2.2.1、字面量"></a>2.2.1、字面量</h3><p>字面量实际上就是一些固定的值，比如：1、2 、3、true、false、null、NaN、“hello”，字面量都是不可以改变的，由于字面量不是很方便使用，所以在JavaScript中很少直接使用字面量，使用的而是变量。</p><h3 id="2-2-2、变量"><a href="#2-2-2、变量" class="headerlink" title="2.2.2、变量"></a>2.2.2、变量</h3><p>变量的作用是给某一个值或对象标注名称。比如我们的程序中有一个值123，这个值我们是需要反复使用的，这个时候 我们最好将123这个值赋值给一个变量，然后通过变量去使用123这个值。</p><p><strong>变量的声明：</strong> 使用var关键字声明一个变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br></pre></td></tr></table></figure><p><strong>变量的赋值：</strong> 使用=为变量赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p><strong>声明和赋值同时进行：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">123</span>;</span><br></pre></td></tr></table></figure><h2 id="2-3、数据类型"><a href="#2-3、数据类型" class="headerlink" title="2.3、数据类型"></a>2.3、数据类型</h2><h3 id="2-3-1、类型分类"><a href="#2-3-1、类型分类" class="headerlink" title="2.3.1、类型分类"></a>2.3.1、类型分类</h3><p>数据类型决定了一个数据的特征，比如：123和”123”，直观上看这两个数据都是123，但实际上前者是一个数字，而后者是一个字符串。</p><p>对于不同的数据类型我们在进行操作时会有很大的不同。</p><p>JavaScript中一共有5种基本数据类型：</p><ul><li>字符串型（String） </li><li>数值型（Number） </li><li>布尔型（Boolean） </li><li>undefined型（Undefined） </li><li>null型（Null）</li></ul><p>这5种之外的类型都称为Object，所以总的来看JavaScript中共有六种数据类型。</p><h3 id="2-3-2、typeof运算符"><a href="#2-3-2、typeof运算符" class="headerlink" title="2.3.2、typeof运算符"></a>2.3.2、typeof运算符</h3><p>使用typeof操作符可以用来检查一个变量的数据类型。</p><p><strong>使用方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof 数据</span><br></pre></td></tr></table></figure><p><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof <span class="number">123</span>);</span><br><span class="line">console.log(typeof <span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">console.log(typeof <span class="literal">true</span>);</span><br><span class="line">console.log(typeof undefined);</span><br><span class="line">console.log(typeof <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b9ba0a296f0c0a973fae0c2bda964929.png" alt="img"></p><h3 id="2-3-3、String"><a href="#2-3-3、String" class="headerlink" title="2.3.3、String"></a>2.3.3、String</h3><p>String用于表示一个字符序列，即字符串。字符串需要使用 <strong>单引号</strong> 或 <strong>双引号</strong> 括起来。</p><p><strong>转义字符：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/8cd27bded82d24387ae42b8444f0d25e.png" alt="img"></p><blockquote><p>注意：使用typeof运算符检查字符串时，会返回”string”。</p></blockquote><h3 id="2-3-4、Number"><a href="#2-3-4、Number" class="headerlink" title="2.3.4、Number"></a>2.3.4、Number</h3><p>Number 类型用来表示整数和浮点数，最常用的功能就是用来表示10进制的整数和浮点数。</p><p>Number表示的数字大小是有限的，如果超过了这个范围，则会返回 ±Infinity。</p><ul><li>最大值：+1.7976931348623157e+308 </li><li>最小值：-1.7976931348623157e+308 </li><li>0以上的最小值：5e-324</li></ul><p><strong>特殊的数字：</strong></p><ul><li>Infinity：正无穷 </li><li>-Infinity：负无穷 </li><li>NaN：非法数字（Not A Number）</li></ul><p><strong>其它的进制：</strong></p><ul><li>二进制：0b 开头表示二进制，但是，并不是所有的浏览器都支持 </li><li>八进制：0 开头表示八进制 </li><li>十六进制：0x 开头表示十六进制</li></ul><blockquote><p>注意：使用typeof检查一个Number类型的数据时（包括NaN 和 Infinity），会返回”number”。</p></blockquote><h3 id="2-3-5、Boolean"><a href="#2-3-5、Boolean" class="headerlink" title="2.3.5、Boolean"></a>2.3.5、Boolean</h3><p>布尔型也被称为逻辑值类型或者真假值类型。</p><p>布尔型只能够取真（true）和假（false）两种数值。除此以外， 其它的值都不被支持。</p><h3 id="2-3-6、Undefined"><a href="#2-3-6、Undefined" class="headerlink" title="2.3.6、Undefined"></a>2.3.6、Undefined</h3><p>Undefined 类型只有一个值，即特殊的 undefined。</p><p>在使用 var 声明变量但未对其加以初始化时，这个变量的值就是 undefined。</p><blockquote><p>注意：使用typeof对没有初始化和没有声明的变量，会返回“undefined”。</p></blockquote><h3 id="2-3-7、Null"><a href="#2-3-7、Null" class="headerlink" title="2.3.7、Null"></a>2.3.7、Null</h3><p>Null 类型是第二个只有一个值的数据类型，这个特殊的值是 null。</p><p>undefined值实际上是由null值衍生出来的，所以如果比较undefined和null是否相等，会返回true。</p><blockquote><p>注意：从语义上看null表示的是一个空的对象，所以使用typeof检查null会返回一个Object。</p></blockquote><h2 id="2-4、强制类型转换"><a href="#2-4、强制类型转换" class="headerlink" title="2.4、强制类型转换"></a>2.4、强制类型转换</h2><p>强制类型转换指将一个数据类型强制转换为其它的数据类型。一般是指，将其它的数据类型转换为String、Number、Boolean。</p><h3 id="2-4-1、转换为String类型"><a href="#2-4-1、转换为String类型" class="headerlink" title="2.4.1、转换为String类型"></a>2.4.1、转换为String类型</h3><p>将其它数值转换为字符串有三种方式：toString()、String()、 拼串。</p><ul><li>方式一：调用被转换数据类型的toString()方法，该方法不会影响到原变量，它会将转换的结果返回，但是注意：null和undefined这两个值没有toString()方法，如果调用它们的方法，会报错。 var a = 123;<br>a = a.toString();<br>console.log(a);<br>console.log(typeof a);  </li><li>方式二：调用String()函数，并将被转换的数据作为参数传递给函数，使用String()函数做强制类型转换时，对于Number和Boolean实际上就是调用的toString()方法，但是对于null和undefined，就不会调用toString()方法，它会将 null 直接转换为 “null”，将 undefined 直接转换为 “undefined”。 var a = 123;<br>a = String(a);<br>console.log(a);<br>console.log(typeof a);</li></ul><p>var b = undefined;<br>b = String(b);<br>console.log(b);<br>console.log(typeof b);</p><p>var c = null;<br>c = String(c);<br>console.log(c);<br>console.log(typeof c);  </p><ul><li>方式三：为任意的数据类型 +”” var a = 123;<br>a = a + “”;<br>console.log(a);<br>console.log(typeof a); </li></ul><h3 id="2-4-2、转换为Number类型"><a href="#2-4-2、转换为Number类型" class="headerlink" title="2.4.2、转换为Number类型"></a>2.4.2、转换为Number类型</h3><p>有三个函数可以把非数值转换为数值：Number()、parseInt() 和parseFloat()。Number()可以用来转换任意类型的数据，而后两者只能用于转换字符串。parseInt()只会将字符串转换为整数，而parseFloat()可以将字符串转换为浮点数。</p><ul><li><p>方式一：使用Number()函数 </p><ul> - 字符串 --&gt; 数字 <ul>  - 如果是纯数字的字符串，则直接将其转换为数字  - 如果字符串中有非数字的内容，则转换为NaN  - 如果字符串是一个空串或者是一个全是空格的字符串，则转换为0 </ul>  - 布尔 --&gt; 数字 <ul>  - true 转成 1  - false 转成 0 </ul>  - null --&gt; 数字 <ul>  - null 转成 0 </ul>  - undefined --&gt; 数字 <ul>  - undefined 转成 NaN </ul>  </ul>  </li><li><p>方式二：这种方式专门用来对付字符串，parseInt() 把一个字符串转换为一个整数 var a = “123”;<br>a = parseInt(a);<br>console.log(a);<br>console.log(typeof a);  </p></li><li>方式三：这种方式专门用来对付字符串，parseFloat() 把一个字符串转换为一个浮点数 var a = “123.456”;<br>a = parseFloat(a);<br>console.log(a);<br>console.log(typeof a); </li></ul><blockquote><p>注意：如果对非String使用parseInt()或parseFloat()，它会先将其转换为String然后在操作</p></blockquote><h3 id="2-4-3、转换为Boolean类型"><a href="#2-4-3、转换为Boolean类型" class="headerlink" title="2.4.3、转换为Boolean类型"></a>2.4.3、转换为Boolean类型</h3><p>将其它的数据类型转换为Boolean，只能使用Boolean()函数。</p><ul><li><p>使用Boolean()函数 </p><ul> - 数字 —&gt; 布尔  <ul>   - 除了0和NaN，其余的都是true  </ul>  - 字符串 —&gt; 布尔  <ul>   - 除了空串，其余的都是true  </ul>  - null和undefined都会转换为false - 对象也会转换为true </ul> </li></ul><h2 id="2-5、运算符"><a href="#2-5、运算符" class="headerlink" title="2.5、运算符"></a>2.5、运算符</h2><p>运算符也叫操作符，通过运算符可以对一个或多个值进行运算并获取运算结果。</p><p>比如：typeof就是运算符，可以来获得一个值的类型，它会将该值的类型以字符串的形式返回（number string boolean undefined object）</p><h3 id="2-5-1、算术运算符"><a href="#2-5-1、算术运算符" class="headerlink" title="2.5.1、算术运算符"></a>2.5.1、算术运算符</h3><p>算术运算符用于表达式计算。</p><p>y=5，下面的表格解释了这些算术运算符：</p><h3 id="2-5-2、关系运算符"><a href="#2-5-2、关系运算符" class="headerlink" title="2.5.2、关系运算符"></a>2.5.2、关系运算符</h3><p>关系运算符在逻辑语句中使用，以测定变量或值是否相等。</p><p>x=5，下面的表格解释了比较运算符：</p><h3 id="2-5-3、赋值运算符"><a href="#2-5-3、赋值运算符" class="headerlink" title="2.5.3、赋值运算符"></a>2.5.3、赋值运算符</h3><p>赋值运算符用于给 JavaScript 变量赋值。</p><p>x=10 和 y=5，下面的表格解释了赋值运算符：</p><h3 id="2-5-4、逻辑运算符"><a href="#2-5-4、逻辑运算符" class="headerlink" title="2.5.4、逻辑运算符"></a>2.5.4、逻辑运算符</h3><p>逻辑运算符用于测定变量或值之间的逻辑。</p><p>给定 x=6 以及 y=3，下表解释了逻辑运算符：</p><p>关于逻辑运算符我们可以具体探讨一下：</p><ul><li><p>&amp;&amp; 与：&amp;&amp;可以对符号两侧的值进行与运算并返回结果，运算规则如下： </p><ul> - 两个值中只要有一个值为false，就返回false，只有两个值都为true时，才会返回true - JS中的“与”属于短路的与，如果第一个值为false，则不会检查第二个值 - 非布尔值时：如果两个都为true，则返回第二个值，如果两个值中有false，则返回靠前的false的值 </ul>  </li><li><p>|| 或：||可以对符号两侧的值进行或运算并返回结果，运算规则如下： </p><ul> - 两个值中只要有一个true，就返回true，只有两个值都为false，才会返回false - JS中的“或”属于短路的或，如果第一个值为true，则不会检查第二个值 - 非布尔值时：如果两个都为false ，则返回第二个值，如果两个值中有true，则返回靠前的true的值 </ul>  </li><li><p>! 非：!可以用来对一个值进行非运算，所谓非运算就是对一个布尔值进行取反操作，true变false，false变true，运算规则如下： </p><ul> - 如果对一个值进行两次取反，它不会变化 - 非布尔值时：先会将其转换为布尔值，然后再取反，所以我们可以利用该特点，来将一个其它的数据类型转换为布尔值，可以为一个任意数据类型取两次反，来将其转换为布尔值，原理和Boolean()函数一样 </ul> </li></ul><h3 id="2-5-5、比较运算符"><a href="#2-5-5、比较运算符" class="headerlink" title="2.5.5、比较运算符"></a>2.5.5、比较运算符</h3><p>比较运算符用来比较两个值是否相等，如果相等会返回true，否则返回false。</p><ul><li><p>使用 <strong>==</strong> 来做相等运算 </p><ul> - 当使用==来比较两个值时，如果值的类型不同，则会自动进行类型转换，将其转换为相同的类型，然后在比较 </ul>  </li><li><p>使用 <strong>!=</strong> 来做不相等运算 </p><ul> - 不相等用来判断两个值是否不相等，如果不相等返回true，否则返回false，不相等也会对变量进行自动的类型转换，如果转换后相等它也会返回false </ul>  </li><li><p>使用 <strong>===</strong> 来做全等运算 </p><ul> - 用来判断两个值是否全等，它和相等类似，不同的是它不会做自动的类型转换，如果两个值的类型不同，直接返回false </ul>  </li><li><p>使用 <strong>!==</strong> 来做不全等运算 </p><ul> - 用来判断两个值是否不全等，它和不等类似，不同的是它不会做自动的类型转换，如果两个值的类型不同，直接返回true </ul> </li></ul><h3 id="2-5-6、条件运算符"><a href="#2-5-6、条件运算符" class="headerlink" title="2.5.6、条件运算符"></a>2.5.6、条件运算符</h3><p>JavaScript 还包含了基于某些条件对变量进行赋值的条件运算符。</p><p>语法：variablename=(condition)?value1:value2;</p><p>举例：result=(age&lt;18)?”年龄太小”:”年龄合适”;</p><p>执行流程：如果condition为true，则执行语句1，并返回执行结果，如果为false，则执行语句2，并返回执行结果。</p><h3 id="2-5-7、逗号运算符"><a href="#2-5-7、逗号运算符" class="headerlink" title="2.5.7、逗号运算符"></a>2.5.7、逗号运算符</h3><p>使用逗号可以在一条语句中执行多次操作。</p><p>比如：var num1=1, num2=2, num3=3;</p><p>使用逗号运算符分隔的语句会从左到右顺 序依次执行。</p><h2 id="2-6、运算符优先级"><a href="#2-6、运算符优先级" class="headerlink" title="2.6、运算符优先级"></a>2.6、运算符优先级</h2><p>运算符优先级由上到下依次减小，对于同级运算符，采用从左向右依次执行的方法。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/695dff6b3d3117760c6fba7c0b09895b.png" alt="img"></p><h2 id="2-7、代码块"><a href="#2-7、代码块" class="headerlink" title="2.7、代码块"></a>2.7、代码块</h2><h3 id="2-7-1、语句"><a href="#2-7-1、语句" class="headerlink" title="2.7.1、语句"></a>2.7.1、语句</h3><p>前边我所说表达式和运算符等内容可以理解成是我们一 门语言中的单词，短语。而语句（statement）就是我们这个语言中一句一句完 整的话了。语句是一个程序的基本单位，JavaScript的程序就是由一条一条语句构成的，每一条语句使用;结尾。</p><p>JavaScript中的语句默认是由上至下顺序执行的，但是我们也可以通过一些流程控制语句来控制语句的执行顺序。</p><h3 id="2-7-2、代码块"><a href="#2-7-2、代码块" class="headerlink" title="2.7.2、代码块"></a>2.7.2、代码块</h3><p>代码块是在大括号 {} 中所写的语句，以此将多条语句的集合视为一条语句来使用。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">    a++;</span><br><span class="line">    alert(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们一般使用代码块将需要一起执行的语句进行分组，需要注意的是，代码块结尾不需要加 分号。</p><h2 id="2-8、条件语句"><a href="#2-8、条件语句" class="headerlink" title="2.8、条件语句"></a>2.8、条件语句</h2><p>条件语句是通过判断指定表达式的值来决定执行还是跳过某些语句，最基本的条件语句：</p><ul><li>if…else </li><li>switch…case</li></ul><h3 id="2-8-1、if…else"><a href="#2-8-1、if…else" class="headerlink" title="2.8.1、if…else"></a>2.8.1、if…else</h3><p>if…else语句是一种最基本的控制语句，它让JavaScript可以有条件的执行语句。</p><ul><li><p>第一种形式： if(expression)<br>statement <pre><code class="prism language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><br><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><p><!-- -->&lt;/span&gt;<br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">“未成年”</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span><br>&lt;/code&gt;&lt;/pre&gt;  </p></li><li><p>第二种形式： if(expression)<br>statement<br>else<br>statement <pre><code class="prism language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><br><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><p><!-- -->&lt;/span&gt;<br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">“未成年”</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</p><p><!-- -->&lt;/span&gt;<br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">“已成年”</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span><br>&lt;/code&gt;&lt;/pre&gt;  </p></li><li><p>第三种形式： if(expression1)<br>statement<br>else if(expression2)<br>statement<br>else<br>statement <pre><code class="prism language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><br><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><p><!-- -->&lt;/span&gt;<br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">“小于18岁了”</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><p><!-- -->&lt;/span&gt;<br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">“已经18岁了”</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</p><p><!-- -->&lt;/span&gt;<br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">“大于18岁了”</span><span class="token punctuation">)</span><br><span class="token punctuation">&#125;</span><br>&lt;/code&gt;&lt;/pre&gt; </p></li></ul><h3 id="2-8-2、switch…case"><a href="#2-8-2、switch…case" class="headerlink" title="2.8.2、switch…case"></a>2.8.2、switch…case</h3><p>switch…case是另一种流程控制语句。</p><p>switch语句更适用于多条分支使用同一条语句的情况。</p><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (语句) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">case</span> 表达式<span class="number">1</span>:</span><br><span class="line">        语句...</span><br><span class="line">    <span class="keyword">case</span> 表达式<span class="number">2</span>:</span><br><span class="line">        语句...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：需要注意的是一旦符合case的条件程序会一直运行到结束，所以我们一般会在case中添加break作为语句的结束。</p></blockquote><p><strong>案例演示1：根据today的数值，输出今天是星期几。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">today</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span> (today) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        console.log(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        console.log(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        console.log(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        console.log(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        console.log(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        console.log(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        console.log(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        console.log(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例演示2：根据month的数值，输出对应月份的天数，2月默认28天。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">month</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span> (month) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        console.log(<span class="string">&quot;31天&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        console.log(<span class="string">&quot;30天&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        console.log(<span class="string">&quot;28天&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        console.log(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-9、循环语句"><a href="#2-9、循环语句" class="headerlink" title="2.9、循环语句"></a>2.9、循环语句</h2><p>循环语句和条件语句一样，也是基本的控制语句，只要满足一定的条件将会一直执行，最基本的循环语句：</p><ul><li>while </li><li>do…while </li><li>for</li></ul><h3 id="2-9-1、while"><a href="#2-9-1、while" class="headerlink" title="2.9.1、while"></a>2.9.1、while</h3><p>while语句是一个最基本的循环语句，while语句也被称为while循环。</p><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">   </span><br><span class="line">    语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例演示：输出1-10。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-9-2、do…while"><a href="#2-9-2、do…while" class="headerlink" title="2.9.2、do…while"></a>2.9.2、do…while</h3><p>do…while和while非常类似，只不过它会在循环的尾部而不是顶部检查表达式的值，因此，do…while循环会至少执行一次。相比于while，do…while的使用情况并不 是很多。</p><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">   </span><br><span class="line">    语句...</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure><p><strong>案例演示：输出1-10。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="2-9-3、for"><a href="#2-9-3、for" class="headerlink" title="2.9.3、for"></a>2.9.3、for</h3><p>for语句也是循环控制语句，我们也称它为for循环。大部分循环都会有一个计数器用以控制循环执行的次数， 计数器的三个关键操作是初始化、检测和更新。for语句 就将这三步操作明确为了语法的一部分。</p><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式 ; 条件表达式 ; 更新表达式)&#123;</span><br><span class="line">   </span><br><span class="line">    语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例演示：输出1-10。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-9-4、跳转控制"><a href="#2-9-4、跳转控制" class="headerlink" title="2.9.4、跳转控制"></a>2.9.4、跳转控制</h3><ul><li>break：结束最近的一次循环，可以在循环和switch语句中使用。 </li><li>continue：结束本次循环，执行下一次循环，只能在循环中使用。</li></ul><p>那如果我们想要跳出多层循环或者跳到指定位置该怎么办呢？可以为循环语句创建一个label，来标识当前的循环，如下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">outer: <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">5</span>) &#123;</span><br><span class="line">   </span><br><span class="line">            <span class="keyword">break</span> outer;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-10、对象基础"><a href="#2-10、对象基础" class="headerlink" title="2.10、对象基础"></a>2.10、对象基础</h2><h3 id="2-10-1、概述"><a href="#2-10-1、概述" class="headerlink" title="2.10.1、概述"></a>2.10.1、概述</h3><p>Object类型，我们也称为一个对象，是JavaScript中的引用数据类型。它是一种复合值，它将很多值聚合到一起，可以通过名字访问这些值。对象也可以看做是属性的无序集合，每个属性都是一个名/值对。对象除了可以创建自有属性，还可以通过从一个名为原型的对象那里继承属性。除了字符串、数字、true、false、null和undefined之外，JavaScript中的值都是对象。</p><h3 id="2-10-2、创建对象"><a href="#2-10-2、创建对象" class="headerlink" title="2.10.2、创建对象"></a>2.10.2、创建对象</h3><p>创建对象有两种方式：</p><ul><li><p>第一种方式： var person = new Object();<br>person.name = “孙悟空”;<br>person.age = 18;<br>console.log(person);  </p></li><li><p>第二种方式： <pre><code class="prism language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</p><p><!-- -->&lt;/span&gt;<br>name<span class="token punctuation">:</span> <span class="token string">“孙悟空”</span><span class="token punctuation">,</span><br>age<span class="token punctuation">:</span> <span class="token number">18</span><br><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><br>&lt;/code&gt;&lt;/pre&gt; </p></li></ul><h3 id="2-10-3、访问属性"><a href="#2-10-3、访问属性" class="headerlink" title="2.10.3、访问属性"></a>2.10.3、访问属性</h3><p>访问属性的两种方式：</p><ul><li>第一种方式：使用 . 来访问 对象.属性名  </li><li>第二种方式：使用 [] 来访问 对象[‘属性名’] </li></ul><h3 id="2-10-4、删除属性"><a href="#2-10-4、删除属性" class="headerlink" title="2.10.4、删除属性"></a>2.10.4、删除属性</h3><p>删除对象的属性可以使用delete关键字，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete 对象.属性名</span><br></pre></td></tr></table></figure><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">person.name = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line">person.age = <span class="number">18</span>;</span><br><span class="line">console.log(person);</span><br><span class="line"></span><br><span class="line">delete person.name</span><br><span class="line">console.log(person);</span><br></pre></td></tr></table></figure><h3 id="2-10-5、遍历对象"><a href="#2-10-5、遍历对象" class="headerlink" title="2.10.5、遍历对象"></a>2.10.5、遍历对象</h3><p>枚举遍历对象中的属性，可以使用for … in语句循环，对象中有几个属性，循环体就会执行几次。</p><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> 变量 in 对象) &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">person</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> personKey in person) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">var</span> <span class="variable">personVal</span> <span class="operator">=</span> person[personKey];</span><br><span class="line">    console.log(personKey + <span class="string">&quot;:&quot;</span> + personVal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-10-6、数据类型梳理"><a href="#2-10-6、数据类型梳理" class="headerlink" title="2.10.6、数据类型梳理"></a>2.10.6、数据类型梳理</h3><h4 id="2-10-6-1、基本数据类型"><a href="#2-10-6-1、基本数据类型" class="headerlink" title="2.10.6.1、基本数据类型"></a>2.10.6.1、基本数据类型</h4><p>JavaScript中的变量可能包含两种不同数据类型的值：基本数据类型和引用数据类型。</p><p>JavaScript中一共有5种基本数据类型：String、Number、 Boolean、Undefined、Null。</p><p>基本数据类型的值是无法修改的，是不可变的。</p><p>基本数据类型的比较是值的比较，也就是只要两个变量的值相等，我们就认为这两个变量相等。</p><h4 id="2-10-6-2、引用数据类型"><a href="#2-10-6-2、引用数据类型" class="headerlink" title="2.10.6.2、引用数据类型"></a>2.10.6.2、引用数据类型</h4><p>引用类型的值是保存在内存中的对象。</p><p>当一个变量是一个对象时，实际上变量中保存的并不是对象本身，而是对象的引用。</p><p>当从一个变量向另一个变量复制引用类型的值时，会将对象的引用复制到变量中，并不是创建一个新的对象。</p><p>这时，两个变量指向的是同一个对象。因此，改变其中一个变量会影响另一个。</p><h3 id="2-10-7、栈和堆梳理"><a href="#2-10-7、栈和堆梳理" class="headerlink" title="2.10.7、栈和堆梳理"></a>2.10.7、栈和堆梳理</h3><p>JavaScript在运行时数据是保存到栈内存和堆内存当中的。</p><p>简单来说栈内存用来保存变量和基本类型，堆内存是用来保存对象。</p><p>我们在声明一个变量时，实际上就是在栈内存中创建了一个空间用来保存变量。</p><p>如果是基本类型则在栈内存中直接保存，如果是引用类型则会在堆内存中保存，变量中保存的实际上对象在堆内存中的地址。</p><p>当我们写了下边这几句代码的时候，栈内存和堆内存的结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">d</span> <span class="operator">=</span> &#123;</span><br><span class="line">   name: <span class="string">&#x27;sunwukong&#x27;</span>, age: <span class="number">18</span>&#125;;</span><br></pre></td></tr></table></figure><p>栈的特点：先进后出，后进先出</p><p><img src="https://img-blog.csdnimg.cn/img_convert/48487fd2d563e9a30beaf4fe8273285f.png" alt="img"></p><h2 id="2-11、函数"><a href="#2-11、函数" class="headerlink" title="2.11、函数"></a>2.11、函数</h2><h3 id="2-11-1、概述"><a href="#2-11-1、概述" class="headerlink" title="2.11.1、概述"></a>2.11.1、概述</h3><p>函数是由一连串的子程序（语句的集合）所组成的，可以被外部程序调用，向函数传递参数之后，函数可以返回一定的值。</p><p>通常情况下，JavaScript代码是自上而下执行的，不过函数体内部的代码则不是这样。如果只是对函数进行了声明，其中的代码并不会执行，只有在调用函数时才会执行函数体内部的代码。</p><p>这里要注意的是JavaScript中的函数也是一个对象，使用typeof检查一个函数对象时，会返回function。</p><h3 id="2-11-2、函数创建"><a href="#2-11-2、函数创建" class="headerlink" title="2.11.2、函数创建"></a>2.11.2、函数创建</h3><ul><li><p>使用 函数对象 来创建一个函数（几乎不用） 语法格式： var 函数名 = new Function(“执行语句”); 示例代码： var fun = new Function(“console.log(‘这是我的第一个函数’);”);  </p></li><li><p>使用 函数声明 来创建一个函数（比较常用） 语法格式： <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">[</span>形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">…</span><span class="token punctuation">,</span>形参<span class="token constant">N</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><p><!-- -->&lt;/span&gt;<br>语句<span class="token operator">…</span><br><span class="token punctuation">&#125;</span><br>&lt;/code&gt;&lt;/pre&gt; 示例代码： <pre><code class="prism language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</p><p><!-- -->&lt;/span&gt;<br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">“这是我的第二个函数”</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span><br>&lt;/code&gt;&lt;/pre&gt;  </p></li><li><p>使用 函数表达式 来创建一个函数（比较常用） 语法格式： <pre><code class="prism language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">函数名</span>  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">[</span>形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">…</span><span class="token punctuation">,</span>形参<span class="token constant">N</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><p><!-- -->&lt;/span&gt;<br>语句<span class="token operator">…</span><span class="token punctuation">.</span><br><span class="token punctuation">&#125;</span><br>&lt;/code&gt;&lt;/pre&gt; 示例代码： <pre><code class="prism language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">fun</span>  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><p><!-- -->&lt;/span&gt;<br>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">“这是我的第三个函数”</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span><br>&lt;/code&gt;&lt;/pre&gt; </p></li></ul><h3 id="2-11-3、函数调用"><a href="#2-11-3、函数调用" class="headerlink" title="2.11.3、函数调用"></a>2.11.3、函数调用</h3><ul><li><p>对于无参函数调用： <pre><code class="prism language-javascript"><span class="token comment">// 函数声明</span><br><span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><p> <!-- -->&lt;/span&gt;<br> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">“哈哈，我执行啦！”</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span></p></li></ul><p><span class="token comment">// 函数调用</span><br><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>&lt;/code&gt;&lt;/pre&gt;  </p><ul><li><p>对于有参函数调用： <pre><code class="prism language-javascript"><span class="token comment">// 函数声明</span><br><span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><p> <!-- -->&lt;/span&gt;<br> <span class="token keyword">var</span> result <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><br> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">“num1 + num2 = “</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span></p></li></ul><p><span class="token comment">// 函数调用</span><br><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>&lt;/code&gt;&lt;/pre&gt; </p><h3 id="2-11-4、函数参数"><a href="#2-11-4、函数参数" class="headerlink" title="2.11.4、函数参数"></a>2.11.4、函数参数</h3><ul><li>JS中的所有的参数传递都是按值传递的，也就是说把函数外部的值赋值给函数内部的参数，就和把值从一个变量赋值给另一个变量是一样的，在调用函数时，可以在()中指定实参（实际参数），实参将会赋值给函数中对应的形参 </li><li>调用函数时，解析器不会检查实参的类型，所以要注意，是否有可能会接收到非法的参数，如果有可能，则需要对参数进行类型的检查，函数的实参可以是任意的数据类型 </li><li>调用函数时，解析器也不会检查实参的数量，多余实参不会被赋值，如果实参的数量少于形参的数量，则没有对应实参的形参将是undefined</li></ul><h3 id="2-11-5、函数返回值"><a href="#2-11-5、函数返回值" class="headerlink" title="2.11.5、函数返回值"></a>2.11.5、函数返回值</h3><p>可以使用 return 来设置函数的返回值，return后的值将会作为函数的执行结果返回，可以定义一个变量，来接收该结果。</p><blockquote><p>注意：在函数中return后的语句都不会执行，如果return语句后不跟任何值就相当于返回一个undefined，如果函数中不写return，则也会返回undefined，return后可以跟任意类型的值</p></blockquote><p>语法格式：return 值</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">sum</span><span class="params">(num1, num2)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> sum(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><h3 id="2-11-6、嵌套函数"><a href="#2-11-6、嵌套函数" class="headerlink" title="2.11.6、嵌套函数"></a>2.11.6、嵌套函数</h3><p>嵌套函数：在函数中声明的函数就是嵌套函数，嵌套函数只能在当前函数中可以访问，在当前函数外无法访问。</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">fu</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    function <span class="title function_">zi</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我是儿子&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    zi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fu();</span><br></pre></td></tr></table></figure><h3 id="2-11-7、匿名函数"><a href="#2-11-7、匿名函数" class="headerlink" title="2.11.7、匿名函数"></a>2.11.7、匿名函数</h3><p>匿名函数：没有名字的函数就是匿名函数，它可以让一个变量来接收，也就是用 “函数表达式” 方式创建和接收。</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">fun</span> <span class="operator">=</span> function () &#123;</span><br><span class="line">   </span><br><span class="line">    alert(<span class="string">&quot;我是一个匿名函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><h3 id="2-11-8、立即执行函数"><a href="#2-11-8、立即执行函数" class="headerlink" title="2.11.8、立即执行函数"></a>2.11.8、立即执行函数</h3><p>立即执行函数：函数定义完，立即被调用，这种函数叫做立即执行函数，立即执行函数往往只会执行一次。</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">   </span><br><span class="line">    alert(<span class="string">&quot;我是一个匿名函数&quot;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="2-11-9、对象中的函数"><a href="#2-11-9、对象中的函数" class="headerlink" title="2.11.9、对象中的函数"></a>2.11.9、对象中的函数</h3><p>对象的属性值可以是任何的数据类型，也可以是个函数。</p><p>如果一个函数作为一个对象的属性保存，那么我们称这个函数是这个对象的方法，调用这个函数就说调用对象的方法（method）。</p><blockquote><p>注意：方法和函数只是名称上的区别，没有其它别的区别</p></blockquote><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">person</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    sayHello: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(name + <span class="string">&quot; hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.sayHello();</span><br></pre></td></tr></table></figure><h3 id="2-11-10、this对象"><a href="#2-11-10、this对象" class="headerlink" title="2.11.10、this对象"></a>2.11.10、this对象</h3><p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是this，this指向的是一个对象，这个对象我们称为函数执行的上下文对象，根据函数的调用方式的不同，this会指向不同的对象</p><ul><li>以函数的形式调用时，this永远都是window </li><li>以方法的形式调用时，this就是调用方法的那个对象</li></ul><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个全局变量name</span></span><br><span class="line"><span class="type">var</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;全局变量name&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个函数</span></span><br><span class="line">function <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line"><span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    sayName: fun</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们希望调用obj.sayName()时可以输出obj的名字而不是全局变量name的名字</span></span><br><span class="line">obj.sayName();</span><br></pre></td></tr></table></figure><h2 id="2-12、对象进阶"><a href="#2-12、对象进阶" class="headerlink" title="2.12、对象进阶"></a>2.12、对象进阶</h2><h3 id="2-12-1、用工厂方法创建对象"><a href="#2-12-1、用工厂方法创建对象" class="headerlink" title="2.12.1、用工厂方法创建对象"></a>2.12.1、用工厂方法创建对象</h3><p>我们之前已经学习了如何创建一个对象，那我们要是想要创建多个对象又该怎么办？聪明的同学可能会说，直接在写几个对象不就好了吗？比如下边的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">person1</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    sayName: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">person2</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line">    age: <span class="number">19</span>,</span><br><span class="line">    sayName: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">person3</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;沙和尚&quot;</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    sayName: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(person1);</span><br><span class="line">console.log(person2);</span><br><span class="line">console.log(person3);</span><br></pre></td></tr></table></figure><p>的确，上述代码确实可以创建多个对象，但是，这样的解决方案真的好吗？对于少量对象可能使用，我们假设说，要用循环创建1000个对象，那你这种办法似乎就没用了，我们可以这么做，如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用工厂模式创建对象</span></span><br><span class="line">function <span class="title function_">createPerson</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 创建新的对象</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="comment">// 设置对象属性</span></span><br><span class="line">    obj.name = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line">    obj.age = <span class="number">18</span>;</span><br><span class="line">    <span class="comment">// 设置对象方法</span></span><br><span class="line">    obj.sayName = function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回新的对象</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">person1</span> <span class="operator">=</span> createPerson();</span><br><span class="line"><span class="type">var</span> <span class="variable">person2</span> <span class="operator">=</span> createPerson();</span><br><span class="line"><span class="type">var</span> <span class="variable">person3</span> <span class="operator">=</span> createPerson();</span><br><span class="line"></span><br><span class="line">console.log(person1);</span><br><span class="line">console.log(person2);</span><br><span class="line">console.log(person3);</span><br></pre></td></tr></table></figure><p>上述代码看起来更加简洁，但是你会发现每一个人都是孙悟空，我们要是想要给每一个人不同的属性值，请参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用工厂模式创建对象</span></span><br><span class="line">function <span class="title function_">createPerson</span><span class="params">(name, age)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 创建新的对象</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="comment">// 设置对象属性</span></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    <span class="comment">// 设置对象方法</span></span><br><span class="line">    obj.sayName = function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回新的对象</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">person1</span> <span class="operator">=</span> createPerson(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">person2</span> <span class="operator">=</span> createPerson(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">person3</span> <span class="operator">=</span> createPerson(<span class="string">&quot;沙和尚&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">console.log(person1);</span><br><span class="line">console.log(person2);</span><br><span class="line">console.log(person3);</span><br></pre></td></tr></table></figure><p>现在再看上述代码，发现好像已经完美的解决了创建多个对象的难题，那我们是不是可以用循环批量创建1000个对象了呢？那我们就来试试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用工厂模式创建对象</span></span><br><span class="line">function <span class="title function_">createPerson</span><span class="params">(name, age)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 创建新的对象</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="comment">// 设置对象属性</span></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    <span class="comment">// 设置对象方法</span></span><br><span class="line">    obj.sayName = function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回新的对象</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">var</span> <span class="variable">person</span> <span class="operator">=</span> createPerson(<span class="string">&quot;person&quot;</span> + i, <span class="number">18</span>);</span><br><span class="line">    console.log(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就实现了批量创建对象的功能，至于对象的名称和年龄，我们可以通过名称数组和年龄数组来获取，但这并不是我们本小节的重点，我们就忽略了。</p><h3 id="2-12-2、用构造函数创建对象"><a href="#2-12-2、用构造函数创建对象" class="headerlink" title="2.12.2、用构造函数创建对象"></a>2.12.2、用构造函数创建对象</h3><p>在前一节中，我们学会了使用工厂模式创建对象，但是，你会发现我们所创建的对象类型都是Object，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用工厂模式创建对象</span></span><br><span class="line">function <span class="title function_">createPerson</span><span class="params">(name, age)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 创建新的对象</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="comment">// 设置对象属性</span></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    <span class="comment">// 设置对象方法</span></span><br><span class="line">    obj.sayName = function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回新的对象</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">var</span> <span class="variable">person</span> <span class="operator">=</span> createPerson(<span class="string">&quot;person&quot;</span> + i, <span class="number">18</span>);</span><br><span class="line">    console.log(typeof person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5c87b435343a519cbd7badefc46dbeb2.png" alt="img"></p><p>那这有问题吗？看起来有，看起来好像又没有，每创建一个都是对象，但是在实际生活中，人应该是一个确定的类别，属于人类，对象是一个笼统的称呼，万物皆对象，它并不能确切的指明当前对象是人类，那我们要是既想实现创建对象的功能，同时又能明确所创建出来的对象是人类，那么似乎问题就得到了解决，这就用到了构造函数，每一个构造函数你都可以理解为一个类别，用构造函数所创建的对象我们也成为类的实例，那我们来看看是如何做的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用构造函数来创建对象</span></span><br><span class="line">function <span class="title function_">Person</span><span class="params">(name, age)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 设置对象的属性</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="comment">// 设置对象的方法</span></span><br><span class="line">    <span class="built_in">this</span>.sayName = function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">person3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;沙和尚&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">console.log(person1);</span><br><span class="line">console.log(person2);</span><br><span class="line">console.log(person3);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7705f04f8327430a55a646c735cd6e33.png" alt="img"></p><p>那这构造函数到底是什么呢？我来解释一下：</p><p>构造函数：构造函数就是一个普通的函数，创建方式和普通函数没有区别，不同的是构造函数习惯上首字母大写，构造函数和普通函数的还有一个区别就是调用方式的不同，普通函数是直接调用，而构造函数需要使用new关键字来调用。</p><p>那构造函数是怎么执行创建对象的过程呢？我再来解释一下：</p><ol><li>调用构造函数，它会立刻创建一个新的对象 </li><li>将新建的对象设置为函数中this，<strong>在构造函数中可以使用this来引用新建的对象</strong> </li><li>逐行执行函数中的代码 </li><li>将新建的对象作为返回值返回</li></ol><p>你会发现构造函数有点类似工厂方法，但是它创建对象和返回对象都给我们隐藏了，使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个类。我们将通过一个构造函数创建的对象，称为是该类的实例。</p><p>现在，this又出现了一种新的情况，为了不让大家混淆，我再来梳理一下：</p><ul><li>当以函数的形式调用时，this是window </li><li>当以方法的形式调用时，谁调用方法this就是谁 </li><li>当以构造函数的形式调用时，this就是新创建的那个对象</li></ul><p>我们可以使用 instanceof 运算符检查一个对象是否是一个类的实例，它返回true或false</p><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象 <span class="keyword">instanceof</span> 构造函数</span><br></pre></td></tr></table></figure><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(person1 <span class="keyword">instanceof</span> Person);</span><br></pre></td></tr></table></figure><h3 id="2-12-3、原型"><a href="#2-12-3、原型" class="headerlink" title="2.12.3、原型"></a>2.12.3、原型</h3><p>在前一节中，我们学习了使用构造函数的方式进行创建对象，但是，它还是存在一个问题，那就是，你会发现，每一个对象的属性不一样这是一定的，但是它的方法似乎好像是一样的，如果我创建1000个对象，那岂不是内存中就有1000个相同的方法，那要是有10000个，那对内存的浪费可不是一点半点的，我们有没有什么好的办法解决，没错，我们可以把函数抽取出来，作为全局函数，在构造函数中直接引用就可以了，上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用构造函数来创建对象</span></span><br><span class="line">function <span class="title function_">Person</span><span class="params">(name, age)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 设置对象的属性</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="comment">// 设置对象的方法</span></span><br><span class="line">    <span class="built_in">this</span>.sayName = sayName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽取方法为全局函数</span></span><br><span class="line">function <span class="title function_">sayName</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">person3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;沙和尚&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">person1.sayName();</span><br><span class="line">person2.sayName();</span><br><span class="line">person3.sayName();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/05f5cdbe83821c5ab8262a4b0d3096fe.png" alt="img"></p><p>但是，在全局作用域中定义函数却不是一个好的办法，为什么呢？因为，如果要是涉及到多人协作开发一个项目，别人也有可能叫sayName这个方法，这样在工程合并的时候就会导致一系列的问题，污染全局作用域，那该怎么办呢？有没有一种方法，我只在Person这个类的全局对象中添加一个函数，然后在类中引用？答案肯定是有的，这就需要原型对象了，我们先看看怎么做的，然后在详细讲解原型对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用构造函数来创建对象</span></span><br><span class="line">function <span class="title function_">Person</span><span class="params">(name, age)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 设置对象的属性</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Person类的原型对象中添加方法</span></span><br><span class="line">Person.prototype.sayName = function() &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">person3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;沙和尚&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">person1.sayName();</span><br><span class="line">person2.sayName();</span><br><span class="line">person3.sayName();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7a39d722ae8c06f66b47748bfc3bfa9b.png" alt="img"></p><p>那原型（prototype）到底是什么呢？</p><p>我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype，这个属性对应着一个对象，这个对象就是我们所谓的原型对象，即显式原型，原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中共有的内容，统一设置到原型对象中。</p><p>如果函数作为普通函数调用prototype没有任何作用，当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，我们可以通过<strong>proto</strong>（隐式原型）来访问该属性。当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。</p><p>以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中，这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了。</p><h3 id="2-12-4、原型链"><a href="#2-12-4、原型链" class="headerlink" title="2.12.4、原型链"></a>2.12.4、原型链</h3><p>访问一个对象的属性时，先在自身属性中查找，找到返回， 如果没有，再沿着<strong>proto</strong>这条链向上查找，找到返回，如果最终没找到，返回undefined，这就是原型链，又称隐式原型链，它的作用就是查找对象的属性(方法)。</p><p>我们使用一张图来梳理一下上一节原型案例的代码：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/34f5a7f9ab460f148c64a66e8632634b.png" alt="img"></p><blockquote><p>注意：Object对象是所有对象的祖宗，Object的原型对象指向为null，也就是没有原型对象</p></blockquote><h3 id="2-12-5、toString方法"><a href="#2-12-5、toString方法" class="headerlink" title="2.12.5、toString方法"></a>2.12.5、toString方法</h3><p>toString()函数用于将当前对象以字符串的形式返回。该方法属于Object对象，由于所有的对象都”继承”了Object的对象实例，因此几乎所有的实例对象都可以使用该方法，所有主流浏览器均支持该函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用构造函数来创建对象</span></span><br><span class="line">function <span class="title function_">Person</span><span class="params">(name, age)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 设置对象的属性</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象的一个实例对象</span></span><br><span class="line"><span class="type">var</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line">console.log(p.toString());</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/bf8a0035d661c976f986b7bfa8f62bad.png" alt="img"></p><p>JavaScript的许多内置对象都重写了该函数，以实现更适合自身的功能需要。</p><p>注意：这里我们只是演示toString()方法，其它的一些没有讲到的知识后边会将，我们只看效果就可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">console.log(str.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字</span></span><br><span class="line"><span class="type">var</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">15.26540</span>;</span><br><span class="line">console.log(num.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔</span></span><br><span class="line"><span class="type">var</span> <span class="variable">bool</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">console.log(bool.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> &#123;</span><br><span class="line">   name: <span class="string">&quot;张三&quot;</span>, age: <span class="number">18</span>&#125;;</span><br><span class="line">console.log(obj.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="type">var</span> <span class="variable">array</span> <span class="operator">=</span> [<span class="string">&quot;CodePlayer&quot;</span>, <span class="literal">true</span>, <span class="number">12</span>, -<span class="number">5</span>];</span><br><span class="line">console.log(array.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期</span></span><br><span class="line"><span class="type">var</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2013</span>, <span class="number">7</span>, <span class="number">18</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">59</span>, <span class="number">230</span>);</span><br><span class="line">console.log(date.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="type">var</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;自定义错误信息&quot;</span>);</span><br><span class="line">console.log(error.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line">console.log(Function.toString());</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/203f4736a13382fc30ab2054631445b5.png" alt="img"></p><h3 id="2-12-6、hasOwnProperty方法"><a href="#2-12-6、hasOwnProperty方法" class="headerlink" title="2.12.6、hasOwnProperty方法"></a>2.12.6、hasOwnProperty方法</h3><p>前边章节我们学过，如何遍历一个对象所有的属性和值，那我们要是判断当前对象是否包含指定的属性或方法可以使用 in 运算符来检查，如下代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创造一个构造函数</span></span><br><span class="line">function <span class="title function_">MyClass</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向MyClass的原型中添加一个name属性</span></span><br><span class="line">MyClass.prototype.name = <span class="string">&quot;我是原型中的名字&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个MyClass的实例</span></span><br><span class="line"><span class="type">var</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">mc.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true</span></span><br><span class="line">console.log(<span class="string">&quot;age&quot;</span> in mc);</span><br><span class="line">console.log(<span class="string">&quot;name&quot;</span> in mc);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/55a9e1b3a9e36a0e344877c964e436e4.png" alt="img"></p><p>如果我只想要检查自身对象是否含有某个方法或属性，我们可以使用Object的hasOwnProperty()方法，它返回一个布尔值，判断对象是否包含特定的自身（非继承）属性。如下代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创造一个构造函数</span></span><br><span class="line">function <span class="title function_">MyClass</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向MyClass的原型中添加一个name属性</span></span><br><span class="line">MyClass.prototype.name = <span class="string">&quot;我是原型中的名字&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个MyClass的实例</span></span><br><span class="line"><span class="type">var</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">mc.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true</span></span><br><span class="line">console.log(<span class="string">&quot;age&quot;</span> in mc);</span><br><span class="line">console.log(<span class="string">&quot;name&quot;</span> in mc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性，使用该方法只有当对象自身中含有属性时，才会返回true</span></span><br><span class="line">console.log(mc.hasOwnProperty(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">console.log(mc.hasOwnProperty(<span class="string">&quot;name&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/dd0f3747a1ca02da2d727f344cb2372f.png" alt="img"></p><p>有同学可能会有疑问，我的这个MyClass类对象中没有hasOwnProperty这个方法啊，它是哪来的？对了，就是原型中的，在执行方法的时候它会通过原型链进行查找，这个方法是Object的特有方法，如下代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创造一个构造函数</span></span><br><span class="line">function <span class="title function_">MyClass</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向MyClass的原型中添加一个name属性</span></span><br><span class="line">MyClass.prototype.name = <span class="string">&quot;我是原型中的名字&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个MyClass的实例</span></span><br><span class="line"><span class="type">var</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">mc.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查当前对象</span></span><br><span class="line">console.log(mc.hasOwnProperty(<span class="string">&quot;hasOwnProperty&quot;</span>));</span><br><span class="line"><span class="comment">// 检查当前对象的原型对象</span></span><br><span class="line">console.log(mc.__proto__.hasOwnProperty(<span class="string">&quot;hasOwnProperty&quot;</span>));</span><br><span class="line"><span class="comment">// 检查当前对象的原型对象的原型对象</span></span><br><span class="line">console.log(mc.__proto__.__proto__.hasOwnProperty(<span class="string">&quot;hasOwnProperty&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9ba1a18eb6768ea310dbf0c77b72dde0.png" alt="img"></p><h3 id="2-12-7、对象继承"><a href="#2-12-7、对象继承" class="headerlink" title="2.12.7、对象继承"></a>2.12.7、对象继承</h3><p>前边我们一直在说继承，那什么是继承？它有什么作用？如何实现继承？将会是本章节探讨的问题。</p><p>面向对象的语言有一个标志，那就是它们都有类的概念，而通过类可以创建任意多个具有相同属性和方法的对象。但是在JavaScript中没有类的概念，前边我们说所的类只是我们自己这么叫，大家要清楚。因此它的对象也与基于类的对象有所不同。实际上，JavaScript语言是通过一种叫做原型（prototype）的方式来实现面向对象编程的。</p><p>那实现继承有一个最大的好处就是子对象可以使用父对象的属性和方法，从而简化了一些代码。</p><p>JavaScript有六种非常经典的对象继承方式，但是我们只学习前三种：</p><ul><li><strong>原型链继承</strong> </li><li><strong>借用构造函数继承</strong> </li><li><strong>组合继承（重要）</strong> </li><li>原型式继承 </li><li>寄生式继承 </li><li>寄生组合式继承</li></ul><h4 id="2-12-7-1、原型链继承"><a href="#2-12-7-1、原型链继承" class="headerlink" title="2.12.7.1、原型链继承"></a>2.12.7.1、原型链继承</h4><p><strong>核心思想：</strong> 子类型的原型为父类型的一个实例对象</p><p><strong>基本做法：</strong></p><ol><li>定义父类型构造函数 </li><li>给父类型的原型添加方法 </li><li>定义子类型的构造函数 </li><li>创建父类型的对象赋值给子类型的原型 </li><li>将子类型原型的构造属性设置为子类型 </li><li>给子类型原型添加方法 </li><li>创建子类型的对象: 可以调用父类型的方法</li></ol><p><strong>案例演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类型构造函数</span></span><br><span class="line">function <span class="title function_">SupperType</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">this</span>.supProp = <span class="string">&#x27;Supper property&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给父类型的原型添加方法</span></span><br><span class="line">SupperType.prototype.showSupperProp = function () &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(<span class="built_in">this</span>.supProp);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子类型的构造函数</span></span><br><span class="line">function <span class="title function_">SubType</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">this</span>.subProp = <span class="string">&#x27;Sub property&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建父类型的对象赋值给子类型的原型</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> <span class="title class_">SupperType</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将子类型原型的构造属性设置为子类型</span></span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给子类型原型添加方法</span></span><br><span class="line">SubType.prototype.showSubProp = function () &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(<span class="built_in">this</span>.subProp)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建子类型的对象: 可以调用父类型的方法</span></span><br><span class="line"><span class="type">var</span> <span class="variable">subType</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line">subType.showSupperProp();</span><br><span class="line">subType.showSubProp();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/bac6a9902796a74b61ed2fd9e959fa44.png" alt="img"></p><p><strong>缺点描述：</strong></p><ol><li>原型链继承多个实例的引用类型属性指向相同，一个实例修改了原型属性，另一个实例的原型属性也会被修改 </li><li>不能传递参数 </li><li>继承单一</li></ol><h4 id="2-12-7-2、借用构造函数继承"><a href="#2-12-7-2、借用构造函数继承" class="headerlink" title="2.12.7.2、借用构造函数继承"></a>2.12.7.2、借用构造函数继承</h4><p><strong>核心思想：</strong> 使用.call()和.apply()将父类构造函数引入子类函数，使用父类的构造函数来增强子类实例，等同于复制父类的实例给子类</p><p><strong>基本做法：</strong></p><ol><li>定义父类型构造函数 </li><li>定义子类型的构造函数 </li><li>给子类型的原型添加方法 </li><li>创建子类型的对象然后调用</li></ol><p><strong>案例演示：</strong></p><p>借用构造函数继承的重点就在于SuperType<strong>.call(this, name)</strong>，调用了SuperType构造函数，这样，SubType的每个实例都会将SuperType中的属性复制一份。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类型构造函数</span></span><br><span class="line">function <span class="title function_">SuperType</span><span class="params">(name)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.showSupperName = function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子类型的构造函数</span></span><br><span class="line">function <span class="title function_">SubType</span><span class="params">(name, age)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 在子类型中调用call方法继承自SuperType</span></span><br><span class="line">    SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给子类型的原型添加方法</span></span><br><span class="line">SubType.prototype.showSubName = function () &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建子类型的对象然后调用</span></span><br><span class="line"><span class="type">var</span> <span class="variable">subType</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">20</span>);</span><br><span class="line">subType.showSupperName();</span><br><span class="line">subType.showSubName();</span><br><span class="line">console.log(subType.name);</span><br><span class="line">console.log(subType.age);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f463d70717ecb12cd6885ae465e21e62.png" alt="img"></p><p><strong>缺点描述：</strong></p><ol><li>只能继承父类的实例属性和方法，不能继承原型属性和方法 </li><li>无法实现构造函数的复用，每个子类都有父类实例函数的副本，影响性能，代码会臃肿</li></ol><h4 id="2-12-7-3、组合继承"><a href="#2-12-7-3、组合继承" class="headerlink" title="2.12.7.3、组合继承"></a>2.12.7.3、组合继承</h4><p><strong>核心思想：</strong> 原型链+借用构造函数的组合继承</p><p><strong>基本做法：</strong></p><ol><li>利用原型链实现对父类型对象的方法继承 </li><li>利用super()借用父类型构建函数初始化相同属性</li></ol><p><strong>案例演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">Person</span><span class="params">(name, age)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.setName = function (name) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">Student</span><span class="params">(name, age, price)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    Person.call(<span class="built_in">this</span>, name, age); <span class="comment">// 为了得到父类型的实例属性和方法</span></span><br><span class="line">    <span class="built_in">this</span>.price = price; <span class="comment">// 添加子类型私有的属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype = <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">// 为了得到父类型的原型属性和方法</span></span><br><span class="line">Student.prototype.constructor = Student; <span class="comment">// 修正constructor属性指向</span></span><br><span class="line">Student.prototype.setPrice = function (price) &#123;</span><br><span class="line">    <span class="comment">// 添加子类型私有的方法 </span></span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">24</span>, <span class="number">15000</span>);</span><br><span class="line">console.log(s.name, s.age, s.price);</span><br><span class="line">s.setName(<span class="string">&quot;猪八戒&quot;</span>);</span><br><span class="line">s.setPrice(<span class="number">16000</span>);</span><br><span class="line">console.log(s.name, s.age, s.price);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/14c2cf0500c8dbb4a4584180dc4da6eb.png" alt="img"></p><p><strong>缺点描述：</strong></p><ol><li>父类中的实例属性和方法既存在于子类的实例中，又存在于子类的原型中，不过仅是内存占用，因此，在使用子类创建实例对象时，其原型中会存在<strong>两份相同的属性和方法</strong> 。</li></ol><blockquote><p>注意：<strong>这个方法是JavaScript中最常用的继承模式</strong>。</p></blockquote><h3 id="2-12-8、垃圾回收"><a href="#2-12-8、垃圾回收" class="headerlink" title="2.12.8、垃圾回收"></a>2.12.8、垃圾回收</h3><p>垃圾回收（GC）：就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾，这些垃圾积攒过多以后，会导致程序运行的速度过慢，所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾。</p><p>当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须进行清理。</p><p>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作，我们需要做的只是要将不再使用的对象设置null即可。</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用构造函数来创建对象</span></span><br><span class="line">function <span class="title function_">Person</span><span class="params">(name, age)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 设置对象的属性</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">person3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;沙和尚&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">person1 = <span class="literal">null</span>;</span><br><span class="line">person2 = <span class="literal">null</span>;</span><br><span class="line">person3 = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="2-13、作用域"><a href="#2-13、作用域" class="headerlink" title="2.13、作用域"></a>2.13、作用域</h2><p>作用域指一个变量的作用的范围，在JS中一共有两种作用域：</p><ul><li>全局作用域 </li><li>函数作用域</li></ul><h3 id="2-13-1、声明提前"><a href="#2-13-1、声明提前" class="headerlink" title="2.13.1、声明提前"></a>2.13.1、声明提前</h3><ul><li>变量的声明提前：使用var关键字声明的变量，会在所有的代码执行之前被声明（但是不会赋值），但是如果声明变量时不使用var关键字，则变量不会被声明提前 </li><li>函数的声明提前：使用函数声明形式创建的函数 function 函数名()&#123;&#125; ，它会在所有的代码执行之前就被创建，所以我们可以在函数声明前来调用函数。使用函数表达式创建的函数，不会被声明提前，所以不能在声明前调用</li></ul><h3 id="2-13-2、作用域"><a href="#2-13-2、作用域" class="headerlink" title="2.13.2、作用域"></a>2.13.2、作用域</h3><h4 id="2-13-2-1、全局作用域"><a href="#2-13-2-1、全局作用域" class="headerlink" title="2.13.2.1、全局作用域"></a>2.13.2.1、全局作用域</h4><ul><li>直接编写在script标签中的JavaScript代码，都在全局作用域 </li><li>全局作用域在页面打开时创建，在页面关闭时销毁 </li><li>在全局作用域中有一个全局对象window，它代表的是一个浏览器的窗口，它由浏览器创建，我们可以直接使用 </li><li><p>在全局作用域中： </p><ul> - 创建的变量都会作为window对象的属性保存 - 创建的函数都会作为window对象的方法保存 </ul>  </li><li><p>全局作用域中的变量都是全局变量，在页面的任意的部分都可以访问的到</p></li></ul><h4 id="2-13-2-2、函数作用域"><a href="#2-13-2-2、函数作用域" class="headerlink" title="2.13.2.2、函数作用域"></a>2.13.2.2、函数作用域</h4><ul><li>调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁 </li><li>每调用一次函数就会创建一个新的函数作用域，它们之间是互相独立的 </li><li>在函数作用域中可以访问到全局作用域的变量，在全局作用域中无法访问到函数作用域的变量 </li><li>在函数中要访问全局变量可以使用window对象 </li><li>作用域链：当在函数作用域操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用，如果没有则向上一级作用域中寻找，直到找到全局作用域，如果全局作用域中依然没有找到，则会报错ReferenceError</li></ul><h3 id="2-13-3、作用域链"><a href="#2-13-3、作用域链" class="headerlink" title="2.13.3、作用域链"></a>2.13.3、作用域链</h3><p>多个上下级关系的作用域形成的链，它的方向是从下向上的(从内到外)，查找变量时就是沿着作用域链来查找的。</p><p>查找一个变量的查找规则：</p><ol><li>在当前作用域下的执行上下文中查找对应的属性，如果有直接返回，否则进入2 </li><li>在上一级作用域的执行上下文中查找对应的属性，如果有直接返回，否则进入3 </li><li>再次执行2的相同操作，直到全局作用域，如果还找不到就抛出找不到的ReferenceError异常</li></ol><h2 id="3-1、数组对象"><a href="#3-1、数组对象" class="headerlink" title="3.1、数组对象"></a>3.1、数组对象</h2><h3 id="3-1-1、概述"><a href="#3-1-1、概述" class="headerlink" title="3.1.1、概述"></a>3.1.1、概述</h3><p>数组也是对象的一种，数组是一种用于表达有顺序关系的值的集合的语言结构，也就是同类数据元素的有序集合。</p><p>数组的存储性能比普通对象要好，在开发中我们经常使用数组来存储一些数据。但是在JavaScript中是支持数组可以是不同的元素，这跟JavaScript的弱类型有关，此处不用纠结，我们大多数时候都是相同类型元素的集合。数组内的各个值被称作元素，每一个元素都可以通过索引（下标）来快速读取，索引是从零开始的整数。</p><p>使用typeof检查一个数组对象时，会返回object。</p><h3 id="3-1-2、创建数组"><a href="#3-1-2、创建数组" class="headerlink" title="3.1.2、创建数组"></a>3.1.2、创建数组</h3><h4 id="3-1-2-1、使用对象创建"><a href="#3-1-2-1、使用对象创建" class="headerlink" title="3.1.2.1、使用对象创建"></a>3.1.2.1、使用对象创建</h4><ul><li>同类型有序数组创建： var arr = new Array();<br>arr[0] = 1;<br>arr[1] = 2;<br>arr[2] = 3;<br>arr[3] = 4;<br>arr[4] = 5;<br>arr[5] = 6;<br>arr[6] = 7;<br>arr[7] = 8;<br>arr[8] = 9;  </li><li>不同类型有序数组创建： var arr = new Array();<br>arr[0] = 1;<br>arr[1] = “2”;<br>arr[2] = 3;<br>arr[3] = “4”;<br>arr[4] = 5;<br>arr[5] = “6”;<br>arr[6] = 7;<br>arr[7] = “8”;<br>arr[8] = 9; </li></ul><h4 id="3-1-2-2、使用字面量创建"><a href="#3-1-2-2、使用字面量创建" class="headerlink" title="3.1.2.2、使用字面量创建"></a>3.1.2.2、使用字面量创建</h4><ul><li>同类型有序数组创建： var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];  </li><li>不同类型有序数组创建： var arr = [1, “2”, 3, “4”, 5, “6”, 7, “8”, 9]; </li></ul><h3 id="3-1-3、遍历数组"><a href="#3-1-3、遍历数组" class="headerlink" title="3.1.3、遍历数组"></a>3.1.3、遍历数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-4、数组属性"><a href="#3-1-4、数组属性" class="headerlink" title="3.1.4、数组属性"></a>3.1.4、数组属性</h3><p><strong>constructor属性演示：返回创建数组对象的原型函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">console.log(arr.constructor);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/980c0ed39d3282e2b8e77253c8bf098b.png" alt="img"></p><p><strong>length属性演示：设置或返回数组元素的个数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">console.log(arr.length);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d5b5c2bc0e188b9d4feec0c58c69c244.png" alt="img"></p><h3 id="3-1-5、数组方法"><a href="#3-1-5、数组方法" class="headerlink" title="3.1.5、数组方法"></a>3.1.5、数组方法</h3><p><strong>push()方法演示：该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> arr.push(<span class="string">&quot;唐僧&quot;</span>, <span class="string">&quot;蜘蛛精&quot;</span>, <span class="string">&quot;白骨精&quot;</span>, <span class="string">&quot;玉兔精&quot;</span>);</span><br><span class="line">console.log(arr);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7aae1c9934e6bba6de27079ceb77ec36.png" alt="img"></p><p><strong>pop()方法演示：该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> arr.pop();</span><br><span class="line">console.log(arr);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/043cc91f4298568ea371a41dd605ac72.png" alt="img"></p><p><strong>unshift()方法演示：该方法向数组开头添加一个或多个元素，并返回新的数组长度</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> arr.unshift(<span class="string">&quot;牛魔王&quot;</span>, <span class="string">&quot;二郎神&quot;</span>);</span><br><span class="line">console.log(arr);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a5a0ced2f25131ef28b91ce82c35581f.png" alt="img"></p><p><strong>shift()方法演示：该方法可以删除数组的第一个元素，并将被删除的元素作为返回值返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> arr.shift();</span><br><span class="line">console.log(arr);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/dd77a3a74059c9856680794c3b349bab.png" alt="img"></p><p><strong>forEach()方法演示：该方法可以用来遍历数组</strong></p><p>forEach()方法需要一个函数作为参数，像这种函数，由我们创建但是不由我们调用的，我们称为回调函数。数组中有几个元素函数就会执行几次，每次执行时，浏览器会将遍历到的元素，以实参的形式传递进来，我们可以来定义形参，来读取这些内容，浏览器会在回调函数中传递三个参数：</p><ul><li>第一个参数：就是当前正在遍历的元素 </li><li>第二个参数：就是当前正在遍历的元素的索引 </li><li>第三个参数：就是正在遍历的数组</li></ul><blockquote><p>注意：这个方法只支持IE8以上的浏览器，IE8及以下的浏览器均不支持该方法，所以如果需要兼容IE8，则不要使用forEach()，还是使用for循环来遍历数组。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line">arr.forEach(function (value, index, obj) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(value + <span class="string">&quot; #### &quot;</span> + index + <span class="string">&quot; #### &quot;</span> + obj);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/23e5a69cb38d91535b27ab372e689258.png" alt="img"></p><p><strong>slice()方法演示：该方法可以用来从数组提取指定元素，该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</strong></p><p>参数：</p><ul><li>第一个参数：截取开始的位置的索引，包含开始索引 </li><li>第二个参数：截取结束的位置的索引，不包含结束索引，第二个参数可以省略不写，此时会截取从开始索引往后的所有元素</li></ul><blockquote><p>注意：索引可以传递一个负值，如果传递一个负值，则从后往前计算，-1代表倒数第一个，-2代表倒数第二个。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>, <span class="string">&quot;唐僧&quot;</span>, <span class="string">&quot;白骨精&quot;</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> arr.slice(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">console.log(result);</span><br><span class="line">result = arr.slice(<span class="number">3</span>);</span><br><span class="line">console.log(result);</span><br><span class="line">result = arr.slice(<span class="number">1</span>, -<span class="number">2</span>);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/18ad817362706339461665656b5b81bd.png" alt="img"></p><p><strong>splice()方法演示：该方法可以用于删除数组中的指定元素，该方法会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回</strong></p><p>参数：</p><ul><li>第一个参数：表示开始位置的索引 </li><li>第二个参数：表示要删除的元素数量 </li><li>第三个参数及以后参数：可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>, <span class="string">&quot;唐僧&quot;</span>, <span class="string">&quot;白骨精&quot;</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> arr.splice(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">console.log(arr);</span><br><span class="line">console.log(result);</span><br><span class="line">result = arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;牛魔王&quot;</span>, <span class="string">&quot;铁扇公主&quot;</span>, <span class="string">&quot;红孩儿&quot;</span>);</span><br><span class="line">console.log(arr);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/45074ba5bb641f6dc53536e6471f1fd2.png" alt="img"></p><p><strong>concat()方法演示：该方法可以连接两个或多个数组，并将新的数组返回，该方法不会对原数组产生影响</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">arr2</span> <span class="operator">=</span> [<span class="string">&quot;白骨精&quot;</span>, <span class="string">&quot;玉兔精&quot;</span>, <span class="string">&quot;蜘蛛精&quot;</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">arr3</span> <span class="operator">=</span> [<span class="string">&quot;二郎神&quot;</span>, <span class="string">&quot;太上老君&quot;</span>, <span class="string">&quot;玉皇大帝&quot;</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> arr.concat(arr2, arr3, <span class="string">&quot;牛魔王&quot;</span>, <span class="string">&quot;铁扇公主&quot;</span>);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/12c0858ad255003ba9ddd66ebb9a0df2.png" alt="img"></p><p><strong>join()方法演示：该方法可以将数组转换为一个字符串，该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回，在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，如果不指定连接符，则默认使用，作为连接符</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> arr.join(<span class="string">&quot;@-@&quot;</span>);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/891029712402377b772676696ae3ec72.png" alt="img"></p><p><strong>reverse()方法演示：该方法用来反转数组（前边的去后边，后边的去前边），该方法会直接修改原数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e7a4076da2a80e71ea4ce4c6e5010656.png" alt="img"></p><p><strong>sort()方法演示：该方法可以用来对数组中的元素进行排序，也会影响原数组，默认会按照Unicode编码进行排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>];</span><br><span class="line">arr.sort();</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/59057f1ac69677343efe214d0582f5d7.png" alt="img"></p><blockquote><p>注意：即使对于纯数字的数组，使用sort()排序时，也会按照Unicode编码来排序，所以对数字进排序时，可能会得到错误的结果。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr.sort();</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/248ba29f0450aba65c0f1015b35b6fe3.png" alt="img"></p><p>我们可以自己来指定排序的规则，我们可以在sort()添加一个回调函数，来指定排序规则，回调函数中需要定义两个形参，浏览器将会分别使用数组中的元素作为实参去调用回调函数，使用哪个元素调用不确定，但是肯定的是在数组中a一定在b前边，浏览器会根据回调函数的返回值来决定元素的顺序，如下：</p><ul><li>如果返回一个大于0的值，则元素会交换位置 </li><li>如果返回一个小于0的值，则元素位置不变 </li><li>如果返回一个等于0的值，则认为两个元素相等，也不交换位置</li></ul><p>经过上边的规则，我们可以总结下：</p><ul><li>如果需要升序排列，则返回 a-b </li><li>如果需要降序排列，则返回 b-a</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr.sort(function (a, b) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ed84d161d2ae11b8981ea2edae1eabbd.png" alt="img"></p><h2 id="3-2、函数对象"><a href="#3-2、函数对象" class="headerlink" title="3.2、函数对象"></a>3.2、函数对象</h2><h3 id="3-2-1、call-和apply"><a href="#3-2-1、call-和apply" class="headerlink" title="3.2.1、call()和apply()"></a>3.2.1、call()和apply()</h3><p>call()和apply()这两个方法都是函数对象的方法，需要通过函数对象来调用，当对函数调用call()和apply()都会调用函数执行，在调用call()和apply()可以将一个对象指定为第一个参数，此时这个对象将会成为函数执行时的this，call()方法可以将实参在对象之后依次传递，apply()方法需要将实参封装到一个数组中统一传递，如下演示：</p><p><strong>call()方法演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">fun</span><span class="params">(a, b)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">    console.log(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    console.log(<span class="string">&quot;fun = &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">    sayName: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fun(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">fun.call(obj, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9367eeccb7a3dc02fd5827257e5ade96.png" alt="img"></p><blockquote><p>注意：默认fun()函数调用，this指向的是window对象，你可以使用call()调用函数，在调用的时候传入一个对象，这个对象就是this所指向的对象，也就是说，可以自己指定this的指向，然后从第二个参数开始，实参将会依次传递</p></blockquote><p><strong>apply()方法演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">fun</span><span class="params">(a, b)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">    console.log(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    console.log(<span class="string">&quot;fun = &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">    sayName: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fun(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">fun.apply(obj, [<span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/23760ffdfa7792bce72a94e90b62c3f1.png" alt="img"></p><blockquote><p>注意：默认fun()函数调用，this指向的是window对象，你可以使用apply()调用函数，在调用的时候传入一个对象，这个对象就是this所指向的对象，也就是说，可以自己指定this的指向，然后从第二个参数开始，需要制定一个实参数组进行参数传递</p></blockquote><h3 id="3-2-2、this指向"><a href="#3-2-2、this指向" class="headerlink" title="3.2.2、this指向"></a>3.2.2、this指向</h3><ul><li>以函数形式调用时，this永远都是window </li><li>以方法的形式调用时，this是调用方法的对象 </li><li>以构造函数的形式调用时，this是新创建的那个对象 </li><li>使用call和apply调用时，this是传入的那个指定对象</li></ul><h3 id="3-2-3、arguments参数"><a href="#3-2-3、arguments参数" class="headerlink" title="3.2.3、arguments参数"></a>3.2.3、arguments参数</h3><p>在调用函数时，浏览器每次都会传递进两个隐含的参数：</p><ol><li>函数的上下文对象： <strong>this</strong> </li><li>封装实参的对象： <strong>arguments</strong></li></ol><p>this对象我们已经学习过了，那arguments对象是什么呢？</p><p>arguments是一个类数组对象，它也可以通过索引来操作数据，也可以获取长度，在调用函数时，我们所传递的实参都会在arguments中保存，比如：arguments.length 可以用来获取实参的长度，我们即使不定义形参，也可以通过arguments来使用实参，只不过比较麻烦，例如：</p><ul><li>arguments[0]：表示第一个实参 </li><li>arguments[1]：表示第二个实参 </li><li>…</li></ul><p>它里边有一个属性叫做callee，这个属性对应一个函数对象，就是当前正在指向的函数的对象。</p><p><strong>arguments对象演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">fun</span><span class="params">(a, b)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 通过下标获取第一个参数</span></span><br><span class="line">    console.log(arguments[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// 通过下标获取第二个参数</span></span><br><span class="line">    console.log(arguments[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// 获取实参的个数</span></span><br><span class="line">    console.log(arguments.length);</span><br><span class="line">    <span class="comment">// 看看它的函数对象</span></span><br><span class="line">    console.log(arguments.callee);</span><br><span class="line">    console.log(arguments.callee == fun);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3b55a97ff8f86bdbea0bae14b0298a06.png" alt="img"></p><h2 id="3-3、Date对象"><a href="#3-3、Date对象" class="headerlink" title="3.3、Date对象"></a>3.3、Date对象</h2><p>在JavaScript中使用Date对象来表示一个时间，如果直接使用构造函数创建一个Date对象，则会封装为当前代码执行的时间。</p><p><strong>案例演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">console.log(date);</span><br><span class="line"></span><br><span class="line">console.log(date.getFullYear());<span class="comment">//获取当前日期对象的年份(四位数字年份)</span></span><br><span class="line">console.log(date.getMonth());<span class="comment">//获取当前日期对象的月份(0 ~ 11)</span></span><br><span class="line">console.log(date.getDate());<span class="comment">//获取当前日期对象的日数(1 ~ 31)</span></span><br><span class="line">console.log(date.getHours());<span class="comment">//获取当前日期对象的小时(0 ~ 23)</span></span><br><span class="line">console.log(date.getMinutes());<span class="comment">//获取当前日期对象的分钟(0 ~ 59)</span></span><br><span class="line">console.log(date.getSeconds());<span class="comment">//获取当前日期对象的秒钟(0 ~ 59)</span></span><br><span class="line">console.log(date.getMilliseconds());<span class="comment">//获取当前日期对象的毫秒(0 ~ 999)</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ee5fd11e5e77b473d3380597b79a4c29.png" alt="img"></p><p><strong>更多方法：</strong>  <a href="https://www.w3school.com.cn/js/jsref_obj_date.asp">参考网站</a></p><h2 id="3-4、Math对象"><a href="#3-4、Math对象" class="headerlink" title="3.4、Math对象"></a>3.4、Math对象</h2><p>Math和其它的对象不同，它不是一个构造函数，它属于一个工具类不用创建对象，它里边封装了数学运算相关的属性和方法。</p><p><strong>案例演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*固定值*/</span></span><br><span class="line">console.log(<span class="string">&quot;PI = &quot;</span> + Math.PI);</span><br><span class="line">console.log(<span class="string">&quot;E  = &quot;</span> + Math.E);</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">/*正数*/</span></span><br><span class="line">console.log(Math.abs(<span class="number">1</span>));        <span class="comment">//可以用来计算一个数的绝对值</span></span><br><span class="line">console.log(Math.ceil(<span class="number">1.1</span>));     <span class="comment">//可以对一个数进行向上取整，小数位只有有值就自动进1</span></span><br><span class="line">console.log(Math.floor(<span class="number">1.99</span>));   <span class="comment">//可以对一个数进行向下取整，小数部分会被舍掉</span></span><br><span class="line">console.log(Math.round(<span class="number">1.4</span>));    <span class="comment">//可以对一个数进行四舍五入取整</span></span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">/*负数*/</span></span><br><span class="line">console.log(Math.abs(-<span class="number">1</span>));       <span class="comment">//可以用来计算一个数的绝对值</span></span><br><span class="line">console.log(Math.ceil(-<span class="number">1.1</span>));    <span class="comment">//可以对一个数进行向上取整，小数部分会被舍掉</span></span><br><span class="line">console.log(Math.floor(-<span class="number">1.99</span>));  <span class="comment">//可以对一个数进行向下取整，小数位只有有值就自动进1</span></span><br><span class="line">console.log(Math.round(-<span class="number">1.4</span>));   <span class="comment">//可以对一个数进行四舍五入取整</span></span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">/*随机数*/</span></span><br><span class="line"><span class="comment">//Math.random()：可以用来生成一个0-1之间的随机数</span></span><br><span class="line"><span class="comment">//生成一个0-x之间的随机数：Math.round(Math.random()*x)</span></span><br><span class="line"><span class="comment">//生成一个x-y之间的随机数：Math.round(Math.random()*(y-x)+x)</span></span><br><span class="line">console.log(Math.round(Math.random() * <span class="number">10</span>));            <span class="comment">//生成一个0-10之间的随机数</span></span><br><span class="line">console.log(Math.round(Math.random() * (<span class="number">10</span> - <span class="number">1</span>) + <span class="number">1</span>));  <span class="comment">//生成一个1-10之间的随机数</span></span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">/*数学运算*/</span></span><br><span class="line">console.log(Math.pow(<span class="number">12</span>, <span class="number">3</span>));   <span class="comment">//Math.pow(x,y)：返回x的y次幂</span></span><br><span class="line">console.log(Math.sqrt(<span class="number">4</span>));      <span class="comment">//Math.sqrt(x) ：返回x的平方根</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e533a1267ab2c8fe8d2497baa2cb23fb.png" alt="img"></p><p><strong>更多方法：</strong>  <a href="https://www.w3school.com.cn/jsref/jsref_obj_math.asp">参考网站</a></p><h2 id="3-5、String对象"><a href="#3-5、String对象" class="headerlink" title="3.5、String对象"></a>3.5、String对象</h2><h3 id="3-5-1、概述"><a href="#3-5-1、概述" class="headerlink" title="3.5.1、概述"></a>3.5.1、概述</h3><p>在JS中为我们提供了三个包装类，通过这三个包装类可以将基本数据类型的数据转换为对象</p><ul><li>String()：可以将基本数据类型字符串转换为String对象 </li><li>Number()：可以将基本数据类型的数字转换为Number对象 </li><li>Boolean()：可以将基本数据类型的布尔值转换为Boolean对象</li></ul><p>但是注意：我们在实际应用中不会使用基本数据类型的对象，如果使用基本数据类型的对象，在做一些比较时可能会带来一些不可预期的结果，在这一章节中，我们重点介绍String()对象的属性和方法。</p><h3 id="3-5-2、字符串属性"><a href="#3-5-2、字符串属性" class="headerlink" title="3.5.2、字符串属性"></a>3.5.2、字符串属性</h3><p><strong>constructor属性演示：返回创建字符串对象的原型函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line">console.log(str.constructor);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/96b81bd4968fcb14ad0575f7d55f1010.png" alt="img"></p><p><strong>length属性演示：可以用来获取字符串的长度</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line">console.log(str.length);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c0f40802f9a0e11f45574f494c15381c.png" alt="img"></p><h3 id="3-5-3、字符串方法"><a href="#3-5-3、字符串方法" class="headerlink" title="3.5.3、字符串方法"></a>3.5.3、字符串方法</h3><p><strong>charAt()方法演示：该方法可以根据索引获取指定位置的字符</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line">console.log(str.charAt(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/762781eebb3617228550594503fc4316.png" alt="img"></p><p><strong>charCodeAt()方法演示：该方法获取指定位置字符的字符编码（Unicode编码）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line">console.log(str.charCodeAt(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ad3be8e9fb9508f9c930501166be335d.png" alt="img"></p><p><strong>concat()方法演示：该方法可以用来连接两个或多个字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line">console.log(str.concat(<span class="string">&quot;你好，&quot;</span>, <span class="string">&quot;世界！&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/33dde050d46ecb020361b5c926db7d6b.png" alt="img"></p><p><strong>indexof()方法演示：该方法可以检索一个字符串中是否含有指定内容，如果字符串中含有该内容，则会返回其第一次出现的索引，如果没有找到指定的内容，则返回-1，可以指定一个第二个参数，指定开始查找的位置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line">console.log(str.indexOf(<span class="string">&quot;o&quot;</span>));</span><br><span class="line">console.log(str.indexOf(<span class="string">&quot;o&quot;</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9f06bce7729598899f4b2185ea999f32.png" alt="img"></p><p><strong>lastIndexOf()方法演示：该方法的用法和indexOf()一样，不同的是indexOf是从前往后找，而lastIndexOf是从后往前找，也可以指定开始查找的位置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line">console.log(str.lastIndexOf(<span class="string">&quot;o&quot;</span>));</span><br><span class="line">console.log(str.lastIndexOf(<span class="string">&quot;o&quot;</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><p><strong>slice()方法演示：可以从字符串中截取指定的内容，不会影响原字符串，而是将截取到内容返回</strong></p><p>参数：</p><ul><li>第一个参数：开始位置的索引（包括开始位置） </li><li>第二个参数：结束位置的索引（不包括结束位置），如果省略第二个参数，则会截取到后边所有的</li></ul><blockquote><p>注意：也可以传递一个负数作为参数，负数的话将会从后边计算</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> str.slice(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">console.log(result);</span><br><span class="line">result = str.slice(<span class="number">1</span>);</span><br><span class="line">console.log(result);</span><br><span class="line">result = str.slice(<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/224c58a44617a2687c8a7b1192d0c10d.png" alt="img"></p><p><strong>substring()方法演示：可以用来截取一个字符串，它和slice()类似</strong></p><p>参数：</p><ul><li>第一个参数：开始截取位置的索引（包括开始位置） </li><li>第二个参数：结束位置的索引（不包括结束位置），如果省略第二个参数，则会截取到后边所有的</li></ul><blockquote><p>注意：不同的是这个方法不能接受负值作为参数，如果传递了一个负值，则默认使用0，而且它还自动调整参数的位置，如果第二个参数小于第一个，则自动交换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> str.substring(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">console.log(result);</span><br><span class="line">result = str.substring(<span class="number">1</span>);</span><br><span class="line">console.log(result);</span><br><span class="line">result = str.substring(<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3fd21d1ce6e521c3d809c43cffee13f0.png" alt="img"></p><p><strong>substr()方法演示：该方法用来截取字符串</strong></p><p>参数：</p><ul><li>第一个参数：截取开始位置的索引 </li><li>第二个参数：截取的长度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> str.substr(<span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a2e08ece31ebafc8158b8361b12626ba.png" alt="img"></p><p><strong>split()方法演示：该方法可以将一个字符串拆分为一个数组，需要一个字符串作为参数，将会根据该字符串去拆分数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e3d890ba555951588bb43b629ecf1966.png" alt="img"></p><p><strong>toUpperCase()方法演示：将一个字符串转换为大写并返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> str.toUpperCase();</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/422f98ce2a511c228816c8043c8095b3.png" alt="img"></p><p><strong>toLowerCase()方法演示：将一个字符串转换为小写并返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> str.toLowerCase();</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2dfc8bed3884f0db0360d80d76ce1b05.png" alt="img"></p><h2 id="3-6、RegExp对象"><a href="#3-6、RegExp对象" class="headerlink" title="3.6、RegExp对象"></a>3.6、RegExp对象</h2><h3 id="3-6-1、概述"><a href="#3-6-1、概述" class="headerlink" title="3.6.1、概述"></a>3.6.1、概述</h3><p>正则表达式用于定义一些字符串的规则，计算机可以根据正则表达式，来检查一个字符串是否符合规则，获取将字符串中符合规则的内容提取出来。</p><p>使用typeof检查正则对象，会返回object。</p><h3 id="3-6-2、创建正则对象"><a href="#3-6-2、创建正则对象" class="headerlink" title="3.6.2、创建正则对象"></a>3.6.2、创建正则对象</h3><h4 id="3-6-2-1、使用对象创建"><a href="#3-6-2-1、使用对象创建" class="headerlink" title="3.6.2.1、使用对象创建"></a>3.6.2.1、使用对象创建</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;正则表达式&quot;</span>,<span class="string">&quot;匹配模式&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>匹配模式：</strong></p><ul><li>i：忽略大小写 </li><li>g：全局匹配模式 </li><li>ig：忽略大小写且全局匹配模式</li></ul><p><strong>案例演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个正则表达式可以来检查一个字符串中是否含有a</span></span><br><span class="line"><span class="type">var</span> <span class="variable">reg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Abc&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> reg.test(str);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3de3a4f311d8e818a57dddae72dcd497.png" alt="img"></p><h4 id="3-6-2-2、使用字面量创建"><a href="#3-6-2-2、使用字面量创建" class="headerlink" title="3.6.2.2、使用字面量创建"></a>3.6.2.2、使用字面量创建</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = /正则表达式/匹配模式;</span><br></pre></td></tr></table></figure><p><strong>匹配模式：</strong></p><ul><li>i：忽略大小写 </li><li>g：全局匹配模式 </li><li>m：执行多行匹配</li></ul><blockquote><p>注意：可以为一个正则表达式设置多个匹配模式，且顺序无所谓</p></blockquote><p><strong>案例演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个正则表达式可以来检查一个字符串中是否含有a</span></span><br><span class="line"><span class="type">var</span> <span class="variable">reg</span> <span class="operator">=</span> /a/i;</span><br><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Abc&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> reg.test(str);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3de3a4f311d8e818a57dddae72dcd497.png" alt="img"></p><h3 id="3-6-3、正则进阶"><a href="#3-6-3、正则进阶" class="headerlink" title="3.6.3、正则进阶"></a>3.6.3、正则进阶</h3><p><strong>需求信息：创建一个正则表达式，检查一个字符串中是否有a或b</strong></p><p><strong>语法格式：使用 | 表示或者的意思</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个正则表达式可以来检查一个字符串中是否含有a</span></span><br><span class="line"><span class="type">var</span> <span class="variable">reg</span> <span class="operator">=</span> /a|b|c/;</span><br><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Abc&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> reg.test(str);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c377efe675435e89e278d9a0dc1ff3d3.png" alt="img"></p><p>试想一下，如果我们现在要是想要检查一个字符串是否含有小写字母，那我们是不是可以reg = /a|b|c|d|e|f|g … /;这么写，但是你会发现，好啰嗦啊，怎么这么麻烦呢，有没有一种更简单的方式，答案是肯定的。</p><p><strong>需求信息：创建一个正则表达式，检查一个字符串中是否有字母</strong></p><p><strong>语法格式：[ ] 里的内容也是或的关系</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个正则表达式可以来检查一个字符串中是否含有字母</span></span><br><span class="line"><span class="type">var</span> <span class="variable">reg</span> <span class="operator">=</span> /[A-z]/;</span><br><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Abc&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> reg.test(str);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f1a2578a46f59e6d39637b115f799062.png" alt="img"></p><p><strong>常见组合：</strong></p><ul><li>[a-z]：任意小写字母 </li><li>[A-Z]：任意大写字母 </li><li>[A-z]：任意字母 </li><li>[0-9]：任意数字</li></ul><p><strong>需求信息：创建一个正则表达式，检查一个字符串中是否含有 abc 或 adc 或 aec</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个正则表达式可以来检查一个字符串中是否含有abc或adc或aec</span></span><br><span class="line"><span class="type">var</span> <span class="variable">reg</span> <span class="operator">=</span> /a[bde]c/;</span><br><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> reg.test(str);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p>那现在我们已经学会了判断是否包含，那要是判断除了某些字符序列该咋整，只需要这么写<sup><a href="#fn_字符序列" id="reffn_字符序列">字符序列</a></sup></p><p><strong>常见组合：</strong></p><ul><li><sup><a href="#fn_a-z" id="reffn_a-z">a-z</a></sup>：除了任意小写字母 </li><li><sup><a href="#fn_A-Z" id="reffn_A-Z">A-Z</a></sup>：除了任意大写字母 </li><li><sup><a href="#fn_A-z" id="reffn_A-z">A-z</a></sup>：除了任意字母 </li><li><sup><a href="#fn_0-9" id="reffn_0-9">0-9</a></sup>：除了任意数字</li></ul><p><strong>需求信息：创建一个正则表达式，检查一个字符串中是否除了数字还有其它字母</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个正则表达式可以来检查一个字符串中是否除了数字还有其它字母</span></span><br><span class="line"><span class="type">var</span> <span class="variable">reg</span> <span class="operator">=</span> /[^<span class="number">0</span>-<span class="number">9</span>]/;</span><br><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;0123456789&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> reg.test(str);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><h3 id="3-6-4、正则方法"><a href="#3-6-4、正则方法" class="headerlink" title="3.6.4、正则方法"></a>3.6.4、正则方法</h3><p>这些正则方法其实都是字符串的方法，但是它的参数需要传递正则表达式，在这里，我就先称为正则方法。</p><p><strong>split()方法演示：该方法可以将一个字符串拆分为一个数组，方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串，这个方法即使不指定全局匹配，也会全都插分</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;1a2b3c4d5e6f7&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> str.split(/[A-z]/);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/63fc37cd99f403812856c9c60ddb2c08.png" alt="img"></p><p><strong>search()方法演示：该方法可以搜索字符串中是否含有指定内容，如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1，它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串，serach()只会查找第一个，即使设置全局匹配也没用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello abc hello aec afc&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> str.search(/a[bef]c/);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/8ba6eb1153172af98f7b11e8f3b0b0f9.png" alt="img"></p><p><strong>match()方法演示：该方法可以根据正则表达式，从一个字符串中将符合条件的内容提取出来，默认情况下我们的match()只会找到第一个符合要求的内容，找到以后就停止检索，我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容，可以为一个正则表达式设置多个匹配模式，且顺序无所谓，match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> str.match(/[a-z]/ig);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/691bd30df6aa462310da2ffecac54eb7.png" alt="img"></p><p><strong>replace()方法演示：该方法可以将字符串中指定内容替换为新的内容，默认只会替换第一个，但是可以设置全局匹配替换全部</strong></p><p>参数：</p><ul><li>第一个参数：被替换的内容，可以接受一个正则表达式作为参数 </li><li>第二个参数：新的内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> str.replace(/[a-z]/gi, <span class="string">&quot;@_@&quot;</span>);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/588f6ab348d21f0bcd080929ca09d10c.png" alt="img"></p><h3 id="3-6-5、正则量词"><a href="#3-6-5、正则量词" class="headerlink" title="3.6.5、正则量词"></a>3.6.5、正则量词</h3><p>通过量词可以设置一个内容出现的次数，量词只对它前边的一个内容起作用，如果有多个内容可以使用 () 括起来，常见量词如下：</p><ul><li>&#123;n&#125; ：正好出现n次 </li><li>&#123;m,&#125; ：出现m次及以上 </li><li>&#123;m,n&#125; ：出现m-n次 </li><li><ul><li>：至少一个，相当于&#123;1,&#125; </li></ul></li><li><ul><li>：0个或多个，相当于&#123;0,&#125; </li></ul></li><li>? ：0个或1个，相当于&#123;0,1&#125;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abbc&quot;</span>;</span><br><span class="line"></span><br><span class="line">reg = /(ab)&#123;<span class="number">3</span>&#125;/;</span><br><span class="line">console.log(reg.test(str));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">reg = /b&#123;<span class="number">3</span>&#125;/;</span><br><span class="line">console.log(reg.test(str));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">reg = /ab&#123;<span class="number">1</span>,<span class="number">3</span>&#125;c/;</span><br><span class="line">console.log(reg.test(str));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">reg = /ab&#123;<span class="number">3</span>,&#125;c/;</span><br><span class="line">console.log(reg.test(str));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">reg = /ab+c/;</span><br><span class="line">console.log(reg.test(str));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">reg = /ab*c/;</span><br><span class="line">console.log(reg.test(str));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">reg = /ab?c/;</span><br><span class="line">console.log(reg.test(str));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fdb8c9ee6adea6a14e18374c788f85e7.png" alt="img"></p><h3 id="3-6-6、正则高阶"><a href="#3-6-6、正则高阶" class="headerlink" title="3.6.6、正则高阶"></a>3.6.6、正则高阶</h3><p>如果我们要检查或者说判断是否以某个字符或者字符序列开头或者结尾就会使用^和$。</p><ul><li>^ ：表示开头，注意它在<sup><a href="#fn_字符序列" id="reffn_字符序列">字符序列</a></sup>表达的意思不一样 </li><li>$ ：表示结尾</li></ul><p><strong>需求描述：检查一个字符串中是否以a开头</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcabca&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">reg</span> <span class="operator">=</span> /^a/;</span><br><span class="line">console.log(reg.test(str));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5c5989022efc8ce11868c4804fc8fc77.png" alt="img"></p><p><strong>需求描述：检查一个字符串中是否以a结尾</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcabca&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">reg</span> <span class="operator">=</span> /a$/;</span><br><span class="line">console.log(reg.test(str));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9a455bcd1ce063d8fa63dd522febef83.png" alt="img"></p><p>那如果我们想要检查一个字符串中是否含有.和\就会使用转义字符</p><ul><li>. ：表示. </li><li>\ ：表示\</li></ul><blockquote><p>注意：使用构造函数时，由于它的参数是一个字符串，而<code>\</code>是字符串中转义字符，如果要使用<code>\</code>则需要使用<code>\</code>来代替</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">reg1</span> <span class="operator">=</span> /\./;</span><br><span class="line"><span class="type">var</span> <span class="variable">reg2</span> <span class="operator">=</span> /\\/;</span><br><span class="line"><span class="type">var</span> <span class="variable">reg3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">reg4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\\\&quot;</span>);</span><br></pre></td></tr></table></figure><p>除了以上两种特殊的字符，其实还有很多如下所示：</p><ul><li>\w ：任意字母、数字、<em>，相当于[A-z0-9</em>] </li><li>\W ：除了字母、数字、<em>，相当于[^A-z0-9</em>] </li><li>\d ：任意的数字，相当于[0-9] </li><li>\D ：除了任意的数字，相当于<sup><a href="#fn_0-9" id="reffn_0-9">0-9</a></sup> </li><li>\s ：空格 </li><li>\S ：除了空格 </li><li>\b ：单词边界 </li><li>\B ：除了单词边界</li></ul><p>这里边我们就演示最后四个，其它的都比较简单，后边的案例也会涉及，这里就不演示了</p><p><strong>需求描述：创建一个正则表达式，去除掉字符串中的前后的空格</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;  hello child  &quot;</span></span><br><span class="line"><span class="type">var</span> <span class="variable">reg</span> <span class="operator">=</span> /^\s*|\s*$/g;</span><br><span class="line">console.log(str);</span><br><span class="line">str = str.replace(reg, <span class="string">&quot;&quot;</span>);</span><br><span class="line">console.log(str);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2a12f2a885901b15c8d1bf8cab4cf0d1.png" alt="img"></p><p><strong>需求描述：创建一个正则表达式，检查一个字符串中是否含有单词child</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello child&quot;</span></span><br><span class="line"><span class="type">var</span> <span class="variable">reg</span> <span class="operator">=</span> /\bchild\b/;</span><br><span class="line">console.log(reg.test(str));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5722c7e9902b36d90565949787051b76.png" alt="img"></p><h3 id="3-6-7、正则案例"><a href="#3-6-7、正则案例" class="headerlink" title="3.6.7、正则案例"></a>3.6.7、正则案例</h3><h4 id="3-6-7-1、检查手机号"><a href="#3-6-7-1、检查手机号" class="headerlink" title="3.6.7.1、检查手机号"></a>3.6.7.1、检查手机号</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">phoneStr</span> <span class="operator">=</span> <span class="string">&quot;15131494600&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">phoneReg</span> <span class="operator">=</span> /^<span class="number">1</span>[<span class="number">3</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">9</span>&#125;$/;</span><br><span class="line">console.log(phoneReg.test(phoneStr));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/8add452c5bd9cef4daaba4ee1cb67bb1.png" alt="img"></p><h4 id="3-6-7-2、检查邮箱号"><a href="#3-6-7-2、检查邮箱号" class="headerlink" title="3.6.7.2、检查邮箱号"></a>3.6.7.2、检查邮箱号</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">emailStr</span> <span class="operator">=</span> <span class="string">&quot;abc.def@163.com&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">emailReg</span> <span class="operator">=</span> /^\w&#123;<span class="number">3</span>,&#125;(\.\w+)*@[A-z0-<span class="number">9</span>]+(\.[A-z]&#123;<span class="number">2</span>,<span class="number">5</span>&#125;)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;$/;</span><br><span class="line">console.log(emailReg.test(emailStr));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5ffafe5f8f29c55fd80f9b07fb079c09.png" alt="img"></p><h2 id="4-1、DOM概述"><a href="#4-1、DOM概述" class="headerlink" title="4.1、DOM概述"></a>4.1、DOM概述</h2><p>当网页被加载时，浏览器会创建页面的文档对象模型（<strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel）。</p><p>HTML <strong>DOM</strong> 模型被结构化为 <strong>对象树</strong> ：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/910bb72bbde0f438991f02a6cda866d7.png" alt="img"></p><p>通过这个对象模型，JavaScript 获得创建动态 HTML 的所有力量：</p><ul><li>JavaScript 能改变页面中的所有 HTML 元素 </li><li>JavaScript 能改变页面中的所有 HTML 属性 </li><li>JavaScript 能改变页面中的所有 CSS 样式 </li><li>JavaScript 能删除已有的 HTML 元素和属性 </li><li>JavaScript 能添加新的 HTML 元素和属性 </li><li>JavaScript 能对页面中所有已有的 HTML 事件作出反应 </li><li>JavaScript 能在页面中创建新的 HTML 事件</li></ul><p>换言之：HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准。</p><h2 id="4-2、DOM文档节点"><a href="#4-2、DOM文档节点" class="headerlink" title="4.2、DOM文档节点"></a>4.2、DOM文档节点</h2><h3 id="4-2-1、节点概述"><a href="#4-2-1、节点概述" class="headerlink" title="4.2.1、节点概述"></a>4.2.1、节点概述</h3><p>节点Node，是构成我们网页的最基本的组成部分，网页中的每一个部分都可以称为是一个节点。</p><p>比如：html标签、属性、文本、注释、整个文档等都是一个节点。</p><p>虽然都是节点，但是实际上它们的具体类型是不同的。</p><p>比如：标签我们称为元素节点、属性称为属性节点、文本称为 文本节点、文档称为文档节点。</p><p>节点的类型不同，属性和方法也都不尽相同。</p><p>节点：Node——构成HTML文档最基本的单元。</p><p>常用节点分为四类：</p><ul><li>文档节点：整个HTML文档 </li><li>元素节点：HTML文档中的HTML标签 </li><li>属性节点：元素的属性 </li><li>文本节点：HTML标签中的文本内容</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/6c58b926da64501f486305b5afe3d9f8.png" alt="img"></p><h3 id="4-2-2、节点属性"><a href="#4-2-2、节点属性" class="headerlink" title="4.2.2、节点属性"></a>4.2.2、节点属性</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/2271dc3f0f61e890fe4cb76817fc6942.png" alt="img"></p><h3 id="4-2-3、文档节点"><a href="#4-2-3、文档节点" class="headerlink" title="4.2.3、文档节点"></a>4.2.3、文档节点</h3><p>文档节点（Document）代表的是整个HTML文 档，网页中的所有节点都是它的子节点。</p><p>document对象作为window对象的属性存在的，我们不用获取可以直接使用。</p><p>通过该对象我们可以在整个文档访问内查找节点对象，并可以通过该对象创建各种节点对象。</p><h3 id="4-2-4、元素节点"><a href="#4-2-4、元素节点" class="headerlink" title="4.2.4、元素节点"></a>4.2.4、元素节点</h3><p>HTML中的各种标签都是元素节点（Element），这也是我们最常用的一个节点。</p><p>浏览器会将页面中所有的标签都转换为一个元素节点， 我们可以通过document的方法来获取元素节点。</p><p>例如：document.getElementById()，根据id属性值获取一个元素节点对象。</p><h3 id="4-2-5、属性节点"><a href="#4-2-5、属性节点" class="headerlink" title="4.2.5、属性节点"></a>4.2.5、属性节点</h3><p>属性节点（Attribute）表示的是标签中的一个一个的属 性，这里要注意的是属性节点并非是元素节点的子节点，而是元素节点的一部分。可以通过元素节点来获取指定的属性节点。</p><p>例如：元素节点.getAttributeNode(“属性名”)，根据元素节点的属性名获取一个属性节点对象。</p><blockquote><p>注意：我们一般不使用属性节点。</p></blockquote><h3 id="4-2-6、文本节点"><a href="#4-2-6、文本节点" class="headerlink" title="4.2.6、文本节点"></a>4.2.6、文本节点</h3><p>文本节点（Text）表示的是HTML标签以外的文本内容，任意非HTML的文本都是文本节点，它包括可以字面解释的纯文本内容。文本节点一般是作为元素节点的子节点存在的。获取文本节点时，一般先要获取元素节点，在通过元素节点获取文本节点。</p><p>例如：元素节点.firstChild;，获取元素节点的第一个子节点，一般为文本节点。</p><h2 id="4-3、DOM文档操作"><a href="#4-3、DOM文档操作" class="headerlink" title="4.3、DOM文档操作"></a>4.3、DOM文档操作</h2><p>文档对象代表您的网页,，如果您希望访问 HTML 页面中的任何元素，那么您总是从访问 document 对象开始。</p><p>下面是一些如何使用 document 对象来访问和操作 HTML 的实例。</p><h3 id="4-3-1、查找-HTML-元素"><a href="#4-3-1、查找-HTML-元素" class="headerlink" title="4.3.1、查找 HTML 元素"></a>4.3.1、查找 HTML 元素</h3><h4 id="4-3-1-1、方法介绍"><a href="#4-3-1-1、方法介绍" class="headerlink" title="4.3.1.1、方法介绍"></a>4.3.1.1、方法介绍</h4><h4 id="4-3-1-2、方法演示"><a href="#4-3-1-2、方法演示" class="headerlink" title="4.3.1.2、方法演示"></a>4.3.1.2、方法演示</h4><p><strong>需求描述：创建一个按钮，通过id获取按钮节点对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;我是按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">btn</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">    console.log(btn);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a4a12435040d0fb10c21046d3da4f685.png" alt="img"></p><p><strong>需求描述：创建一个按钮，通过标签名获取按钮节点对象数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;我是按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">btn</span> <span class="operator">=</span> document.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    console.log(btn);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e9e294078eb1d88399cf087561187bc4.png" alt="img"></p><p><strong>需求描述：创建一个按钮，通过类名获取按钮节点对象数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button class=<span class="string">&quot;btn&quot;</span>&gt;我是按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">btn</span> <span class="operator">=</span> document.getElementsByClassName(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">    console.log(btn);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/cbf99da44967f7bd855435581c483059.png" alt="img"></p><p><strong>需求描述：创建一个按钮，通过CSS选择器选择该按钮</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button class=<span class="string">&quot;btn&quot;</span>&gt;我是按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">btn</span> <span class="operator">=</span> document.querySelector(<span class="string">&quot;.btn&quot;</span>);</span><br><span class="line">    console.log(btn);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/1f0792d8e76b9363a509ad6ac7d85244.png" alt="img"></p><p><strong>需求描述：创建一个无序列表，通过CSS选择器选择该列表的所有li</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul class=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">    &lt;li&gt;列表项<span class="number">1</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;列表项<span class="number">2</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;列表项<span class="number">3</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;列表项<span class="number">4</span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> document.querySelectorAll(<span class="string">&quot;.list li&quot;</span>);</span><br><span class="line">    console.log(list);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/80f710098d194f71233b1fcfb324f4e2.png" alt="img"></p><h3 id="4-3-2、获取-HTML-的值"><a href="#4-3-2、获取-HTML-的值" class="headerlink" title="4.3.2、获取 HTML 的值"></a>4.3.2、获取 HTML 的值</h3><h4 id="4-3-2-1、方法介绍"><a href="#4-3-2-1、方法介绍" class="headerlink" title="4.3.2.1、方法介绍"></a>4.3.2.1、方法介绍</h4><h4 id="4-3-2-2、方法演示"><a href="#4-3-2-2、方法演示" class="headerlink" title="4.3.2.2、方法演示"></a>4.3.2.2、方法演示</h4><p><strong>需求描述：创建一个按钮，然后获取按钮的文本内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;我是按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">btn</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">    console.log(btn.innerText);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d836aa32b6a43979de51338534ba2bf9.png" alt="img"></p><p><strong>需求描述：创建一个div，然后在div中插入一个h1标题，获取div中的html代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;我是Box中的大标题&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">box</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">    console.log(box.innerHTML);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/4a8f1dd5b26a043cd7b9078c0cfd0421.png" alt="img"></p><p><strong>需求描述：创建一个超链接，默认为空，设置href属性为<a href="https://www.baidu.com">https://www.baidu.com</a> ，使用JavaScript代码读取href属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a id=<span class="string">&quot;a&quot;</span> href=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;打开百度，你就知道！&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    console.log(a.href);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/8758c3b09d1558dac07d0732a14a629b.png" alt="img"></p><p><strong>需求描述：创建一个超链接，默认为空，设置href属性为<a href="https://www.baidu.com">https://www.baidu.com</a> ，使用JavaScript代码读取href属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a id=<span class="string">&quot;a&quot;</span> href=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;打开百度，你就知道！&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    console.log(a.getAttribute(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e7a6fe98a043b1c21f89becc7beae27a.png" alt="img"></p><p><strong>需求描述：创建一个正方形div，默认颜色为红色，使用JavaScript代码获取div的宽度</strong></p><blockquote><p>注意：如果CSS的样式名中含有-，这种名称在JS中是不合法的比如background-color，需要将这种样式名修改为驼峰命名法，去掉-，然后将-后的字母大写，我们通过style属性设置的样式都是行内样式，同样的获取也是行内样式，而行内样式有较高的优先级，所以通过JS修改的样式往往会立即显示，但是如果在样式中写了!important，则此时样式会有最高的优先级，即使通过JS也不能覆盖该样式，此时将会导致JS修改样式失效，所以尽量不要为样式添加!important</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;width: 100px;height: 100px;background: red;&quot;</span> id=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">box</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">    console.log(box.style.width);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3ee1de03ba68d6321c0b6922c74ebd52.png" alt="img"></p><p><strong>拓展知识1：</strong></p><p>通过style属性设置和读取的都是内联样式，无法读取样式表中的样式或者说正在应用的样式，如果想要读取当前正在应用的样式属性我们可以使用元素.currentStyle.样式名来获取元素的当前显示的样式，它可以用来读取当前元素正在显示的样式，如果当前元素没有设置该样式，则获取它的默认值，但是currentStyle只有IE浏览器支持，其它的浏览器都不支持，在其它浏览器中可以使用getComputedStyle()这个方法来获取元素当前的样式，这个方法是window的方法，可以直接使用，但是需要两个参数：</p><ul><li>第一个参数：要获取样式的元素 </li><li>第二个参数：可以传递一个伪元素，一般都传null</li></ul><p>该方法会返回一个对象，对象中封装了当前元素对应的样式，可以通过 对象.样式名 来读取样式，如果获取的样式没有设置，则会获取到真实的值，而不是默认值，比如：没有设置width，它不会获取到auto，而是一个长度，但是该方法不支持IE8及以下的浏览器。通过currentStyle和getComputedStyle()读取到的样式都是只读的，不能修改，如果要修改必须通过style属性，因此，我们可以写一个适配各个浏览器的读取元素样式的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">/*样式表的样式*/</span></span><br><span class="line">        #box &#123;</span><br><span class="line">    </span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;width: 100px;height: 100px;&quot;</span> id=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/*通用的获取元素样式的方法*/</span></span><br><span class="line">    function <span class="title function_">getStyle</span><span class="params">(obj, name)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (window.getComputedStyle) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">//正常浏览器的方式，具有getComputedStyle()方法</span></span><br><span class="line">            <span class="keyword">return</span> getComputedStyle(obj, <span class="literal">null</span>)[name];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">//IE8的方式，没有getComputedStyle()方法</span></span><br><span class="line">            <span class="keyword">return</span> obj.currentStyle[name];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">box</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line"></span><br><span class="line">    console.log(getStyle(box, <span class="string">&quot;width&quot;</span>));</span><br><span class="line">    console.log(getStyle(box, <span class="string">&quot;height&quot;</span>));</span><br><span class="line">    console.log(getStyle(box, <span class="string">&quot;background-color&quot;</span>));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>谷歌浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a2fb2f2ff61d0469329039464d23bfe7.png" alt="img"></p><p>火狐浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0a114c32d9776f919ba9506fb2eb818b.png" alt="img"></p><p>IE9-IE11 浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6739e07782087f92acbb30a595ccc6b8.png" alt="img"></p><p>IE5-IE8 浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7df8d96f441bf30cb7c20dc10624c4b0.png" alt="img"></p><p>有同学会说，在IE5-IE8 浏览器中，老师这不是还不一样吗？因此我们建议设置颜色数值一般采用rgb或者rgba，最好不要采用英文单词的这种颜色值，这样最终展示出来的效果就一致了。</p><p><strong>拓展知识2：编写一段兼容性代码，用来获取任意标签的文本内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span> id=<span class="string">&quot;a&quot;</span>&gt;打开百度，你就知道！&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">    console.log(getInnerText(a));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取任意标签的内容*/</span></span><br><span class="line">    function <span class="title function_">getInnerText</span><span class="params">(element)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 判断浏览器是否支持textContent,如果支持，则使用textContent获取内容，否则使用innerText获取内容。</span></span><br><span class="line">        <span class="keyword">if</span>(typeof element.textContent == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> element.innerText;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> element.textContent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>谷歌浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3ca6eddc64116c4fa953a9ce64da0b11.png" alt="img"></p><p>火狐浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/65e9ac0e97150902e3cd508ba236db81.png" alt="img"></p><p>IE5-IE11浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/53431bc5beb1b82d241e2666a56f28e4.png" alt="img"></p><h3 id="4-3-3、改变-HTML-的值"><a href="#4-3-3、改变-HTML-的值" class="headerlink" title="4.3.3、改变 HTML 的值"></a>4.3.3、改变 HTML 的值</h3><h4 id="4-3-3-1、方法介绍"><a href="#4-3-3-1、方法介绍" class="headerlink" title="4.3.3.1、方法介绍"></a>4.3.3.1、方法介绍</h4><h4 id="4-3-3-2、方法演示"><a href="#4-3-3-2、方法演示" class="headerlink" title="4.3.3.2、方法演示"></a>4.3.3.2、方法演示</h4><p><strong>需求描述：创建一个按钮，然后改变按钮的文本内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;我是按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">btn</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">    btn.innerText = <span class="string">&quot;我是JavaScript的按钮&quot;</span>;</span><br><span class="line">    console.log(btn);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/56582292e6ee61fccb1dc8c90e55972c.png" alt="img"></p><p><strong>需求描述：创建一个div，然后在div中插入一个h1标题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">box</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">    box.innerHTML = <span class="string">&quot;&lt;h1&gt;我是Box中的大标题&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    console.log(box);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a010c647556b98b0de90a75c1ff08cdc.png" alt="img"></p><p><strong>需求描述：创建一个超链接，默认为空，使用JavaScript代码设置href属性为<a href="https://www.baidu.com">https://www.baidu.com</a> </strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a id=<span class="string">&quot;a&quot;</span> href=<span class="string">&quot;&quot;</span>&gt;打开百度，你就知道！&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    a.href=<span class="string">&quot;https://www.baidu.com&quot;</span>;</span><br><span class="line">    console.log(a);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/71fb6639e98948a6ca3ee290f44f8012.png" alt="img"></p><p><strong>需求描述：创建一个超链接，默认为空，使用JavaScript代码设置href属性为<a href="https://www.baidu.com">https://www.baidu.com</a> </strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a id=<span class="string">&quot;a&quot;</span> href=<span class="string">&quot;&quot;</span>&gt;打开百度，你就知道！&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    a.setAttribute(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">    console.log(a);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b600ef7b34cbc27bea3ad887b22e1c38.png" alt="img"></p><p><strong>需求描述：创建一个正方形div，默认颜色为红色，使用JavaScript代码改变为绿色</strong></p><blockquote><p>注意：如果CSS的样式名中含有-，这种名称在JS中是不合法的比如background-color，需要将这种样式名修改为驼峰命名法，去掉-，然后将-后的字母大写，我们通过style属性设置的样式都是行内样式，同样的获取也是行内样式，而行内样式有较高的优先级，所以通过JS修改的样式往往会立即显示，但是如果在样式中写了!important，则此时样式会有最高的优先级，即使通过JS也不能覆盖该样式，此时将会导致JS修改样式失效，所以尽量不要为样式添加!important</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;width: 100px;height: 100px;background: red;&quot;</span> id=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">box</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">    box.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">    console.log(box);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0564f9033a71ffc937e9f87f1a65c378.png" alt="img"></p><p><strong>拓展知识1：</strong></p><p>修改节点的内容除了常用的innerHTML和innerText之外，还有insertAdjacentHTML和insertAdjacentText方法，可以在指定的地方插入内容。insertAdjacentText方法与insertAdjacentHTML方法类似，只不过是插入纯文本，参数相同。</p><p>语法说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object.insertAdjacentHTML(where,html);</span><br><span class="line">object.insertAdjacentText(where,text)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>where： </p><ul> - beforeBegin：插入到开始标签的前面 - beforeEnd：插入到结束标签的前面 - afterBegin：插入到开始标签的后面 - afterEnd：插入到结束标签的后面 </ul>   </li><li><p>html：一段html代码  </p></li><li>text：一段文本值 </li></ul><p>注意事项：</p><ol><li>这两个方法必须等文档加载好后才能执行，否则会出错。 </li><li>insertAdjacentText只能插入普通文本，insertAdjacentHTML插入html代码。 </li><li>使用insertAdjacentHTML方法插入script脚本文件时，必须在script元素上定义defer属性。 </li><li>使用insertAdjacentHTML方法插入html代码后，页面上的元素集合将发生变化。 </li><li>insertAdjacentHTML方法不适用于单个的空的元素标签(如img，input等)。</li></ol><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;insert&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;你是我的小丫小苹果&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">div</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;insert&quot;</span>);</span><br><span class="line">    div.insertAdjacentHTML(<span class="string">&#x27;beforeBegin&#x27;</span>, <span class="string">&#x27;你是我的小丫小苹果&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c05be7bed36cf98940ef9a6b9bbd46c5.png" alt="img"></p><p><strong>拓展知识2：编写一段兼容性代码，用来设置任意标签的文本内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span> id=<span class="string">&quot;a&quot;</span>&gt;打开百度，你就知道！&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    setInnerText(a, <span class="string">&quot;你要打开百度吗？&quot;</span>);</span><br><span class="line"></span><br><span class="line">    console.log(getInnerText(a));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取任意标签的内容*/</span></span><br><span class="line">    function <span class="title function_">getInnerText</span><span class="params">(element)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 判断浏览器是否支持textContent,如果支持，则使用textContent获取内容，否则使用innerText获取内容。</span></span><br><span class="line">        <span class="keyword">if</span> (typeof element.textContent == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> element.innerText;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> element.textContent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*设置任意标签的内容*/</span></span><br><span class="line">    function <span class="title function_">setInnerText</span><span class="params">(element, text)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 判断浏览器是否支持textContent,如果支持，则使用textContent设置内容，否则使用innerText设置内容。</span></span><br><span class="line">        <span class="keyword">if</span> (typeof element.textContent == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> element.innerText = text;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> element.textContent = text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>谷歌浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/92617ad540982bffb28242c851b98e0d.png" alt="img"></p><p>火狐浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2a5fd2976d0c0c248d7781e77f4758ea.png" alt="img"></p><p>IE5-IE11浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/554e2179110d1e9d1c6c3944ae928f88.png" alt="img"></p><h3 id="4-3-4、修改-HTML-元素"><a href="#4-3-4、修改-HTML-元素" class="headerlink" title="4.3.4、修改 HTML 元素"></a>4.3.4、修改 HTML 元素</h3><h4 id="4-3-4-1、方法介绍"><a href="#4-3-4-1、方法介绍" class="headerlink" title="4.3.4.1、方法介绍"></a>4.3.4.1、方法介绍</h4><h4 id="4-3-4-2、方法演示"><a href="#4-3-4-2、方法演示" class="headerlink" title="4.3.4.2、方法演示"></a>4.3.4.2、方法演示</h4><p><strong>案例演示1：创建一个ul列表，然后在该列表中追加4个li标签</strong></p><p>第一种方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">ul</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">li1</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">text1</span> <span class="operator">=</span> document.createTextNode(<span class="string">&quot;列表项1&quot;</span>);</span><br><span class="line">    li1.appendChild(text1);</span><br><span class="line">    ul.appendChild(li1);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">li2</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">text2</span> <span class="operator">=</span> document.createTextNode(<span class="string">&quot;列表项2&quot;</span>);</span><br><span class="line">    li2.appendChild(text2);</span><br><span class="line">    ul.appendChild(li2);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">li3</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">text3</span> <span class="operator">=</span> document.createTextNode(<span class="string">&quot;列表项3&quot;</span>);</span><br><span class="line">    li3.appendChild(text3);</span><br><span class="line">    ul.appendChild(li3);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">li4</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">text4</span> <span class="operator">=</span> document.createTextNode(<span class="string">&quot;列表项4&quot;</span>);</span><br><span class="line">    li4.appendChild(text4);</span><br><span class="line">    ul.appendChild(li4);</span><br><span class="line"></span><br><span class="line">    document.getElementsByTagName(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].appendChild(ul);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f807b292838456cc317d127c135fca49.png" alt="img"></p><p>第二种方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">ul</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">li1</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    li1.innerHTML = <span class="string">&quot;列表项1&quot;</span>;</span><br><span class="line">    ul.appendChild(li1);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">li2</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    li2.innerHTML = <span class="string">&quot;列表项2&quot;</span>;</span><br><span class="line">    ul.appendChild(li2);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">li3</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    li3.innerHTML = <span class="string">&quot;列表项3&quot;</span>;</span><br><span class="line">    ul.appendChild(li3);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">li4</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    li4.innerHTML = <span class="string">&quot;列表项4&quot;</span>;</span><br><span class="line">    ul.appendChild(li4);</span><br><span class="line"></span><br><span class="line">    document.getElementsByTagName(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].appendChild(ul);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/4e1853b78d8f391e2bb2ee86a16bc733.png" alt="img"></p><p>第三种方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">ul</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">li1</span> <span class="operator">=</span> <span class="string">&quot;&lt;li&gt;列表项1&lt;/li&gt;&quot;</span>;</span><br><span class="line">    <span class="type">var</span> <span class="variable">li2</span> <span class="operator">=</span> <span class="string">&quot;&lt;li&gt;列表项2&lt;/li&gt;&quot;</span>;</span><br><span class="line">    <span class="type">var</span> <span class="variable">li3</span> <span class="operator">=</span> <span class="string">&quot;&lt;li&gt;列表项3&lt;/li&gt;&quot;</span>;</span><br><span class="line">    <span class="type">var</span> <span class="variable">li4</span> <span class="operator">=</span> <span class="string">&quot;&lt;li&gt;列表项4&lt;/li&gt;&quot;</span>;</span><br><span class="line">    ul.innerHTML = li1 + li2 + li3 + li4;</span><br><span class="line"></span><br><span class="line">    document.getElementsByTagName(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].appendChild(ul);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/812211288b9c0fef95fadb038fdf1c84.png" alt="img"></p><p><strong>案例演示2：创建一个ul列表，里边有四个li子元素，删除第一个li，替换最后一个li</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=<span class="string">&quot;ul&quot;</span>&gt;</span><br><span class="line">    &lt;li id=<span class="string">&quot;first&quot;</span>&gt;列表项<span class="number">1</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;列表项<span class="number">2</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;列表项<span class="number">3</span>&lt;/li&gt;</span><br><span class="line">    &lt;li id=<span class="string">&quot;last&quot;</span>&gt;列表项<span class="number">4</span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">ul</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">first</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">last</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;last&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除第一个*/</span></span><br><span class="line">    ul.removeChild(first);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*替换最后一个*/</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">replaceLi</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    replaceLi.innerHTML = <span class="string">&quot;列表4的替换&quot;</span>;</span><br><span class="line">    ul.replaceChild(replaceLi, last);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/235c25b41f1db4ad92f3f7e9397a3dc8.png" alt="img"></p><p><strong>案例演示3：创建一个ul列表，里边有四个li子元素，在第一个li前边插入一个id为zero的li</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=<span class="string">&quot;ul&quot;</span>&gt;</span><br><span class="line">    &lt;li id=<span class="string">&quot;first&quot;</span>&gt;列表项<span class="number">1</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;列表项<span class="number">2</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;列表项<span class="number">3</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;列表项<span class="number">4</span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">ul</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">first</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;first&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">zero</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    zero.innerHTML = <span class="string">&quot;列表0的新增&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    ul.insertBefore(zero, first);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/836f305b817ee0ea7c0368405b20835c.png" alt="img"></p><p><strong>拓展知识：</strong></p><p>动态判断、添加、删除、切换样式，支持IE5-IE11，谷歌浏览器、火狐浏览器等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .b1 &#123;</span><br><span class="line">    </span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .b2 &#123;</span><br><span class="line">    </span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn0&quot;</span>&gt;判断b2样式&lt;/button&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;添加b2样式&lt;/button&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn2&quot;</span>&gt;删除b2样式&lt;/button&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn3&quot;</span>&gt;切换b2样式&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span> class=<span class="string">&quot;b1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">btn0</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;btn0&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">btn1</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">btn2</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">btn3</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;btn3&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">box</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line"></span><br><span class="line">    btn0.onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        alert(hasClass(box, <span class="string">&quot;b2&quot;</span>));</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    btn1.onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        addClass(box, <span class="string">&quot;b2&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    btn2.onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        removeClass(box, <span class="string">&quot;b2&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    btn3.onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        toggleClass(box, <span class="string">&quot;b2&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 判断一个元素中是否含有指定的class属性值</span></span><br><span class="line"><span class="comment">     * 如果有该class，则返回true，没有则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">hasClass</span><span class="params">(obj, cn)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">var</span> <span class="variable">reg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\b&quot;</span> + cn + <span class="string">&quot;\\b&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> reg.test(obj.className);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 向一个元素中添加指定的class属性值</span></span><br><span class="line"><span class="comment">     * 参数:</span></span><br><span class="line"><span class="comment">     * obj 要添加class属性的元素</span></span><br><span class="line"><span class="comment">     *  cn 要添加的class值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">addClass</span><span class="params">(obj, cn)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 检查obj中是否含有cn</span></span><br><span class="line">        <span class="keyword">if</span> (!hasClass(obj, cn)) &#123;</span><br><span class="line">    </span><br><span class="line">            obj.className += <span class="string">&quot; &quot;</span> + cn;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 删除一个元素中的指定的class属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">removeClass</span><span class="params">(obj, cn)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">var</span> <span class="variable">reg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\b&quot;</span> + cn + <span class="string">&quot;\\b&quot;</span>);</span><br><span class="line">        obj.className = obj.className.replace(reg, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * toggleClass可以用来切换一个类</span></span><br><span class="line"><span class="comment">     * 如果元素中具有该类，则删除</span></span><br><span class="line"><span class="comment">     * 如果元素中没有该类，则添加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toggleClass</span><span class="params">(obj, cn)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 判断obj中是否含有cn</span></span><br><span class="line">        <span class="keyword">if</span> (hasClass(obj, cn)) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 存在，则删除</span></span><br><span class="line">            removeClass(obj, cn);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 没有，则添加</span></span><br><span class="line">            addClass(obj, cn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3ce11a8d4ac93137688af293a74c89ab.png" alt="img"></p><h3 id="4-3-5、查找-HTML-父子"><a href="#4-3-5、查找-HTML-父子" class="headerlink" title="4.3.5、查找 HTML 父子"></a>4.3.5、查找 HTML 父子</h3><h4 id="4-3-5-1、方法介绍"><a href="#4-3-5-1、方法介绍" class="headerlink" title="4.3.5.1、方法介绍"></a>4.3.5.1、方法介绍</h4><h4 id="4-3-5-2、方法演示"><a href="#4-3-5-2、方法演示" class="headerlink" title="4.3.5.2、方法演示"></a>4.3.5.2、方法演示</h4><p><strong>案例演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;ul id=<span class="string">&quot;ul&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;我是超链接<span class="number">1</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li id=<span class="string">&quot;two&quot;</span>&gt;&lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;我是超链接<span class="number">2</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;我是超链接<span class="number">3</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;我是超链接<span class="number">4</span>&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">box</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">ul</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">two</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"></span><br><span class="line">    console.log(ul.parentNode);</span><br><span class="line">    console.log(ul.parentElement);</span><br><span class="line">    console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    console.log(box.childNodes);</span><br><span class="line">    console.log(box.children);</span><br><span class="line">    console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    console.log(ul.firstChild);</span><br><span class="line">    console.log(ul.firstElementChild);</span><br><span class="line">    console.log(ul.lastChild);</span><br><span class="line">    console.log(ul.lastElementChild);</span><br><span class="line">    console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    console.log(two.previousSibling);</span><br><span class="line">    console.log(two.previousElementSibling);</span><br><span class="line">    console.log(two.nextSibling);</span><br><span class="line">    console.log(two.nextElementSibling);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7529554c9039548d1963311ac4759040.png" alt="img"></p><p><strong>兼容性方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获取任意一个父级元素的第一个子元素*/</span></span><br><span class="line">function <span class="title function_">getfirstElementChild</span><span class="params">(element)</span> &#123;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span>(element.firstElementChild) &#123;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">return</span> element.firstElementChild;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line"><span class="type">var</span> <span class="variable">node</span> <span class="operator">=</span> element.firstChild;</span><br><span class="line"><span class="keyword">while</span>(node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">   </span><br><span class="line">node = node.nextSibling;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取任意一个父级元素的最后一个子元素*/</span></span><br><span class="line">function <span class="title function_">getLastElementChild</span><span class="params">(element)</span> &#123;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span>(element.lastElementChild) &#123;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">return</span> element.lastElementChild;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line"><span class="type">var</span> <span class="variable">node</span> <span class="operator">=</span> element.lastChild;</span><br><span class="line"><span class="keyword">while</span>(node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">   </span><br><span class="line">node = node.previousSibling;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取任意一个子元素的前一个兄弟元素*/</span></span><br><span class="line">function <span class="title function_">getPreviousElementSibling</span><span class="params">(element)</span> &#123;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span>(element.previousElementSibling) &#123;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">return</span> element.previousElementSibling;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line"><span class="type">var</span> <span class="variable">node</span> <span class="operator">=</span> element.previousSibling;</span><br><span class="line"><span class="keyword">while</span>(node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">   </span><br><span class="line">node = node.previousSibling;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取任意一个子元素的后一个兄弟元素*/</span></span><br><span class="line">function <span class="title function_">getNextElementSibling</span><span class="params">(element)</span> &#123;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span>(element.nextElementSibling) &#123;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">return</span> element.nextElementSibling;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line"><span class="type">var</span> <span class="variable">node</span> <span class="operator">=</span> element.nextSibling;</span><br><span class="line"><span class="keyword">while</span>(node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">   </span><br><span class="line">node = node.nextSibling;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;前面的P标签&lt;/p&gt;</span><br><span class="line">    &lt;b&gt;加粗文本&lt;/b&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span> id=<span class="string">&quot;a&quot;</span>&gt;百度一下&lt;/a&gt;</span><br><span class="line">    &lt;i&gt;斜体文本&lt;/i&gt;</span><br><span class="line">    &lt;p&gt;最后的P标签&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/*第一个子元素*/</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">firstNode</span> <span class="operator">=</span> getfirstElementChild(document.getElementById(<span class="string">&quot;container&quot;</span>));</span><br><span class="line">    console.log(firstNode.innerHTML);</span><br><span class="line">    <span class="comment">/*最后一个子元素*/</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">lastNode</span> <span class="operator">=</span> getLastElementChild(document.getElementById(<span class="string">&quot;container&quot;</span>));</span><br><span class="line">    console.log(lastNode.innerHTML);</span><br><span class="line">    <span class="comment">/*指定元素的前一个子元素*/</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">node1</span> <span class="operator">=</span> getPreviousElementSibling(document.getElementById(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    console.log(node1.innerHTML);</span><br><span class="line">    <span class="comment">/*指定元素的后一个子元素*/</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">node2</span> <span class="operator">=</span> getNextElementSibling(document.getElementById(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    console.log(node2.innerHTML);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取任意一个父级元素的第一个子元素*/</span></span><br><span class="line">    function <span class="title function_">getfirstElementChild</span><span class="params">(element)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (element.firstElementChild) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> element.firstElementChild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="type">var</span> <span class="variable">node</span> <span class="operator">=</span> element.firstChild;</span><br><span class="line">            <span class="keyword">while</span> (node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">    </span><br><span class="line">                node = node.nextSibling;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取任意一个父级元素的最后一个子元素*/</span></span><br><span class="line">    function <span class="title function_">getLastElementChild</span><span class="params">(element)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (element.lastElementChild) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> element.lastElementChild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="type">var</span> <span class="variable">node</span> <span class="operator">=</span> element.lastChild;</span><br><span class="line">            <span class="keyword">while</span> (node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">    </span><br><span class="line">                node = node.previousSibling;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取任意一个子元素的前一个兄弟元素*/</span></span><br><span class="line">    function <span class="title function_">getPreviousElementSibling</span><span class="params">(element)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (element.previousElementSibling) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> element.previousElementSibling;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="type">var</span> <span class="variable">node</span> <span class="operator">=</span> element.previousSibling;</span><br><span class="line">            <span class="keyword">while</span> (node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">    </span><br><span class="line">                node = node.previousSibling;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取任意一个子元素的后一个兄弟元素*/</span></span><br><span class="line">    function <span class="title function_">getNextElementSibling</span><span class="params">(element)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (element.nextElementSibling) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> element.nextElementSibling;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="type">var</span> <span class="variable">node</span> <span class="operator">=</span> element.nextSibling;</span><br><span class="line">            <span class="keyword">while</span> (node &amp;&amp; node.nodeType != <span class="number">1</span>) &#123;</span><br><span class="line">    </span><br><span class="line">                node = node.nextSibling;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>谷歌浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/500bbd1a5ea8cd5a53d0b99ff9b131c7.png" alt="img"></p><p>火狐浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4acbcf607aa870893bf658ef282a6e4a.png" alt="img"></p><p>IE5-IE11浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ea8d2c26b705c310c80e275715336d8d.png" alt="img"></p><h2 id="4-4、DOM文档事件"><a href="#4-4、DOM文档事件" class="headerlink" title="4.4、DOM文档事件"></a>4.4、DOM文档事件</h2><h3 id="4-4-1、事件概述"><a href="#4-4-1、事件概述" class="headerlink" title="4.4.1、事件概述"></a>4.4.1、事件概述</h3><p>HTML事件可以触发浏览器中的行为，比方说当用户点击某个 HTML 元素时启动一段 JavaScript。</p><h3 id="4-4-2、窗口事件"><a href="#4-4-2、窗口事件" class="headerlink" title="4.4.2、窗口事件"></a>4.4.2、窗口事件</h3><p>由窗口触发该事件 (同样适用于 &lt;body&gt; 标签)：</p><p><strong>案例演示1：当窗口失去焦点时，输出“窗口失去焦点”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onblur = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;窗口失去焦点&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a85355ebaabbd206e59b7061c5eacf7c.png" alt="img"></p><p><strong>案例演示2：当窗口获取焦点时，输出“窗口获取焦点”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onfocus = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;窗口获取焦点&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c6064b12922f00dd1242c07ec2ff4d6d.png" alt="img"></p><p><strong>案例演示3：当页面文档加载完成后，输出”Hello, World”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;Hello,World&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/00f5813669d977f3a6dc43df69d0752d.png" alt="img"></p><p><strong>案例演示4：当调整窗口大小时，输出”窗口大小正在改变”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onresize = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;窗口大小正在改变&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ec744b7827119eca9d85dca8b3fddd2c.png" alt="img"></p><h3 id="4-4-3、表单事件"><a href="#4-4-3、表单事件" class="headerlink" title="4.4.3、表单事件"></a>4.4.3、表单事件</h3><p>表单事件在HTML表单中触发 (适用于所有 HTML 元素，但该HTML元素需在form表单内)：</p><p><strong>案例演示1：当文本框获取焦点，文本框背景为红色，当文本框失去焦点，文本框背景为黄色</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">textInput</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;text&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 当文本框获取焦点，文本框背景为红色 */</span></span><br><span class="line">    textInput.onfocus = function () &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">this</span>.style.background = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 当文本框失去焦点，文本框背景为绿色 */</span></span><br><span class="line">    textInput.onblur = function () &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里为什么要用this，你不用this也可以，就直接<code>textInput.style.background = “red”;</code>也不是不可以的，但是方法的调用规则就是谁调用this，this就指向谁，这样我们就可以简化代码了</p></blockquote><p><strong>案例演示2：当文本框内容改变时，鼠标离开文本框，自动将文本框的内容输出到控制台</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">textInput</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;text&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 当文本框内容改变时，鼠标离开文本框，自动将文本框的内容输出到控制台 */</span></span><br><span class="line">    textInput.onchange = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="built_in">this</span>.value);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d4c9ff58b0e1bcea5aaa206660627031.png" alt="img"></p><p><strong>案例演示3：当文本框内容改变时，立即将改变的内容输出到控制台</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">textInput</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;text&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 当文本框内容改变时，立即将改变的内容输出到控制台 */</span></span><br><span class="line">    textInput.oninput = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="built_in">this</span>.value);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/298382000b56c6aadf01a9764c8761f6.png" alt="img"></p><p><strong>案例演示4：如果单击“submit”，则不填写文本字段，将发生警报消息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;text&quot;</span> required&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">textInput</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;text&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果单击“submit”，则不填写文本字段，将发生警报消息 */</span></span><br><span class="line">    textInput.oninvalid = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;请您完善表单内容！&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d6f51bce499dc388317f06cccb0e7e38.png" alt="img"></p><p><strong>案例演示5：当选中文本框的内容时，输出“您已经选择了文本框内容！”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">textInput</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;text&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 当选中文本框的内容时，输出“您已经选择了文本框内容！” */</span></span><br><span class="line">    textInput.onselect = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;您已经选择了文本框内容！&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/001f570b9680ae5b7d55dcacb7860061.png" alt="img"></p><p><strong>案例演示6：当提交表单的时候，在控制台输出“表单提交”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form id=<span class="string">&quot;myform&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">myform</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;myform&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 当提交表单的时候，在控制台输出“表单提交” */</span></span><br><span class="line">    myform.onsubmit = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;表单提交&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">/* 用来阻止表单提交的，你不写它会跳转请求 */</span></span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/98d3c1ca8f329bfce30b42a26d83efbe.png" alt="img"></p><h3 id="4-4-4、键盘事件"><a href="#4-4-4、键盘事件" class="headerlink" title="4.4.4、键盘事件"></a>4.4.4、键盘事件</h3><p>通过键盘触发事件，类似用户的行为：</p><p><strong>案例演示1：当键盘按下判断当前的按键是不是 a ，如果是就输出true，否则输出false</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/* 当键盘按下判断当前的按键是不是 a ，如果是就输出true，否则输出false */</span></span><br><span class="line">    window.onkeydown = function (event) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/* 解决兼容性问题 */</span></span><br><span class="line">        event = event || window.event;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (event.keyCode == <span class="number">65</span>) &#123;</span><br><span class="line">    </span><br><span class="line">            console.log(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            console.log(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f596c9f32c2ef61465bde0ff255fa652.png" alt="img"></p><p><strong>案例演示2：使div可以根据不同的方向键向不同的方向移动</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span> style=<span class="string">&quot;width: 100px;height: 100px;background: red;position: absolute;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">box</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为document绑定一个按键按下的事件</span></span><br><span class="line">    document.onkeydown = function (event) &#123;</span><br><span class="line">    </span><br><span class="line">        event = event || window.event;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义移动速度</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">speed</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选择移动方向</span></span><br><span class="line">        <span class="keyword">switch</span> (event.keyCode) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">                box.style.left = box.offsetLeft - speed + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">                box.style.left = box.offsetLeft + speed + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">                box.style.top = box.offsetTop - speed + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                box.style.top = box.offsetTop + speed + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6dcd6c4ddbb7e445435bdb5695352fc7.png" alt="img"></p><p><strong>拓展知识：</strong></p><p>当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数。</p><p>Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标的状态。</p><p>在IE8中，响应函数被触发时，浏览器不会传递事件对象，在IE8及以下的浏览器中，是将事件对象作为window对象的属性保存的。</p><p>解决事件对象的兼容性问题：event = event || window.event;</p><p><strong>键鼠属性：</strong></p><h3 id="4-4-5、鼠标事件"><a href="#4-4-5、鼠标事件" class="headerlink" title="4.4.5、鼠标事件"></a>4.4.5、鼠标事件</h3><p>通过鼠标触发事件，类似用户的行为：</p><p><strong>案例演示1：创建一个正方形div，默认颜色为黑色，当鼠标移入div，背景颜色变为红色，当鼠标移出div，背景颜色变为绿色</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span> style=<span class="string">&quot;width: 100px;height: 100px;background: black;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">box</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 当鼠标移入div，背景颜色变为红色 */</span></span><br><span class="line">    box.onmouseenter = function () &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">this</span>.style.background = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 当鼠标移出div，背景颜色变为绿色 */</span></span><br><span class="line">    box.onmouseleave = function () &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/037cf65cf7cde9f4375a4ccadd933cc5.png" alt="img"></p><p><strong>案例演示2：编写一个通用的拖拽元素函数，创建两个div，进行拖拽演示，要求兼容IE8、火狐、谷歌等主流浏览器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;box1&quot;</span> style=<span class="string">&quot;width: 100px;height: 100px;background: red;position: absolute;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;box2&quot;</span> style=<span class="string">&quot;width: 100px;height: 100px;background: green;position: absolute;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">box1</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">box2</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;box2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    drag(box1);</span><br><span class="line">    drag(box2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 提取一个专门用来设置拖拽的函数</span></span><br><span class="line"><span class="comment">     * 参数：开启拖拽的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">drag</span><span class="params">(obj)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//当鼠标在被拖拽元素上按下时，开始拖拽</span></span><br><span class="line">        obj.onmousedown = function (event) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 解决事件的兼容性问题</span></span><br><span class="line">            event = event || window.event;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置obj捕获所有鼠标按下的事件</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * setCapture()：</span></span><br><span class="line"><span class="comment">             * 只有IE支持，但是在火狐中调用时不会报错，</span></span><br><span class="line"><span class="comment">             * 而如果使用chrome调用，它也会报错</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            obj.setCapture &amp;&amp; obj.setCapture();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// obj的偏移量 鼠标.clentX - 元素.offsetLeft</span></span><br><span class="line">            <span class="comment">// obj的偏移量 鼠标.clentY - 元素.offsetTop</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">ol</span> <span class="operator">=</span> event.clientX - obj.offsetLeft;</span><br><span class="line">            <span class="type">var</span> <span class="variable">ot</span> <span class="operator">=</span> event.clientY - obj.offsetTop;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为document绑定一个鼠标移动事件</span></span><br><span class="line">            document.onmousemove = function (event) &#123;</span><br><span class="line">    </span><br><span class="line">                <span class="comment">// 解决事件的兼容性问题</span></span><br><span class="line">                event = event || window.event;</span><br><span class="line">                <span class="comment">// 当鼠标移动时被拖拽元素跟随鼠标移动</span></span><br><span class="line">                <span class="comment">// 获取鼠标的坐标</span></span><br><span class="line">                <span class="type">var</span> <span class="variable">left</span> <span class="operator">=</span> event.clientX - ol;</span><br><span class="line">                <span class="type">var</span> <span class="variable">top</span> <span class="operator">=</span> event.clientY - ot;</span><br><span class="line">                <span class="comment">// 修改obj的位置</span></span><br><span class="line">                obj.style.left = left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                obj.style.top = top + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为document绑定一个鼠标松开事件</span></span><br><span class="line">            document.onmouseup = function () &#123;</span><br><span class="line">    </span><br><span class="line">                <span class="comment">// 取消document的onmousemove事件</span></span><br><span class="line">                document.onmousemove = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// 取消document的onmouseup事件</span></span><br><span class="line">                document.onmouseup = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// 当鼠标松开时，取消对事件的捕获</span></span><br><span class="line">                obj.releaseCapture &amp;&amp; obj.releaseCapture();</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容，</span></span><br><span class="line"><span class="comment">             * 此时会导致拖拽功能的异常，这个是浏览器提供的默认行为，</span></span><br><span class="line"><span class="comment">             * 如果不希望发生这个行为，则可以通过return false来取消默认行为，</span></span><br><span class="line"><span class="comment">             * 但是这招对IE8不起作用</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/1ed4299c0d5122603c08a22f9a09dc99.png" alt="img"></p><h3 id="4-4-6、媒体事件"><a href="#4-4-6、媒体事件" class="headerlink" title="4.4.6、媒体事件"></a>4.4.6、媒体事件</h3><p>通过视频（videos），图像（images）或音频（audio） 触发该事件。</p><h3 id="4-4-7、其它事件"><a href="#4-4-7、其它事件" class="headerlink" title="4.4.7、其它事件"></a>4.4.7、其它事件</h3><h3 id="4-4-8、事件冒泡"><a href="#4-4-8、事件冒泡" class="headerlink" title="4.4.8、事件冒泡"></a>4.4.8、事件冒泡</h3><p>事件的冒泡（Bubble）：所谓的冒泡指的就是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发，在开发中大部分情况冒泡都是有用的，如果不希望发生事件冒泡可以通过事件对象来取消冒泡。</p><p><strong>案例演示1：创建两个div，叠放在一起，分别绑定单击事件，点击最里边的div，会触发两个div的单击事件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #div1 &#123;</span><br><span class="line">    </span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #div2 &#123;</span><br><span class="line">    </span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: coral;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">    我是DIV1</span><br><span class="line">    &lt;div id=<span class="string">&quot;div2&quot;</span>&gt;</span><br><span class="line">        我是DIV2</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">div1</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">div2</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;div2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为div1绑定单击事件</span></span><br><span class="line">    div1.onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;div1 的单击事件触发了！&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为div2绑定单击事件</span></span><br><span class="line">    div2.onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;div2 的单击事件触发了！&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ba87c18f487c6526af5a8a97a10c68bc.png" alt="img"></p><p><strong>案例演示2：创建两个div，叠放在一起，分别绑定单击事件，点击最里边的div，不会触发两个div的单击事件，只会触发自己的单击事件，这时候我们可以取消事件冒泡</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #div1 &#123;</span><br><span class="line">    </span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #div2 &#123;</span><br><span class="line">    </span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: coral;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">    我是DIV1</span><br><span class="line">    &lt;div id=<span class="string">&quot;div2&quot;</span>&gt;</span><br><span class="line">        我是DIV2</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">div1</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">div2</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;div2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为div1绑定单击事件</span></span><br><span class="line">    div1.onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;div1 的单击事件触发了！&quot;</span>);</span><br><span class="line">        stopBubble();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为div2绑定单击事件</span></span><br><span class="line">    div2.onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;div2 的单击事件触发了！&quot;</span>);</span><br><span class="line">        stopBubble();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消事件冒泡</span></span><br><span class="line">    function <span class="title function_">stopBubble</span><span class="params">(event)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 如果提供了事件对象，则这是一个非IE浏览器</span></span><br><span class="line">        <span class="keyword">if</span> (event &amp;&amp; event.stopPropagation) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 因此它支持W3C的stopPropagation()方法</span></span><br><span class="line">            event.stopPropagation();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 否则，我们需要使用IE的方式来取消事件冒泡</span></span><br><span class="line">            window.event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/808bc3dd4059e2806c1d0ff5a9de8ac4.png" alt="img"></p><p><strong>案例演示3：当点击a标签的时候，阻止a标签的默认跳转事件，采用事件阻止</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #div1 &#123;</span><br><span class="line">    </span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #div2 &#123;</span><br><span class="line">    </span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: coral;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span> id=<span class="string">&quot;a&quot;</span>&gt;打开百度，你就知道！&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为a绑定单击事件</span></span><br><span class="line">    a.onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        stopDefault();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻止浏览器的默认行为</span></span><br><span class="line">    function <span class="title function_">stopDefault</span><span class="params">(event)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (event &amp;&amp; event.preventDefault) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 阻止默认浏览器动作(W3C)</span></span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// IE中阻止函数器默认动作的方式</span></span><br><span class="line">            window.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/bfb4c4a79727ce4a694cf954081825ea.png" alt="img"></p><h3 id="4-4-9、事件委派"><a href="#4-4-9、事件委派" class="headerlink" title="4.4.9、事件委派"></a>4.4.9、事件委派</h3><p>我们希望只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的，我们可以尝试将其绑定给元素的共同的祖先元素，也就是事件的委派。事件的委派，是指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件。事件委派是利用了事件冒泡，通过委派可以减少事件绑定的次数，提高程序的性能。</p><p><strong>案例演示：为ul列表中的所有a标签都绑定单击事件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=<span class="string">&quot;u1&quot;</span>&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=<span class="string">&quot;javascript:;&quot;</span> class=<span class="string">&quot;link&quot;</span>&gt;超链接一&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=<span class="string">&quot;javascript:;&quot;</span> class=<span class="string">&quot;link&quot;</span>&gt;超链接二&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=<span class="string">&quot;javascript:;&quot;</span> class=<span class="string">&quot;link&quot;</span>&gt;超链接三&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">u1</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;u1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为ul绑定一个单击响应函数</span></span><br><span class="line">    u1.onclick = function (event) &#123;</span><br><span class="line">    </span><br><span class="line">        event = event || window.event;</span><br><span class="line">        <span class="comment">// 如果触发事件的对象是我们期望的元素，则执行，否则不执行</span></span><br><span class="line">        <span class="keyword">if</span> (event.target.className == <span class="string">&quot;link&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">            console.log(<span class="string">&quot;我是ul的单击响应函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c91cf2da0f845694fe0be4e024e376d4.png" alt="img"></p><h3 id="4-4-10、事件绑定"><a href="#4-4-10、事件绑定" class="headerlink" title="4.4.10、事件绑定"></a>4.4.10、事件绑定</h3><p>我们以前绑定事件代码只能一个事件绑定一个函数，那我们要是想一个事件对应多个函数，并且不存在兼容性的问题该如何解决呢？</p><p>接下来，我会直接提供两个已经编写好的事件绑定和事件解绑的兼容性代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*为元素绑定事件兼容性代码*/</span></span><br><span class="line">function <span class="title function_">addEventListener</span><span class="params">(element, type, fn)</span> &#123;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span>(element.addEventListener) &#123;</span><br><span class="line">   </span><br><span class="line">element.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent) &#123;</span><br><span class="line">   </span><br><span class="line">element.attachEvent(<span class="string">&quot;on&quot;</span> + type, fn);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line">element[<span class="string">&quot;on&quot;</span> + type] = fn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*为元素解绑事件兼容性代码*/</span></span><br><span class="line">function <span class="title function_">removeEventListener</span><span class="params">(element, type, fnName)</span> &#123;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span>(element.removeEventListener) &#123;</span><br><span class="line">   </span><br><span class="line">element.removeEventListener(type, fnName, <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent) &#123;</span><br><span class="line">   </span><br><span class="line">element.detachEvent(<span class="string">&quot;on&quot;</span> + type, fnName);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line">element[<span class="string">&quot;on&quot;</span> + type] = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例演示：为按钮1的单击事件绑定两个函数，然后点击按钮2取消按钮1的单机事件绑定函数f1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;按钮<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn2&quot;</span>&gt;按钮<span class="number">2</span>&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;output1 ...&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">f2</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">        console.log(<span class="string">&quot;output2 ...&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为按钮1的单击事件绑定两个函数</span></span><br><span class="line">    addEventListener(document.getElementById(<span class="string">&quot;btn1&quot;</span>), <span class="string">&quot;click&quot;</span>, f1);</span><br><span class="line">    addEventListener(document.getElementById(<span class="string">&quot;btn1&quot;</span>), <span class="string">&quot;click&quot;</span>, f2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击按钮2取消按钮1的单机事件绑定函数f1</span></span><br><span class="line">    document.getElementById(<span class="string">&quot;btn2&quot;</span>).onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        removeEventListener(document.getElementById(<span class="string">&quot;btn1&quot;</span>), <span class="string">&quot;click&quot;</span>, f1);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*为元素绑定事件兼容性代码*/</span></span><br><span class="line">    function <span class="title function_">addEventListener</span><span class="params">(element, type, fn)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">    </span><br><span class="line">            element.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">    </span><br><span class="line">            element.attachEvent(<span class="string">&quot;on&quot;</span> + type, fn);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            element[<span class="string">&quot;on&quot;</span> + type] = fn;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*为元素解绑事件兼容性代码*/</span></span><br><span class="line">    function <span class="title function_">removeEventListener</span><span class="params">(element, type, fnName)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">    </span><br><span class="line">            element.removeEventListener(type, fnName, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</span><br><span class="line">    </span><br><span class="line">            element.detachEvent(<span class="string">&quot;on&quot;</span> + type, fnName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">            element[<span class="string">&quot;on&quot;</span> + type] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>谷歌浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/565bee515261af37f290f515562dd05a.png" alt="img"></p><p>火狐浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6bf58432640db9359ac8d4d5ccfb3260.png" alt="img"></p><p>IE8-IE11浏览器：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3165e958579ea6d89a76a30a2aea4eb5.png" alt="img"></p><h3 id="4-4-11、事件传播"><a href="#4-4-11、事件传播" class="headerlink" title="4.4.11、事件传播"></a>4.4.11、事件传播</h3><p>事件的传播：关于事件的传播网景公司和微软公司有不同的理解</p><p>微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素上的事件，然后再向当前元素的祖先元素上传播，也就说事件应该在冒泡阶段执行。</p><p>网景公司认为事件应该是由外向内传播的，也就是当前事件触发时，应该先触发当前元素的最外层的祖先元素的事件，然后在向内传播给后代元素。</p><p>W3C综合了两个公司的方案，将事件传播分成了三个阶段：</p><ol><li>捕获阶段：在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件 </li><li>目标阶段：事件捕获到目标元素，捕获结束开始在目标元素上触发事件 </li><li>冒泡阶段：事件从目标元素向它的祖先元素传递，依次触发祖先元素上的事件</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/606369d19295725d727fd8a04285f3e2.png" alt="img"></p><blockquote><p>注意：如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true，一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false，并且注意，IE8及以下的浏览器中没有捕获阶段，我们可以使用<code>event.stopPropagation();</code>取消事件传播。</p></blockquote><h2 id="5-1、BOM概述"><a href="#5-1、BOM概述" class="headerlink" title="5.1、BOM概述"></a>5.1、BOM概述</h2><p>浏览器对象模型（BOM）使 JavaScript 有能力与浏览器”对话”。</p><p>浏览器对象模型（<strong>B</strong>rowser <strong>O</strong>bject <strong>M</strong>odel (BOM)）尚无正式标准。</p><p>由于现代浏览器已经（几乎）实现了 JavaScript 交互性方面的相同方法和属性，因此常被认为是BOM的方法和属性。</p><p>浏览器对象模型（BOM）可以使我们通过JS来操作浏览器，在BOM中为我们提供了一组对象，用来完成对浏览器的操作，常见的BOM对象如下：</p><ul><li>Window：代表的是整个浏览器的窗口，同时window也是网页中的全局对象 </li><li>Navigator：代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器 </li><li>Location：代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面 </li><li>History：代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录，由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页，而且该操作只在当次访问时有效 </li><li>Screen：代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息</li></ul><p>这些BOM对象在浏览器中都是作为window对象的属性保存的，可以通过window对象来使用，也可以直接使用。</p><h2 id="5-2、Window对象"><a href="#5-2、Window对象" class="headerlink" title="5.2、Window对象"></a>5.2、Window对象</h2><h3 id="5-2-1、弹出框"><a href="#5-2-1、弹出框" class="headerlink" title="5.2.1、弹出框"></a>5.2.1、弹出框</h3><p><strong>JavaScript 有三种类型的弹出框：警告框、确认框和提示框。</strong></p><h4 id="5-2-1-1、警告框"><a href="#5-2-1-1、警告框" class="headerlink" title="5.2.1.1、警告框"></a>5.2.1.1、警告框</h4><p>如果要确保信息传递给用户，通常会使用警告框。当警告框弹出时，用户将需要单击“确定”来继续。</p><p><strong>语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.alert(<span class="string">&quot;sometext&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意：window.alert() 方法可以不带 window 前缀来写。</p></blockquote><p><strong>实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&quot;我是一个警告框！&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="5-2-1-2、确认框"><a href="#5-2-1-2、确认框" class="headerlink" title="5.2.1.2、确认框"></a>5.2.1.2、确认框</h4><p>如果您希望用户验证或接受某个东西，则通常使用“确认”框。</p><p>当确认框弹出时，用户将不得不单击“确定”或“取消”来继续进行。</p><p>如果用户单击“确定”，该框返回 true。如果用户单击“取消”，该框返回 false。</p><p><strong>语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.confirm(<span class="string">&quot;sometext&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意：window.confirm() 方法可以不带 window 前缀来编写。</p></blockquote><p><strong>实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">r</span> <span class="operator">=</span> confirm(<span class="string">&quot;请按按钮&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (r == <span class="literal">true</span>) &#123;</span><br><span class="line">   </span><br><span class="line">    x = <span class="string">&quot;您按了确认！&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line">    x = <span class="string">&quot;您按了取消！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-1-3、提示框"><a href="#5-2-1-3、提示框" class="headerlink" title="5.2.1.3、提示框"></a>5.2.1.3、提示框</h4><p>如果您希望用户在进入页面前输入值，通常会使用提示框。</p><p>当提示框弹出时，用户将不得不输入值后单击“确定”或点击“取消”来继续进行。</p><p>如果用户单击“确定”，该框返回输入值。如果用户单击“取消”，该框返回 NULL。</p><p><strong>语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.prompt(<span class="string">&quot;sometext&quot;</span>,<span class="string">&quot;defaultText&quot;</span>);</span><br></pre></td></tr></table></figure><p>window.prompt() 方法可以不带 window 前缀来编写。</p><p><strong>实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">person</span> <span class="operator">=</span> prompt(<span class="string">&quot;请输入您的姓名&quot;</span>, <span class="string">&quot;比尔盖茨&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (person != <span class="literal">null</span>) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2、定时事件"><a href="#5-2-2、定时事件" class="headerlink" title="5.2.2、定时事件"></a>5.2.2、定时事件</h3><p><strong>JavaScript 可以在时间间隔内执行，这就是所谓的定时事件（ Timing Events）。</strong></p><p>window 对象允许以指定的时间间隔执行代码，这些时间间隔称为定时事件。</p><p>通过 JavaScript 使用的有两个关键的方法：</p><ul><li>setTimeout(function, milliseconds) 在等待指定的毫秒数后执行函数。  </li><li>setInterval(function, milliseconds) 等同于 setTimeout()，但持续重复执行该函数。 </li></ul><p>setTimeout() 和 setInterval() 都属于 window 对象的方法。</p><h4 id="5-2-2-1、延时器"><a href="#5-2-2-1、延时器" class="headerlink" title="5.2.2.1、延时器"></a>5.2.2.1、延时器</h4><p><strong>setTimeout() 方法：延时器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.setTimeout(function, milliseconds);</span><br></pre></td></tr></table></figure><blockquote><p>注意：window.setTimeout() 方法可以不带 window 前缀来编写。</p></blockquote><ul><li>第一个参数是要执行的函数。 </li><li>第二个参数指示执行之前的毫秒数。</li></ul><p><strong>案例演示：单击按钮，等待 3 秒，然后控制台会输出 “Hello”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">btn</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    btn.onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 创建延时器</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">timer</span> <span class="operator">=</span> setTimeout(function () &#123;</span><br><span class="line">    </span><br><span class="line">            console.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 清除延时器</span></span><br><span class="line">        <span class="comment">// clearTimeout(timer);        </span></span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-2、定时器"><a href="#5-2-2-2、定时器" class="headerlink" title="5.2.2.2、定时器"></a>5.2.2.2、定时器</h4><p><strong>setInterval() 方法：定时器</strong></p><p>setInterval() 方法在每个给定的时间间隔重复给定的函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.setInterval(function, milliseconds);</span><br></pre></td></tr></table></figure><blockquote><p>注意：window.setInterval() 方法可以不带 window 前缀来写。</p></blockquote><ul><li>第一个参数是要执行的函数。 </li><li>第二个参数每个执行之间的时间间隔的长度。</li></ul><p><strong>案例演示：单击按钮，每隔一秒向控制台输出 “Hello”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">btn</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    btn.onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 创建定时器</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">timer</span> <span class="operator">=</span> setInterval(function () &#123;</span><br><span class="line">    </span><br><span class="line">            console.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除定时器</span></span><br><span class="line">        <span class="comment">// clearInterval(timer);</span></span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>拓展知识：</strong></p><p>做一个通用移动函数来实现小汽车（黑色方块）移动的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">/*控制器样式*/</span></span><br><span class="line">        .controller &#123;</span><br><span class="line">    </span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .controller button &#123;</span><br><span class="line">    </span><br><span class="line">            outline: none;</span><br><span class="line">            border: none;</span><br><span class="line">            margin: 0px;</span><br><span class="line">            padding: 0px;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: #E9E9E9;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            <span class="type">float</span>: left;</span><br><span class="line">            -webkit-box-sizing: border-box;</span><br><span class="line">            -moz-box-sizing: border-box;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">            border: 2px solid #F0F0F0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .controller button:hover &#123;</span><br><span class="line">    </span><br><span class="line">            background-color: #F9F9F9;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*公路样式*/</span></span><br><span class="line">        .road &#123;</span><br><span class="line">    </span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            height: 100px;</span><br><span class="line">            position: relative;</span><br><span class="line">            margin-top: 50px;</span><br><span class="line">            background: #3DB1FF;</span><br><span class="line">            opacity: <span class="number">.90</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .road800 &#123;</span><br><span class="line">    </span><br><span class="line">            width: 800px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: pink;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0px;</span><br><span class="line">            left: 0px;</span><br><span class="line">            z-index: <span class="number">1000</span>;</span><br><span class="line">            opacity: <span class="number">.75</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .road1200 &#123;</span><br><span class="line">    </span><br><span class="line">            width: 1200px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: orange;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0px;</span><br><span class="line">            left: 0px;</span><br><span class="line">            z-index: <span class="number">500</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*小汽车样式*/</span></span><br><span class="line">        div#car &#123;</span><br><span class="line">    </span><br><span class="line">            width: 135px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            display: block;</span><br><span class="line">            background: black;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0px;</span><br><span class="line">            left: 0px;</span><br><span class="line">            z-index: <span class="number">1500</span>;</span><br><span class="line">            -webkit-box-sizing: border-box;</span><br><span class="line">            -moz-box-sizing: border-box;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">            <span class="comment">/*border: 1px solid #F0F0F0;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;controller&quot;</span>&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;移动到800PX&lt;/button&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn2&quot;</span>&gt;移动到1200PX&lt;/button&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn3&quot;</span>&gt;回家&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;road&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;road800&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;road1200&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;car&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(<span class="string">&quot;btn1&quot;</span>).onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        move(document.getElementById(<span class="string">&quot;car&quot;</span>), <span class="number">800</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    document.getElementById(<span class="string">&quot;btn2&quot;</span>).onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        move(document.getElementById(<span class="string">&quot;car&quot;</span>), <span class="number">1200</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    document.getElementById(<span class="string">&quot;btn3&quot;</span>).onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">        move(document.getElementById(<span class="string">&quot;car&quot;</span>), <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*移动函数*/</span></span><br><span class="line">    function <span class="title function_">move</span><span class="params">(element, target)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 先清理定时器</span></span><br><span class="line">        clearInterval(element.timeId);</span><br><span class="line">        <span class="comment">// 一会要清理定时器(只产生一个定时器)</span></span><br><span class="line">        element.timeId = setInterval(function () &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 获取对象当前的位置</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">current</span> <span class="operator">=</span> element.offsetLeft;</span><br><span class="line">            <span class="comment">// 每次移动多少像素</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 判断是往正方向走还是往相反方向走</span></span><br><span class="line">            step = current &lt; target ? step : -step;</span><br><span class="line">            <span class="comment">// 每次移动后的距离</span></span><br><span class="line">            current += step;</span><br><span class="line">            <span class="comment">// 判断当前移动后的位置是否到达目标位置</span></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(target - current) &gt; Math.abs(step)) &#123;</span><br><span class="line">    </span><br><span class="line">                element.style.left = current + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">                <span class="comment">// 清理定时器</span></span><br><span class="line">                clearInterval(element.timeId);</span><br><span class="line">                element.style.left = target + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ca0829497172a492ca72738eaea27612.png" alt="img"></p><h3 id="5-2-3、常用窗口属性"><a href="#5-2-3、常用窗口属性" class="headerlink" title="5.2.3、常用窗口属性"></a>5.2.3、常用窗口属性</h3><p>两个属性可用用于确定浏览器窗口的尺寸。</p><p>这两个属性都以像素返回尺寸：</p><ul><li>window.innerHeight - 浏览器窗口的内高度（以像素计） </li><li>window.innerWidth - 浏览器窗口的内宽度（以像素计）</li></ul><p>浏览器窗口（浏览器视口）不包括工具栏和滚动条。</p><p>对于 Internet Explorer 8, 7, 6, 5：</p><ul><li>document.documentElement.clientHeight </li><li>document.documentElement.clientWidth</li></ul><p>或</p><ul><li>document.body.clientHeight </li><li>document.body.clientWidth</li></ul><p>一个实用的 JavaScript 解决方案（包括所有浏览器）：该例显示浏览器窗口的高度和宽度（不包括工具栏和滚动条）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">var</span> <span class="variable">w</span> <span class="operator">=</span> window.innerWidth</span><br><span class="line">        || document.documentElement.clientWidth</span><br><span class="line">        || document.body.clientWidth;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">h</span> <span class="operator">=</span> window.innerHeight</span><br><span class="line">        || document.documentElement.clientHeight</span><br><span class="line">        || document.body.clientHeight;</span><br><span class="line"></span><br><span class="line">    console.log(w);</span><br><span class="line">    console.log(h);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-2-4、其它窗口方法"><a href="#5-2-4、其它窗口方法" class="headerlink" title="5.2.4、其它窗口方法"></a>5.2.4、其它窗口方法</h3><ul><li>window.open() ：打开新的窗口 语法介绍： window.open(URL,name,specs,replace); 参数介绍：  案例演示： <pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta&lt;/span&gt; <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class=“token punctuation">"</span>UTF-8<span class=“token punctuation">"</span>&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button&lt;/span&gt; <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class=“token punctuation">"</span>openWin()<span class=“token punctuation">"</span>&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;打开窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;</li></ul><p><span class="token comment">&lt;!— 在这里写JavaScript代码，因为JavaScript是由上到下执行的 —&gt;</span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<span class="token script language-javascript"><br>    <span class="token keyword">function</span> <span class="token function">openWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><pre><code> &lt;!-- --&gt;&lt;/span&gt;    myWindow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;width=200,height=100&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    myWindow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;p&amp;gt;这是新建窗口&amp;lt;/p&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;</code></pre><p>&lt;/span&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br>&lt;/code&gt;&lt;/pre&gt;  </p><ul><li>window.close() ：关闭当前窗口 语法介绍： window.close(); 案例演示： <pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta&lt;/span&gt; <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class=“token punctuation">"</span>UTF-8<span class=“token punctuation">"</span>&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button&lt;/span&gt; <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class=“token punctuation">"</span>openWin()<span class=“token punctuation">"</span>&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;打开窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button&lt;/span&gt; <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class=“token punctuation">"</span>closeWin()<span class=“token punctuation">"</span>&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;关闭窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;</li></ul><p><span class="token comment">&lt;!— 在这里写JavaScript代码，因为JavaScript是由上到下执行的 —&gt;</span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<span class="token script language-javascript"><br>    <span class="token keyword">function</span> <span class="token function">openWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><pre><code> &lt;!-- --&gt;&lt;/span&gt;    myWindow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;width=200,height=100&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    myWindow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;p&amp;gt;这是新建窗口&amp;lt;/p&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;closeWin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123; &lt;!-- --&gt;&lt;/span&gt;    myWindow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;</code></pre><p>&lt;/span&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br>&lt;/code&gt;&lt;/pre&gt;  </p><ul><li>window.moveTo() ：移动当前窗口 语法介绍： window.moveTo(x,y); 案例演示： <pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta&lt;/span&gt; <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class=“token punctuation">"</span>UTF-8<span class=“token punctuation">"</span>&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button&lt;/span&gt; <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class=“token punctuation">"</span>openWin()<span class=“token punctuation">"</span>&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;打开窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button&lt;/span&gt; <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class=“token punctuation">"</span>moveWin()<span class=“token punctuation">"</span>&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;移动窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;</li></ul><p><span class="token comment">&lt;!— 在这里写JavaScript代码，因为JavaScript是由上到下执行的 —&gt;</span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<span class="token script language-javascript"><br>    <span class="token keyword">function</span> <span class="token function">openWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><pre><code> &lt;!-- --&gt;&lt;/span&gt;    myWindow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;width=200,height=100&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    myWindow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;p&amp;gt;这是新建窗口&amp;lt;/p&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;moveWin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123; &lt;!-- --&gt;&lt;/span&gt;    myWindow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;moveTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    myWindow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;</code></pre><p>&lt;/span&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br>&lt;/code&gt;&lt;/pre&gt;  </p><ul><li>window.resizeTo() ：调整当前窗口 语法介绍： window.resizeTo(width,height); 案例演示： <pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta&lt;/span&gt; <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class=“token punctuation">"</span>UTF-8<span class=“token punctuation">"</span>&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button&lt;/span&gt; <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class=“token punctuation">"</span>openWin()<span class=“token punctuation">"</span>&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;打开窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button&lt;/span&gt; <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class=“token punctuation">"</span>resizeWin()<span class=“token punctuation">"</span>&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;调整窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;</li></ul><p><span class="token comment">&lt;!— 在这里写JavaScript代码，因为JavaScript是由上到下执行的 —&gt;</span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<span class="token script language-javascript"><br>    <span class="token keyword">function</span> <span class="token function">openWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</p><pre><code> &lt;!-- --&gt;&lt;/span&gt;    myWindow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;width=200,height=100&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    myWindow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;p&amp;gt;这是新建窗口&amp;lt;/p&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resizeWin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123; &lt;!-- --&gt;&lt;/span&gt;    myWindow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resizeTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    myWindow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;</code></pre><p>&lt;/span&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<br>&lt;/code&gt;&lt;/pre&gt; </p><h2 id="5-3、Navigator对象"><a href="#5-3、Navigator对象" class="headerlink" title="5.3、Navigator对象"></a>5.3、Navigator对象</h2><p>Navigator代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器，由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了，一般我们只会使用userAgent来判断浏览器的信息，userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，不同的浏览器会有不同的userAgent，如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">ua</span> <span class="operator">=</span> navigator.userAgent;</span><br><span class="line">console.log(ua);</span><br></pre></td></tr></table></figure><p>谷歌浏览器：</p><ul><li>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36</li></ul><p>火狐浏览器：</p><ul><li>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko/20100101 Firefox/81.0</li></ul><p>IE11浏览器：</p><ul><li>Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; rv:11.0) like Gecko</li></ul><p>IE10浏览器：</p><ul><li>Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</li></ul><p>IE9浏览器：</p><ul><li>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</li></ul><p>IE8浏览器：</p><ul><li>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</li></ul><p>IE7浏览器：</p><ul><li>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</li></ul><p>于是乎，我们就可以实现对浏览器类型的判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">ua</span> <span class="operator">=</span> navigator.userAgent;</span><br><span class="line"><span class="keyword">if</span> (/firefox/i.test(ua)) &#123;</span><br><span class="line">   </span><br><span class="line">    alert(<span class="string">&quot;你是火狐浏览器&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (/chrome/i.test(ua)) &#123;</span><br><span class="line">   </span><br><span class="line">    alert(<span class="string">&quot;你是谷歌浏览器&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (/msie/i.test(ua)) &#123;</span><br><span class="line">   </span><br><span class="line">    alert(<span class="string">&quot;你是IE5-IE10浏览器&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;ActiveXObject&quot;</span> in window) &#123;</span><br><span class="line">   </span><br><span class="line">    alert(<span class="string">&quot;你是IE11浏览器&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在IE11中已经将微软和IE相关的标识都已经去除了，所以我们基本已经不能通过UserAgent来识别一个浏览器是否是IE了，如果通过UserAgent不能判断，还可以通过一些浏览器中特有的对象，来判断浏览器的信息，比如：ActiveXObject</p></blockquote><h2 id="5-4、Location对象"><a href="#5-4、Location对象" class="headerlink" title="5.4、Location对象"></a>5.4、Location对象</h2><p>Location对象中封装了浏览器的地址栏的信息，如果直接打印location，则可以获取到地址栏的信息（当前页面的完整路径）</p><h3 id="5-4-1、常用属性"><a href="#5-4-1、常用属性" class="headerlink" title="5.4.1、常用属性"></a>5.4.1、常用属性</h3><p>常用属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">console.log(location);          <span class="comment">//输出location对象</span></span><br><span class="line">console.log(location.href);     <span class="comment">//输出当前地址的全路径地址</span></span><br><span class="line">console.log(location.origin);   <span class="comment">//输出当前地址的来源</span></span><br><span class="line">console.log(location.protocol); <span class="comment">//输出当前地址的协议</span></span><br><span class="line">console.log(location.hostname); <span class="comment">//输出当前地址的主机名</span></span><br><span class="line">console.log(location.host);     <span class="comment">//输出当前地址的主机</span></span><br><span class="line">console.log(location.port);     <span class="comment">//输出当前地址的端口号</span></span><br><span class="line">console.log(location.pathname); <span class="comment">//输出当前地址的路径部分</span></span><br><span class="line">console.log(location.search);   <span class="comment">//输出当前地址的?后边的参数部分</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/8d92b74a6a79761ba5256a6e533464fb.png" alt="img"></p><p>修改地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location = <span class="string">&quot;https://www.baidu.com&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.href = <span class="string">&quot;https://www.baidu.com&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="5-4-2、常用方法"><a href="#5-4-2、常用方法" class="headerlink" title="5.4.2、常用方法"></a>5.4.2、常用方法</h3><p>assign()：用来跳转到其它的页面，作用和直接修改location一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.assign(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br></pre></td></tr></table></figure><p>reload()：用于重新加载当前页面，作用和刷新按钮一样，如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.reload(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>replace()：可以使用一个新的页面替换当前页面，调用完毕也会跳转页面，它不会生成历史记录，不能使用回退按钮回退</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.replace(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="5-5、History对象"><a href="#5-5、History对象" class="headerlink" title="5.5、History对象"></a>5.5、History对象</h2><p>History对象可以用来操作浏览器向前或向后翻页</p><h3 id="5-5-1、常用属性"><a href="#5-5-1、常用属性" class="headerlink" title="5.5.1、常用属性"></a>5.5.1、常用属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(history);           <span class="comment">//输出history对象</span></span><br><span class="line">console.log(history.length);    <span class="comment">//可以获取到当成访问的链接数量</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3075d1de3bdaf4848f9da17f494d8d8e.png" alt="img"></p><h3 id="5-5-2、常用方法"><a href="#5-5-2、常用方法" class="headerlink" title="5.5.2、常用方法"></a>5.5.2、常用方法</h3><p>back()：可以回退到上一个页面，作用和浏览器的回退按钮一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.back();</span><br></pre></td></tr></table></figure><p>forward()：可以跳转到下一个页面，作用和浏览器的前进按钮一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.forward();</span><br></pre></td></tr></table></figure><p>go()：可以用来跳转到指定的页面，它需要一个整数作为参数</p><ul><li>1：表示向前跳转一个页面，相当于forward() </li><li>2：表示向前跳转两个页面 </li><li>-1：表示向后跳转一个页面，相当于back() </li><li>-2：表示向后跳转两个页面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.go(-<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="5-6、Screen对象"><a href="#5-6、Screen对象" class="headerlink" title="5.6、Screen对象"></a>5.6、Screen对象</h2><p>Screen 对象包含有关客户端显示屏幕的信息。</p><blockquote><p>注意：没有应用于 screen 对象的公开标准，不过所有浏览器都支持该对象。</p></blockquote><h3 id="5-6-1、Screen对象描述"><a href="#5-6-1、Screen对象描述" class="headerlink" title="5.6.1、Screen对象描述"></a>5.6.1、Screen对象描述</h3><p>每个 Window 对象的 screen 属性都引用一个 Screen 对象。Screen 对象中存放着有关显示浏览器屏幕的信息。JavaScript 程序将利用这些信息来优化它们的输出，以达到用户的显示要求。例如，一个程序可以根据显示器的尺寸选择使用大图像还是使用小图像，它还可以根据显示器的颜色深度选择使用 16 位色还是使用 8 位色的图形。另外，JavaScript 程序还能根据有关屏幕尺寸的信息将新的浏览器窗口定位在屏幕中间。</p><h3 id="5-6-2、Screen对象属性"><a href="#5-6-2、Screen对象属性" class="headerlink" title="5.6.2、Screen对象属性"></a>5.6.2、Screen对象属性</h3><h2 id="6-1、Exception"><a href="#6-1、Exception" class="headerlink" title="6.1、Exception"></a>6.1、Exception</h2><h3 id="6-1-1、异常概述"><a href="#6-1-1、异常概述" class="headerlink" title="6.1.1、异常概述"></a>6.1.1、异常概述</h3><p>在ES3之前JavaScript代码执行的过程中，一旦出现错误，整个JavaScript代码都会停止执行，这样就显的代码非常的不健壮。</p><p>在Java或C#等一些高级语言中，都提供了异常处理机制，可以处理出现的异常，而不会停止整个应用程序。</p><p>从ES3开始，JavaScript也提供了类似的异常处理机制，从而让JavaScript代码变的更健壮，即使执行的过程中出现了异常，也可以让程序具有了一部分的异常恢复能力。</p><p>当错误发生时，JavaScript 提供了错误信息的内置 error 对象。</p><p>error 对象提供两个有用的属性：name 和 message 。</p><p><strong>Error 对象属性</strong></p><p><strong>Error Name Values</strong></p><p>error 的 name 属性可返回六个不同的值：</p><h3 id="6-1-2、异常捕捉"><a href="#6-1-2、异常捕捉" class="headerlink" title="6.1.2、异常捕捉"></a>6.1.2、异常捕捉</h3><p>ES3开始引入了 try-catch 语句，是 JavaScript 中处理异常的标准方式。</p><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 可能发生异常的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 发生错误执行的代码</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 无论是否出错都会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 try…catch 中，try 中一旦出现错误则其它语句不能执行，如果不出现错误则 catch 中的语句不会执行。</p><p>Javascript 参考其它编程语言，也提供了一种 finally 语句：不管 try 中的语句有没有错误，在最后都会执行 finally 中的语句。也就是说，try 中语句不发生错误执行完毕后会执行 finally 中的语句，try 中的语句发生错误，则执行 catch中的语句，catch 中的语句执行完毕后也会执行 finally 中的语句。</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(a);</span><br><span class="line">    console.log(<span class="string">&quot;a未定义肯定报错，你看不见我&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 发生错误执行的代码</span></span><br><span class="line">    console.log(error);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 无论是否出错都会执行的代码</span></span><br><span class="line">    console.log(<span class="string">&quot;finally 执行了 ...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6d678270bcee5c15d0e826cb9c4adb5d.png" alt="img"></p><p>在JavaScript中，如果添加了 finally 语句，则 catch 语句可以省略。但是如果没有 catch 语句，则一旦发生错误就无法捕获这个错误，所以在执行完 finally 中的语句后，程序就会立即停止了。所以，在实际使用中，最好一直带着 catch 语句。如果你写了 catch 语句，则finally 语句也是可以省略的。</p><h3 id="6-1-3、异常演示"><a href="#6-1-3、异常演示" class="headerlink" title="6.1.3、异常演示"></a>6.1.3、异常演示</h3><h4 id="6-1-3-1、Eval-错误"><a href="#6-1-3-1、Eval-错误" class="headerlink" title="6.1.3.1、Eval 错误"></a>6.1.3.1、Eval 错误</h4><p>EvalError 指示 eval() 函数中的错误。更新版本的 JavaScript 不会抛出任何 EvalError，请使用 SyntaxError 代替。</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">    eval(<span class="string">&quot;alert(&#x27;Hello)&quot;</span>);   <span class="comment">// 缺少 &#x27; 会产生错误</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3c0561b704e79191f5e4ceda413e1d73.png" alt="img"></p><h4 id="6-1-3-2、范围错误"><a href="#6-1-3-2、范围错误" class="headerlink" title="6.1.3.2、范围错误"></a>6.1.3.2、范围错误</h4><p>RangeError 会在您使用了合法值的范围之外的数字时抛出。</p><p>案例演示：您不能将数字的有效位数设置为 500。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">    num.toPrecision(<span class="number">500</span>);   <span class="comment">// 数无法拥有 500 个有效数</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/adaaaf76a0a8ef4a9d70b8bbb5109297.png" alt="img"></p><h4 id="6-1-3-3、引用错误"><a href="#6-1-3-3、引用错误" class="headerlink" title="6.1.3.3、引用错误"></a>6.1.3.3、引用错误</h4><p>假如您使用（引用）了尚未声明的变量，则 ReferenceError 会被抛出：</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">    x = y + <span class="number">1</span>;   <span class="comment">// y 无法被引用（使用）</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3a0ccee2ef764c308a9279d68a32fc16.png" alt="img"></p><h4 id="6-1-3-4、语法错误"><a href="#6-1-3-4、语法错误" class="headerlink" title="6.1.3.4、语法错误"></a>6.1.3.4、语法错误</h4><p>假如您计算带语法错误的代码，会 SyntaxError 被抛出：</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">    eval(<span class="string">&quot;alert(&#x27;Hello)&quot;</span>);   <span class="comment">// 缺少 &#x27; 会产生错误</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3c0561b704e79191f5e4ceda413e1d73.png" alt="img"></p><h4 id="6-1-3-5、类型错误"><a href="#6-1-3-5、类型错误" class="headerlink" title="6.1.3.5、类型错误"></a>6.1.3.5、类型错误</h4><p>假如您使用的值不在期望值的范围之内，则 TypeError 被抛出：</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">    num.toUpperCase();   <span class="comment">// 您无法将数字转换为大写</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f9f32b39e9d5fe8c4c8abe4a5baa2d20.png" alt="img"></p><h4 id="6-1-3-6、URI-错误"><a href="#6-1-3-6、URI-错误" class="headerlink" title="6.1.3.6、URI 错误"></a>6.1.3.6、URI 错误</h4><p>假如您在 URI 函数中使用非法字符，则 URIError 被抛出：</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">    decodeURI(<span class="string">&quot;%%%&quot;</span>);   <span class="comment">// 您无法对这些百分号进行 URI 编码</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d20e2e247438b6abbcb0ebb86a85d1da.png" alt="img"></p><h3 id="6-1-4、异常抛出"><a href="#6-1-4、异常抛出" class="headerlink" title="6.1.4、异常抛出"></a>6.1.4、异常抛出</h3><p>在大部分的代码执行过程中，都是出现错误的时候，由浏览器(javascript引擎)抛出异常，然后程序或者停止执行或被try…catch 捕获。</p><p>然而有时候我们在检测到一些不合理的情况发生的时候也可以主动抛出错误，请使用 throw 关键字抛出来主动抛出异常。</p><p>注意事项：</p><ol><li>thow后面就是我们要抛出的异常对象，在以前的时候都是出现错误的时候浏览器抛出异常对象，只是现在是我们自己主动抛出的异常对象。 </li><li>只要有异常对象抛出，不管是浏览器抛出的，还是代码主动抛出，都会让程序停止执行。如果想让程序继续执行，则有也可以用try…catch来捕获。 </li><li>每一个错误类型都可以传入一个参数，表示实际的错误信息。 </li><li>我们可以在适当的时候抛出任何我们想抛出的异常类型。throw new SyntaxError(“语法错误…”);</li></ol><h4 id="6-1-4-1、主动抛出内置异常"><a href="#6-1-4-1、主动抛出内置异常" class="headerlink" title="6.1.4.1、主动抛出内置异常"></a>6.1.4.1、主动抛出内置异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*该函数接收一个数字，返回它的平方。*/</span></span><br><span class="line">function <span class="title function_">foo</span><span class="params">(num)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (typeof num == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> num * num;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;您输入的是一个非法数字！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(foo(<span class="number">4</span>));</span><br><span class="line">console.log(foo(<span class="string">&quot;abc&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e007286652aaaa25c0a3cfc3cdf4bdaa.png" alt="img"></p><h4 id="6-1-4-2、主动抛出自定义异常"><a href="#6-1-4-2、主动抛出自定义异常" class="headerlink" title="6.1.4.2、主动抛出自定义异常"></a>6.1.4.2、主动抛出自定义异常</h4><p>我们不仅仅可以抛出js内置的错误类型的对象，也可以自定义错误类型，然后抛出自定义错误类型的对象。</p><p>如果要自定义错误类型，只需要继承任何一个自定义错误类型都可以，一般直接继承Error即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*自定义错误*/</span></span><br><span class="line">function <span class="title function_">MyError</span><span class="params">(message)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">this</span>.message = <span class="string">&quot;注意：这是自定义的错误&quot;</span></span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;自定义错误&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">MyError.prototype = <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyError</span>(<span class="string">&quot;注意：这是自定义错误类型&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(error.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/8c8dd5b1b84a1446075ad73a3f9e8414.png" alt="img"></p><h2 id="6-2、JSON"><a href="#6-2、JSON" class="headerlink" title="6.2、JSON"></a>6.2、JSON</h2><h3 id="6-2-1、JSON概述"><a href="#6-2-1、JSON概述" class="headerlink" title="6.2.1、JSON概述"></a>6.2.1、JSON概述</h3><p>JSON：JavaScript Object Notation（JavaScript 对象标记法），它是一种存储和交换数据的语法。</p><p>当数据在浏览器与服务器之间进行交换时，这些数据只能是文本，JSON 属于文本并且我们能够把任何 JavaScript 对象转换为 JSON，然后将 JSON 发送到服务器。我们也能把从服务器接收到的任何 JSON 转换为 JavaScript 对象。以这样的方式，我们能够把数据作为 JavaScript 对象来处理，无需复杂的解析和转译。</p><h3 id="6-2-2、JSON语法"><a href="#6-2-2、JSON语法" class="headerlink" title="6.2.2、JSON语法"></a>6.2.2、JSON语法</h3><p>在json中，每一个数据项，都是由一个键值对（或者说是名值对）组成的，但是键必须是字符串，且由双引号包围，而值必须是以下数据类型之一：</p><ul><li>字符串（在 JSON 中，字符串值必须由双引号编写） </li><li>数字 </li><li>对象（JSON 对象） </li><li>数组 </li><li>布尔 </li><li>null</li></ul><p>JSON 的值不可以是以下数据类型之一：</p><ul><li>函数 </li><li>日期 </li><li>undefined</li></ul><p>因为 JSON 语法由 JavaScript 对象标记法衍生而来，所以很少需要其它额外的软件来处理 JavaScript 中的 JSON。</p><p>通过 JavaScript，您能够创建对象并向其分配数据，就像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">person</span> <span class="operator">=</span> &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">62</span>, <span class="string">&quot;city&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>&#125;;</span><br><span class="line">console.log(person);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d3060f7c44592e4b2e269ec2f290155a.png" alt="img"></p><h3 id="6-2-3、JSON数据类型"><a href="#6-2-3、JSON数据类型" class="headerlink" title="6.2.3、JSON数据类型"></a>6.2.3、JSON数据类型</h3><h4 id="6-2-3-1、JSON-字符串"><a href="#6-2-3-1、JSON-字符串" class="headerlink" title="6.2.3.1、JSON 字符串"></a>6.2.3.1、JSON 字符串</h4><p>JSON 中的字符串必须用双引号包围。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-3-2、JSON-数字"><a href="#6-2-3-2、JSON-数字" class="headerlink" title="6.2.3.2、JSON 数字"></a>6.2.3.2、JSON 数字</h4><p>JSON 中的数字必须是整数或浮点数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-3-3、JSON-对象"><a href="#6-2-3-3、JSON-对象" class="headerlink" title="6.2.3.3、JSON 对象"></a>6.2.3.3、JSON 对象</h4><p>JSON 中的值可以是对象，JSON 中作为值的对象必须遵守与 JSON 对象相同的规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="string">&quot;employee&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bill Gates&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">62</span>, <span class="string">&quot;city&quot;</span>: <span class="string">&quot;Seattle&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-3-4、JSON-数组"><a href="#6-2-3-4、JSON-数组" class="headerlink" title="6.2.3.4、JSON 数组"></a>6.2.3.4、JSON 数组</h4><p>JSON 中的值可以是数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="string">&quot;employees&quot;</span>: [<span class="string">&quot;Bill&quot;</span>, <span class="string">&quot;Steve&quot;</span>, <span class="string">&quot;David&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-3-5、JSON-布尔"><a href="#6-2-3-5、JSON-布尔" class="headerlink" title="6.2.3.5、JSON 布尔"></a>6.2.3.5、JSON 布尔</h4><p>JSON 中的值可以是 true/false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;sale&quot;</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-3-6、JSON-null"><a href="#6-2-3-6、JSON-null" class="headerlink" title="6.2.3.6、JSON null"></a>6.2.3.6、JSON null</h4><p>JSON 中的值可以是 null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;middlename&quot;</span>: <span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-4、JSON字符串转JS对象"><a href="#6-2-4、JSON字符串转JS对象" class="headerlink" title="6.2.4、JSON字符串转JS对象"></a>6.2.4、JSON字符串转JS对象</h3><p>JSON.parse()：可以将以JSON字符串转换为JS对象，它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">jsonStr</span> <span class="operator">=</span> <span class="string">&#x27;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parse(jsonStr);</span><br><span class="line">console.log(obj);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/75043196321febfa7ff2044a01c36251.png" alt="img"></p><blockquote><p>注意 ：JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错</p></blockquote><h3 id="6-2-5、JS对象转JSON字符串"><a href="#6-2-5、JS对象转JSON字符串" class="headerlink" title="6.2.5、JS对象转JSON字符串"></a>6.2.5、JS对象转JSON字符串</h3><p>JSON.stringify()：可以将一个JS对象转换为JSON字符串，需要一个js对象作为参数，会返回一个JSON字符串</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> &#123;</span><br><span class="line">   name: <span class="string">&quot;猪八戒&quot;</span>, age: <span class="number">28</span>, gender: <span class="string">&quot;男&quot;</span>&#125;;</span><br><span class="line"><span class="type">var</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSON.stringify(obj);</span><br><span class="line">console.log(jsonStr);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f7dc872335de8f09109ea0c9b9f798b4.png" alt="img"></p><blockquote><p>注意 ：JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错</p></blockquote><h2 id="6-3、AJAX"><a href="#6-3、AJAX" class="headerlink" title="6.3、AJAX"></a>6.3、AJAX</h2><h3 id="6-3-1、AJAX概述"><a href="#6-3-1、AJAX概述" class="headerlink" title="6.3.1、AJAX概述"></a>6.3.1、AJAX概述</h3><p>传统的web交互是用户触发一个http请求服务器，然后服务器收到之后，在做出响应到用户，并且返回一个新的页面，每当服务器处理客户端提交的请求时，客户都只能空闲等待，并且哪怕只是一次很小的交互、只需从服务器端得到很简单的一个数据，都要返回一个完整的HTML页，而用户每次都要浪费时间和带宽去重新读取整个页面。这个做法浪费了许多带宽，由于每次应用的交互都需要向服务器发送请求，应用的响应时间就依赖于服务器的响应时间，这导致了用户界面的响应比本地应用慢得多。</p><p>AJAX 的出现,刚好解决了传统方法的缺陷，AJAX 是一种用于创建快速动态网页的技术，通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新，这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><h3 id="6-3-2、AJAX的XMLHttpRequest对象"><a href="#6-3-2、AJAX的XMLHttpRequest对象" class="headerlink" title="6.3.2、AJAX的XMLHttpRequest对象"></a>6.3.2、AJAX的XMLHttpRequest对象</h3><p><strong>AJAX 的核心是 XMLHttpRequest 对象。</strong> 所有现代浏览器都支持 XMLHttpRequest 对象。</p><p>XMLHttpRequest 对象用于幕后同服务器交换数据，这意味着可以更新网页的部分，而不需要重新加载整个页面。</p><p>所有现代浏览器（Chrom、IE7+、Firefox、Safari 以及 Opera）都有内建的 XMLHttpRequest 对象。</p><p>创建 XMLHttpRequest 的语法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><p>老版本的 Internet Explorer（IE5 和 IE6）使用 ActiveX 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br></pre></td></tr></table></figure><p>为了应对所有浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，创建 XMLHttpRequest 对象，如果不支持，则创建 ActiveX 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhttp;</span><br><span class="line"><span class="keyword">if</span> (window.XMLHttpRequest) &#123;</span><br><span class="line">   </span><br><span class="line">    xhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// code for IE6, IE5</span></span><br><span class="line">    xhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是需要注意的是，出于安全原因，现代浏览器不允许跨域访问，这意味着尝试加载的网页和 XML 文件都必须位于相同服务器上。</p><h3 id="6-3-3、AJAX的XMLHttpRequest对象方法"><a href="#6-3-3、AJAX的XMLHttpRequest对象方法" class="headerlink" title="6.3.3、AJAX的XMLHttpRequest对象方法"></a>6.3.3、AJAX的XMLHttpRequest对象方法</h3><h3 id="6-3-4、AJAX的XMLHttpRequest对象属性"><a href="#6-3-4、AJAX的XMLHttpRequest对象属性" class="headerlink" title="6.3.4、AJAX的XMLHttpRequest对象属性"></a>6.3.4、AJAX的XMLHttpRequest对象属性</h3><h3 id="6-3-5、AJAX的GET请求"><a href="#6-3-5、AJAX的GET请求" class="headerlink" title="6.3.5、AJAX的GET请求"></a>6.3.5、AJAX的GET请求</h3><p>工程结构：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/369e3788b030c8f9aede3b3109f53da5.png" alt="img"></p><p>users.json</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">19</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">21</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤一：创建异步对象</span></span><br><span class="line"><span class="type">var</span> <span class="variable">ajax</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">//步骤二：设置请求的url参数，参数一是请求的类型，参数二是请求的url</span></span><br><span class="line">ajax.open(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;users.json&quot;</span>);</span><br><span class="line"><span class="comment">//步骤三：发送请求</span></span><br><span class="line">ajax.send();</span><br><span class="line"><span class="comment">//步骤四：注册事件 onreadystatechange 状态改变就会调用</span></span><br><span class="line">ajax.onreadystatechange = function () &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (ajax.readyState == <span class="number">4</span> &amp;&amp; ajax.status == <span class="number">200</span>) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//步骤五：如果能够进到这个判断，说明数据完美的回来了，并且请求的页面是存在的</span></span><br><span class="line">        console.log(ajax.responseText);<span class="comment">//输入响应的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d2fdee85bfbd29ccc214af02a2d17e62.png" alt="img"></p><h3 id="6-3-6、AJAX的POST请求"><a href="#6-3-6、AJAX的POST请求" class="headerlink" title="6.3.6、AJAX的POST请求"></a>6.3.6、AJAX的POST请求</h3><p>工程结构：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/369e3788b030c8f9aede3b3109f53da5.png" alt="img"></p><p>users.json</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">19</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">21</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤一：创建异步对象</span></span><br><span class="line"><span class="type">var</span> <span class="variable">ajax</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">//步骤二：设置请求的类型及url，注意：post请求一定要添加请求头才行不然会报错</span></span><br><span class="line">ajax.open(<span class="string">&quot;post&quot;</span>, <span class="string">&quot;users.json&quot;</span>);</span><br><span class="line">ajax.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line"><span class="comment">//步骤三：发送请求</span></span><br><span class="line">ajax.send();</span><br><span class="line"><span class="comment">//步骤四：注册事件 onreadystatechange 状态改变就会调用</span></span><br><span class="line">ajax.onreadystatechange = function () &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//步骤五：如果能够进到这个判断，说明数据完美的回来了，并且请求的页面是存在的</span></span><br><span class="line">    <span class="keyword">if</span> (ajax.readyState == <span class="number">4</span> &amp;&amp; ajax.status == <span class="number">200</span>) &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(ajax.responseText);<span class="comment">//输入响应的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d2fdee85bfbd29ccc214af02a2d17e62.png" alt="img"></p><h3 id="6-3-7、AJAX的请求整合"><a href="#6-3-7、AJAX的请求整合" class="headerlink" title="6.3.7、AJAX的请求整合"></a>6.3.7、AJAX的请求整合</h3><p>工程结构：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/369e3788b030c8f9aede3b3109f53da5.png" alt="img"></p><p>users.json</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">19</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;唐僧&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;沙和尚&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">21</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">Ajax</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    get: function (url, fn) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">var</span> <span class="variable">xhr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.open(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">        xhr.onreadystatechange = function () &#123;</span><br><span class="line">   </span><br><span class="line">            <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">   </span><br><span class="line">                fn.call(<span class="built_in">this</span>, xhr.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125;,</span><br><span class="line">    post: function (url, data, fn) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">var</span> <span class="variable">xhr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.open(<span class="string">&quot;POST&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">        xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">        xhr.onreadystatechange = function () &#123;</span><br><span class="line">   </span><br><span class="line">            <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; (xhr.status == <span class="number">200</span> || xhr.status == <span class="number">304</span>)) &#123;</span><br><span class="line">   </span><br><span class="line">                fn.call(<span class="built_in">this</span>, xhr.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示GET请求</span></span><br><span class="line">Ajax.get(<span class="string">&quot;users.json&quot;</span>, function (response) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示POST请求</span></span><br><span class="line">Ajax.post(<span class="string">&quot;users.json&quot;</span>, <span class="string">&quot;&quot;</span>, function (response) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a785d39e7cd471f4a580cf2667357a8e.png" alt="img"></p><h2 id="6-4、Cookie"><a href="#6-4、Cookie" class="headerlink" title="6.4、Cookie"></a>6.4、Cookie</h2><h3 id="6-4-1、Cookie概述"><a href="#6-4-1、Cookie概述" class="headerlink" title="6.4.1、Cookie概述"></a>6.4.1、Cookie概述</h3><p>Cookie 是一些数据，存储于你电脑上的文本文件中，当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息，Cookie 的作用就是用于解决 “如何记录客户端的用户信息”：</p><ul><li>当用户访问 web 页面时，它的名字可以记录在 cookie 中。 </li><li>在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。</li></ul><p>Cookie 以名/值对形式存储，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=zhangsan</span><br></pre></td></tr></table></figure><p>当浏览器从服务器上请求 web 页面时， 属于该页面的 cookie 会被添加到该请求中，服务端通过这种方式来获取用户的信息。</p><p>JavaScript 可以使用 <strong>document.cookie</strong> 属性来创建 、读取、及删除 Cookie。</p><h3 id="6-4-2、Cookie创建"><a href="#6-4-2、Cookie创建" class="headerlink" title="6.4.2、Cookie创建"></a>6.4.2、Cookie创建</h3><p>JavaScript 中，创建 cookie 如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie = <span class="string">&quot;username=zhangsan&quot;</span>;</span><br></pre></td></tr></table></figure><p>您还可以为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie = <span class="string">&quot;username=zhangsan; expires=Thu, 18 Dec 2043 12:00:00 GMT&quot;</span>;</span><br></pre></td></tr></table></figure><p>您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie = <span class="string">&quot;username=zhangsan; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="6-4-3、Cookie读取"><a href="#6-4-3、Cookie读取" class="headerlink" title="6.4.3、Cookie读取"></a>6.4.3、Cookie读取</h3><p>JavaScript 中，读取 cookie 如下所示：</p><p>document.cookie 将以字符串的方式返回所有的 cookie，类型格式： cookie1=value; cookie2=value; cookie3=value;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.cookie = <span class="string">&quot;username=zhangsan&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">cookies</span> <span class="operator">=</span> document.cookie;</span><br><span class="line">console.log(cookies);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7f5f050ac3395ad2d8e04a83f52b9f17.png" alt="img"></p><h3 id="6-4-4、Cookie修改"><a href="#6-4-4、Cookie修改" class="headerlink" title="6.4.4、Cookie修改"></a>6.4.4、Cookie修改</h3><p>JavaScript 中，修改 cookie 如下所示：</p><p>使用 document.cookie 将旧的 cookie 将被覆盖就是修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">document.cookie = <span class="string">&quot;username=zhangsan&quot;</span>;</span><br><span class="line">document.cookie = <span class="string">&quot;username=lisi&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">cookies</span> <span class="operator">=</span> document.cookie;</span><br><span class="line">console.log(cookies);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fe094b63b05824c69ed5147e180b298b.png" alt="img"></p><h3 id="6-4-5、Cookie删除"><a href="#6-4-5、Cookie删除" class="headerlink" title="6.4.5、Cookie删除"></a>6.4.5、Cookie删除</h3><p>JavaScript 中，删除 cookie 如下所示：</p><p>删除 cookie 非常简单，您只需要设置 expires 参数为以前的时间即可，如下所示，设置为 Thu, 01 Jan 1970 00:00:00 GMT:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">document.cookie = <span class="string">&quot;username=zhangsan&quot;</span>;</span><br><span class="line">document.cookie = <span class="string">&quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">cookies</span> <span class="operator">=</span> document.cookie;</span><br><span class="line">console.log(cookies);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ed1e94b6c81dc809c2dd0a8436ed2c6f.png" alt="img"></p><h3 id="6-4-6、Cookie值设置函数"><a href="#6-4-6、Cookie值设置函数" class="headerlink" title="6.4.6、Cookie值设置函数"></a>6.4.6、Cookie值设置函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cookie值设置函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cname     cookie名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cvalue    cookie值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exdays    过期天数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">function <span class="title function_">setCookie</span><span class="params">(cname, cvalue, exdays)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">var</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    d.setTime(d.getTime() + (exdays * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>));</span><br><span class="line">    <span class="type">var</span> <span class="variable">expires</span> <span class="operator">=</span> <span class="string">&quot;expires=&quot;</span> + d.toGMTString();</span><br><span class="line">    document.cookie = cname + <span class="string">&quot;=&quot;</span> + cvalue + <span class="string">&quot;; &quot;</span> + expires;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-7、Cookie值获取函数"><a href="#6-4-7、Cookie值获取函数" class="headerlink" title="6.4.7、Cookie值获取函数"></a>6.4.7、Cookie值获取函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cookie值获取函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cname     cookie名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">function <span class="title function_">getCookie</span><span class="params">(cname)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">var</span> <span class="variable">name</span> <span class="operator">=</span> cname + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">    <span class="type">var</span> <span class="variable">ca</span> <span class="operator">=</span> document.cookie.split(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ca.length; i++) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">var</span> <span class="variable">c</span> <span class="operator">=</span> ca[i].trim();</span><br><span class="line">        <span class="keyword">if</span> (c.indexOf(name) == <span class="number">0</span>) <span class="keyword">return</span> c.substring(name.length, c.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-5、WebStorage"><a href="#6-5、WebStorage" class="headerlink" title="6.5、WebStorage"></a>6.5、WebStorage</h2><h3 id="6-5-1、WebStorage概述"><a href="#6-5-1、WebStorage概述" class="headerlink" title="6.5.1、WebStorage概述"></a>6.5.1、WebStorage概述</h3><p>WebStorage是HTML5中本地存储的解决方案之一，在HTML5的WebStorage概念引入之前除去IE User Data、Flash Cookie、Google Gears等看名字就不靠谱的解决方案，浏览器兼容的本地存储方案只有使用Cookie。有同学可能会问，既然有了Cookie本地存储，为什么还要引入WebStorage的概念？那就要说一说Cookie的缺陷了：</p><ol><li>数据大小：作为存储容器，Cookie的大小限制在4KB左右这是非常坑爹的，尤其对于现在复杂的业务逻辑需求，4KB的容量除了存储一些配置字段还简单单值信息，对于绝大部分开发者来说真的不知指望什么了。 </li><li>安全性问题：由于在HTTP请求中的Cookie是明文传递的（HTTPS不是），带来的安全性问题还是很大的。 </li><li>网络负担：我们知道Cookie会被附加在每个HTTP请求中，在HttpRequest和HttpResponse的header中都是要被传输的，所以无形中增加了一些不必要的流量损失。</li></ol><p>虽然WebStorage是HTML5新增的本地存储解决方案之一，但并不是为了取代Cookie而制定的标准，Cookie作为HTTP协议的一部分用来处理客户端和服务器通信是不可或缺的，session正是依赖于实现的客户端状态保持。WebStorage的意图在于解决本来不应该Cookie做，却不得不用Cookie的本地存储的应用场景。</p><h3 id="6-5-2、WebStorage分类"><a href="#6-5-2、WebStorage分类" class="headerlink" title="6.5.2、WebStorage分类"></a>6.5.2、WebStorage分类</h3><p>Web Storage又分为两种： sessionStorage 和localStorage ，即这两个是Storage的一个实例。从字面意思就可以很清楚的看出来，sessionStorage将数据保存在session中，浏览器关闭也就没了；而localStorage则一直将数据保存在客户端本地； 不管是sessionStorage，还是localStorage，使用的API都相同。</p><p>localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理，低版本IE可以使用 <a href="https://github.com/douglascrockford/JSON-js/blob/master/json2.js">json2.js</a></p><h3 id="6-5-3、localStorage方法"><a href="#6-5-3、localStorage方法" class="headerlink" title="6.5.3、localStorage方法"></a>6.5.3、localStorage方法</h3><p><strong>对象介绍：</strong></p><p>localStorage在本地永久性存储数据，除非显式将其删除或清空。</p><p><strong>常见方法：</strong></p><ul><li>保存单个数据：localStorage.setItem(key,value); </li><li>读取单个数据：localStorage.getItem(key); </li><li>删除单个数据：localStorage.removeItem(key); </li><li>删除所有数据：localStorage.clear(); </li><li>获取某个索引的key：localStorage.key(index);</li></ul><p><strong>案例演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line">localStorage.setItem(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取单个数据</span></span><br><span class="line">console.log(localStorage.getItem(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除单个数据</span></span><br><span class="line">localStorage.removeItem(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">console.log(localStorage.getItem(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存两个数据</span></span><br><span class="line">localStorage.setItem(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">localStorage.setItem(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">console.log(<span class="string">&quot;age=&quot;</span> + localStorage.getItem(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">console.log(<span class="string">&quot;sex=&quot;</span> + localStorage.getItem(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for-in循环来迭代localStorage中的键值对、属性和方法：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key in localStorage) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(key + <span class="string">&quot;=&quot;</span> + localStorage[key]);</span><br><span class="line">&#125;</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for循环来迭代localStorage中的键值对：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; localStorage.length; i++) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">var</span> <span class="variable">key</span> <span class="operator">=</span> localStorage.key(i);</span><br><span class="line">    <span class="type">var</span> <span class="variable">value</span> <span class="operator">=</span> localStorage.getItem(key);</span><br><span class="line">    console.log(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有数据</span></span><br><span class="line">localStorage.clear();</span><br></pre></td></tr></table></figure><p><strong>控制台：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/61686f1b890e4aed66a29ca7b99fb017.png" alt="img"></p><h3 id="6-5-4、sessionStorage方法"><a href="#6-5-4、sessionStorage方法" class="headerlink" title="6.5.4、sessionStorage方法"></a>6.5.4、sessionStorage方法</h3><p><strong>对象介绍：</strong></p><p>sessionStorage对象存储特定于某个对话的数据，也就是它的生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。存储在sessionStorage中的数据可以跨越页面刷新而存在，同时如果浏览器支持，浏览器崩溃并重启之后依然可以使用（注意：Firefox和Weblit都支持，IE则不行）。</p><p>因为sessionStorage对象绑定于某个服务器会话，所以当文件在本地运行的时候是不可用的。存储在sessionStorage中的数据只能由最初给对象存储数据的页面访问到，所以对多页面应用有限制。</p><p>不同浏览器写入数据方法略有不同。Firefox和Webkit实现了同步写入，所以添加到存储空间中的数据是立刻被提交的。而IE的实现则是异步写入数据，所以在设置数据和将数据实际写入磁盘之间可能有一些延迟。</p><p><strong>常见方法：</strong></p><ul><li>保存单个数据：sessionStorage.setItem(key,value); </li><li>读取单个数据：sessionStorage.getItem(key); </li><li>删除单个数据：sessionStorage.removeItem(key); </li><li>删除所有数据：sessionStorage.clear(); </li><li>获取某个索引的key：sessionStorage.key(index);</li></ul><p><strong>案例演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line">sessionStorage.setItem(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取单个数据</span></span><br><span class="line">console.log(sessionStorage.getItem(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除单个数据</span></span><br><span class="line">sessionStorage.removeItem(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">console.log(sessionStorage.getItem(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存两个数据</span></span><br><span class="line">sessionStorage.setItem(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">sessionStorage.setItem(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">console.log(<span class="string">&quot;age=&quot;</span> + sessionStorage.getItem(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">console.log(<span class="string">&quot;sex=&quot;</span> + sessionStorage.getItem(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for-in循环来迭代sessionStorage中的键值对、属性和方法：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key in sessionStorage) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(key + <span class="string">&quot;=&quot;</span> + sessionStorage[key]);</span><br><span class="line">&#125;</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for循环来迭代sessionStorage中的键值对：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sessionStorage.length; i++) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">var</span> <span class="variable">key</span> <span class="operator">=</span> sessionStorage.key(i);</span><br><span class="line">    <span class="type">var</span> <span class="variable">value</span> <span class="operator">=</span> sessionStorage.getItem(key);</span><br><span class="line">    console.log(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有数据</span></span><br><span class="line">sessionStorage.clear();</span><br></pre></td></tr></table></figure><p><strong>控制台：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1325a4d3c63e875d47b815eae84a29ac.png" alt="img"></p><h2 id="6-6、Closure"><a href="#6-6、Closure" class="headerlink" title="6.6、Closure"></a>6.6、Closure</h2><h3 id="6-6-1、闭包引入"><a href="#6-6-1、闭包引入" class="headerlink" title="6.6.1、闭包引入"></a>6.6.1、闭包引入</h3><p><strong>需求信息：点击某个按钮，提示”点击的是第n个按钮”</strong></p><p>第一种解决方法：将btn所对应的下标保存在btn上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">btns</span> <span class="operator">=</span> document.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将btn所对应的下标保存在btn上</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, length = btns.length; i &lt; length; i++) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">var</span> <span class="variable">btn</span> <span class="operator">=</span> btns[i];</span><br><span class="line">    btn.index = i;</span><br><span class="line">    btn.onclick = function () &#123;</span><br><span class="line">   </span><br><span class="line">        alert(<span class="string">&#x27;第&#x27;</span> + (<span class="built_in">this</span>.index + <span class="number">1</span>) + <span class="string">&#x27;个&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种解决方法：利用闭包延长局部变量的生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">btns</span> <span class="operator">=</span> document.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用闭包延长局部变量的生命周期</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, length = btns.length; i &lt; length; i++) &#123;</span><br><span class="line">   </span><br><span class="line">    (function (j) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">var</span> <span class="variable">btn</span> <span class="operator">=</span> btns[j];</span><br><span class="line">        btn.onclick = function () &#123;</span><br><span class="line">   </span><br><span class="line">            alert(<span class="string">&#x27;第&#x27;</span> + (j + <span class="number">1</span>) + <span class="string">&#x27;个&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-2、闭包概念"><a href="#6-6-2、闭包概念" class="headerlink" title="6.6.2、闭包概念"></a>6.6.2、闭包概念</h3><ul><li><p><strong>如何产生闭包?</strong> </p><ul> - 当一个嵌套的内部(子)函数引用了嵌套的外部(父)函数的变量(函数)时，就产生了闭包 </ul>  </li><li><p><strong>什么才是闭包？</strong> </p><ul> - 理解一：闭包是嵌套的内部函数(绝大部分人认为) - 理解二：包含被引用变量(函数)的对象(极少部分人认为) </ul>  </li><li><p><strong>闭包的作用？</strong> </p><ul> - 它的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中 </ul> </li></ul><h3 id="6-6-3、闭包演示"><a href="#6-6-3、闭包演示" class="headerlink" title="6.6.3、闭包演示"></a>6.6.3、闭包演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">fun1</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    function <span class="title function_">subFun</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        a++;</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> subFun;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">f1</span> <span class="operator">=</span> fun1();</span><br><span class="line">f1();</span><br><span class="line">f1();</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">function <span class="title function_">fun2</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    function <span class="title function_">subFun</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        a--;</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> subFun;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">f2</span> <span class="operator">=</span> fun2();</span><br><span class="line">f2();</span><br><span class="line">f2();</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9722bfe7789b49229b44fe31313dd6c0.png" alt="img"></p><h3 id="6-6-4、闭包生命周期"><a href="#6-6-4、闭包生命周期" class="headerlink" title="6.6.4、闭包生命周期"></a>6.6.4、闭包生命周期</h3><p>生命周期：</p><ol><li>产生：在嵌套内部函数定义执行完时就产生了(不是在调用) </li><li>死亡：在嵌套的内部函数成为垃圾对象时就死亡了</li></ol><p>演示说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">fn1</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//此时闭包就已经产生了(函数提升, 内部函数对象已经创建了)</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">fn2</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        a++;</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">f</span> <span class="operator">=</span> fn1();</span><br><span class="line">f(); <span class="comment">// 3</span></span><br><span class="line">f(); <span class="comment">// 4</span></span><br><span class="line">f = <span class="literal">null</span>; <span class="comment">//闭包死亡(包含闭包的函数对象成为垃圾对象)</span></span><br></pre></td></tr></table></figure><h3 id="6-6-5、闭包应用"><a href="#6-6-5、闭包应用" class="headerlink" title="6.6.5、闭包应用"></a>6.6.5、闭包应用</h3><p><strong>闭包应用：</strong> 定义JS模块</p><ul><li>具有特定功能的js文件 </li><li>将所有的数据和功能都封装在一个函数内部(私有的) </li><li>只向外暴露一个包含n个方法的对象或函数 </li><li>模块的使用者，只需要通过模块暴露的对象调用方法来实现对应的功能</li></ul><p><strong>案例演示：</strong></p><p>第一种格式：myModule.js</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">myModule</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//私有数据</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&#x27;Hello, World&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作数据的函数</span></span><br><span class="line">    function <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&#x27;doSomething() &#x27;</span> + msg.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">doOtherthing</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&#x27;doOtherthing() &#x27;</span> + msg.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向外暴露对象(给外部使用的方法)</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">   </span><br><span class="line">        doSomething: doSomething,</span><br><span class="line">        doOtherthing: doOtherthing</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种使用：index.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">module</span> <span class="operator">=</span> myModule();</span><br><span class="line"><span class="keyword">module</span>.doSomething();</span><br><span class="line"><span class="keyword">module</span>.doOtherthing();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/267a54ef948c4b363603dd4ebba92901.png" alt="img"></p><p>第二种格式：myModule.js</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(function (window) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//私有数据</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&#x27;Hello, World&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作数据的函数</span></span><br><span class="line">    function <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&#x27;doSomething() &#x27;</span> + msg.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">doOtherthing</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&#x27;doOtherthing() &#x27;</span> + msg.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向外暴露对象(给外部使用的方法)</span></span><br><span class="line">    window.myModule = &#123;</span><br><span class="line">   </span><br><span class="line">        doSomething: doSomething,</span><br><span class="line">        doOtherthing: doOtherthing</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(window);</span><br></pre></td></tr></table></figure><p>第二种使用：index.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myModule.doSomething();</span><br><span class="line">myModule.doOtherthing();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6ee4d72170ebfdf2e48d074c23f05543.png" alt="img"></p><h2 id="7-1、ECMAScript6新特性"><a href="#7-1、ECMAScript6新特性" class="headerlink" title="7.1、ECMAScript6新特性"></a>7.1、ECMAScript6新特性</h2><h3 id="7-1-1、let-关键字"><a href="#7-1-1、let-关键字" class="headerlink" title="7.1.1、let 关键字"></a>7.1.1、let 关键字</h3><p>let 关键字用来声明变量，使用 let 声明的变量有几个特点：</p><ul><li>不允许重复声明 </li><li>块儿级作用域 </li><li>不存在变量提升 </li><li>不影响作用域链</li></ul><blockquote><p>注意：以后声明变量使用 let 就对了</p></blockquote><p><strong>案例演示：创建四个div，单机每一个div让其变色</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .item &#123;</span><br><span class="line">    </span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            border: solid 1px <span class="title function_">rgb</span><span class="params">(<span class="number">42</span>, <span class="number">156</span>, <span class="number">156</span>)</span>;</span><br><span class="line">            <span class="type">float</span>: left;</span><br><span class="line">            margin-right: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;item&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;item&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;item&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;item&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取div元素对象</span></span><br><span class="line">    <span class="type">let</span> <span class="variable">items</span> <span class="operator">=</span> document.getElementsByClassName(<span class="string">&#x27;item&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历并绑定事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">let</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">    </span><br><span class="line">        items[i].onclick = function () &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 以前的做法：this.style.background = &quot;pink&quot;;</span></span><br><span class="line">            items[i].style.background = <span class="string">&quot;pink&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/266f795976b338c4959954ce71032871.png" alt="img"></p><h3 id="7-1-2、const-关键字"><a href="#7-1-2、const-关键字" class="headerlink" title="7.1.2、const 关键字"></a>7.1.2、const 关键字</h3><p>const 关键字用来声明常量，const 声明有以下特点：</p><ul><li>不允许重复声明 </li><li>块儿级作用域 </li><li>声明必须赋初始值 </li><li>值不允许修改 </li><li>标识符一般为大写</li></ul><blockquote><p>注意：声明对象类型使用 const，非对象类型声明选择 let</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明常量</span></span><br><span class="line"><span class="type">const</span> <span class="variable">MAX</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">console.log(MAX);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于数组和对象的元素修改, 不算做对常量的修改, 不会报错</span></span><br><span class="line"><span class="type">const</span> <span class="variable">TEAM1</span> <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="type">const</span> <span class="variable">TEAM2</span> <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// 但是不能修改地址指向</span></span><br><span class="line"><span class="comment">// TEAM2 = TEAM1;</span></span><br></pre></td></tr></table></figure><h3 id="7-1-3、变量的解构赋值"><a href="#7-1-3、变量的解构赋值" class="headerlink" title="7.1.3、变量的解构赋值"></a>7.1.3、变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。</p><blockquote><p>注意：频繁使用对象方法、数组元素，就可以使用解构赋值形式</p></blockquote><p><strong>数组的解构赋值：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的解构赋值</span></span><br><span class="line"><span class="type">const</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="string">&quot;张学友&quot;</span>, <span class="string">&quot;刘德华&quot;</span>, <span class="string">&quot;黎明&quot;</span>, <span class="string">&quot;郭富城&quot;</span>];</span><br><span class="line">let [zhang, liu, li, guo] = arr;</span><br><span class="line">console.log(zhang);</span><br><span class="line">console.log(liu);</span><br><span class="line">console.log(li);</span><br><span class="line">console.log(guo);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c9b63040612475be883d4fbe8493b672.png" alt="img"></p><p><strong>简单对象的解构赋值：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象的解构赋值</span></span><br><span class="line"><span class="type">const</span> <span class="variable">lin</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;林志颖&quot;</span>,</span><br><span class="line">    tags: [<span class="string">&quot;车手&quot;</span>, <span class="string">&quot;歌手&quot;</span>, <span class="string">&quot;小旋风&quot;</span>, <span class="string">&quot;演员&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line">let &#123;</span><br><span class="line">   name, tags&#125; = lin;</span><br><span class="line">console.log(name);</span><br><span class="line">console.log(tags);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9863e59feff49069c671819f794b2ae9.png" alt="img"></p><p><strong>复杂对象的解构赋值:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复杂对象的解构赋值</span></span><br><span class="line"><span class="type">let</span> <span class="variable">wangfei</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;王菲&quot;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    songs: [<span class="string">&quot;红豆&quot;</span>, <span class="string">&quot;流年&quot;</span>, <span class="string">&quot;暧昧&quot;</span>],</span><br><span class="line">    history: [</span><br><span class="line">        &#123;</span><br><span class="line">   name: <span class="string">&quot;窦唯&quot;</span>&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">   name: <span class="string">&quot;李亚鹏&quot;</span>&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">   name: <span class="string">&quot;谢霆锋&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line">let &#123;</span><br><span class="line">   name, age, songs: [one, two, three], history: [first, second, third]&#125; = wangfei;</span><br><span class="line">console.log(name);</span><br><span class="line">console.log(age);</span><br><span class="line">console.log(one);</span><br><span class="line">console.log(two);</span><br><span class="line">console.log(three);</span><br><span class="line">console.log(first);</span><br><span class="line">console.log(second);</span><br><span class="line">console.log(third);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f46bd6a52d38e1030e264ec59062cc25.png" alt="img"></p><h3 id="7-1-4、模板字符串"><a href="#7-1-4、模板字符串" class="headerlink" title="7.1.4、模板字符串"></a>7.1.4、模板字符串</h3><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识，特点：</p><ul><li>字符串中可以出现换行符 </li><li>可以使用 ${xxx} 形式输出变量</li></ul><blockquote><p>注意：当遇到字符串与变量拼接的情况使用模板字符串</p></blockquote><p><strong>字符串中可以出现换行符：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义字符串</span></span><br><span class="line"><span class="type">let</span> <span class="variable">str</span> <span class="operator">=</span> `&lt;ul&gt;</span><br><span class="line">               &lt;li&gt;沈腾&lt;/li&gt;</span><br><span class="line">               &lt;li&gt;玛丽&lt;/li&gt;</span><br><span class="line">               &lt;li&gt;魏翔&lt;/li&gt;</span><br><span class="line">               &lt;li&gt;艾伦&lt;/li&gt;</span><br><span class="line">           &lt;/ul&gt;`;</span><br><span class="line">console.log(str);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5ee196feafc0207eda53eac3e2b4aa3c.png" alt="img"></p><p><strong>变量拼接:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量拼接</span></span><br><span class="line"><span class="type">let</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&#x27;小可爱&#x27;</span>;</span><br><span class="line"><span class="type">let</span> <span class="variable">result</span> <span class="operator">=</span> `欢迎$&#123;</span><br><span class="line">     name&#125;访问我的文章`;</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9ae4c48b4dbdf2da942945c1de172b11.png" alt="img"></p><h3 id="7-1-5、简化对象写法"><a href="#7-1-5、简化对象写法" class="headerlink" title="7.1.5、简化对象写法"></a>7.1.5、简化对象写法</h3><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法，这样的书写更加简洁。</p><blockquote><p>注意：对象简写形式简化了代码，所以以后用简写就对了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">let</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="type">let</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"><span class="type">let</span> <span class="variable">speak</span> <span class="operator">=</span> function () &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性和方法简写</span></span><br><span class="line"><span class="type">let</span> <span class="variable">person</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    speak</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(person.name);</span><br><span class="line">console.log(person.age);</span><br><span class="line">person.speak();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0107de45367b67a096cf71c2f8258c04.png" alt="img"></p><h3 id="7-1-6、箭头函数"><a href="#7-1-6、箭头函数" class="headerlink" title="7.1.6、箭头函数"></a>7.1.6、箭头函数</h3><p>ES6 允许使用「箭头」（=&gt;）定义函数，通用写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">let</span> <span class="variable">fn</span> <span class="operator">=</span> (arg1, arg2, arg3) =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2 + arg3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>箭头函数的注意点：</p><ul><li>如果形参只有一个，则小括号可以省略 </li><li>函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的执行结果 </li><li>箭头函数 this 指向声明时所在作用域下 this 的值，箭头函数不会更改 this 指向，用来指定回调函数会非常合适 </li><li>箭头函数不能作为构造函数实例化 </li><li>不能使用 arguments 实参</li></ul><p><strong>省略小括号的情况：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">let</span> <span class="variable">fn</span> <span class="operator">=</span> num =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> num * <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>省略花括号的情况：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">let</span> <span class="variable">fn</span> <span class="operator">=</span> score =&gt; score * <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><strong>this 指向声明时所在作用域中 this 的值：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this 指向声明时所在作用域中 this 的值</span></span><br><span class="line"><span class="type">let</span> <span class="variable">fn</span> <span class="operator">=</span> () =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"></span><br><span class="line"><span class="type">let</span> <span class="variable">school</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    getName() &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">let</span> <span class="variable">subFun</span> <span class="operator">=</span> () =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">            console.log(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        subFun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">school.getName();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/362527ff0dbd1248e6dc65e4b2751491.png" alt="img"></p><h3 id="7-1-7、rest-参数"><a href="#7-1-7、rest-参数" class="headerlink" title="7.1.7、rest 参数"></a>7.1.7、rest 参数</h3><p>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments 参数。</p><blockquote><p>注意：rest 参数非常适合不定个数参数函数的场景</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用与 arguments 类似</span></span><br><span class="line">function <span class="title function_">add</span><span class="params">(...args)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(args);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// rest 参数必须是最后一个形参</span></span><br><span class="line">function <span class="title function_">minus</span><span class="params">(a, b, ...args)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(a, b, args);</span><br><span class="line">&#125;</span><br><span class="line">minus(<span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">19</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/223dc0964e7b11f7137b9ca6768e5583.png" alt="img"></p><h3 id="7-1-8、spread-扩展运算符"><a href="#7-1-8、spread-扩展运算符" class="headerlink" title="7.1.8、spread 扩展运算符"></a>7.1.8、spread 扩展运算符</h3><p>扩展运算符（spread）也是三个点（…），它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，对数组进行解包。</p><p><strong>展开数组：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展开数组</span></span><br><span class="line"><span class="type">let</span> <span class="variable">tfboys</span> <span class="operator">=</span> [<span class="string">&quot;德玛西亚之力&quot;</span>, <span class="string">&quot;德玛西亚之翼&quot;</span>, <span class="string">&quot;德玛西亚皇子&quot;</span>];</span><br><span class="line">function <span class="title function_">fn</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(arguments);</span><br><span class="line">&#125;</span><br><span class="line">fn(...tfboys);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/099d4a971374d3b90b62d225dff4fe8d.png" alt="img"></p><p><strong>展开对象：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展开对象</span></span><br><span class="line"><span class="type">let</span> <span class="variable">skillOne</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    q: <span class="string">&quot;致命打击&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">let</span> <span class="variable">skillTwo</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    w: <span class="string">&quot;勇气&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">let</span> <span class="variable">skillThree</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    e: <span class="string">&quot;审判&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">let</span> <span class="variable">skillFour</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    r: <span class="string">&quot;德玛西亚正义&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">let</span> <span class="variable">gailun</span> <span class="operator">=</span> &#123;</span><br><span class="line">   ...skillOne, ...skillTwo, ...skillThree, ...skillFour&#125;;</span><br><span class="line">console.log(gailun);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/4ed8c6374e96866ca9d8f77a6f39778f.png" alt="img"></p><h3 id="7-1-9、Symbol类型"><a href="#7-1-9、Symbol类型" class="headerlink" title="7.1.9、Symbol类型"></a>7.1.9、Symbol类型</h3><h4 id="7-1-9-1、Symbol的使用"><a href="#7-1-9-1、Symbol的使用" class="headerlink" title="7.1.9.1、Symbol的使用"></a>7.1.9.1、Symbol的使用</h4><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值，它是 JavaScript 语言的第七种数据类型，是一种类似于字符串的数据类型，Symbol 特点如下：</p><ul><li>Symbol 的值是唯一的，用来解决命名冲突的问题 </li><li>Symbol 值不能与其它数据进行运算 </li><li>Symbol 定义的对象属性不能使用 for…in 循环遍 历 ，但是可以使用 Reflect.ownKeys 来获取对象的所有键名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 Symbol</span></span><br><span class="line"><span class="type">let</span> <span class="variable">s1</span> <span class="operator">=</span> Symbol();</span><br><span class="line">console.log(s1);</span><br><span class="line">console.log(typeof s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加标识的 Symbol</span></span><br><span class="line"><span class="type">let</span> <span class="variable">s2</span> <span class="operator">=</span> Symbol(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="type">let</span> <span class="variable">s2_2</span> <span class="operator">=</span> Symbol(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">console.log(s2);</span><br><span class="line">console.log(s2_2);</span><br><span class="line">console.log(s2 === s2_2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 Symbol for 定义</span></span><br><span class="line"><span class="type">let</span> <span class="variable">s3</span> <span class="operator">=</span> Symbol.<span class="keyword">for</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="type">let</span> <span class="variable">s3_2</span> <span class="operator">=</span> Symbol.<span class="keyword">for</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">console.log(s3);</span><br><span class="line">console.log(s3_2);</span><br><span class="line">console.log(s3 === s3_2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在方法中使用 Symbol</span></span><br><span class="line"><span class="type">let</span> <span class="variable">game</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;狼人杀&quot;</span>,</span><br><span class="line">    [Symbol(<span class="string">&#x27;say&#x27;</span>)]: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我可以发言&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    [Symbol(<span class="string">&#x27;zibao&#x27;</span>)]: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&#x27;我可以自爆&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(game);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/bf5414cb64e3cf9457972b10ce17fab6.png" alt="img"></p><blockquote><p>注意：遇到唯一性的场景时要想到 Symbol</p></blockquote><h4 id="7-1-9-2、Symbol内置值"><a href="#7-1-9-2、Symbol内置值" class="headerlink" title="7.1.9.2、Symbol内置值"></a>7.1.9.2、Symbol内置值</h4><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。</p><p>可以称这些方法为魔术方法，因为它们会在特定的场景下自动执行。</p><p><strong>Symbol.hasInstance演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">static</span> [Symbol.hasInstance](param) &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我被用来检测类型了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">let</span> <span class="variable">o</span> <span class="operator">=</span> &#123;</span><br><span class="line">   &#125;;</span><br><span class="line">console.log(o <span class="keyword">instanceof</span> Person);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/74663d366b9a8261cc7c704896bca9c9.png" alt="img"></p><p><strong>Symbol.isConcatSpreadable演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">arr1</span> <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="type">const</span> <span class="variable">arr2</span> <span class="operator">=</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr2[Symbol.isConcatSpreadable] = <span class="literal">true</span>;</span><br><span class="line">console.log(arr1.concat(arr2));</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">arr3</span> <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="type">const</span> <span class="variable">arr4</span> <span class="operator">=</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr4[Symbol.isConcatSpreadable] = <span class="literal">false</span>;</span><br><span class="line">console.log(arr3.concat(arr4));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/1072c432fee0970932bf37b846361d6d.png" alt="img"></p><h3 id="7-1-10、迭代器"><a href="#7-1-10、迭代器" class="headerlink" title="7.1.10、迭代器"></a>7.1.10、迭代器</h3><p>遍历器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作。ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费，原生具备 iterator 接口的数据：</p><ul><li>Array </li><li>Arguments </li><li>Set </li><li>Map </li><li>String </li><li>TypedArray </li><li>NodeList</li></ul><blockquote><p>注意：需要自定义遍历数据的时候，要想到迭代器</p></blockquote><p>工作原理：</p><ol><li>创建一个指针对象，指向当前数据结构的起始位置 </li><li>第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员 </li><li>接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员 </li><li>每调用 next 方法返回一个包含 value 和 done 属性的对象</li></ol><p><strong>案例演示：遍历数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个数组</span></span><br><span class="line"><span class="type">const</span> <span class="variable">xiyou</span> <span class="operator">=</span> [<span class="string">&quot;唐僧&quot;</span>, <span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙僧&quot;</span>];</span><br><span class="line"><span class="comment">//使用 for...of 遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (let v of xiyou) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(v);</span><br><span class="line">&#125;</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取迭代器对象</span></span><br><span class="line"><span class="type">let</span> <span class="variable">iterator</span> <span class="operator">=</span> xiyou[Symbol.iterator]();</span><br><span class="line"><span class="comment">//调用对象的next方法</span></span><br><span class="line">console.log(iterator.next());</span><br><span class="line">console.log(iterator.next());</span><br><span class="line">console.log(iterator.next());</span><br><span class="line">console.log(iterator.next());</span><br><span class="line">console.log(iterator.next());</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7261b300de524e308b2f3d6fa2626003.png" alt="img"></p><p><strong>案例演示：自定义遍历数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个对象</span></span><br><span class="line"><span class="type">const</span> <span class="variable">banji</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;五班&quot;</span>,</span><br><span class="line">    stus: [</span><br><span class="line">        <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">        <span class="string">&quot;王五&quot;</span>,</span><br><span class="line">        <span class="string">&quot;小六&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [Symbol.iterator]() &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//索引变量</span></span><br><span class="line">        <span class="type">let</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">let</span> <span class="variable">_this</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">   </span><br><span class="line">            next: function () &#123;</span><br><span class="line">   </span><br><span class="line">                <span class="keyword">if</span> (index &lt; _this.stus.length) &#123;</span><br><span class="line">   </span><br><span class="line">                    <span class="type">const</span> <span class="variable">result</span> <span class="operator">=</span> &#123;</span><br><span class="line">   value: _this.stus[index], done: <span class="literal">false</span>&#125;;</span><br><span class="line">                    <span class="comment">//下标自增</span></span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="comment">//返回结果</span></span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">   value: undefined, done: <span class="literal">true</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历这个对象</span></span><br><span class="line"><span class="keyword">for</span> (let v of banji) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ee3984806f44ae602c00e2e135e681a4.png" alt="img"></p><h3 id="7-1-11、生成器"><a href="#7-1-11、生成器" class="headerlink" title="7.1.11、生成器"></a>7.1.11、生成器</h3><p>生成器函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。</p><h4 id="7-1-11-1、生成器函数使用"><a href="#7-1-11-1、生成器函数使用" class="headerlink" title="7.1.11.1、生成器函数使用"></a>7.1.11.1、生成器函数使用</h4><p>代码说明：</p><ul><li><ul><li>的位置没有限制 </li></ul></li><li>生成器函数返回的结果是迭代器对象，调用迭代器对象的 next 方法可以得到 yield 语句后的值 </li><li>yield 相当于函数的暂停标记，也可以认为是函数的分隔符，每调用一次 next 方法，执行一段代码 </li><li>next 方法可以传递实参，作为 yield 语句的返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function * gen() &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/*代码1开始执行*/</span></span><br><span class="line">    console.log(<span class="string">&quot;代码1执行了&quot;</span>);</span><br><span class="line">    yield <span class="string">&quot;一只没有耳朵&quot;</span>;</span><br><span class="line">    <span class="comment">/*代码2开始执行*/</span></span><br><span class="line">    console.log(<span class="string">&quot;代码2执行了&quot;</span>);</span><br><span class="line">    yield <span class="string">&quot;一只没有尾巴&quot;</span>;</span><br><span class="line">    <span class="comment">/*代码3开始执行*/</span></span><br><span class="line">    console.log(<span class="string">&quot;代码3执行了&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;真奇怪&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">let</span> <span class="variable">iterator</span> <span class="operator">=</span> gen();</span><br><span class="line">console.log(iterator.next());</span><br><span class="line">console.log(iterator.next());</span><br><span class="line">console.log(iterator.next());</span><br><span class="line">console.log(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span> (let v of <span class="title function_">gen</span><span class="params">()</span>) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/df04133784427fb1f615e7d09c62cfc1.png" alt="img"></p><h4 id="7-1-11-2、生成器函数参数"><a href="#7-1-11-2、生成器函数参数" class="headerlink" title="7.1.11.2、生成器函数参数"></a>7.1.11.2、生成器函数参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function * gen(arg) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(arg);</span><br><span class="line">    <span class="type">let</span> <span class="variable">one</span> <span class="operator">=</span> yield <span class="number">111</span>;</span><br><span class="line">    console.log(one);</span><br><span class="line">    <span class="type">let</span> <span class="variable">two</span> <span class="operator">=</span> yield <span class="number">222</span>;</span><br><span class="line">    console.log(two);</span><br><span class="line">    <span class="type">let</span> <span class="variable">three</span> <span class="operator">=</span> yield <span class="number">333</span>;</span><br><span class="line">    console.log(three);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行获取迭代器对象</span></span><br><span class="line"><span class="type">let</span> <span class="variable">iterator</span> <span class="operator">=</span> gen(<span class="string">&#x27;AAA&#x27;</span>);</span><br><span class="line">console.log(iterator.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">//next方法可以传入实参</span></span><br><span class="line">console.log(iterator.next(<span class="string">&#x27;BBB&#x27;</span>));</span><br><span class="line">console.log(iterator.next(<span class="string">&#x27;CCC&#x27;</span>));</span><br><span class="line">console.log(iterator.next(<span class="string">&#x27;DDD&#x27;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/66be4bf19f8026b04b98cb516fb30b50.png" alt="img"></p><h4 id="7-1-11-3、生成器函数实例"><a href="#7-1-11-3、生成器函数实例" class="headerlink" title="7.1.11.3、生成器函数实例"></a>7.1.11.3、生成器函数实例</h4><p><strong>案例演示：1s后控制台输出 111，2s后输出 222，3s后输出 333</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">one</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="number">111</span>);</span><br><span class="line">        iterator.next();</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">two</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="number">222</span>);</span><br><span class="line">        iterator.next();</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">three</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="number">333</span>);</span><br><span class="line">        iterator.next();</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function * gen() &#123;</span><br><span class="line">   </span><br><span class="line">    yield <span class="title function_">one</span><span class="params">()</span>;</span><br><span class="line">    yield <span class="title function_">two</span><span class="params">()</span>;</span><br><span class="line">    yield <span class="title function_">three</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用生成器函数</span></span><br><span class="line"><span class="type">let</span> <span class="variable">iterator</span> <span class="operator">=</span> gen();</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fa16362e71076bdfbe14a5f6974725e0.png" alt="img"></p><p><strong>案例演示：模拟获取 ，用户数据 ，订单数据 ，商品数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">let</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;用户数据&quot;</span>;</span><br><span class="line">        iterator.next(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">getOrders</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">let</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;订单数据&quot;</span>;</span><br><span class="line">        iterator.next(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">getGoods</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">let</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;商品数据&quot;</span>;</span><br><span class="line">        iterator.next(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function * gen() &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">let</span> <span class="variable">users</span> <span class="operator">=</span> yield <span class="title function_">getUsers</span><span class="params">()</span>;</span><br><span class="line">    console.log(users);</span><br><span class="line">    <span class="type">let</span> <span class="variable">orders</span> <span class="operator">=</span> yield <span class="title function_">getOrders</span><span class="params">()</span>;</span><br><span class="line">    console.log(orders);</span><br><span class="line">    <span class="type">let</span> <span class="variable">goods</span> <span class="operator">=</span> yield <span class="title function_">getGoods</span><span class="params">()</span>;</span><br><span class="line">    console.log(goods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用生成器函数</span></span><br><span class="line"><span class="type">let</span> <span class="variable">iterator</span> <span class="operator">=</span> gen();</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6b1c6c66754846fe33f62c21276524a8.png" alt="img"></p><h3 id="7-1-12、Promise"><a href="#7-1-12、Promise" class="headerlink" title="7.1.12、Promise"></a>7.1.12、Promise</h3><p>Promise 是 ES6 引入的异步编程的新解决方案，语法上 Promise 是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。</p><h4 id="7-1-12-1、Promise基本使用"><a href="#7-1-12-1、Promise基本使用" class="headerlink" title="7.1.12.1、Promise基本使用"></a>7.1.12.1、Promise基本使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化 Promise 对象</span></span><br><span class="line"><span class="type">const</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(function (resolve, reject) &#123;</span><br><span class="line">   </span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 成功调用resolve()处理</span></span><br><span class="line">        <span class="type">let</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;数据读取成功&quot;</span>;</span><br><span class="line">        resolve(data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 失败调用reject()处理</span></span><br><span class="line">        <span class="type">let</span> <span class="variable">err</span> <span class="operator">=</span> <span class="string">&quot;数据读取失败&quot;</span>;</span><br><span class="line">        reject(err);</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 promise 对象的 then 方法</span></span><br><span class="line">p.then(function (value) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;, function (reason) &#123;</span><br><span class="line">   </span><br><span class="line">    console.error(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="7-1-12-2、Promise案例演示"><a href="#7-1-12-2、Promise案例演示" class="headerlink" title="7.1.12.2、Promise案例演示"></a>7.1.12.2、Promise案例演示</h4><p><strong>案例演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口地址: https://api.apiopen.top/getJoke</span></span><br><span class="line"><span class="type">const</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Promise</span>((resolve, reject) =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//1. 创建对象</span></span><br><span class="line">    <span class="type">const</span> <span class="variable">xhr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">//2. 初始化</span></span><br><span class="line">    xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line">    <span class="comment">//3. 发送</span></span><br><span class="line">    xhr.send();</span><br><span class="line">    <span class="comment">//4. 绑定事件, 处理响应结果</span></span><br><span class="line">    xhr.onreadystatechange = function () &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">   </span><br><span class="line">            <span class="comment">//判断响应状态码 200-299</span></span><br><span class="line">            <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">   </span><br><span class="line">                <span class="comment">//表示成功</span></span><br><span class="line">                resolve(xhr.response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line">                <span class="comment">//如果失败</span></span><br><span class="line">                reject(xhr.status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定回调</span></span><br><span class="line">p.then(function (value) &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;, function (reason) &#123;</span><br><span class="line">   </span><br><span class="line">    console.error(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c66b93da4b145571f90fb2c0db0513c1.png" alt="img"></p><h4 id="7-1-12-3、Promise-then方法"><a href="#7-1-12-3、Promise-then方法" class="headerlink" title="7.1.12.3、Promise-then方法"></a>7.1.12.3、Promise-then方法</h4><p>调用 then 方法，then 方法的返回结果是 Promise 对象，对象状态由回调函数的执行结果决定，如果回调函数中返回的结果是 非 promise 类型的属性，状态为成功，返回值为对象的成功的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 promise 对象</span></span><br><span class="line"><span class="type">const</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Promise</span>((resolve, reject) =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">        resolve(<span class="string">&quot;用户数据&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//链式调用+箭头函数</span></span><br><span class="line">p.then(value =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;).then(value =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b1e44a64bae470e31bec6b38243d4936.png" alt="img"></p><h4 id="7-1-12-4、Promise-catch方法"><a href="#7-1-12-4、Promise-catch方法" class="headerlink" title="7.1.12.4、Promise-catch方法"></a>7.1.12.4、Promise-catch方法</h4><p>如果只想处理错误状态，我们可以使用 catch 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Promise</span>((resolve, reject) =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//设置 p 对象的状态为失败, 并设置失败的值</span></span><br><span class="line">        reject(<span class="string">&quot;出错啦!&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="keyword">catch</span>(function (reason) &#123;</span><br><span class="line">   </span><br><span class="line">    console.error(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/13917a333fbbb46c3102bf8ccdcf4d9a.png" alt="img"></p><h3 id="7-1-13、Set"><a href="#7-1-13、Set" class="headerlink" title="7.1.13、Set"></a>7.1.13、Set</h3><p>ES6 提供了新的数据结构 Set（集合）。它类似于数组，但成员的值都是唯一的，集合实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历，集合的属性和方法：</p><ul><li>size：返回集合的元素个数 </li><li>add()：增加一个新元素，返回当前集合 </li><li>delete()：删除元素，返回 boolean 值 </li><li>has()：检测集合中是否包含某个元素，返回 boolean 值 </li><li>clear()：清空集合，返回 undefined</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个空集合</span></span><br><span class="line"><span class="type">let</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">//创建一个非空集合</span></span><br><span class="line"><span class="type">let</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">//集合属性与方法</span></span><br><span class="line"><span class="comment">//返回集合的元素个数</span></span><br><span class="line">console.log(s1.size);</span><br><span class="line"><span class="comment">//添加新元素</span></span><br><span class="line">console.log(s1.add(<span class="number">4</span>));</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">console.log(s1.delete(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//检测是否存在某个值</span></span><br><span class="line">console.log(s1.has(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//清空集合</span></span><br><span class="line">console.log(s1.clear());</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/72e93e66fa960742b8f5f1f9121edc9a.png" alt="img"></p><h3 id="7-1-14、Map"><a href="#7-1-14、Map" class="headerlink" title="7.1.14、Map"></a>7.1.14、Map</h3><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是“键” 的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map 也实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历。Map 的属性和方法：</p><ul><li>size：返回 Map 的元素个数 </li><li>set()：增加一个新元素，返回当前 Map </li><li>get()：返回键名对象的键值 </li><li>has()：检测 Map 中是否包含某个元素，返回 boolean 值 </li><li>clear()：清空集合，返回 undefined</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个空 map</span></span><br><span class="line"><span class="type">let</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">//创建一个非空 map</span></span><br><span class="line"><span class="type">let</span> <span class="variable">m2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;gender&quot;</span>, <span class="string">&quot;女&quot;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="comment">//属性和方法</span></span><br><span class="line"><span class="comment">//获取映射元素的个数</span></span><br><span class="line">console.log(m2.size);</span><br><span class="line"><span class="comment">//添加映射值</span></span><br><span class="line">console.log(m2.set(<span class="string">&quot;age&quot;</span>, <span class="number">6</span>));</span><br><span class="line"><span class="comment">//获取映射值</span></span><br><span class="line">console.log(m2.get(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"><span class="comment">//检测是否有该映射</span></span><br><span class="line">console.log(m2.has(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"><span class="comment">//清除</span></span><br><span class="line">console.log(m2.clear());</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3bd894dd1c913370e03dcdddbdda27c2.png" alt="img"></p><h3 id="7-1-15、class-类"><a href="#7-1-15、class-类" class="headerlink" title="7.1.15、class 类"></a>7.1.15、class 类</h3><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 class 关键字，可以定义类。基本上，ES6 的 class 可以看作只是 一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已，它的一些如下：</p><ul><li>class：声明类 </li><li>constructor：定义构造函数初始化 </li><li>extends：继承父类 </li><li>super：调用父级构造方法 </li><li>static：定义静态方法和属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    constructor(brand, color, price) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象方法</span></span><br><span class="line">    call() &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我可以打电话!!!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">   </span><br><span class="line">    constructor(brand, color, price, screen, pixel) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="built_in">super</span>(brand, color, price);</span><br><span class="line">        <span class="built_in">this</span>.screen = screen;</span><br><span class="line">        <span class="built_in">this</span>.pixel = pixel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子类方法</span></span><br><span class="line">    photo() &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我可以拍照!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    playGame() &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我可以玩游戏!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法重写</span></span><br><span class="line">    call() &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我可以进行视频通话!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我可以运行程序&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我可以建立连接&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="type">const</span> <span class="variable">Nokia</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;诺基亚&quot;</span>, <span class="string">&quot;灰色&quot;</span>, <span class="number">230</span>);</span><br><span class="line"><span class="type">const</span> <span class="variable">iPhone6s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;白色&quot;</span>, <span class="number">6088</span>, <span class="string">&quot;4.7inch&quot;</span>, <span class="string">&quot;500w&quot;</span>);</span><br><span class="line"><span class="comment">//调用子类方法</span></span><br><span class="line">iPhone6s.playGame();</span><br><span class="line"><span class="comment">//调用重写方法</span></span><br><span class="line">iPhone6s.call();</span><br><span class="line"><span class="comment">//调用静态方法</span></span><br><span class="line">SmartPhone.run();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a32a01d82cb231f54f4981b69694fb9f.png" alt="img"></p><h3 id="7-1-16、数值扩展"><a href="#7-1-16、数值扩展" class="headerlink" title="7.1.16、数值扩展"></a>7.1.16、数值扩展</h3><h4 id="7-1-16-1、二进制和八进制"><a href="#7-1-16-1、二进制和八进制" class="headerlink" title="7.1.16.1、二进制和八进制"></a>7.1.16.1、二进制和八进制</h4><p>ES6 新增了二进制和八进制的表示方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">let</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0b1010</span><span class="comment">//二进制</span></span><br><span class="line"><span class="type">let</span> <span class="variable">o</span> <span class="operator">=</span> 0o777;<span class="comment">//八进制</span></span><br><span class="line"><span class="type">let</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//十进制</span></span><br><span class="line"><span class="type">let</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0xff</span>;<span class="comment">//十六进制</span></span><br><span class="line">console.log(b);</span><br><span class="line">console.log(o);</span><br><span class="line">console.log(d);</span><br><span class="line">console.log(x);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c126e872714990e605fdcc1508cdc33c.png" alt="img"></p><h4 id="7-1-16-2、Number-EPSILON"><a href="#7-1-16-2、Number-EPSILON" class="headerlink" title="7.1.16.2、Number.EPSILON"></a>7.1.16.2、Number.EPSILON</h4><p>Number.EPSILON：它是 JavaScript 表示的最小精度，EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">equal</span><span class="params">(a, b)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (Math.abs(a - b) &lt; Number.EPSILON) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>);</span><br><span class="line">console.log(equal(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d4a73aab41d2bc214326ff17ae97fb6f.png" alt="img"></p><h4 id="7-1-16-3、Number-isFinite"><a href="#7-1-16-3、Number-isFinite" class="headerlink" title="7.1.16.3、Number.isFinite"></a>7.1.16.3、Number.isFinite</h4><p>Number.isFinite：检测一个数值是否为有限数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number.isFinite(<span class="number">100</span>));</span><br><span class="line">console.log(Number.isFinite(<span class="number">100</span> / <span class="number">0</span>));</span><br><span class="line">console.log(Number.isFinite(Infinity));</span><br><span class="line">console.log(Number.isFinite(-Infinity));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a8611da07c8890c5d55826eb7fe8f43b.png" alt="img"></p><h4 id="7-1-16-4、Number-isNaN"><a href="#7-1-16-4、Number-isNaN" class="headerlink" title="7.1.16.4、Number.isNaN"></a>7.1.16.4、Number.isNaN</h4><p>Number.isNaN：检测一个数值是否为 NaN</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number.isNaN(<span class="number">123</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3bd2ba47d5441caac3c2585e75d76ad8.png" alt="img"></p><h4 id="7-1-16-5、Number-parseInt"><a href="#7-1-16-5、Number-parseInt" class="headerlink" title="7.1.16.5、Number.parseInt"></a>7.1.16.5、Number.parseInt</h4><p>Number.parseInt：将一个字符串转换为整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number.parseInt(<span class="string">&quot;123abc&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d7e850ad5d89ed46f543ff274724d89b.png" alt="img"></p><h4 id="7-1-16-6、Number-parseFloat"><a href="#7-1-16-6、Number-parseFloat" class="headerlink" title="7.1.16.6、Number.parseFloat"></a>7.1.16.6、Number.parseFloat</h4><p>Number.parseFloat：将一个字符串转换为浮点数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number.parseFloat(<span class="string">&quot;3.1415926神奇&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/bff9db6ac35e15c9c77e51937c7b50e6.png" alt="img"></p><h4 id="7-1-16-7、Number-isInteger"><a href="#7-1-16-7、Number-isInteger" class="headerlink" title="7.1.16.7、Number.isInteger"></a>7.1.16.7、Number.isInteger</h4><p>Number.isInteger：判断一个数是否为整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number.isInteger(<span class="number">5</span>));</span><br><span class="line">console.log(Number.isInteger(<span class="number">2.5</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a38c6b96578d9f18c63d4d35b62b1a0a.png" alt="img"></p><h4 id="7-1-16-8、Math-trunc"><a href="#7-1-16-8、Math-trunc" class="headerlink" title="7.1.16.8、Math.trunc"></a>7.1.16.8、Math.trunc</h4><p>Math.trunc：将数字的小数部分抹掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Math.trunc(<span class="number">3.5</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a4652a02e7a1b4bc4cf8cfc62aa5f405.png" alt="img"></p><h4 id="7-1-16-9、Math-sign"><a href="#7-1-16-9、Math-sign" class="headerlink" title="7.1.16.9、Math.sign"></a>7.1.16.9、Math.sign</h4><p>Math.sign：判断一个数到底为正数、负数、还是零</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(Math.sign(<span class="number">100</span>));</span><br><span class="line">console.log(Math.sign(<span class="number">0</span>));</span><br><span class="line">console.log(Math.sign(-<span class="number">20000</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3a39d8535927bdcf4e2d81e05cca7fd5.png" alt="img"></p><h3 id="7-1-17、对象扩展"><a href="#7-1-17、对象扩展" class="headerlink" title="7.1.17、对象扩展"></a>7.1.17、对象扩展</h3><p>ES6 新增了一些 Object 对象的方法，例如：</p><ul><li>Object.is：比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN） </li><li>Object.assign：对象的合并，将源对象的所有可枚举属性，复制到目标对象 </li><li><strong>proto</strong>、setPrototypeOf、 setPrototypeOf可以直接设置对象的原型</li></ul><h4 id="7-1-17-1、Object-is"><a href="#7-1-17-1、Object-is" class="headerlink" title="7.1.17.1、Object.is"></a>7.1.17.1、Object.is</h4><p>Object.is：判断两个值是否完全相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.is(<span class="number">120</span>, <span class="number">120</span>));<span class="comment">// ===</span></span><br><span class="line">console.log(Object.is(NaN, NaN));<span class="comment">// ===</span></span><br><span class="line">console.log(NaN === NaN);<span class="comment">// ===</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/bdec47a5a4af766fef6a766cf3a2156d.png" alt="img"></p><h4 id="7-1-17-2、Object-assign"><a href="#7-1-17-2、Object-assign" class="headerlink" title="7.1.17.2、Object.assign"></a>7.1.17.2、Object.assign</h4><p>Object.assign：对象的合并，后边的对象会把前边对象的相同属性和方法覆盖，没有的属性和方法会合并</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">config1</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    host: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line">    name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    pass: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    test1: <span class="string">&quot;test1&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="variable">config2</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    host: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    port: <span class="number">3309</span>,</span><br><span class="line">    name: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">    pass: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    test2: <span class="string">&quot;test2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">console.log(Object.assign(config1, config2));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/98a9827537b0f61618056cda4826dbc8.png" alt="img"></p><h4 id="7-1-17-3、设置原型对象"><a href="#7-1-17-3、设置原型对象" class="headerlink" title="7.1.17.3、设置原型对象"></a>7.1.17.3、设置原型对象</h4><ul><li>Object.setPrototypeOf：设置原型对象 </li><li>Object.getPrototypeof：获取原型对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">school</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;MySchool&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="variable">cities</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    xiaoqu: [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;深圳&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line">Object.setPrototypeOf(school, cities);</span><br><span class="line">console.log(Object.getPrototypeOf(school));</span><br><span class="line">console.log(school);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2692986b738e4ec760eff2a59ee9daef.png" alt="img"></p><h3 id="7-1-18、模块化"><a href="#7-1-18、模块化" class="headerlink" title="7.1.18、模块化"></a>7.1.18、模块化</h3><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来。</p><h4 id="7-1-18-1、模块化的好处"><a href="#7-1-18-1、模块化的好处" class="headerlink" title="7.1.18.1、模块化的好处"></a>7.1.18.1、模块化的好处</h4><ul><li>防止命名冲突 </li><li>代码复用 </li><li>高维护性</li></ul><h4 id="7-1-18-2、模块化的产品"><a href="#7-1-18-2、模块化的产品" class="headerlink" title="7.1.18.2、模块化的产品"></a>7.1.18.2、模块化的产品</h4><p>CommonJS =&gt; NodeJS、Browserify</p><p>AMD =&gt; requireJS</p><p>CMD =&gt; seaJS</p><h4 id="7-1-18-3、模块化的语法"><a href="#7-1-18-3、模块化的语法" class="headerlink" title="7.1.18.3、模块化的语法"></a>7.1.18.3、模块化的语法</h4><p>模块功能主要由两个命令构成：export 和 import。</p><ul><li>export 命令用于规定模块的对外接口 </li><li>import 命令用于输入其它模块提供的功能</li></ul><h4 id="7-1-18-4、模块化的暴露"><a href="#7-1-18-4、模块化的暴露" class="headerlink" title="7.1.18.4、模块化的暴露"></a>7.1.18.4、模块化的暴露</h4><p>m1.js</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：分别暴露</span></span><br><span class="line">export <span class="type">let</span> <span class="variable">school</span> <span class="operator">=</span> <span class="string">&quot;华北理工大学&quot;</span>;</span><br><span class="line"></span><br><span class="line">export function <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(<span class="string">&quot;我们要学习！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>m2.js</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式二：统一暴露</span></span><br><span class="line"><span class="type">let</span> <span class="variable">school</span> <span class="operator">=</span> <span class="string">&quot;华北理工大学&quot;</span>;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">findJob</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(<span class="string">&quot;我们要找工作！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;</span><br><span class="line">   school, findJob&#125;;</span><br></pre></td></tr></table></figure><p>m3.js</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式三：默认暴露</span></span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">   </span><br><span class="line">    school: <span class="string">&quot;华北理工大学&quot;</span>,</span><br><span class="line">    change: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我们要改变自己！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-18-5、模块化的导入"><a href="#7-1-18-5、模块化的导入" class="headerlink" title="7.1.18.5、模块化的导入"></a>7.1.18.5、模块化的导入</h4><p>index.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 引入 m1.js 模块内容</span></span><br><span class="line">    <span class="keyword">import</span> * as m1 from <span class="string">&quot;./m1.js&quot;</span>;</span><br><span class="line">    <span class="comment">// 引入 m2.js 模块内容</span></span><br><span class="line">    <span class="keyword">import</span> * as m2 from <span class="string">&quot;./m2.js&quot;</span>;</span><br><span class="line">    <span class="comment">// 引入 m3.js 模块内容</span></span><br><span class="line">    <span class="keyword">import</span> * as m3 from <span class="string">&quot;./m3.js&quot;</span>;</span><br><span class="line">     </span><br><span class="line">    m1.study();</span><br><span class="line">    m2.findJob();</span><br><span class="line">    m3.<span class="keyword">default</span>.change();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/4566c9c669277441f6f717a83b758da7.png" alt="img"></p><h4 id="7-1-18-6、解构赋值形式"><a href="#7-1-18-6、解构赋值形式" class="headerlink" title="7.1.18.6、解构赋值形式"></a>7.1.18.6、解构赋值形式</h4><p>index.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在这里写JavaScript代码，因为JavaScript是由上到下执行的 --&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 引入 m1.js 模块内容</span></span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">    school, study&#125; from <span class="string">&quot;./m1.js&quot;</span>;</span><br><span class="line">    <span class="comment">// 引入 m2.js 模块内容</span></span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">    school as s, findJob&#125; from <span class="string">&quot;./m2.js&quot;</span>;</span><br><span class="line">    <span class="comment">// 引入 m3.js 模块内容</span></span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> as m3&#125; from <span class="string">&quot;./m3.js&quot;</span>;</span><br><span class="line"></span><br><span class="line">    console.log(school);</span><br><span class="line">    study();</span><br><span class="line"></span><br><span class="line">    console.log(s);</span><br><span class="line">    findJob();</span><br><span class="line"></span><br><span class="line">    console.log(m3);</span><br><span class="line">    m3.change();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/914ec8bc96c157e1d2e870930fb2590a.png" alt="img"></p><blockquote><p>注意：针对默认暴露还可以直接 <code>import m3 from “./m3.js”</code></p></blockquote><h3 id="7-1-19、浅拷贝和深拷贝"><a href="#7-1-19、浅拷贝和深拷贝" class="headerlink" title="7.1.19、浅拷贝和深拷贝"></a>7.1.19、浅拷贝和深拷贝</h3><p>如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝；如果B没变，那就是深拷贝，深拷贝与浅拷贝的概念只存在于引用数据类型。</p><h4 id="7-1-19-1、浅拷贝"><a href="#7-1-19-1、浅拷贝" class="headerlink" title="7.1.19.1、浅拷贝"></a>7.1.19.1、浅拷贝</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">obj1</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    speak: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我是&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">obj2</span> <span class="operator">=</span> obj1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当修改obj2的属性和方法的时候，obj1相应的属性和方法也会改变</span></span><br><span class="line">obj2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">console.log(obj1);</span><br><span class="line">console.log(obj2);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6c91cba15c8b2bae18d6f69b842bacae.png" alt="img"></p><h4 id="7-1-19-2、深拷贝"><a href="#7-1-19-2、深拷贝" class="headerlink" title="7.1.19.2、深拷贝"></a>7.1.19.2、深拷贝</h4><h5 id="7-1-19-2-1、自带的"><a href="#7-1-19-2-1、自带的" class="headerlink" title="7.1.19.2.1、自带的"></a>7.1.19.2.1、自带的</h5><p><strong>Array：slice()、concat()、Array.from()、… 操作符：只能实现一维数组的深拷贝</strong></p><p>slice()方法演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr1</span> <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">arr2</span> <span class="operator">=</span> arr1.slice();</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">console.log(arr1);</span><br><span class="line">console.log(arr2);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9210eb6cb1f8ce51db545f32388a0a19.png" alt="img"></p><p>concat()方法演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr1</span> <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">arr2</span> <span class="operator">=</span> arr1.concat();</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">console.log(arr1);</span><br><span class="line">console.log(arr2);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/10f0bfe1e754957fb947804b201b90a9.png" alt="img"></p><p>Array.from()方法演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr1</span> <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">arr2</span> <span class="operator">=</span> Array.from(arr1);</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">console.log(arr1);</span><br><span class="line">console.log(arr2);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/565589822317ef0caf40c97b41f5dedc.png" alt="img"></p><p>… 操作符演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">arr1</span> <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">arr2</span> <span class="operator">=</span> [...arr1];</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">console.log(arr1);</span><br><span class="line">console.log(arr2);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2d90b07bfdc114450b7fef097772dd18.png" alt="img"></p><p><strong>Object：Object.assign()、… 操作符：只能实现一维对象的深拷贝</strong></p><p>Object.assign()方法演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">obj1</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    speak: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我是&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">obj2</span> <span class="operator">=</span> Object.assign(&#123;</span><br><span class="line">   &#125;, obj1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当修改obj2的属性和方法的时候，obj1相应的属性和方法不会改变</span></span><br><span class="line">obj2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">console.log(obj1);</span><br><span class="line">console.log(obj2);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a79b8cbcb59725bd43f406f3b407e5a5.png" alt="img"></p><p>… 操作符演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">obj1</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    speak: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我是&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">obj2</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    ...obj1</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当修改obj2的属性和方法的时候，obj1相应的属性和方法不会改变</span></span><br><span class="line">obj2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">console.log(obj1);</span><br><span class="line">console.log(obj2);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5b7f4e62a810da3cba10f4e9de868604.png" alt="img"></p><p><strong>JSON.parse(JSON.stringify(obj))：可实现多维对象的深拷贝，但会忽略 undefined 、 任意的函数 、Symbol 值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">obj1</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    birthday: &#123;</span><br><span class="line">   </span><br><span class="line">        year: <span class="number">1997</span>,</span><br><span class="line">        month: <span class="number">12</span>,</span><br><span class="line">        day: <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    speak: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我是&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">obj2</span> <span class="operator">=</span> JSON.parse(JSON.stringify(obj1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当修改obj2的属性和方法的时候，obj1相应的属性和方法不会改变</span></span><br><span class="line">obj2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">console.log(obj1);</span><br><span class="line">console.log(obj2);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/02aa09c5c1b8b563ffb115cfc9f4a1f0.png" alt="img"></p><blockquote><p>注意：进行<code>JSON.stringify()</code>序列化的过程中，<code>undefined、任意的函数以及 symbol 值</code>，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 null（出现在数组中时），由上面可知，JS 提供的自有方法并不能彻底解决Array、Object的深拷贝问题，因此我们应该自己实现。</p></blockquote><h5 id="7-1-19-2-2、通用版"><a href="#7-1-19-2-2、通用版" class="headerlink" title="7.1.19.2.2、通用版"></a>7.1.19.2.2、通用版</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">obj1</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    birthday: &#123;</span><br><span class="line">   </span><br><span class="line">        year: <span class="number">1997</span>,</span><br><span class="line">        month: <span class="number">12</span>,</span><br><span class="line">        day: <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    speak: function () &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(<span class="string">&quot;我是&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">obj2</span> <span class="operator">=</span> deepClone(obj1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当修改obj2的属性和方法的时候，obj1相应的属性和方法不会改变</span></span><br><span class="line">obj2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">console.log(obj1);</span><br><span class="line">console.log(obj2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝通用方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> obj   需要拷贝的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> has</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;any|RegExp|Date&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">function <span class="title function_">deepClone</span><span class="params">(obj, has = new WeakMap()</span>) &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 类型检查</span></span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>) <span class="keyword">return</span> obj;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Date) <span class="keyword">return</span> obj;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> RegExp) <span class="keyword">return</span> obj;</span><br><span class="line">    <span class="keyword">if</span> (!(typeof obj == <span class="string">&quot;object&quot;</span>)) <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造对象</span></span><br><span class="line">    <span class="type">const</span> <span class="variable">newObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">obj</span>.constructor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止自引用导致的死循环</span></span><br><span class="line">    <span class="keyword">if</span> (has.get(obj)) <span class="keyword">return</span> has.get(obj);</span><br><span class="line">    has.set(obj, newObj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环遍历属性及方法</span></span><br><span class="line">    <span class="keyword">for</span> (let key in obj) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">   </span><br><span class="line">            newObj[key] = deepClone(obj[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回对象</span></span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3f4db7e1675de043429df5bf2ecc3b5d.png" alt="img"></p><h2 id="7-2、ECMAScript7新特性"><a href="#7-2、ECMAScript7新特性" class="headerlink" title="7.2、ECMAScript7新特性"></a>7.2、ECMAScript7新特性</h2><h3 id="7-2-1、数组方法扩展"><a href="#7-2-1、数组方法扩展" class="headerlink" title="7.2.1、数组方法扩展"></a>7.2.1、数组方法扩展</h3><p>Array.prototype.includes：此方法用来检测数组中是否包含某个元素，返回布尔类型值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">mingzhu</span> <span class="operator">=</span> [<span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;水浒传&quot;</span>];</span><br><span class="line">console.log(mingzhu.includes(<span class="string">&quot;西游记&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c9aa858f337ad639378bdda002e62617.png" alt="img"></p><h3 id="7-2-2、幂运算"><a href="#7-2-2、幂运算" class="headerlink" title="7.2.2、幂运算"></a>7.2.2、幂运算</h3><p>** 操作符的作用和 Math.pow 的作用是一样，请看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="number">2</span> ** <span class="number">10</span>);</span><br><span class="line">console.log(Math.pow(<span class="number">2</span>, <span class="number">10</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9920bbd0845ad8ccbe0b89c5ccdb8d6e.png" alt="img"></p><h2 id="7-3、ECMAScript8新特性"><a href="#7-3、ECMAScript8新特性" class="headerlink" title="7.3、ECMAScript8新特性"></a>7.3、ECMAScript8新特性</h2><h3 id="7-3-1、async-函数"><a href="#7-3-1、async-函数" class="headerlink" title="7.3.1、async 函数"></a>7.3.1、async 函数</h3><p>async 函数的语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">async function <span class="title function_">fn</span><span class="params">()</span>&#123;</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>async 函数的返回值：</p><ol><li>返回的结果不是一个 Promise 类型的对象，返回的结果就是成功 Promise 对象 </li><li>返回的结果如果是一个 Promise 对象，具体需要看执行resolve方法还是reject方法 </li><li>抛出错误，返回的结果是一个失败的 Promise</li></ol><p>async 函数的演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//async 函数</span></span><br><span class="line">async function <span class="title function_">fn</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>((resolve, reject) =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">        resolve(<span class="string">&#x27;成功的数据&#x27;</span>);</span><br><span class="line">        <span class="comment">// reject(&quot;失败的错误&quot;);</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">result</span> <span class="operator">=</span> fn();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 then 方法</span></span><br><span class="line">result.then(value =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;, reason =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">    console.warn(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/74f290d199ade307d151a755ab01e17b.png" alt="img"></p><h3 id="7-3-2、await-表达式"><a href="#7-3-2、await-表达式" class="headerlink" title="7.3.2、await 表达式"></a>7.3.2、await 表达式</h3><p>async 和 await 两种语法结合可以让异步代码像同步代码一样</p><p>await 表达式的注意事项：</p><ol><li>await 必须写在 async 函数中 </li><li>await 右侧的表达式一般为 promise 对象 </li><li>await 返回的是 promise 成功的值 </li><li>await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li></ol><p>await 表达式的语法演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 promise 对象</span></span><br><span class="line"><span class="type">const</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Promise</span>((resolve, reject) =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">    resolve(<span class="string">&quot;用户数据&quot;</span>);</span><br><span class="line">    <span class="comment">//reject(&quot;失败啦!&quot;);</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//await 要放在 async 函数中.</span></span><br><span class="line">async function <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">let</span> <span class="variable">result</span> <span class="operator">=</span> await p;</span><br><span class="line">        console.log(result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">   </span><br><span class="line">        console.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/665370c4fba5aaf2f16aa9be2888a375.png" alt="img"></p><p>await 表达式的案例演示：async与await封装AJAX请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送 AJAX 请求, 返回的结果是 Promise 对象</span></span><br><span class="line">function <span class="title function_">sendAJAX</span><span class="params">(url)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>((resolve, reject) =&gt; &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//1. 创建对象</span></span><br><span class="line">        <span class="type">const</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="comment">//2. 初始化</span></span><br><span class="line">        x.open(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">        <span class="comment">//3. 发送</span></span><br><span class="line">        x.send();</span><br><span class="line">        <span class="comment">//4. 事件绑定</span></span><br><span class="line">        x.onreadystatechange = function () &#123;</span><br><span class="line">   </span><br><span class="line">            <span class="keyword">if</span> (x.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">   </span><br><span class="line">                <span class="keyword">if</span> (x.status &gt;= <span class="number">200</span> &amp;&amp; x.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">   </span><br><span class="line">                    resolve(x.response);<span class="comment">//成功</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   </span><br><span class="line">                    reject(x.status);<span class="comment">//失败</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// async 与 await 测试</span></span><br><span class="line">async function <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//发送 AJAX 请求 1</span></span><br><span class="line">    <span class="type">let</span> <span class="variable">joke</span> <span class="operator">=</span> await <span class="title function_">sendAJAX</span><span class="params">(<span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>)</span>;</span><br><span class="line">    <span class="comment">//发送 AJAX 请求 2</span></span><br><span class="line">    <span class="type">let</span> <span class="variable">tianqi</span> <span class="operator">=</span> await <span class="title function_">sendAJAX</span><span class="params">(<span class="string">&#x27;https://www.tianqiapi.com/api/?version=v1&amp;city=%E5%8C%97%E4%BA%AC&amp;appid=23941491&amp;appsecret=TXoD5e8P&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line">    console.log(joke);</span><br><span class="line">    console.error(tianqi);<span class="comment">//为了区别数据，我这里用红色的error输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9c96ad3b47b55f33fa84825ad4f7e477.png" alt="img"></p><h3 id="7-3-3、对象方法拓展"><a href="#7-3-3、对象方法拓展" class="headerlink" title="7.3.3、对象方法拓展"></a>7.3.3、对象方法拓展</h3><ul><li>Object.keys()方法返回一个给定对象的所有可枚举键值的数组 </li><li>Object.values()方法返回一个给定对象的所有可枚举属性值的数组 </li><li>Object.entries()方法返回一个给定对象自身可遍历属性 [key,value] 的数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明对象</span></span><br><span class="line"><span class="type">const</span> <span class="variable">person</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取对象所有的键</span></span><br><span class="line">console.log(Object.keys(person));</span><br><span class="line"><span class="comment">//获取对象所有的值</span></span><br><span class="line">console.log(Object.values(person));</span><br><span class="line"><span class="comment">//获取对象所有的键值对数组</span></span><br><span class="line">console.log(Object.entries(person));</span><br><span class="line"><span class="comment">//创建 Map</span></span><br><span class="line"><span class="type">const</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Map</span>(Object.entries(person));</span><br><span class="line">console.log(m.get(<span class="string">&quot;name&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c20a17fc761ee98ec76ce034011a45e1.png" alt="img"></p><p>Object.getOwnPropertyDescriptors方法返回指定对象所有自身属性的描述对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明对象</span></span><br><span class="line"><span class="type">const</span> <span class="variable">person</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对象属性的描述对象</span></span><br><span class="line">console.log(Object.getOwnPropertyDescriptors(person));</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明对象</span></span><br><span class="line"><span class="type">const</span> <span class="variable">obj</span> <span class="operator">=</span> Object.create(<span class="literal">null</span>, &#123;</span><br><span class="line">   </span><br><span class="line">    name: &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//设置值</span></span><br><span class="line">        value: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">        <span class="comment">//属性特性</span></span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//设置值</span></span><br><span class="line">        value: <span class="number">21</span>,</span><br><span class="line">        <span class="comment">//属性特性</span></span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//对象属性的描述对象</span></span><br><span class="line">console.log(Object.getOwnPropertyDescriptors(obj));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ac3d28ba3178fa5429d4c5813e8f793c.png" alt="img"></p><h2 id="7-4、ECMAScript9新特性"><a href="#7-4、ECMAScript9新特性" class="headerlink" title="7.4、ECMAScript9新特性"></a>7.4、ECMAScript9新特性</h2><h3 id="7-4-1、对象拓展"><a href="#7-4-1、对象拓展" class="headerlink" title="7.4.1、对象拓展"></a>7.4.1、对象拓展</h3><p>Rest 参数与 spread 扩展运算符在 ES6 中已经引入，不过 ES6 中只针对于数组，在 ES9 中为对象提供了像数组一样的 rest 参数和扩展运算符</p><h4 id="7-4-1-1、对象展开"><a href="#7-4-1-1、对象展开" class="headerlink" title="7.4.1.1、对象展开"></a>7.4.1.1、对象展开</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">connect</span><span class="params">(&#123;</span></span><br><span class="line"><span class="params">   host, port, ...user&#125;)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    console.log(host);</span><br><span class="line">    console.log(port);</span><br><span class="line">    console.log(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connect(&#123;</span><br><span class="line">   </span><br><span class="line">    host: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line">    username: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    type: <span class="string">&#x27;master&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6bb0e75ed9882ee4a65240839ac2c0e9.png" alt="img"></p><h4 id="7-4-1-2、对象合并"><a href="#7-4-1-2、对象合并" class="headerlink" title="7.4.1.2、对象合并"></a>7.4.1.2、对象合并</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">skillOne</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    q: <span class="string">&#x27;天音波&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">skillTwo</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    w: <span class="string">&#x27;金钟罩&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">skillThree</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    e: <span class="string">&#x27;天雷破&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">skillFour</span> <span class="operator">=</span> &#123;</span><br><span class="line">   </span><br><span class="line">    r: <span class="string">&#x27;猛龙摆尾&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">mangseng</span> <span class="operator">=</span> &#123;</span><br><span class="line">   ...skillOne, ...skillTwo, ...skillThree, ...skillFour&#125;;</span><br><span class="line">console.log(mangseng);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0ad0c01503b55ce2c6f32b3f0a957f56.png" alt="img"></p><h3 id="7-4-2、正则表达式拓展"><a href="#7-4-2、正则表达式拓展" class="headerlink" title="7.4.2、正则表达式拓展"></a>7.4.2、正则表达式拓展</h3><h4 id="7-4-2-1、命名捕获分组"><a href="#7-4-2-1、命名捕获分组" class="headerlink" title="7.4.2.1、命名捕获分组"></a>7.4.2.1、命名捕获分组</h4><p>ES9 允许命名捕获组使用符号 ?<name> ，这样获取捕获结果可读性更强。使用数组下标不好吗？的确不好，因为如果一旦你想要获取的元素一旦增加，数组下标就改变了，所以建议使用命名捕获分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">let</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;打开百度，你就知道！&lt;/a&gt;&#x27;</span>;</span><br><span class="line"><span class="type">const</span> <span class="variable">reg</span> <span class="operator">=</span> /&lt;a href=<span class="string">&quot;(?&lt;url&gt;.*)&quot;</span>&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/;</span><br><span class="line"><span class="type">const</span> <span class="variable">result</span> <span class="operator">=</span> reg.exec(str);</span><br><span class="line">console.log(result.groups.url);</span><br><span class="line">console.log(result.groups.text);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/8528a032da7517daba43b4ab38b9b2fd.png" alt="img"></p><h4 id="7-4-2-2、正向断言"><a href="#7-4-2-2、正向断言" class="headerlink" title="7.4.2.2、正向断言"></a>7.4.2.2、正向断言</h4><p>ES9 支持正向断言，通过对匹配结果后面的内容进行判断，对匹配进行筛选。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明字符串</span></span><br><span class="line"><span class="type">let</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;订单编号开始123456789订单编号结束&quot;</span>;</span><br><span class="line"><span class="comment">//正向断言</span></span><br><span class="line"><span class="type">const</span> <span class="variable">reg</span> <span class="operator">=</span> /\d+(?=订单编号结束)/;<span class="comment">//也就是说数字的后边一定要跟着 订单编号结束</span></span><br><span class="line"><span class="type">const</span> <span class="variable">result</span> <span class="operator">=</span> reg.exec(str);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/8d7a1264a838ce36f9a422c549e50426.png" alt="img"></p><h4 id="7-4-2-3、反向断言"><a href="#7-4-2-3、反向断言" class="headerlink" title="7.4.2.3、反向断言"></a>7.4.2.3、反向断言</h4><p>ES9 支持反向断言，通过对匹配结果前面的内容进行判断，对匹配进行筛选。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明字符串</span></span><br><span class="line"><span class="type">let</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;订单编号开始123456789订单编号结束&quot;</span>;</span><br><span class="line"><span class="comment">//正向断言</span></span><br><span class="line"><span class="type">const</span> <span class="variable">reg</span> <span class="operator">=</span> /(?&lt;=订单编号开始)\d+/;<span class="comment">//也就是说数字的前边一定要跟着 订单编号开始</span></span><br><span class="line"><span class="type">const</span> <span class="variable">result</span> <span class="operator">=</span> reg.exec(str);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0ed065b20d34aa358c6632f1fb8e72dc.png" alt="img"></p><h4 id="7-4-2-4、dotAll模式"><a href="#7-4-2-4、dotAll模式" class="headerlink" title="7.4.2.4、dotAll模式"></a>7.4.2.4、dotAll模式</h4><p>正则表达式中点 . 匹配除回车外的任何单字符，标记 s 改变这种行为，允许行终止符出现，也就是dotAll模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">let</span> <span class="variable">str</span> <span class="operator">=</span> `</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">     &lt;li&gt;</span><br><span class="line">         &lt;a&gt;肖生克的救赎&lt;/a&gt;</span><br><span class="line">         &lt;p&gt;上映日期: <span class="number">1994</span>-09-<span class="number">10</span>&lt;/p&gt;</span><br><span class="line">         &lt;/li&gt;</span><br><span class="line">     &lt;li&gt;</span><br><span class="line">         &lt;a&gt;阿甘正传&lt;/a&gt;</span><br><span class="line">         &lt;p&gt;上映日期: <span class="number">1994</span>-<span class="number">07</span>-<span class="number">06</span>&lt;/p&gt;</span><br><span class="line">     &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;`;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明正则</span></span><br><span class="line"><span class="type">const</span> <span class="variable">reg</span> <span class="operator">=</span> /&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/gs;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行匹配</span></span><br><span class="line">let result</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-1、JavaScript的起源&quot;&gt;&lt;a href=&quot;#1-1、JavaScript的起源&quot; class=&quot;headerlink&quot; title=&quot;1.1、JavaScript的起源&quot;&gt;&lt;/a&gt;1.1、JavaScript的起源&lt;/h2&gt;&lt;p&gt;JavaScript</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://manamn.space/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://manamn.space/tags/JavaScript/"/>
    
    <category term="前端技术" scheme="https://manamn.space/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis学习笔记</title>
    <link href="https://manamn.space/2022/10/17/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://manamn.space/2022/10/17/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-17T04:46:33.000Z</published>
    <updated>2022-10-17T13:34:02.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis学习笔记"><a href="#MyBatis学习笔记" class="headerlink" title="MyBatis学习笔记"></a>MyBatis学习笔记</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始</strong>  —————</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/Mybatis.png" alt=""></p><h2 id="第一章-框架概述"><a href="#第一章-框架概述" class="headerlink" title="第一章 框架概述"></a>第一章 框架概述</h2><h3 id="1-1-框架"><a href="#1-1-框架" class="headerlink" title="1.1 框架"></a>1.1 框架</h3><p>●在⽂献中看到的framework被翻译为框架</p><p>● Java常⽤框架： </p><p>○ SSM三⼤框架：Spring + SpringMVC + MyBatis </p><p>○ SpringBoot </p><p>○ SpringCloud </p><p>○ 等。。</p><p>● 框架其实就是对通⽤代码的封装，提前写好了⼀堆接⼝和类，我们可以在做项⽬的时候直接引⼊这些 </p><p>接⼝和类（引⼊框架），基于这些现有的接⼝和类进⾏开发，可以⼤⼤提⾼开发效率。 </p><p>● 框架⼀般都以jar包的形式存在。(jar包中有class⽂件以及各种配置⽂件等。) </p><p>● SSM三⼤框架的学习顺序： </p><p>○ ⽅式⼀：MyBatis、Spring、SpringMVC（建议） </p><p>○ ⽅式⼆：Spring、MyBatis、SpringMVC</p><h3 id="软件开发常用结构"><a href="#软件开发常用结构" class="headerlink" title="软件开发常用结构"></a>软件开发常用结构</h3><h4 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h4><p>三层架构包含的三层：</p><p>界面层（User Interface layer）、业务逻辑层（Business Logic Layer）、数据访问层（Data access layer）</p><p>三层的职责</p><ol><li>界面层（表示层，视图层）  : <strong>主要功能是接受用户的数据，显示请求的处理结果。使用 web 页面和用户交互，手机 app 也就是表示层的，用户在 app 中操作，业务逻辑在服务器端处理。</strong></li><li>业务逻辑层：<strong>接收表示传递过来的数据，检查数据，计算业务逻辑，调用数据访问层获取数据。</strong></li><li>数据访问层：<strong>与数据库打交道。主要实现对数据的增、删、改、查。将存储在数据库中的数据提交给业务层，同时将业务层处理的数据保存到数据库.</strong></li></ol><p><code>三层的处理请求的交互：</code></p><blockquote><p>客户端&lt;—-&gt;界面层&lt;—-&gt;业务逻辑层&lt;—-&gt;数据访问层&lt;—-&gt;数据库。</p></blockquote><p>如图 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/Snipaste_2022-09-16_23-03-15.png" style="zoom:80%;" /></p><blockquote><p>为什么要使用三层架构 ？</p><p>1、 结构清晰、耦合度低、各层分工明确、</p><p>2、 可维护度高，可扩展性高。</p><p>3、有利用标准化。</p><p>4、 开发人员可以只关注整个结构中的其中某一层的功能实现</p><p>5、有利于各层逻辑的复用</p></blockquote><h4 id="常用框架"><a href="#常用框架" class="headerlink" title="常用框架"></a>常用框架</h4><p><strong>常见的 J2EE 中开发框架</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220710211042246.png" alt="image-20220710211042246"></p><h3 id="框架是什么"><a href="#框架是什么" class="headerlink" title="框架是什么"></a>框架是什么</h3><h4 id="框架定义"><a href="#框架定义" class="headerlink" title="框架定义"></a>框架定义</h4><blockquote><p>​        框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种认为，框架是可被应用开发者定制的应用骨架、模板。</p><p>简单的说，框架其实是半成品软件，就是一组组件，供你使用完成你自己的系统。从另一个角度来说框架一个舞台，你在舞台上做表演。在框架基础上加入你要完成的功能。</p><p>框架安全的，可复用的，不断升级的软件。</p></blockquote><h4 id="框架解决的问题"><a href="#框架解决的问题" class="headerlink" title="框架解决的问题"></a>框架解决的问题</h4><blockquote><p>​        框架要解决的最重要的一个问题是技术整合，在 J2EE 的 框架中，有着各种各样的技术，不同的应用，系统使用不同的技术解决问题。需要从 J2EE 中选择不同的技术，而技术自身的复杂性，有导致更大的风险。企业在开发软件项目时，主要目的是解决业务问题。 即要求企业负责技术本身，又要求解决业务问题。这是大多数企业不能完成的。框架把相关的技术融合在一起，企业开发可以集中在业务领域方面。</p><p>另一个方面可以提供开发的效率。</p></blockquote><h3 id="JDBC编程"><a href="#JDBC编程" class="headerlink" title="JDBC编程"></a>JDBC编程</h3><h4 id="使用JDBC的编程回顾"><a href="#使用JDBC的编程回顾" class="headerlink" title="使用JDBC的编程回顾"></a>使用JDBC的编程回顾</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findStudent</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//注册 mysql 驱动 </span></span><br><span class="line">  Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//连接数据的基本信息 url ，username，password</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>; </span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="comment">//创建连接对象 </span></span><br><span class="line">conn = DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">//保存查询结果 </span></span><br><span class="line">List&lt;Student&gt; stuList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//创建 Statement, 用来执行 sql 语句 </span></span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line"><span class="comment">//执行查询，创建记录集， </span></span><br><span class="line">rs = stmt.executeQuery(<span class="string">&quot;select * from student&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(); </span><br><span class="line">stu.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">stu.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">stu.setAge(rs.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"><span class="comment">//从数据库取出数据转为 Student 对象，封装到 List 集合 </span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 繁琐的赋值：思考⼀下，这种有规律的代码能不能通过反射机制来做⾃动化。</span></span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>, <span class="string">&quot;123456789&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">3</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">4</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">5</span>, <span class="string">&quot;1980-10-11&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">6</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">7</span>, <span class="string">&quot;zhangsan@126.com&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">8</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">9</span>, <span class="string">&quot;⼤兴区凉⽔河⼆街&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">10</span>, <span class="string">&quot;1000000&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">11</span>, <span class="string">&quot;16398574152&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">12</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="comment">// 执⾏SQL</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">stuList.add(stu);&#125;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rs != <span class="literal">null</span>)</span><br><span class="line">      rs.lose();</span><br><span class="line"><span class="keyword">if</span>(pstm != <span class="literal">null</span>)</span><br><span class="line">      pstm.close();</span><br><span class="line">   <span class="keyword">if</span>(con != <span class="literal">null</span>)</span><br><span class="line">      con.close();</span><br><span class="line">   </span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用JDBC的缺陷"><a href="#使用JDBC的缺陷" class="headerlink" title="使用JDBC的缺陷"></a>使用JDBC的缺陷</h4><ol><li>代码比较多，开发效率比较低。</li><li>SQL语句写死在Java程序中，不灵活。改SQL的话就要改Java代码。违背开闭原则OCP。</li><li>需要关注Connection，Statement，ResultSet对象的创建和销毁。</li><li>对ResultSet的查询结果，需要自己去封装为List。</li><li>重复冗余的代码比较多。</li><li>业务代码和数据库的操作混在一起。</li></ol><h3 id="了解MyBatis"><a href="#了解MyBatis" class="headerlink" title="了解MyBatis"></a>了解MyBatis</h3><p>MyBatis本质上就是对JDBC的封装，通过MyBatis完成CRUD。 </p><p>● MyBatis在三层架构中负责持久层的，属于持久层框架。 </p><p>● MyBatis的发展历程：【引⽤百度百科】 </p><p>○ MyBatis本是apache的⼀个开源项⽬iBatis，2010年这个项⽬由apache software foundation迁 </p><p>移到了google code，并且改名为MyBatis。2013年11⽉迁移到Github。 </p><p>○ iBATIS⼀词来源于“internet”和“abatis”的组合，是⼀个基于Java的持久层框架。iBATIS提供的 </p><p>持久层框架包括SQL Maps和Data Access Objects（DAOs）。 </p><p>● 打开mybatis代码可以看到它的包结构中包含：ibatis</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220916231211933.png" alt="image-20220916231211933" style="zoom:67%;" /></p><ul><li><p>ORM : 对象关系映射</p><p>○ O（Object）：Java虚拟机中的Java对象 </p><p>○ R（Relational）：关系型数据库 </p><p>○ M（Mapping）：将Java虚拟机中的Java对象映射到数据库表中⼀⾏记录，或是将数据库表中 </p><p>⼀⾏记录映射成Java虚拟机中的⼀个Java对象。 </p><p>○ ORM图示 </p></li></ul><p>  <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/Snipaste_2022-09-16_23-14-37.png" style="zoom: 80%;" /></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220916231612458.png" alt="image-20220916231612458" style="zoom:80%;" /></p><p><strong>下面一张图很清晰的介绍什么是ORM</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/001-ORM%E6%80%9D%E6%83%B3-%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84.png" style="zoom:80%;" /></p><ul><li>MyBatis属于半自动化ORM框架</li><li>Hibernate全自动化ORM框架</li></ul><hr><ul><li><p>MyBatis框架的优点 :</p><p>○ ⽀持定制化 SQL、存储过程、基本映射以及⾼级映射 </p><p>○ 避免了⼏乎所有的 JDBC 代码中⼿动设置参数以及获取结果集 </p><p>○ ⽀持XML开发，也⽀持注解式开发。【为了保证sql语句的灵活，所以mybatis⼤部分是采⽤ </p><p>XML⽅式开发。】</p><p>○ 将接⼝和 Java 的 POJOs(Plain Ordinary Java Object，简单普通的Java对象)映射成数据库中的 </p><p>记录 </p><p>○ 体积⼩好学：两个jar包，两个XML配置⽂件。 </p><p>○ 完全做到sql解耦合。 </p><p>○ 提供了基本映射标签。 </p><p>○ 提供了⾼级映射标签。 </p><p>○ 提供了XML标签，⽀持动态SQL的编写。 </p><p>○ …… </p></li></ul><h4 id="MyBatis框架解决的主要问题"><a href="#MyBatis框架解决的主要问题" class="headerlink" title="MyBatis框架解决的主要问题"></a>MyBatis框架解决的主要问题</h4><blockquote><p>减轻使用 JDBC 的复杂性，不用编写重复的创建 Connetion , Statement ; 不用编写关闭资源代码。直接使用 java 对象，表示结果数据。<strong>让开发者专注</strong> <code>SQL</code>的处理。 其他分心的工作由 MyBatis 代劳。</p><p>MyBatis 可以完成：</p><p>注册数据库的驱动，例如 Class.forName(“com.mysql.jdbc.Driver”))</p><p>创建 JDBC 中必须使用的 Connection ， Statement， ResultSet 对象</p><p>从 xml 中获取 sql，并执行 sql 语句，把 ResultSet 结果转换 java 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayLsit</span>&lt;&gt;();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> state.executeQuery(“select * from student”); </span><br><span class="line"><span class="keyword">while</span>(rs.next)&#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student.setName(rs.getString(“name”)); student.setAge(rs.getInt(“age”));</span><br><span class="line">list.add(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>关闭资源</span><br><span class="line">ResultSet.close() , Statement.close() , Conenection.close()</span><br></pre></td></tr></table></figure></blockquote><h4 id="MyBatis框架的概述"><a href="#MyBatis框架的概述" class="headerlink" title="MyBatis框架的概述"></a>MyBatis框架的概述</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220710211122577.png" alt="image-20220710211122577" style="zoom:80%;" /></p><blockquote><p>1、 <code>mybatis配置</code></p><p>mybatis-config.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。</p><p>mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。</p><p>2、 通过mybatis环境等配置信息构造<code>SqlSessionFactory</code>即会话工厂</p><p>3、 由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。</p><p>4、 <code>mybatis</code>底层自定义了<code>Executor</code>执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。</p><p>5、 <code>Mapped Statemen</code>t也是mybatis一个底层封装对象，它包装了<code>mybatis</code>配置信息及sql映射信息等。mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的<code>id</code>即是Mapped statement的id。</p><p>6、 <code>Mapped Statement</code>对sql执行输入参数进行定义，包括<code>HashMap</code>、<code>基本类型</code>、<code>pojo</code>，Executor通过Mapped Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对<code>preparedStatement</code>设置参数。</p><p>7、 Mapped Statement对sql执行输出结果进行定义，包括<code>HashMap</code>、基本类型、<code>pojo</code>，<code>Executor</code>通过<code>Mapped Statement</code>在执行sql后将输出结果映射至<code>java对象</code>中，输出结果映射过程相当于<code>jdbc</code>编程中对结果的解析处理过程。</p></blockquote><h2 id="第二章-MyBatis框架快速入门"><a href="#第二章-MyBatis框架快速入门" class="headerlink" title="第二章 MyBatis框架快速入门"></a>第二章 MyBatis框架快速入门</h2><h3 id="2-1-内容列表"><a href="#2-1-内容列表" class="headerlink" title="2.1 内容列表"></a>2.1 内容列表</h3><blockquote><p>快速开始一个<code>MyBatis</code></p><p>基本<code>CURD</code>的操作</p><p>MyBatis内部对象分析</p><p>使用DaoImpl.xml</p></blockquote><h3 id="2-2-入门案例"><a href="#2-2-入门案例" class="headerlink" title="2. 2 入门案例"></a>2. 2 入门案例</h3><h4 id="2-2-1-开发准备"><a href="#2-2-1-开发准备" class="headerlink" title="2.2.1 开发准备"></a>2.2.1 开发准备</h4><blockquote><p>搭建 MyBatis 开发环境，实现第一个案例</p><p>下载 mybatis</p><p><a href="https://github.com/mybatis/mybatis-3/releases">MyBatis官网</a></p></blockquote><p><strong>下载后的目录结构</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220710211134605.png" alt="image-20220710211134605"></p><blockquote><p><strong>其中：</strong></p><p>mybatis-3.5.1.jar        ——&gt;mybatis的核心包</p><p>lib                                ——&gt;mybatis的依赖包</p><p>mybatis-3.5.1.pdf        ——&gt;mybatis使用手册</p></blockquote><h3 id="2-2-MyBatis下载"><a href="#2-2-MyBatis下载" class="headerlink" title="2.2 MyBatis下载"></a>2.2 MyBatis下载</h3><ul><li>从github上下载，地址：<a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917150902782.png" alt="image-20220917150902782" style="zoom:67%;" /><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917150917323.png" alt="image-20220917150917323"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917150932329.png" alt="image-20220917150932329" style="zoom:67%;" /></p><p>将框架以及框架的源码都下载下来，下载框架后解压，打开mybatis⽬录 </p><p>​        <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917151007894.png" alt="image-20220917151007894"></p><p>○ 通过以上解压可以看到，框架⼀般都是以jar包的形式存在。我们的mybatis课程使⽤maven，所 </p><p>以这个jar我们不需要。 </p><p>○ 官⽅⼿册需要。</p><h3 id="2-3-MyBatis⼊⻔程序开发步骤"><a href="#2-3-MyBatis⼊⻔程序开发步骤" class="headerlink" title="2.3 MyBatis⼊⻔程序开发步骤"></a>2.3 MyBatis⼊⻔程序开发步骤</h3><p>● 写代码前准备： </p><p>○ 准备数据库表：汽⻋表t_car，字段包括：</p><blockquote><p>id：主键（⾃增）【bigint】 </p><p>car_num：汽⻋编号【</p><p>varchar】 </p><p>brand：品牌【</p><p>varchar】 </p><p>guide_price：⼚家指导价【</p><p>decimal类型，专⻔为财务数据准备的类型】 </p><p>produce_time：⽣产时间【</p><p>char，年⽉⽇即可，10个⻓度，’2022-10-11’】 </p><p>car_type：汽⻋类型（燃油⻋、电⻋、氢能源）【</p><p>varchar】 </p></blockquote><ul><li><p>使⽤navicat for mysql⼯具建表 </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917151115623.png" alt="image-20220917151115623"></p></li><li><p>使⽤navicat for mysql⼯具向t_car表中插⼊两条数据，如下：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917151128346.png" alt="image-20220917151128346"></p></li><li><p>创建Project：建议创建Empty Project，设置Java版本以及编译版本等。 </p></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917151150338.png" alt="image-20220917151150338" style="zoom:67%;" /></p><ul><li><p>步骤1：打包⽅式：jar（不需要war，因为mybatis封装的是jdbc。） </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.powernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-001-introduction<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ul><ul><li><p>步骤2：引⼊依赖（mybatis依赖 + mysql驱动依赖） </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis核⼼依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql驱动依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>步骤3：在resources根⽬录下新建mybatis-config.xml配置⽂件（可以参考mybatis⼿册拷⻉） </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/po</span></span></span><br><span class="line"><span class="string"><span class="tag">wernode&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--sql映射⽂件创建好之后，需要将该⽂件路径配置到这⾥--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意1：mybatis核⼼配置⽂件的⽂件名不⼀定是mybatis-config.xml，可以是其它名字。 </p></li><li><p>注意2：mybatis核⼼配置⽂件存放的位置也可以随意。这⾥选择放在resources根下，相当于放到了类的 根路径下。 </p></li><li><p>步骤4：在resources根⽬录下新建CarMapper.xml配置⽂件（可以参考mybatis⼿册拷⻉）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace先随意写⼀个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--insert sql：保存⼀个汽⻋信息--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCar&quot;</span>&gt;</span></span><br><span class="line"> insert into t_car</span><br><span class="line"> (id,car_num,brand,guide_price,produce_time,car_type)</span><br><span class="line"> values</span><br><span class="line"> (null,&#x27;102&#x27;,&#x27;丰⽥mirai&#x27;,40.30,&#x27;2014-10-05&#x27;,&#x27;氢能源&#x27;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意1：sql语句最后结尾可以不写“;” </p></li><li><p>注意2：CarMapper.xml⽂件的名字不是固定的。可以使⽤其它名字。 </p></li><li><p>注意3：CarMapper.xml⽂件的位置也是随意的。这⾥选择放在resources根下，相当于放到了类的根路 径下。 </p></li><li><p>注意4：将CarMapper.xml⽂件路径配置到mybatis-config.xml： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CarMapper.xml&quot;</span>/&gt;</span> 1</span><br></pre></td></tr></table></figure></li><li><p>步骤5：编写MyBatisIntroductionTest代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gaoziman</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/15 22:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//    创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//    创建流 加载mybatis主配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//    通过流创建SqlSessionFactory</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//    通过SqlSessionFactory创建SqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//    使用SQL</span></span><br><span class="line">    <span class="comment">//    int i = sqlSession.delete(&quot;deleteCar&quot;);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCar&quot;</span>);</span><br><span class="line">        <span class="comment">//    手动提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数为 : &quot;</span> +i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意1：默认采⽤的事务管理器是：JDBC。JDBC事务默认是不提交的，需要⼿动提交。 </p></li></ul><p>  ● 步骤6：运⾏程序，查看运⾏结果，以及数据库表中的数据</p><p>  <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917151607889.png" alt="image-20220917151607889" style="zoom:67%;" /></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917151628888.png" alt="image-20220917151628888" style="zoom:67%;" /></p><h3 id="2-4-关于MyBatis核⼼配置⽂件的名字和路径详解"><a href="#2-4-关于MyBatis核⼼配置⽂件的名字和路径详解" class="headerlink" title="2.4 关于MyBatis核⼼配置⽂件的名字和路径详解"></a>2.4 关于MyBatis核⼼配置⽂件的名字和路径详解</h3><ul><li>核⼼配置⽂件的名字是随意的，因为以下的代码：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// ⽂件名是出现在程序中的，⽂件名如果修改了，对应这⾥的java程序也改⼀下就⾏了。</span><br><span class="line">InputStream is = Thread.currentThread().getContextClassLoader().getResource</span><br><span class="line">AsStream(&quot;mybatis-config.xml&quot;);</span><br></pre></td></tr></table></figure><ul><li><p>虽然mybatis核⼼配置⽂件的名字不是固定的，但通常该⽂件的名字叫做：mybatis-config.xml </p></li><li><p>虽然mybatis核⼼配置⽂件的路径不是固定的，但通常该⽂件会存放到类路径当中，这样让项⽬的移植更加健壮。</p></li></ul><ul><li>在mybatis中提供了⼀个类：Resources【org.apache.ibatis.io.Resources】，该类可以从类路径当中获取资源，我们通常使⽤它来获取输⼊流InputStream，代码如下 </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 这种⽅式只能从类路径当中获取资源，也就是说mybatis-config.xml⽂件需要在类路径下。</span><br><span class="line">InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);</span><br></pre></td></tr></table></figure><h3 id="2-5-MyBatis第⼀个⽐较完整的代码写法"><a href="#2-5-MyBatis第⼀个⽐较完整的代码写法" class="headerlink" title="2.5 MyBatis第⼀个⽐较完整的代码写法"></a>2.5 MyBatis第⼀个⽐较完整的代码写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ⽐较完整的第⼀个mybatis程序写法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaoziman</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisCompleteCodeTest</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">// 1.创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">     <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSes</span></span><br><span class="line">    sionFactoryBuilder();</span><br><span class="line">     <span class="comment">// 2.创建SqlSessionFactory对象</span></span><br><span class="line">     <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">     <span class="comment">// 3.创建SqlSession对象</span></span><br><span class="line">     sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">     <span class="comment">// 4.执⾏SQL</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCar&quot;</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;更新了⼏条记录：&quot;</span> + count);</span><br><span class="line">     <span class="comment">// 5.提交</span></span><br><span class="line">     sqlSession.commit();</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> <span class="comment">// 回滚</span></span><br><span class="line"> <span class="keyword">if</span> (sqlSession != <span class="literal">null</span>) &#123;</span><br><span class="line">     sqlSession.rollback();</span><br><span class="line"> &#125;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"> <span class="comment">// 6.关闭</span></span><br><span class="line"> <span class="keyword">if</span> (sqlSession != <span class="literal">null</span>) &#123;</span><br><span class="line"> sqlSession.close();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-引入单元测试"><a href="#2-6-引入单元测试" class="headerlink" title="2.6 引入单元测试"></a>2.6 引入单元测试</h3><ul><li>JUnit是专⻔做单元测试的组件。 <ul><li>在实际开发中，单元测试⼀般是由我们Java程序员来完成的。 </li><li>我们要对我们⾃⼰写的每⼀个业务⽅法负责任，要保证每个业务⽅法在进⾏测试的时候都能通过。</li><li>测试的过程中涉及到两个概念：<ul><li>期望值 </li><li>实际值</li></ul></li><li>期望值和实际值相同表示测试通过，期望值和实际值不同则单元测试执⾏时会报错。 </li><li>这⾥引⼊JUnit是为了代替main⽅法。 </li></ul></li><li>使⽤JUnit步骤： <ul><li>第⼀步：引⼊依赖</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- junit依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>第⼆步：编写单元测试类【测试⽤例】，测试⽤例中每⼀个测试⽅法上使⽤@Test注解进⾏标注。</p><ul><li><p>测试⽤例的名字以及每个测试⽅法的定义都是有规范的： </p><p>测试⽤例的名字：XxxTest </p><p>测试⽅法声明格式：public void test业务⽅法名(){} </p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试⽤例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarMapperTest</span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 测试⽅法</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>第三步：可以在类上执⾏，也可以在⽅法上执⾏ </p><ul><li>在类上执⾏时，该类中所有的测试⽅法都会执⾏。 </li><li>在⽅法上执⾏时，只执⾏当前的测试⽅法。 </li></ul></li><li><p>编写⼀个测试⽤例，来测试insertCar业务 </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarMapperTest</span> &#123;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertCar</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// 1.创建SqlSessionFactoryBuilder对象</span></span><br><span class="line"> <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSes</span></span><br><span class="line">sionFactoryBuilder();</span><br><span class="line"> <span class="comment">// 2.创建SqlSessionFactory对象</span></span><br><span class="line"> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder</span><br><span class="line">.build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line"> <span class="comment">// 3.创建SqlSession对象</span></span><br><span class="line"> sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"> <span class="comment">// 4.执⾏SQL</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCar&quot;</span>);</span><br><span class="line"> System.out.println(<span class="string">&quot;更新了⼏条记录：&quot;</span> + count);</span><br><span class="line"> <span class="comment">// 5.提交</span></span><br><span class="line"> sqlSession.commit();</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> <span class="comment">// 回滚</span></span><br><span class="line"> <span class="keyword">if</span> (sqlSession != <span class="literal">null</span>) &#123;</span><br><span class="line"> sqlSession.rollback();</span><br><span class="line"> &#125;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"> <span class="comment">// 6.关闭</span></span><br><span class="line"> <span class="keyword">if</span> (sqlSession != <span class="literal">null</span>) &#123;</span><br><span class="line"> sqlSession.close();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执⾏单元测试，查看数据库表的变化：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917233826281.png" alt="image-20220917233826281" style="zoom:80%;" /></p><h3 id="2-7-引入日志框架"><a href="#2-7-引入日志框架" class="headerlink" title="2.7 引入日志框架"></a>2.7 引入日志框架</h3><ul><li><p>引⼊⽇志框架的⽬的是为了看清楚mybatis执⾏的具体sql。 </p></li><li><p>启⽤标准⽇志组件，只需要在mybatis-config.xml⽂件中添加以下配置：【可参考mybatis⼿册】</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标准⽇志也可以⽤，但是配置不够灵活，可以集成其他的⽇志组件，例如：log4j，logback等。 </p><ul><li><p>logback是⽬前⽇志框架中性能较好的，较流⾏的，所以我们选它。 </p></li><li><p>引⼊logback的步骤：</p><ul><li><p>第⼀步：引⼊logback相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>第⼆步：引⼊logback相关配置⽂件（⽂件名叫做logback.xml或logback-test.xml，放到类路径 </p><p>当中） </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--定义⽇志⽂件的存储地址--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/home&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncode</span></span></span><br><span class="line"><span class="string"><span class="tag">r&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--格式化输出：%d表示⽇期，%thread表示线程名，%-5level：级别从左显示5 个字符宽度%msg：⽇志消息，%n是换⾏符--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logge</span><br><span class="line">r&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 按照每天⽣成⽇志⽂件 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAp</span></span></span><br><span class="line"><span class="string"><span class="tag">pender&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRolling</span></span></span><br><span class="line"><span class="string"><span class="tag">Policy&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--⽇志⽂件输出的⽂件名--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/TestWeb.log.%d&#123;yyyy-MM-dd&#125;.log&lt;/F</span><br><span class="line">ileNamePattern&gt;</span><br><span class="line"> <span class="comment">&lt;!--⽇志⽂件保留天数--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncode</span></span></span><br><span class="line"><span class="string"><span class="tag">r&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--格式化输出：%d表示⽇期，%thread表示线程名，%-5level：级别从左显示5 个字符宽度%msg：⽇志消息，%n是换⾏符--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logge</span><br><span class="line">r&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--⽇志⽂件最⼤的⼤⼩--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeBasedTrig</span></span></span><br><span class="line"><span class="string"><span class="tag">geringPolicy&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--mybatis log configure--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.apache.ibatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;TRACE&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql.Connection&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql.Statement&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql.PreparedStatement&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">再次执⾏单元测试⽅法testInsertCar，查看控制台是否有sql语句输出 每⼀次获取SqlSession对象代码太繁琐，封装⼀个⼯具类 ● ○ 2.8 MyBatis⼯具类SqlSessionUtil的封装 ●</span><br><span class="line"> <span class="comment">&lt;!-- ⽇志输出级别,logback⽇志级别包括五个：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ER</span></span><br><span class="line"><span class="comment">ROR --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>再次执⾏单元测试⽅法testInsertCar，查看控制台是否有sql语句输出 </li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917234236235.png" alt="image-20220917234236235" style="zoom:80%;" /></p><h3 id="2-8-MyBatis工具类SessionUtils的封装"><a href="#2-8-MyBatis工具类SessionUtils的封装" class="headerlink" title="2.8 MyBatis工具类SessionUtils的封装"></a>2.8 MyBatis工具类SessionUtils的封装</h3><blockquote><p>大家应该可以发现，每当我们进行CEUD的时候，会发现我们每次获取SqlSession都需要很繁杂的代码，所以此时就需要一个工具类来帮我们完成，以后获取SqlSession时直接调用即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gaoziman</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/17 16:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类加载时初始化sqlSessionFactory对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每调⽤⼀次openSession()可获取⼀个新的会话，该会话⽀持⾃动提交。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 新的会话对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession  <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sqlSessionFactory != <span class="literal">null</span>)&#123;</span><br><span class="line">             sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试⼯具类，将testInsertCar()改造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description : 测试工具类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCar&quot;</span>);</span><br><span class="line">        System.out.println( <span class="string">&quot;受影响的行数为 : &quot;</span> + count);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="第三章-使用MyBatis完成CRUD"><a href="#第三章-使用MyBatis完成CRUD" class="headerlink" title="第三章 使用MyBatis完成CRUD"></a>第三章 使用MyBatis完成CRUD</h2><ul><li>准备⼯作<ul><li>创建module（Maven的普通Java模块）：mybatis-002-crud </li><li>pom.xml <ul><li>打包⽅式jar </li><li>依赖：<ul><li>mybatis依赖 </li><li>mysql驱动依赖 </li><li>junit依赖 </li><li>logback依赖 </li></ul></li></ul></li><li>mybatis-config.xml放在类的根路径下 </li><li>CarMapper.xml放在类的根路径下 </li><li>logback.xml放在类的根路径下 </li><li>提供com.powernode.mybatis.utils.SqlSessionUtil⼯具类 </li><li>创建测试⽤例：com.powernode.mybatis.CarMapperTest</li></ul></li></ul><h3 id="3-1-Inser-Create"><a href="#3-1-Inser-Create" class="headerlink" title="3.1 Inser(Create)"></a>3.1 Inser(Create)</h3><p>分析以下SQL映射⽂件中SQL语句存在的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace先随便写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCar&quot;</span>&gt;</span></span><br><span class="line"> insert into t_car(car_num,brand,guide_price,produce_time,car_typ</span><br><span class="line">e) values(&#x27;103&#x27;, &#x27;奔驰E300L&#x27;, 50.3, &#x27;2022-01-01&#x27;, &#x27;燃油⻋&#x27;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>存在的问题是：SQL语句中的值不应该写死，值应该是⽤户提供的。之前的JDBC代码是这样写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDBC中使⽤ ? 作为占位符。那么MyBatis中会使⽤什么作为占位符呢？</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_car(car_num,brand,guide_price,produce_time,car_</span></span><br><span class="line"><span class="string">type) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">// 给 ? 传值。那么MyBatis中应该怎么传值呢？</span></span><br><span class="line">ps.setString(<span class="number">1</span>,<span class="string">&quot;103&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>,<span class="string">&quot;奔驰E300L&quot;</span>);</span><br><span class="line">ps.setDouble(<span class="number">3</span>,<span class="number">50.3</span>);</span><br><span class="line">ps.setString(<span class="number">4</span>,<span class="string">&quot;2022-01-01&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">5</span>,<span class="string">&quot;燃油⻋&quot;</span>);</span><br></pre></td></tr></table></figure><p>在MyBatis中可以这样做： </p><font color='red'>在Java程序中，将数据放到Map集合中 </font><font color='red'>在sql语句中使⽤ #{map集合的key} 来完成传值，#{} 等同于JDBC中的 ? ，#{}就是占位符 </font><p>Java程序这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.utils.SqlSessionUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试MyBatis的CRUD</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> manman</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarMapperTest</span> &#123;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertCar</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">// 准备数据</span></span><br><span class="line"> Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"> map.put(<span class="string">&quot;carNum&quot;</span>, <span class="string">&quot;103&quot;</span>);</span><br><span class="line"> map.put(<span class="string">&quot;brand&quot;</span>, <span class="string">&quot;奔驰E300L&quot;</span>);</span><br><span class="line"> map.put(<span class="string">&quot;guidePrice&quot;</span>, <span class="number">50.3</span>);</span><br><span class="line"> map.put(<span class="string">&quot;produceTime&quot;</span>, <span class="string">&quot;2020-10-01&quot;</span>);</span><br><span class="line"> map.put(<span class="string">&quot;carType&quot;</span>, <span class="string">&quot;燃油⻋&quot;</span>);</span><br><span class="line"> <span class="comment">// 获取SqlSession对象</span></span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"> <span class="comment">// 执⾏SQL语句（使⽤map集合给sql语句传递数据）</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCar&quot;</span>, map);</span><br><span class="line"> System.out.println(<span class="string">&quot;插⼊了⼏条记录：&quot;</span> + count);</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure><p>SQL语句是这样写的 ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace先随便写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCar&quot;</span>&gt;</span></span><br><span class="line"> insert into t_car(car_num,brand,guide_price,produce_time,car_typ</span><br><span class="line">e) values(#&#123;carNum&#125;,#&#123;brand&#125;,#&#123;guidePrice&#125;,#&#123;produceTime&#125;,#&#123;carType&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意 ： 我们在给key值起名的时候，一定要见名知意，不要使用k1.k2.k3.k4…..类似这样的名字</p></blockquote><font color='red'>#{} 的⾥⾯必须填写map集合的key，不能随便写。</font>运⾏测试程序，查看数据库： <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918143607020.png" alt="image-20220918143607020" style="zoom:80%;" />如果#{}⾥写的是map集合中不存在的key会有什么问题？ <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace先随便写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCar&quot;</span>&gt;</span></span><br><span class="line"> insert into t_car(car_num,brand,guide_price,produce_time,car_typ</span><br><span class="line">e) values(#&#123;carNum1&#125;,#&#123;brand&#125;,#&#123;guidePrice&#125;,#&#123;produceTime&#125;,#&#123;carType&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>运行程序 ： <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918143744411.png" alt="image-20220918143744411" style="zoom:80%;" /><img src="C:\Users\lemon\AppData\Roaming\Typora\typora-user-images\image-20220918143812382.png" alt="image-20220918143812382" style="zoom:80%;" />通过测试，看到程序并没有报错。正常执⾏。不过 #{kk} 的写法导致⽆法获取到map集合中的数据，最终 导致数据库表car_num插⼊了NULL。 使⽤Map集合可以传参，那使⽤ <font color='red'>pojo</font>（简单普通的java对象）可以完成传参吗？测试⼀下：● 第⼀步：定义⼀个pojo类Car，提供相关属性。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gaoziman</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/18 0:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String carNum;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Double guidePrice;</span><br><span class="line">    <span class="keyword">private</span> String produceTime;</span><br><span class="line">    <span class="keyword">private</span> String carType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, carNum=&#x27;&quot;</span> + carNum + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, guidePrice=&quot;</span> + guidePrice +</span><br><span class="line">                <span class="string">&quot;, produceTime=&#x27;&quot;</span> + produceTime + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, carType=&#x27;&quot;</span> + carType + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(Long id, String carNum, String brand, Double guidePrice, String produceTime, String carType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.carNum = carNum;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.guidePrice = guidePrice;</span><br><span class="line">        <span class="built_in">this</span>.produceTime = produceTime;</span><br><span class="line">        <span class="built_in">this</span>.carType = carType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCarNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> carNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCarNum</span><span class="params">(String carNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.carNum = carNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getGuidePrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> guidePrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGuidePrice</span><span class="params">(Double guidePrice)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.guidePrice = guidePrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProduceTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> produceTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProduceTime</span><span class="params">(String produceTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.produceTime = produceTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCarType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> carType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCarType</span><span class="params">(String carType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.carType = carType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 第二步 ：Java小程序  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertCarByPOJO</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">// 创建POJO，封装数据</span></span><br><span class="line"> <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"> car.setCarNum(<span class="string">&quot;103&quot;</span>);</span><br><span class="line"> car.setBrand(<span class="string">&quot;奔驰C200&quot;</span>);</span><br><span class="line"> car.setGuidePrice(<span class="number">33.23</span>);</span><br><span class="line"> car.setProduceTime(<span class="string">&quot;2020-10-11&quot;</span>);</span><br><span class="line"> car.setCarType(<span class="string">&quot;燃油⻋&quot;</span>);</span><br><span class="line"> <span class="comment">// 获取SqlSession对象</span></span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"> <span class="comment">// 执⾏SQL，传数据</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCarByPOJO&quot;</span>, car);</span><br><span class="line"> System.out.println(<span class="string">&quot;插⼊了⼏条记录&quot;</span> + count); &#125;</span><br></pre></td></tr></table></figure>- 第三步 ：SQL语句  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCarByPOJO&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--#&#123;&#125; ⾥写的是POJO的属性名--&gt;</span></span><br><span class="line"> insert into t_car(car_num,brand,guide_price,produce_time,car_type) values</span><br><span class="line">(#&#123;carNum&#125;,#&#123;brand&#125;,#&#123;guidePrice&#125;,#&#123;produceTime&#125;,#&#123;carType&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>- 运行程序 ，查看数据库表 ：  <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918144142493.png" alt="image-20220918144142493" style="zoom:67%;" />\#{} ⾥写的是POJO的属性名，如果写成其他的会有问题吗？ <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCarByPOJO&quot;</span>&gt;</span></span><br><span class="line"> insert into t_car(car_num,brand,guide_price,produce_time,car_type) values</span><br><span class="line">(#&#123;a&#125;,#&#123;brand&#125;,#&#123;guidePrice&#125;,#&#123;produceTime&#125;,#&#123;carType&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918144219130.png" alt="image-20220918144219130" style="zoom: 80%;" />错误信息中描述：在Car类中没有找到a属性的getter⽅法。 修改POJO类Car的代码，<font color='red'>只将getCarNum()⽅法名修改为getA()</font>，其他代码不变，如下：<img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918144316193.png" alt="image-20220918144316193" style="zoom:80%;" />- 再运行程序，查看数据表 ：  ![](https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918144343720.png)<font style="color:red;">经过测试得出结论： </font><font style="color:red;">如果采⽤map集合传参，#{} ⾥写的是map集合的key，如果key不存在不会报错，数据库表中会插 ⼊NULL。  </font><font style="color:red;">如果采⽤POJO传参，#{} ⾥写的是get⽅法的⽅法名去掉get之后将剩下的单词⾸字⺟变⼩写（例 如：getAge对应的是#{age}，getUserName对应的是#{userName}），如果这样的get⽅法不存在会报错。 </font><blockquote><p>注意：其实传参数的时候有⼀个属性parameterType，这个属性⽤来指定传参的数据类型，不过这个属 </p><p>性是可以省略的 </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCar&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line"> insert into t_car(car_num,brand,guide_price,produce_time,car_type) values</span><br><span class="line">(#&#123;carNum&#125;,#&#123;brand&#125;,#&#123;guidePrice&#125;,#&#123;produceTime&#125;,#&#123;carType&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCarByPOJO&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.manman.pojo.Car&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"> insert into t_car(car_num,brand,guide_price,produce_time,car_type) values</span><br><span class="line">(#&#123;carNum&#125;,#&#123;brand&#125;,#&#123;guidePrice&#125;,#&#123;produceTime&#125;,#&#123;carType&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-delete-Delete"><a href="#3-2-delete-Delete" class="headerlink" title="3.2 delete(Delete)"></a>3.2 delete(Delete)</h3><p>需求：根据car_num进⾏删除。 </p><p>SQL语句这样写： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByCarNum&quot;</span>&gt;</span></span><br><span class="line"> delete from t_car where car_num = #&#123;SuiBianXie&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Java程序实在这样写的 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByCarNum</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">// 获取SqlSession对象</span></span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"> <span class="comment">// 执⾏SQL语句</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.delete(<span class="string">&quot;deleteByCarNum&quot;</span>, <span class="string">&quot;102&quot;</span>);</span><br><span class="line"> System.out.println(<span class="string">&quot;删除了⼏条记录：&quot;</span> + count); &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918144913436.png" alt="image-20220918144913436" style="zoom:80%;" /></p><font color='red'>注意：当占位符只有⼀个的时候，${} ⾥⾯的内容可以随便写。 </font><h3 id="3-3-update-Update"><a href="#3-3-update-Update" class="headerlink" title="3.3 update(Update)"></a>3.3 update(Update)</h3><p>需求：修改id=34的Car信息，car_num为102，brand为⽐亚迪汉，guide_price为30.23，produce_time </p><p>为2018-09-10，car_type为电⻋ </p><p>修改前：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918145015975.png" alt="image-20220918145015975" style="zoom:80%;" /></p><p>SQL语句如下 ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateCarByPOJO&quot;</span>&gt;</span></span><br><span class="line"> update t_car set</span><br><span class="line"> car_num = #&#123;carNum&#125;, brand = #&#123;brand&#125;,</span><br><span class="line"> guide_price = #&#123;guidePrice&#125;, produce_time = #&#123;produceTime&#125;,</span><br><span class="line"> car_type = #&#123;carType&#125;</span><br><span class="line"> where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Java代码如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateCarByPOJO</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">// 准备数据</span></span><br><span class="line"> <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"> car.setId(<span class="number">34L</span>);</span><br><span class="line"> car.setCarNum(<span class="string">&quot;102&quot;</span>);</span><br><span class="line"> car.setBrand(<span class="string">&quot;⽐亚迪汉&quot;</span>);</span><br><span class="line"> car.setGuidePrice(<span class="number">30.23</span>);</span><br><span class="line"> car.setProduceTime(<span class="string">&quot;2018-09-10&quot;</span>);</span><br><span class="line"> car.setCarType(<span class="string">&quot;电⻋&quot;</span>);</span><br><span class="line"> <span class="comment">// 获取SqlSession对象</span></span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"> <span class="comment">// 执⾏SQL语句</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.update(<span class="string">&quot;updateCarByPOJO&quot;</span>, car);</span><br><span class="line"> System.out.println(<span class="string">&quot;更新了⼏条记录：&quot;</span> + count);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918145118660.png" alt="image-20220918145118660"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918145128215.png" alt="image-20220918145128215"></p><blockquote><p>当然了，如果使⽤map传数据也是可以的。 </p></blockquote><h3 id="3-4-select-Retrieve"><a href="#3-4-select-Retrieve" class="headerlink" title="3.4 select(Retrieve)"></a>3.4 select(Retrieve)</h3><p>select语句和其它语句不同的是：查询会有⼀个结果集。来看mybatis是怎么处理结果集的！！！</p><p><strong>查询一条语句</strong></p><p>需求：查询id为1的Car信息 </p><p>SQL语句如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCarById&quot;</span>&gt;</span></span><br><span class="line"> select * from t_car where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Java程序如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectCarById</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">// 获取SqlSession对象</span></span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"> <span class="comment">// 执⾏SQL语句</span></span><br><span class="line"> <span class="type">Object</span> <span class="variable">car</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;selectCarById&quot;</span>, <span class="number">1</span>);</span><br><span class="line"> System.out.println(car); &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下 ：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Error querying database. Cause: org.apache.ibatis.executor.ExecutorExc</span></span><br><span class="line">eption:</span><br><span class="line"> A query was run and no Result Maps were found <span class="keyword">for</span> the Mapped Statement</span><br><span class="line"><span class="string">&#x27;car.selectCarById&#x27;</span>. 【翻译】：对于⼀个查询语句来说，没有找到查询的结果映射。</span><br><span class="line"> It<span class="string">&#x27;s likely that neither a Result Type nor a Result Map was specified. 【翻译】：很可能既没有指定结果类型，也没有指定结果映射。</span></span><br></pre></td></tr></table></figure><p>以上的异常⼤致的意思是：对于⼀个查询语句来说，你需要指定它的“结果类型”或者“结果映射”。 </p><p>所以说，你想让mybatis查询之后返回⼀个Java对象的话，⾄少你要告诉mybatis返回⼀个什么类型的 </p><p>Java对象，可以在<select>标签中添加resultType属性，⽤来指定查询要转换的类型： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCarById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.manman.pojo.Car&quot;</span>&gt;</span></span><br><span class="line"> select * from t_car where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918145418402.png" alt="image-20220918145418402" style="zoom:80%;" /></p><p>运⾏后之前的异常不再出现了，这说明添加了resultType属性之后，解决了之前的异常，可以看出 </p><p>resultType是不能省略的。 </p><p>仔细观察控制台的⽇志信息，不难看出，结果查询出了⼀条。并且每个字段都查询到值了：Row: 1, 100, 宝⻢520Li, 41.00, 2022-09-01, 燃油⻋ </p><p>但是奇怪的是返回的Car对象，只有id和brand两个属性有值，其它属性的值都是null，这是为什么呢？我 们来观察⼀下查询结果列名和Car类的属性名是否能⼀⼀对应： </p><p>查询结果集的列名：id, car_num, brand, guide_price, produce_time, car_type </p><p>Car类的属性名：id, carNum, brand, guidePrice, produceTime, carType</p><p>通过观察发现：只有id和brand是⼀致的，其他字段名和属性名对应不上，这是不是导致null的原因呢？ </p><p>我们尝试在sql语句中使⽤as关键字来给查询结果列名起别名试试 ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCarById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.powernode.mybatis.pojo.Car&quot;</span>&gt;</span></span><br><span class="line"> select</span><br><span class="line"> id, car_num as carNum, brand, guide_price as guidePrice, produce_time a</span><br><span class="line">s produceTime, car_type as carType</span><br><span class="line"> from</span><br><span class="line"> t_car</span><br><span class="line"> where</span><br><span class="line"> id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果如下 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918145512215.png" alt="image-20220918145512215"></p><p>通过测试得知，如果当查询结果的字段名和java类的属性名对应不上的话，可以采⽤as关键字起别名， </p><p>当然还有其它解决⽅案，我们后⾯再看。 </p><p><strong>查询所有数据</strong></p><p>需求：查询所有的Car信息。 </p><p>SQL语句如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--虽然结果是List集合，但是resultType属性需要指定的是List集合中元素的类型。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCarAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.powernode.mybatis.pojo.Car&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--记得使⽤as起别名，让查询结果的字段名和java类的属性名对应上。--&gt;</span></span><br><span class="line"> select</span><br><span class="line"> id, car_num as carNum, brand, guide_price as guidePrice, produce_time a</span><br><span class="line">s produceTime, car_type as carType</span><br><span class="line"> from</span><br><span class="line"> t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Java代码如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectCarAll</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">// 获取SqlSession对象</span></span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"> <span class="comment">// 执⾏SQL语句</span></span><br><span class="line"> List&lt;Object&gt; cars = sqlSession.selectList(<span class="string">&quot;selectCarAll&quot;</span>);</span><br><span class="line"> <span class="comment">// 输出结果</span></span><br><span class="line"> cars.forEach(car -&gt; System.out.println(car)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918145621950.png" alt="image-20220918145621950" style="zoom:80%;" /></p><h3 id="3-5-关于SQL中的namespace"><a href="#3-5-关于SQL中的namespace" class="headerlink" title="3.5 关于SQL中的namespace"></a>3.5 关于SQL中的namespace</h3><p>在SQL Mapper配置⽂件中<mapper>标签的namespace属性可以翻译为命名空间，这个命名空间主要是</p><p>为了防⽌sqlId冲突的。 </p><p>创建CarMapper2.xml⽂件，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;car2&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCarAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.powernode.manman.pojo.Car&quot;</span>&gt;</span></span><br><span class="line"> select</span><br><span class="line"> id, car_num as carNum, brand, guide_price as guidePrice, produ</span><br><span class="line">ce_time as produceTime, car_type as carType</span><br><span class="line"> from</span><br><span class="line"> t_car</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不难看出，CarMapper.xml和CarMapper2.xml⽂件中都有 id=”selectCarAll” </p><p>将CarMapper2.xml配置到mybatis-config.xml⽂件中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CarMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CarMapper2.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写Java代码如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNamespace</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">// 获取SqlSession对象</span></span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"> <span class="comment">// 执⾏SQL语句</span></span><br><span class="line"> List&lt;Object&gt; cars = sqlSession.selectList(<span class="string">&quot;selectCarAll&quot;</span>);</span><br><span class="line"> <span class="comment">// 输出结果</span></span><br><span class="line"> cars.forEach(car -&gt; System.out.println(car)); &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.exceptions.PersistenceException:</span><br><span class="line"><span class="comment">### Error querying database. Cause: java.lang.IllegalArgumentException:</span></span><br><span class="line"> selectCarAll is ambiguous <span class="keyword">in</span> Mapped Statements collection (<span class="keyword">try</span> <span class="keyword">using</span> the</span><br><span class="line">full name including the namespace, or rename one of the entries)</span><br><span class="line"> 【翻译】selectCarAll在Mapped Statements集合中不明确（请尝试使⽤包含名称空间的全 名，或重命名其中⼀个条⽬）</span><br><span class="line"> 【⼤致意思是】selectCarAll重名了，你要么在selectCarAll前添加⼀个名称空间，要有你改 个其它名字。</span><br></pre></td></tr></table></figure><p>Java代码修改如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNamespace</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">// 获取SqlSession对象</span></span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"> <span class="comment">// 执⾏SQL语句</span></span><br><span class="line"> <span class="comment">//List&lt;Object&gt; cars = sqlSession.selectList(&quot;car.selectCarAll&quot;);</span></span><br><span class="line"> List&lt;Object&gt; cars = sqlSession.selectList(<span class="string">&quot;car2.selectCarAll&quot;</span>);</span><br><span class="line"> <span class="comment">// 输出结果</span></span><br><span class="line"> cars.forEach(car -&gt; System.out.println(car)); &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918150026469.png" alt="image-20220918150026469" style="zoom:80%;" /></p><h2 id="第四章-MyBatis核心配置文件详解"><a href="#第四章-MyBatis核心配置文件详解" class="headerlink" title="第四章 MyBatis核心配置文件详解"></a>第四章 MyBatis核心配置文件详解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CarMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CarMapper2.xml&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>configuration：根标签，表示配置信息。 </p></li><li><p>environments：环境（多个），以“s”结尾表示复数，也就是说mybatis的环境可以配置多个数据源。</p></li><li><p>default属性：表示默认使⽤的是哪个环境，default后⾯填写的是environment的id。default的 值只需要和environment的id值⼀致即可。 </p></li><li><p>environment：具体的环境配置（主要包括：事务管理器的配置 + 数据源的配置） </p><ul><li>id：给当前环境⼀个唯⼀标识，该标识⽤在environments的default后⾯，⽤来指定默认环境的 选择。</li></ul></li></ul><ul><li><p>transactionManager：配置事务管理器 </p></li><li><p>type属性：指定事务管理器具体使⽤什么⽅式，可选值包括两个</p><p>■ JDBC：使⽤JDBC原⽣的事务管理机制。底层原理：事务开启 </p><p>​    conn.setAutoCommit(false); …处理业务…事务提交conn.commit(); </p><p>■ MANAGED：交给其它容器来管理事务，⽐如WebLogic、JBOSS等。如果没有管理事务的 容器，则没有事务。没有事务的含义：只要执⾏⼀条DML语句，则提交⼀次。 </p></li><li><p>dataSource：指定数据源 </p><ul><li><p>type属性：⽤来指定具体使⽤的数据库连接池的策略，可选值包括三个</p><ul><li>UNPOOLED：采⽤传统的获取连接的⽅式，虽然也实现Javax.sql.DataSource接⼝，但是并没有使⽤池的思想。 </li></ul></li><li><p>property可以是： </p><p>○ driver 这是 JDBC 驱动的 Java 类全限定名。 </p><p>○ url 这是数据库的 JDBC URL 地址。 </p><p>○ username 登录数据库的⽤户名。 </p><p>○ password 登录数据库的密码。 </p><p>○ defaultTransactionIsolationLevel 默认的连接事务隔离级别。 </p><p>○ defaultNetworkTimeout 等待数据库操作完成的默认⽹络超时时间（单位：毫秒） </p></li></ul></li></ul><p>■ POOLED：采⽤传统的javax.sql.DataSource规范中的连接池，mybatis中有针对规范的实 </p><p>现。</p><ul><li>property可以是（除了包含UNPOOLED中之外）：<ul><li>poolMaximumActiveConnections 在任意时间可存在的活动（正在使⽤）连接数量，默认值：10</li><li>poolMaximumIdleConnections 任意时间可能存在的空闲连接数。 </li><li>其它….</li></ul></li></ul><p>■ JNDI：采⽤服务器提供的JNDI技术实现，来获取DataSource对象，不同的服务器所能拿到 </p><p>​    DataSource是不⼀样。如果不是web或者maven的war⼯程，JNDI是不能使⽤的。 </p><ul><li>property可以是（最多只包含以下两个属性）：<ul><li>initial_context 这个属性⽤来在 InitialContext 中寻找上下⽂（即， </li><li>initialContext.lookup(initial_context)）这是个可选属性，如果忽略，那么将会直接从 </li><li>InitialContext 中寻找 data_source 属性。 </li></ul></li></ul><p>○ data_source 这是引⽤数据源实例位置的上下⽂路径。提供了 initial_context 配置时会 在其返回的上下⽂中进⾏查找，没有提供时则直接在 InitialContext 中查找。 </p><ul><li><p>mappers：在mappers标签中可以配置多个sql映射⽂件的路径。 </p></li><li><p>mapper：配置某个sql映射⽂件的路径</p></li><li><p>resource属性：使⽤相对于类路径的资源引⽤⽅式 </p></li><li><p>url属性：使⽤完全限定资源定位符（URL）⽅式 </p></li></ul><h3 id="4-1-environment"><a href="#4-1-environment" class="headerlink" title="4.1  environment"></a>4.1  environment</h3><p>mybatis-003-configuration </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--默认使⽤开发环境--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;environments default=&quot;dev&quot;&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--默认使⽤⽣产环境--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;production&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/powernode&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--⽣产环境--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;production&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CarMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCar&quot;</span>&gt;</span></span><br><span class="line"> insert into t_car(id,car_num,brand,guide_price,produce_time,car_ty</span><br><span class="line">pe) values(null,#&#123;carNum&#125;,#&#123;brand&#125;,#&#123;guidePrice&#125;,#&#123;produceTime&#125;,#&#123;carTyp</span><br><span class="line">e&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Car;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationTest</span> &#123;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEnvironment</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> <span class="comment">// 准备数据</span></span><br><span class="line"> <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"> car.setCarNum(<span class="string">&quot;133&quot;</span>);</span><br><span class="line"> car.setBrand(<span class="string">&quot;丰⽥霸道&quot;</span>);</span><br><span class="line"> car.setGuidePrice(<span class="number">50.3</span>);</span><br><span class="line"> car.setProduceTime(<span class="string">&quot;2020-01-10&quot;</span>);</span><br><span class="line"> car.setCarType(<span class="string">&quot;燃油⻋&quot;</span>);</span><br><span class="line"> <span class="comment">// ⼀个数据库对应⼀个SqlSessionFactory对象</span></span><br><span class="line"> <span class="comment">// 两个数据库对应两个SqlSessionFactory对象，以此类推</span></span><br><span class="line"> <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSession</span></span><br><span class="line">FactoryBuilder();</span><br><span class="line"> <span class="comment">// 使⽤默认数据库</span></span><br><span class="line"> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.bui</span><br><span class="line"><span class="title function_">ld</span><span class="params">(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>)</span>);</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCar&quot;</span>, car);</span><br><span class="line"> System.out.println(<span class="string">&quot;插⼊了⼏条记录：&quot;</span> + count);</span><br><span class="line"> <span class="comment">// 使⽤指定数据库</span></span><br><span class="line"> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory1</span> <span class="operator">=</span> sqlSessionFactoryBuilder.bu</span><br><span class="line"><span class="title function_">ild</span><span class="params">(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>)</span>, <span class="string">&quot;dev&quot;</span>);</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> sqlSessionFactory1.openSession(<span class="literal">true</span>);</span><br><span class="line"> <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> sqlSession1.insert(<span class="string">&quot;insertCar&quot;</span>, car);</span><br><span class="line"> System.out.println(<span class="string">&quot;插⼊了⼏条记录：&quot;</span> + count1);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918150846696.png" alt="image-20220918150846696" style="zoom:80%;" /></p><h3 id="4-2-transactionManager"><a href="#4-2-transactionManager" class="headerlink" title="4.2 transactionManager"></a>4.2 transactionManager</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;MANAGED&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/po</span></span></span><br><span class="line"><span class="string"><span class="tag">wernode&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CarMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> <span class="comment">// 准备数据</span></span><br><span class="line"> <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"> car.setCarNum(<span class="string">&quot;133&quot;</span>);</span><br><span class="line"> car.setBrand(<span class="string">&quot;丰⽥霸道&quot;</span>);</span><br><span class="line"> car.setGuidePrice(<span class="number">50.3</span>);</span><br><span class="line"> car.setProduceTime(<span class="string">&quot;2020-01-10&quot;</span>);</span><br><span class="line"> car.setCarType(<span class="string">&quot;燃油⻋&quot;</span>);</span><br><span class="line"> <span class="comment">// 获取SqlSessionFactory对象</span></span><br><span class="line"> <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFact</span></span><br><span class="line">oryBuilder();</span><br><span class="line"> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(R</span><br><span class="line">esources.getResourceAsStream(<span class="string">&quot;mybatis-config2.xml&quot;</span>));</span><br><span class="line"> <span class="comment">// 获取SqlSession对象</span></span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"> <span class="comment">// 执⾏SQL</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCar&quot;</span>, car);</span><br><span class="line"> System.out.println(<span class="string">&quot;插⼊了⼏条记录：&quot;</span> + count); &#125;</span><br></pre></td></tr></table></figure><ul><li><p>当事务管理器是：JDBC </p><ul><li>采⽤JDBC的原⽣事务机制： </li></ul></li><li><p>开启事务：conn.setAutoCommit(false); </p></li><li><p>处理业务…… </p></li><li><p>提交事务：conn.commit(); </p></li><li><p>当事务管理器是：MANAGED </p><ul><li>交给容器去管理事务，但⽬前使⽤的是本地程序，没有容器的⽀持，当mybatis找不到容器的⽀持 时：没有事务。也就是说只要执⾏⼀条DML语句，则提交⼀次。 </li></ul></li></ul><h3 id="4-3-dataSource"><a href="#4-3-dataSource" class="headerlink" title="4.3 dataSource"></a>4.3 dataSource</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;UNPOOLED&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/po</span></span></span><br><span class="line"><span class="string"><span class="tag">wernode&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CarMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> <span class="comment">// 准备数据</span></span><br><span class="line"> <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"> car.setCarNum(<span class="string">&quot;133&quot;</span>);</span><br><span class="line"> car.setBrand(<span class="string">&quot;丰⽥霸道&quot;</span>);</span><br><span class="line"> car.setGuidePrice(<span class="number">50.3</span>);</span><br><span class="line"> car.setProduceTime(<span class="string">&quot;2020-01-10&quot;</span>);</span><br><span class="line"> car.setCarType(<span class="string">&quot;燃油⻋&quot;</span>);</span><br><span class="line"> <span class="comment">// 获取SqlSessionFactory对象</span></span><br><span class="line"> <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFact</span></span><br><span class="line">oryBuilder();</span><br><span class="line"> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(R</span><br><span class="line">esources.getResourceAsStream(<span class="string">&quot;mybatis-config3.xml&quot;</span>));</span><br><span class="line"> <span class="comment">// 获取SqlSession对象</span></span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"> <span class="comment">// 执⾏SQL</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCar&quot;</span>, car);</span><br><span class="line"> System.out.println(<span class="string">&quot;插⼊了⼏条记录：&quot;</span> + count);</span><br><span class="line"> <span class="comment">// 关闭会话</span></span><br><span class="line"> sqlSession.close(); &#125;</span><br></pre></td></tr></table></figure><p>当type是UNPOOLED，控制台输出：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918151114061.png" alt="image-20220918151114061"></p><p>修改配置⽂件mybatis-config3.xml中的配置： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>Java测试程序不需要修改，直接执⾏，看控制台输出： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918151216668.png" alt="image-20220918151216668" style="zoom:80%;" /></p><p>通过测试得出：UNPOOLED不会使⽤连接池，每⼀次都会新建JDBC连接对象。POOLED会使⽤数据库 </p><p>连接池。【这个连接池是mybatis⾃⼰实现的。】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;JNDI&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JNDI的⽅式：表示对接JNDI服务器中的连接池。这种⽅式给了我们可以使⽤第三⽅连接池的接⼝。如果 </p><p>想使⽤dbcp、c3p0、druid（德鲁伊）等，需要使⽤这种⽅式。 </p><p>这种再重点说⼀下type=”POOLED”的时候，它的属性有哪些？</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/po</span></span></span><br><span class="line"><span class="string"><span class="tag">wernode&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--最⼤连接数--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolMaximumActiveConnections&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--最多空闲数量--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolMaximumIdleConnections&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--强⾏回归池的时间--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolMaximumCheckoutTime&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20000&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--这是⼀个底层设置，如果获取连接花费了相当⻓的时间，连接池会打印状 态⽇志并重新尝试获取⼀个连接（避免在误配置的情况下⼀直失败且不打印⽇志），默认值：20000</span></span><br><span class="line"><span class="comment">毫秒（即 20 秒）。--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolTimeToWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20000&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CarMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>poolMaximumActiveConnections：最⼤的活动的连接数量。默认值10</p><p>poolMaximumIdleConnections：最⼤的空闲连接数量。默认值5 </p><p>poolMaximumCheckoutTime：强⾏回归池的时间。默认值20秒。 </p><p>poolTimeToWait：当⽆法获取到空闲连接时，每隔20秒打印⼀次⽇志，避免因代码配置有误，导致傻 </p><p>等。（时⻓是可以配置的） </p><p>当然，还有其他属性。对于连接池来说，以上⼏个属性⽐较重要。 </p><p>最⼤的活动的连接数量就是连接池连接数量的上限。默认值10，如果有10个请求正在使⽤这10个连接， </p><p>第11个请求只能等待空闲连接。</p><!--这是⼀个底层设置，如果获取连接花费了相当⻓的时间，连接池会打印状 态⽇志并重新尝试获取⼀个连接（避免在误配置的情况下⼀直失败且不打印⽇志），默认值：20000毫秒（即 20 秒）。--><p>最⼤的空闲连接数量。默认值5，如何已经有了5个空闲连接，当第6个连接要空闲下来的时候，连接池会 </p><p>选择关闭该连接对象。来减少数据库的开销。 </p><p>需要根据系统的并发情况，来合理调整连接池最⼤连接数以及最多空闲数量。充分发挥数据库连接池的 </p><p>性能。【可以根据实际情况进⾏测试，然后调整⼀个合理的数量。】</p></blockquote><p>下图是默认配置：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918151354804.png" alt="image-20220918151354804" style="zoom:80%;" /></p><p>在以上配置的基础之上，可以编写java程序测试： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPool</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config3.xml&quot;</span>));</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"> <span class="type">Object</span> <span class="variable">selectCarByCarNum</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;selectCarByCarNum&quot;</span></span><br><span class="line">);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCarByCarNum&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.powernode.mybatis.pojo.Car&quot;</span>&gt;</span></span><br><span class="line"> select id,car_num carNum,brand,guide_price guidePrice,produce_time produceTime,car_type carType from t_car where car_num = &#x27;100&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220918151438112.png" alt="image-20220918151438112"></p><h3 id="4-4-Properties"><a href="#4-4-Properties" class="headerlink" title="4.4 Properties"></a>4.4 Properties</h3><p>mybatis提供了更加灵活的配置，连接数据库的信息可以单独写到⼀个属性资源⽂件中，假设在类的根路 </p><p>径下创建jdbc.properties⽂件，配置如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/powernode</span></span><br></pre></td></tr></table></figure><p>在mybatis核⼼配置⽂件中引⼊并使⽤：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--引⼊外部属性资源⽂件--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbc.username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbc.password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--$&#123;key&#125;使⽤--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CarMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写Java程序测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProperties</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFacto</span></span><br><span class="line">ryBuilder();</span><br><span class="line"> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(Re</span><br><span class="line">sources.getResourceAsStream(<span class="string">&quot;mybatis-config4.xml&quot;</span>));</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"> <span class="type">Object</span> <span class="variable">car</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;selectCarByCarNum&quot;</span>);</span><br><span class="line"> System.out.println(car); &#125;</span><br></pre></td></tr></table></figure><blockquote><p>properties两个属性：</p><p>resource：这个属性从类的根路径下开始加载。【常⽤的。】</p><p>url：从指定的url加载，假设⽂件放在d:/jdbc.properties，这个url可以写成： </p><p>file:///d:/jdbc.properties。注意是三个斜杠哦。 </p><p>注意：如果不知道mybatis-config.xml⽂件中标签的编写顺序的话，可以有两种⽅式知道它的顺序： </p><p>第⼀种⽅式：查看dtd约束⽂件。 </p><p>第⼆种⽅式：通过idea的报错提示信息。【⼀般采⽤这种⽅式】 </p></blockquote><h3 id="4-5-mapper"><a href="#4-5-mapper" class="headerlink" title="4.5 mapper"></a>4.5 mapper</h3><p>mapper标签⽤来指定SQL映射⽂件的路径，包含多种指定⽅式，这⾥先主要看其中两种： </p><p>第⼀种：resource，从类的根路径下开始加载【⽐url常⽤】 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CarMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是这样写的话，必须保证类的根下有CarMapper.xml⽂件。 </p><p>如果类的根路径下有⼀个包叫做test，CarMapper.xml如果放在test包下的话，这个配置应该是这样写： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;test/CarMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第⼆种：url，从指定的url位置加载 </p><p>假设CarMapper.xml⽂件放在d盘的根下，这个配置就需要这样写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///d:/CarMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第五章-在WEB中应⽤MyBatis（使⽤MVC架构模式）"><a href="#第五章-在WEB中应⽤MyBatis（使⽤MVC架构模式）" class="headerlink" title="第五章 在WEB中应⽤MyBatis（使⽤MVC架构模式）"></a>第五章 在WEB中应⽤MyBatis（使⽤MVC架构模式）</h2><p><code>⽬标</code>： </p><p>● 掌握mybatis在web应⽤中怎么⽤ </p><p>● mybatis三⼤对象的作⽤域和⽣命周期 </p><p>● ThreadLocal原理及使⽤ </p><p>● 巩固MVC架构模式 </p><p>● 为学习MyBatis的接⼝代理机制做准备 </p><p><code>实现功能</code>： </p><p>● 银⾏账户转账 </p><p><code>使⽤技术</code>： </p><p>● HTML + Servlet + MyBatis </p><p><code>WEB应⽤的名称</code>： </p><p>● bank</p><h3 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008095435078.png" alt="image-20221008095435078" style="zoom:80%;" /></p><h3 id="5-2-数据库表的设计和准备数据"><a href="#5-2-数据库表的设计和准备数据" class="headerlink" title="5.2 数据库表的设计和准备数据"></a>5.2 数据库表的设计和准备数据</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008095457316.png" alt="image-20221008095457316" style="zoom:80%;" /></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008095851305.png" alt="image-20221008095851305"></p><h3 id="5-3-实现步骤"><a href="#5-3-实现步骤" class="headerlink" title="5.3 实现步骤"></a>5.3 实现步骤</h3><h4 id="第⼀步：环境搭建"><a href="#第⼀步：环境搭建" class="headerlink" title="第⼀步：环境搭建"></a>第⼀步：环境搭建</h4><p>● IDEA中创建Maven WEB应⽤（mybatis-04-web）</p><p>​    <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008100030527.png" alt="image-20221008100030527" style="zoom:67%;" /></p><ul><li><p>IDEA配置Tomcat，这⾥Tomcat使8+版本。并部署应⽤到tomcat</p></li><li><p>默认创建的maven web应⽤没有java和resources⽬录，包括两种解决⽅案 </p><p>○ 第⼀种：⾃⼰⼿动加上。</p></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008100129507.png" alt="image-20221008100129507" style="zoom:67%;" /></p><p>○ 第⼆种：修改maven-archetype-webapp-1.4.jar中的配置⽂件 </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008100150591.png" alt="image-20221008100150591"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008100207543.png" alt="image-20221008100207543" style="zoom:67%;" /></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008100227814.png" alt="image-20221008100227814"></p><p>● 引⼊相关依赖 </p><p>○ 编译器版本修改为17</p><p>○ 引⼊的依赖包括：mybatis，mysql驱动，junit，logback，servlet。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w</span></span></span><br><span class="line"><span class="string"><span class="tag">3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://mave</span></span></span><br><span class="line"><span class="string"><span class="tag">n.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.powernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-004-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>mybatis-004-web<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/bank<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--mysql驱动依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--junit依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--logback依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> 123456789</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--servlet依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>mybatis-004-web<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引⼊相关配置⽂件，放到resources⽬录下（全部放到类的根路径下）<ul><li>mybatis-config.xml </li><li>AccountMapper.xml </li><li>logback.xml </li><li>jdbc.properties </li></ul></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">12123</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--⼀定要注意这⾥的路径哦！！！--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;AccountMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第⼆步：前端⻚⾯index-html"><a href="#第⼆步：前端⻚⾯index-html" class="headerlink" title="第⼆步：前端⻚⾯index.html"></a>第⼆步：前端⻚⾯index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>银⾏账户转账<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--/bank是应⽤的根，部署web应⽤到tomcat的时候⼀定要注意这个名字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/bank/transfer&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"> 转出账户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fromActno&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> 转⼊账户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;toActno&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> 转账⾦额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;转账&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第三步：创建pojo包、service包、dao包、web包、utils包"><a href="#第三步：创建pojo包、service包、dao包、web包、utils包" class="headerlink" title="第三步：创建pojo包、service包、dao包、web包、utils包"></a>第三步：创建pojo包、service包、dao包、web包、utils包</h4><ul><li>com.manman.pojo</li><li>com.manman.sevice</li><li>com.manman.dao</li><li>com.manman.web</li><li>com.manman.utils</li></ul><h4 id="第四步：定义pojo类：Account"><a href="#第四步：定义pojo类：Account" class="headerlink" title="第四步：定义pojo类：Account"></a>第四步：定义pojo类：Account</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> Long id;</span><br><span class="line"> <span class="keyword">private</span> String actno;</span><br><span class="line"> <span class="keyword">private</span> Double balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第五步：编写AccountDao接⼝，以及AccountDaoImpl实现类"><a href="#第五步：编写AccountDao接⼝，以及AccountDaoImpl实现类" class="headerlink" title="第五步：编写AccountDao接⼝，以及AccountDaoImpl实现类"></a>第五步：编写AccountDao接⼝，以及AccountDaoImpl实现类</h4><ul><li><p>分析dao中⾄少要提供⼏个⽅法，才能完成转账： </p><p>转账前需要查询余额是否充⾜：selectByActno </p><p>转账时要更新账户：update</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据账号获取账户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> actno 账号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 账户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> Account <span class="title function_">selectByActno</span><span class="params">(String actno)</span>;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新账户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> act 账户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 1表示更新成功，其他值表示失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Account act)</span>; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.utils.SqlSessionUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Account <span class="title function_">selectByActno</span><span class="params">(String actno)</span> &#123;</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"> <span class="type">Account</span> <span class="variable">act</span> <span class="operator">=</span> (Account)sqlSession.selectOne(<span class="string">&quot;selectByActno&quot;</span>, actno</span><br><span class="line">);</span><br><span class="line"> sqlSession.close();</span><br><span class="line"> <span class="keyword">return</span> act;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Account act)</span> &#123;</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.update(<span class="string">&quot;update&quot;</span>, act);</span><br><span class="line"> sqlSession.commit();</span><br><span class="line"> sqlSession.close();</span><br><span class="line"> <span class="keyword">return</span> count;</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure><h4 id="第六步：AccountDaoImpl中编写了mybatis代码，需要编写SQL映射⽂件了"><a href="#第六步：AccountDaoImpl中编写了mybatis代码，需要编写SQL映射⽂件了" class="headerlink" title="第六步：AccountDaoImpl中编写了mybatis代码，需要编写SQL映射⽂件了"></a>第六步：AccountDaoImpl中编写了mybatis代码，需要编写SQL映射⽂件了</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByActno&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.powernode.bank.pojo.Accoun</span></span></span><br><span class="line"><span class="string"><span class="tag">t&quot;</span>&gt;</span></span><br><span class="line"> select * from t_act where actno = #&#123;actno&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line"> update t_act set balance = #&#123;balance&#125; where actno = #&#123;actno&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第七步：编写AccountService接⼝以及AccountServiceImpl"><a href="#第七步：编写AccountService接⼝以及AccountServiceImpl" class="headerlink" title="第七步：编写AccountService接⼝以及AccountServiceImpl"></a>第七步：编写AccountService接⼝以及AccountServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoneyNotEnoughException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">MoneyNotEnoughException</span><span class="params">()</span>&#123;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">MoneyNotEnoughException</span><span class="params">(String msg)</span>&#123; <span class="built_in">super</span>(msg);</span><br><span class="line">                 &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">AppException</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">AppException</span><span class="params">(String msg)</span>&#123; <span class="built_in">super</span>(msg); </span><br><span class="line">                                &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank.service;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.exception.AppException;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.exception.MoneyNotEnoughException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务类。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 银⾏账户转正</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fromActno 转出账户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> toActno 转⼊账户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> money 转账⾦额</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> MoneyNotEnoughException 余额不⾜异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> AppException App发⽣异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String fromActno, String toActno, <span class="type">double</span> money)</span> <span class="keyword">throws</span> MoneyNotEnoughException, AppException; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.dao.impl.AccountDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.exception.AppException;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.exception.MoneyNotEnoughException;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.service.AccountService;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="type">AccountDao</span> <span class="variable">accountDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountDaoImpl</span>();</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String fromActno, String toActno, <span class="type">double</span> money)</span> t</span><br><span class="line">hrows MoneyNotEnoughException, AppException &#123;</span><br><span class="line"> <span class="comment">// 查询转出账户的余额</span></span><br><span class="line"> <span class="type">Account</span> <span class="variable">fromAct</span> <span class="operator">=</span> accountDao.selectByActno(fromActno);</span><br><span class="line"> <span class="keyword">if</span> (fromAct.getBalance() &lt; money) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MoneyNotEnoughException</span>(<span class="string">&quot;对不起，您的余额不⾜。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// 程序如果执⾏到这⾥说明余额充⾜</span></span><br><span class="line"> <span class="comment">// 修改账户余额</span></span><br><span class="line"> <span class="type">Account</span> <span class="variable">toAct</span> <span class="operator">=</span> accountDao.selectByActno(toActno);</span><br><span class="line"> fromAct.setBalance(fromAct.getBalance() - money);</span><br><span class="line"> toAct.setBalance(toAct.getBalance() + money);</span><br><span class="line"> <span class="comment">// 更新数据库</span></span><br><span class="line"> accountDao.update(fromAct);</span><br><span class="line"> accountDao.update(toAct);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(<span class="string">&quot;转账失败，未知原因！&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第⼋步：编写AccountController"><a href="#第⼋步：编写AccountController" class="headerlink" title="第⼋步：编写AccountController"></a>第⼋步：编写AccountController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/transfer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountServiceImpl</span>();</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="params">response)</span></span><br><span class="line"> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"> <span class="comment">// 获取响应流</span></span><br><span class="line"> response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"> <span class="comment">// 获取账户信息</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">fromActno</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;fromActno&quot;</span>);</span><br><span class="line"> <span class="type">String</span> <span class="variable">toActno</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;toActno&quot;</span>);</span><br><span class="line"> <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> Integer.parseInt(request.getParameter(<span class="string">&quot;money&quot;</span>));</span><br><span class="line"> <span class="comment">// 调⽤业务⽅法完成转账</span></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> accountService.transfer(fromActno, toActno, money);</span><br><span class="line"> out.print(<span class="string">&quot;&lt;h1&gt;转账成功！！！&lt;/h1&gt;&quot;</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (MoneyNotEnoughException e) &#123;</span><br><span class="line"> out.print(e.getMessage());</span><br><span class="line"> &#125; <span class="keyword">catch</span> (AppException e) &#123;</span><br><span class="line"> out.print(e.getMessage());</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务器，打开浏览器，输⼊地址：<a href="http://localhost:8080/bank，测试：">http://localhost:8080/bank，测试：</a></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008101320538.png" alt="image-20221008101320538"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008101330993.png" alt="image-20221008101330993"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008101338548.png" alt="image-20221008101338548"></p><h3 id="5-4-MyBatis对象作⽤域以及事务问题"><a href="#5-4-MyBatis对象作⽤域以及事务问题" class="headerlink" title="5.4 MyBatis对象作⽤域以及事务问题"></a>5.4 MyBatis对象作⽤域以及事务问题</h3><p><strong>MyBatis核⼼对象的作⽤域 </strong></p><p>SqlSessionFactoryBuilder </p><blockquote><p>这个类可以被实例化、使⽤和丢弃，⼀旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作⽤域是⽅法作⽤域（也就是局部⽅法变量）。 你可以重⽤ SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但最好还是不要⼀直保留着它，以保证所有 的 XML 解析资源可以被释放给更重要的事情。 </p></blockquote><p>SqlSessionFactory </p><blockquote><p>SqlSessionFactory ⼀旦被创建就应该在应⽤的运⾏期间⼀直存在，没有任何理由丢弃它或重新创建另⼀个实例。 使⽤ SqlSessionFactory 的最佳实践是在应⽤运⾏期间不要重复创建多次，多次重建 SqlSessionFactory被视为⼀种代码“坏习惯”。因此 SqlSessionFactory 的最佳作⽤域是应⽤作⽤域。 有很多⽅法可以做到，最简单的就是使⽤单例模式或者静态单例模式。 </p></blockquote><p>SqlSession </p><blockquote><p>每个线程都应该有它⾃⼰的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作⽤域是请求或⽅法作⽤域。 绝对不能将 SqlSession 实例的引⽤放在⼀个类的静态域，甚⾄⼀个类 的实例变量也不⾏。 也绝不能将 SqlSession 实例的引⽤放在任何类型的托管作⽤域中，⽐如 Servlet 框架中的 HttpSession。 如果你现在正在使⽤⼀种 Web 框架，考虑将 SqlSession 放在⼀个和 HTTP 请求相似的作⽤域 中。 换句话说，每次收到 HTTP 请求，就可以打开⼀个 SqlSession，返回⼀个响应后，就关闭它。 这个关闭操 作很重要，为了确保每次都能执⾏关闭操作，你应该把这个关闭操作放到 finally 块中。 下⾯的示例就是⼀个确 保 SqlSession 关闭的标准模式： </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line"> <span class="comment">// 你的应⽤逻辑代码 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="事务问题"><a href="#事务问题" class="headerlink" title="事务问题"></a>事务问题</h3><p>在之前的转账业务中，更新了两个账户，我们需要保证它们的同时成功或同时失败，这个时候就需要使⽤事务机 </p><p>制，在transfer⽅法开始执⾏时开启事务，直到两个更新都成功之后，再提交事务，我们尝试将transfer⽅法进 </p><p>⾏如下修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="type">AccountDao</span> <span class="variable">accountDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountDaoImpl</span>();</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String fromActno, String toActno, <span class="type">double</span> money)</span> t</span><br><span class="line">hrows MoneyNotEnoughException, AppException &#123;</span><br><span class="line"> <span class="comment">// 查询转出账户的余额</span></span><br><span class="line"> <span class="type">Account</span> <span class="variable">fromAct</span> <span class="operator">=</span> accountDao.selectByActno(fromActno);</span><br><span class="line"> <span class="keyword">if</span> (fromAct.getBalance() &lt; money) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MoneyNotEnoughException</span>(<span class="string">&quot;对不起，您的余额不⾜。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// 程序如果执⾏到这⾥说明余额充⾜</span></span><br><span class="line"> <span class="comment">// 修改账户余额</span></span><br><span class="line"> <span class="type">Account</span> <span class="variable">toAct</span> <span class="operator">=</span> accountDao.selectByActno(toActno);</span><br><span class="line"> fromAct.setBalance(fromAct.getBalance() - money);</span><br><span class="line"> toAct.setBalance(toAct.getBalance() + money);</span><br><span class="line"> <span class="comment">// 更新数据库（添加事务）</span></span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"> accountDao.update(fromAct);</span><br><span class="line"> <span class="comment">// 模拟异常</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> s.toString();</span><br><span class="line"> accountDao.update(toAct);</span><br><span class="line"> sqlSession.commit();</span><br><span class="line"> sqlSession.close();</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(<span class="string">&quot;转账失败，未知原因！&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运⾏前注意看数据库表中当前的数据： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008101730204.png" alt="image-20221008101730204"></p><p>执行程序 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008101749730.png" alt="image-20221008101749730"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008101756552.png" alt="image-20221008101756552"></p><p>再次查看数据库表中的数据： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008101806224.png" alt="image-20221008101806224"></p><p>傻眼了吧！！！事务出问题了，转账失败了，钱仍然是少了<strong>1</strong>万。这是什么原因呢？主要是因为service 和dao中使⽤的SqlSession对象不是同⼀个。 </p><p>怎么办？为了保证service和dao中使⽤的SqlSession对象是同⼀个，可以将SqlSession对象存放到 </p><p>ThreadLocal当中。修改SqlSessionUtil⼯具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gaoziman</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/17 16:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SqlSessionUtil</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局的，服务器级别的，一个服务器当中定义一个即可。</span></span><br><span class="line">    <span class="comment">// 为什么把SqlSession对象放到ThreadLocal当中呢？为了保证一个线程对应一个SqlSession。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;SqlSession&gt; local = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取会话对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 会话对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> local.get();</span><br><span class="line">        <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">            <span class="comment">// 将sqlSession对象绑定到当前线程上。</span></span><br><span class="line">            local.set(sqlSession);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭SqlSession对象(从当前线程中移除SqlSession对象。)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlSession</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(SqlSession sqlSession)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sqlSession != <span class="literal">null</span>) &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">            <span class="comment">// 注意移除SqlSession对象和当前线程的绑定关系。</span></span><br><span class="line">            <span class="comment">// 因为Tomcat服务器支持线程池。也就是说：用过的线程对象t1，可能下一次还会使用这个t1线程。</span></span><br><span class="line">            local.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改dao中的⽅法：AccountDaoImpl中所有⽅法中的提交commit和关闭close代码全部删除。</p><p>当前数据库表中的数据： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008101954262.png" alt="image-20221008101954262"></p><p>再次运⾏程序： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008102007426.png" alt="image-20221008102007426"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008102018846.png" alt="image-20221008102018846"></p><p>查看数据库表：没有问题</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008102032972.png" alt="image-20221008102032972"></p><p>再测试转账成功：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008102049219.png" alt="image-20221008102049219"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008102101081.png" alt="image-20221008102101081"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008102108593.png" alt="image-20221008102108593"></p><p>如果余额不⾜呢： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008102123748.png" alt="image-20221008102123748"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008102134755.png" alt="image-20221008102134755"></p><p>账户的余额依然正常：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008102146548.png" alt="image-20221008102146548"></p><h2 id="第六章-MyBatis小技巧"><a href="#第六章-MyBatis小技巧" class="headerlink" title="第六章 MyBatis小技巧"></a>第六章 MyBatis小技巧</h2><h3 id="6-1-和"><a href="#6-1-和" class="headerlink" title="6.1 #{}和${}"></a>6.1 #{}和${}</h3><p>#{}：先编译sql语句，再给占位符传值，底层是PreparedStatement实现。可以防⽌sql注⼊，⽐较常 ⽤。</p><p>${}：先进⾏sql语句拼接，然后再编译sql语句，底层是Statement实现。存在sql注⼊现象。只有在需要 进⾏sql语句关键字拼接的情况下才会⽤到。 </p><p>需求：根据car_type查询汽⻋ </p><p>模块名：mybatis-005-antic </p><p><strong>使用#{}</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.manman.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">            id, car_num carNum ,brand,guide_price guidePrice ,produce_time produceTime,car_type carType</span><br><span class="line">        from t_car</span><br><span class="line">        where id =#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用${}</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectFuzzy&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.manman.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">       select</span><br><span class="line">           id,</span><br><span class="line">           car_num as carNum,</span><br><span class="line">           brand,</span><br><span class="line">           guide_price as guidePrice,</span><br><span class="line">           produce_time as produceTime,</span><br><span class="line">           car_type as carType</span><br><span class="line">       from t_car</span><br><span class="line">       where</span><br><span class="line">      brand like &#x27;%$&#123;brand&#125;%&#x27; </span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CarMapper.xml，放在类的根路径下：注意namespace必须和接⼝名⼀致。id必须和接⼝中⽅法名⼀致。</p><h3 id="6-2-什么情况下必须使⽤"><a href="#6-2-什么情况下必须使⽤" class="headerlink" title="6.2 什么情况下必须使⽤${}"></a>6.2 什么情况下必须使⽤${}</h3><p>当需要进⾏sql语句关键字拼接的时候。必须使⽤${}</p><p>需求：通过向sql语句中注⼊asc或desc关键字，来完成数据的升序或降序排列。 </p><p>先使⽤#{}尝试： </p><p>CarMapper接⼝：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 查询所有的Car</span><br><span class="line"> * @param ascOrDesc asc或desc</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">List<span class="tag">&lt;<span class="name">Car</span>&gt;</span> selectAll(String ascOrDesc);</span><br></pre></td></tr></table></figure><p>CarMapper.xml⽂件： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mybatis.pojo.Car&quot;</span>&gt;</span></span><br><span class="line"> select</span><br><span class="line"> id,car_num as carNum,brand,guide_price as guidePrice,produce_time as prod</span><br><span class="line">uceTime,car_type as carType</span><br><span class="line"> from</span><br><span class="line"> t_car</span><br><span class="line"> order by carNum #&#123;key&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试程序 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> (CarMapper) SqlSessionUtil.openSession().getMapper(C</span><br><span class="line">arMapper.class);</span><br><span class="line"> List&lt;Car&gt; cars = mapper.selectAll(<span class="string">&quot;desc&quot;</span>);</span><br><span class="line"> cars.forEach(car -&gt; System.out.println(car)); &#125;</span><br></pre></td></tr></table></figure><p>运行结果 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008104300247.png" alt="image-20221008104300247" style="zoom:80%;" /></p><p>报错的原因是sql语句不合法，因为采⽤这种⽅式传值，最终sql语句会是这样： </p><blockquote><p>select id,car_num as carNum,brand,guide_price as guidePrice,produce_time as produceTime,car_type as carType from t_car order by carNum ‘desc’ </p></blockquote><p>desc是⼀个关键字，不能带单引号的，所以在进⾏sql语句关键字拼接的时候，必须使⽤${}</p><h3 id="6-3-拼接表名"><a href="#6-3-拼接表名" class="headerlink" title="6.3 拼接表名"></a>6.3 拼接表名</h3><p>业务背景：实际开发中，有的表数据量⾮常庞⼤，可能会采⽤分表⽅式进⾏存储，⽐如每天⽣成⼀张表，表的名字与⽇期挂钩，例如：2022年8⽉1⽇⽣成的表：t_user20220108。2000年1⽉1⽇⽣成的 </p><p>表：t_user20000101。此时前端在进⾏查询的时候会提交⼀个具体的⽇期，⽐如前端提交的⽇期为：2000年1⽉1⽇，那么后端就会根据这个⽇期动态拼接表名为：t_user20000101。有了这个表名之后，将 </p><p>表名拼接到sql语句当中，返回查询结果。那么⼤家思考⼀下，拼接表名到sql语句当中应该使⽤#{} 还是${} 呢？ </p><blockquote><p>使⽤#{}会是这样：select * from ‘t_car’ </p><p>使⽤${}会是这样：select * from t_car </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllByTableName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line"> select</span><br><span class="line"> id,car_num as carNum,brand,guide_price as guidePrice,produce_time as prod</span><br><span class="line">uceTime,car_type as carType</span><br><span class="line"> from</span><br><span class="line"> $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据表名查询所有的Car</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Car&gt; <span class="title function_">selectAllByTableName</span><span class="params">(String tableName)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAllByTableName</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.cla</span><br><span class="line">ss);</span><br><span class="line"> List&lt;Car&gt; cars = mapper.selectAllByTableName(<span class="string">&quot;t_car&quot;</span>);</span><br><span class="line"> cars.forEach(car -&gt; System.out.println(car)); &#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008104616616.png" alt="image-20221008104616616"></p><h3 id="6-4-批量删除"><a href="#6-4-批量删除" class="headerlink" title="6.4 批量删除"></a>6.4 批量删除</h3><p>业务背景：⼀次删除多条记录</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008104645849.png" alt="image-20221008104645849"></p><p>对应的sql语句： </p><blockquote><p>delete from t_user where id = 1 or id = 2 or id = 3; </p><p>delete from t_user where id in(1, 2, 3); </p></blockquote><p>假设现在使⽤in的⽅式处理，前端传过来的字符串：1, 2, 3如果使⽤mybatis处理，应该使⽤#{} 还是 ${} </p><blockquote><p>使⽤#{} ：delete from t_user where id in(‘1,2,3’) 执⾏错误：<strong>1292</strong> - Truncated incorrect DOUBLE value: ‘<strong>1</strong>,<strong>2</strong>,<strong>3</strong>‘ </p><p>使⽤${} ：delete from t_user where id in(1, 2, 3) </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteBatch</span><span class="params">(String ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatch&quot;</span>&gt;</span></span><br><span class="line"> delete from t_car where id in($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBatch</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.cla</span><br><span class="line">ss);</span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> mapper.deleteBatch(<span class="string">&quot;1,2,3&quot;</span>);</span><br><span class="line"> System.out.println(<span class="string">&quot;删除了⼏条记录：&quot;</span> + count);</span><br><span class="line"> SqlSessionUtil.openSession().commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008104933398.png" alt="image-20221008104933398" style="zoom:80%;" /></p><h3 id="6-5-模糊查询"><a href="#6-5-模糊查询" class="headerlink" title="6.5 模糊查询"></a>6.5 模糊查询</h3><p>需求：查询奔驰系列的汽⻋。【只要品牌brand中含有奔驰两个字的都查询出来。】</p><h4 id="使⽤"><a href="#使⽤" class="headerlink" title="使⽤${}"></a>使⽤${}</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据品牌进⾏模糊查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> likeBrank</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Car&gt; <span class="title function_">selectLikeByBrand</span><span class="params">(String likeBrank)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectLikeByBrand&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line"> select</span><br><span class="line"> id,car_num as carNum,brand,guide_price as guidePrice,produce_time as prod</span><br><span class="line">uceTime,car_type as carType</span><br><span class="line"> from</span><br><span class="line"> t_car</span><br><span class="line"> where</span><br><span class="line"> brand like &#x27;%$&#123;brand&#125;%&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectLikeByBrand</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.cla</span><br><span class="line">ss);</span><br><span class="line"> List&lt;Car&gt; cars = mapper.selectLikeByBrand(<span class="string">&quot;奔驰&quot;</span>);</span><br><span class="line"> cars.forEach(car -&gt; System.out.println(car)); &#125;</span><br></pre></td></tr></table></figure><p>执行结果 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008105119361.png" alt="image-20221008105119361"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用#{}"></a>使用#{}</h4><p>第⼀种：concat函数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectLikeByBrand&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line"> select</span><br><span class="line"> id,car_num as carNum,brand,guide_price as guidePrice,produce_time as prod</span><br><span class="line">uceTime,car_type as carType</span><br><span class="line"> from</span><br><span class="line"> t_car</span><br><span class="line"> where</span><br><span class="line"> brand like concat(&#x27;%&#x27;,#&#123;brand&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008105207058.png" alt="image-20221008105207058"></p><p>第⼆种：双引号⽅式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectLikeByBrand&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line"> select</span><br><span class="line"> id,car_num as carNum,brand,guide_price as guidePrice,produce_time as prod</span><br><span class="line">uceTime,car_type as carType</span><br><span class="line"> from</span><br><span class="line"> t_car</span><br><span class="line"> where</span><br><span class="line"> brand like &quot;%&quot;#&#123;brand&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008105236005.png" alt="image-20221008105236005"></p><h3 id="6-6-插⼊数据时获取⾃动⽣成的主键"><a href="#6-6-插⼊数据时获取⾃动⽣成的主键" class="headerlink" title="6.6 插⼊数据时获取⾃动⽣成的主键"></a>6.6 插⼊数据时获取⾃动⽣成的主键</h3><p>前提是：主键是⾃动⽣成的。 </p><p>业务背景：⼀个⽤户有多个⻆⾊。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008105345403.png" alt="image-20221008105345403"></p><p>插⼊⼀条新的记录之后，⾃动⽣成了主键，⽽这个主键需要在其他表中使⽤时。 </p><p>插⼊⼀个⽤户数据的同时需要给该⽤户分配⻆⾊：需要将⽣成的⽤户的id插⼊到⻆⾊表的user_id字段 上。</p><blockquote><p>第⼀种⽅式：可以先插⼊⽤户数据，再写⼀条查询语句获取id，然后再插⼊user_id字段。【⽐较麻烦】 </p><p>第⼆种⽅式：mybatis提供了⼀种⽅式更加便捷。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取⾃动⽣成的主键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> car</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUseGeneratedKeys</span><span class="params">(Car car)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUseGeneratedKeys&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;i</span></span></span><br><span class="line"><span class="string"><span class="tag">d&quot;</span>&gt;</span></span><br><span class="line"> insert into t_car(id,car_num,brand,guide_price,produce_time,car_type) val</span><br><span class="line">ues(null,#&#123;carNum&#125;,#&#123;brand&#125;,#&#123;guidePrice&#125;,#&#123;produceTime&#125;,#&#123;carType&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUseGeneratedKeys</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.cl</span><br><span class="line">ass);</span><br><span class="line"> <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"> car.setCarNum(<span class="string">&quot;5262&quot;</span>);</span><br><span class="line"> car.setBrand(<span class="string">&quot;BYD汉&quot;</span>);</span><br><span class="line"> car.setGuidePrice(<span class="number">30.3</span>);</span><br><span class="line"> car.setProduceTime(<span class="string">&quot;2020-10-11&quot;</span>);</span><br><span class="line"> car.setCarType(<span class="string">&quot;新能源&quot;</span>);</span><br><span class="line"> mapper.insertUseGeneratedKeys(car);</span><br><span class="line"> SqlSessionUtil.openSession().commit();</span><br><span class="line"> System.out.println(car.getId()); &#125;</span><br></pre></td></tr></table></figure><h2 id="第七章-MyBatis查询语句"><a href="#第七章-MyBatis查询语句" class="headerlink" title="第七章 MyBatis查询语句"></a>第七章 MyBatis查询语句</h2><h3 id="7-1-返回Car"><a href="#7-1-返回Car" class="headerlink" title="7.1 返回Car"></a>7.1 返回Car</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.mapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Car;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Car SQL映射器 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarMapper</span> &#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id主键查询：结果最多只有⼀条</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> Car <span class="title function_">selectById</span><span class="params">(Long id)</span>; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.powernode.mybatis.mapper.CarMapper&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line"> select id,car_num carNum,brand,guide_price guidePrice,produce_tim</span><br><span class="line">e produceTime,car_type carType from t_car where id = #&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.test;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.mapper.CarMapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Car;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.utils.SqlSessionUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarMapperTest</span> &#123;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.class);</span><br><span class="line"> <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> mapper.selectById(<span class="number">35L</span>);</span><br><span class="line"> System.out.println(car);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008105744526.png" alt="image-20221008105744526"></p><h3 id="7-2-返回List"><a href="#7-2-返回List" class="headerlink" title="7.2 返回List"></a>7.2 返回List<Car\></h3><p>当查询的记录条数是多条的时候，必须使⽤集合接收。如果使⽤单个实体类接收会出现异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有的Car</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Car&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line"> select id,car_num carNum,brand,guide_price guidePrice,produce_time produceTime,car_type carType from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.cla</span><br><span class="line">ss);</span><br><span class="line"> List&lt;Car&gt; cars = mapper.selectAll();</span><br><span class="line"> cars.forEach(car -&gt; System.out.println(car)); &#125;</span><br></pre></td></tr></table></figure><p>执行结果 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008110306602.png" alt="image-20221008110306602"></p><p><strong>如果返回多条记录，采⽤单个实体类接收会怎样？</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008110351179.png" alt="image-20221008110351179"></p><h3 id="7-3-返回Map"><a href="#7-3-返回Map" class="headerlink" title="7.3 返回Map"></a>7.3 返回Map</h3><p>当返回的数据，没有合适的实体类对应的话，可以采⽤Map集合接收。字段名做key，字段值做value。 查询如果可以保证只有⼀条数据，则返回⼀个Map集合即可。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008110441776.png" alt="image-20221008110441776"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过id查询⼀条记录，返回Map集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">selectByIdRetMap</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByIdRetMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line"> select id,car_num carNum,brand,guide_price guidePrice,produce_time produceTime,car_type carType from t_car where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resultMap=”map”，这是因为mybatis内置了很多别名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByIdRetMap</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.cla</span><br><span class="line">ss);</span><br><span class="line"> Map&lt;String,Object&gt; car = mapper.selectByIdRetMap(<span class="number">35L</span>);</span><br><span class="line"> System.out.println(car); &#125;</span><br></pre></td></tr></table></figure><p>执行结果 :</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008110542962.png" alt="image-20221008110542962"></p><p>当然，如果返回⼀个Map集合，可以将Map集合放到List集合中吗？当然可以 </p><p>反过来，如果返回的不是⼀条记录，是多条记录的话，只采⽤单个Map集合接收，这样同样会出现之前 的异常：TooManyResultsException</p><h3 id="7-4-返回List"><a href="#7-4-返回List" class="headerlink" title="7.4 返回List"></a>7.4 返回List<Map\></h3><p>查询结果条数⼤于等于1条数据，则可以返回⼀个存储Map集合的List集合。List<Map\>等同于List<Car\></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有的Car，返回⼀个List集合。List集合中存储的是Map集合。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">selectAllRetListMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllRetListMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line"> select id,car_num carNum,brand,guide_price guidePrice,produce_time produceTime,car_type carType from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAllRetListMap</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.class);</span><br><span class="line"> List&lt;Map&lt;String,Object&gt;&gt; cars = mapper.selectAllRetListMap();</span><br><span class="line"> System.out.println(cars); &#125;</span><br></pre></td></tr></table></figure><p>执⾏结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"> &#123;carType=燃油⻋, carNum=<span class="number">103</span>, guidePrice=<span class="number">50.30</span>, produceTime=<span class="number">2020</span>-<span class="number">10</span>-<span class="number">01</span>, id=</span><br><span class="line"><span class="number">33</span>, brand=奔驰E300L&#125;,</span><br><span class="line"> &#123;carType=电⻋, carNum=<span class="number">102</span>, guidePrice=<span class="number">30.23</span>, produceTime=<span class="number">2018</span>-09-<span class="number">10</span>, id=<span class="number">34</span></span><br><span class="line">, brand=⽐亚迪汉&#125;,</span><br><span class="line"> &#123;carType=燃油⻋, carNum=<span class="number">103</span>, guidePrice=<span class="number">50.30</span>, produceTime=<span class="number">2020</span>-<span class="number">10</span>-<span class="number">01</span>, id=</span><br><span class="line"><span class="number">35</span>, brand=奔驰E300L&#125;,</span><br><span class="line"> &#123;carType=燃油⻋, carNum=<span class="number">103</span>, guidePrice=<span class="number">33.23</span>, produceTime=<span class="number">2020</span>-<span class="number">10</span>-<span class="number">11</span>, id=</span><br><span class="line"><span class="number">36</span>, brand=奔驰C200&#125;,</span><br><span class="line"> ......</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="7-5-resultMap结果映射"><a href="#7-5-resultMap结果映射" class="headerlink" title="7.5  resultMap结果映射"></a>7.5  resultMap结果映射</h3><ul><li>查询结果的列名和java对象的属性名对应不上怎么办？ <ul><li>第⼀种⽅式：as 给列起别名 </li><li>第⼆种⽅式：使⽤resultMap进⾏结果映射 </li><li>第三种⽅式：是否开启驼峰命名⾃动映射（配置settings）</li></ul></li></ul><h4 id="resultMap结果映射"><a href="#resultMap结果映射" class="headerlink" title="resultMap结果映射"></a>resultMap结果映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有Car，使⽤resultMap进⾏结果映射</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Car&gt; <span class="title function_">selectAllByResultMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> resultMap:</span></span><br><span class="line"><span class="comment"> id：这个结果映射的标识，作为select标签的resultMap属性的值。</span></span><br><span class="line"><span class="comment"> type：结果集要映射的类。可以使⽤别名。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;carResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--对象的唯⼀标识，官⽅解释是：为了提⾼mybatis的性能。建议写上。--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;carNum&quot;</span> <span class="attr">column</span>=<span class="string">&quot;car_num&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--当属性名和数据库列名⼀致时，可以省略。但建议都写上。--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--javaType⽤来指定属性类型。jdbcType⽤来指定列类型。⼀般可以省略。--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;brand&quot;</span> <span class="attr">column</span>=<span class="string">&quot;brand&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;guidePrice&quot;</span> <span class="attr">column</span>=<span class="string">&quot;guide_price&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;produceTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;produce_time&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;carType&quot;</span> <span class="attr">column</span>=<span class="string">&quot;car_type&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--resultMap属性的值必须和resultMap标签中id属性值⼀致。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllByResultMap&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;carResultMap&quot;</span>&gt;</span></span><br><span class="line"> select * from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAllByResultMap</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">carMapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.</span><br><span class="line">class);</span><br><span class="line"> List&lt;Car&gt; cars = carMapper.selectAllByResultMap();</span><br><span class="line"> System.out.println(cars); &#125;</span><br></pre></td></tr></table></figure><p>执⾏结果正常</p><h4 id="是否开启驼峰命名⾃动映射"><a href="#是否开启驼峰命名⾃动映射" class="headerlink" title="是否开启驼峰命名⾃动映射"></a>是否开启驼峰命名⾃动映射</h4><p>使⽤这种⽅式的前提是：属性名遵循Java的命名规范，数据库表的列名遵循SQL的命名规范。 </p><blockquote><p>Java命名规范：⾸字⺟⼩写，后⾯每个单词⾸字⺟⼤写，遵循驼峰命名⽅式。 </p><p>SQL命名规范：全部⼩写，单词之间采⽤下划线分割。 </p></blockquote><p>⽐如以下的对应关系：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008111042849.png" alt="image-20221008111042849"></p><p>如何启⽤该功能，在mybatis-config.xml⽂件中进⾏配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--放在properties标签后⾯--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有Car，启⽤驼峰命名⾃动映射</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Car&gt; <span class="title function_">selectAllByMapUnderscoreToCamelCase</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllByMapUnderscoreToCamelCase&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line"> select * from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAllByMapUnderscoreToCamelCase</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">carMapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.class);</span><br><span class="line"> List&lt;Car&gt; cars = carMapper.selectAllByMapUnderscoreToCamelCase();</span><br><span class="line"> System.out.println(cars); &#125;</span><br></pre></td></tr></table></figure><p>执⾏结果正常。 </p><h3 id="7-6-返回总记录条数"><a href="#7-6-返回总记录条数" class="headerlink" title="7.6  返回总记录条数"></a>7.6  返回总记录条数</h3><p>需求：查询总记录条数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取总记录条数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Long <span class="title function_">selectTotal</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--<span class="type">long</span>是别名，可参考mybatis开发⼿册。--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;selectTotal&quot;</span> resultType=<span class="string">&quot;long&quot;</span>&gt;</span><br><span class="line"> select <span class="title function_">count</span><span class="params">(*)</span> from t_car</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectTotal</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">carMapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.</span><br><span class="line">class);</span><br><span class="line"> <span class="type">Long</span> <span class="variable">total</span> <span class="operator">=</span> carMapper.selectTotal();</span><br><span class="line"> System.out.println(total); &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008111310143.png" alt="image-20221008111310143"></p><h2 id="第八章-动态SQL"><a href="#第八章-动态SQL" class="headerlink" title="第八章 动态SQL"></a>第八章 动态SQL</h2><p>有的业务场景，也需要SQL语句进⾏动态拼接，例如： </p><p>批量删除 </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008111342233.png" alt="image-20221008111342233"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_car <span class="keyword">where</span> id <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,......这⾥的值是动态的，根据⽤户选择的id不同，值是不同的);</span><br></pre></td></tr></table></figure><ul><li>多条件查询 </li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008111451951.png" alt="image-20221008111451951"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_car <span class="keyword">where</span> brand <span class="keyword">like</span> <span class="string">&#x27;丰⽥%&#x27;</span> <span class="keyword">and</span> guide_price <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">and</span> .....;</span><br></pre></td></tr></table></figure><h3 id="8-1-if标签"><a href="#8-1-if标签" class="headerlink" title="8.1 if标签"></a>8.1 if标签</h3><p>需求：多条件查询。 </p><p>可能的条件包括：品牌（brand）、指导价格（guide_price）、汽⻋类型（car_type）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.mapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Car;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarMapper</span> &#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据多条件查询Car</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> guidePrice</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> carType</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> List&lt;Car&gt; <span class="title function_">selectByMultiCondition</span><span class="params">(<span class="meta">@Param(&quot;brand&quot;)</span> String brand, <span class="meta">@Param(&quot;guidePrice&quot;)</span> Double guidePrice, <span class="meta">@Param(&quot;carType&quot;)</span> String carType)</span>; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.powernode.mybatis.mapper.CarMapper&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByMultiCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line"> select * from t_car where</span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand != null and brand != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> brand like #&#123;brand&#125;&quot;%&quot;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;guidePrice != null and guidePrice != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> and guide_price &gt;= #&#123;guidePrice&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;carType != null and carType != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> and car_type = #&#123;carType&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.test;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.mapper.CarMapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Car;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.utils.SqlSessionUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarMapperTest</span> &#123;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByMultiCondition</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.class);</span><br><span class="line"> List&lt;Car&gt; cars = mapper.selectByMultiCondition(<span class="string">&quot;丰⽥&quot;</span>, <span class="number">20.0</span>, <span class="string">&quot;燃油 ⻋&quot;</span>);</span><br><span class="line"> System.out.println(cars);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执⾏结果：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008111816462.png" alt="image-20221008111816462"></p><p>如果第⼀个条件为空，剩下两个条件不为空，会是怎样呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; cars = mapper.selectByMultiCondition(<span class="string">&quot;&quot;</span>, <span class="number">20.0</span>, <span class="string">&quot;燃油⻋&quot;</span>);</span><br></pre></td></tr></table></figure><p>执⾏结果： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008111953840.png" alt="image-20221008111953840"></p><p>报错了，SQL语法有问题，where后⾯出现了and。这该怎么解决呢？ </p><p>● 可以where后⾯添加⼀个恒成⽴的条件。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008112034507.png" alt="image-20221008112034507" style="zoom:67%;" /></p><p>执⾏结果： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008112055280.png" alt="image-20221008112055280" style="zoom:67%;" /></p><p>如果三个条件都是空，有影响吗？ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; cars = mapper.selectByMultiCondition(<span class="string">&quot;&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>执⾏结果：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008112145303.png" alt="image-20221008112145303"></p><p>三个条件都不为空呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; cars = mapper.selectByMultiCondition(<span class="string">&quot;丰⽥&quot;</span>, <span class="number">20.0</span>, <span class="string">&quot;燃油⻋&quot;</span>);</span><br></pre></td></tr></table></figure><p>执⾏结果：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008112230405.png" alt="image-20221008112230405"></p><h3 id="8-2-where标签"><a href="#8-2-where标签" class="headerlink" title="8.2 where标签"></a>8.2 where标签</h3><p>where标签的作⽤：让where⼦句更加动态智能。 所有条件都为空时，where标签保证不会⽣成where⼦句。 ⾃动去除某些条件前⾯多余的and或or。</p><p>继续使⽤if标签中的需求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据多条件查询Car，使⽤where标签</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> guidePrice</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> carType</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Car&gt; <span class="title function_">selectByMultiConditionWithWhere</span><span class="params">(<span class="meta">@Param(&quot;brand&quot;)</span> String brand, <span class="meta">@Param(&quot;guidePrice&quot;)</span> Double guidePrice, <span class="meta">@Param(&quot;carType&quot;)</span> String carType)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByMultiConditionWithWhere&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line"> select * from t_car</span><br><span class="line"> <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand != null and brand != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> and brand like #&#123;brand&#125;&quot;%&quot;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;guidePrice != null and guidePrice != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> and guide_price &gt;= #&#123;guidePrice&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;carType != null and carType != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> and car_type = #&#123;carType&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByMultiConditionWithWhere</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.cla</span><br><span class="line">ss);</span><br><span class="line"> List&lt;Car&gt; cars = mapper.selectByMultiConditionWithWhere(<span class="string">&quot;丰⽥&quot;</span>, <span class="number">20.0</span>, <span class="string">&quot;燃油⻋&quot;</span>);</span><br><span class="line"> System.out.println(cars); &#125;</span><br></pre></td></tr></table></figure><p>运⾏结果：</p><p> <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008112423041.png" alt="image-20221008112423041"></p><p>如果所有条件都是空呢？ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; cars = mapper.selectByMultiConditionWithWhere(<span class="string">&quot;&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>执行结果 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008112502545.png" alt="image-20221008112502545"></p><p>它可以⾃动去掉前⾯多余的and，那可以⾃动去掉前⾯多余的or吗？ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; cars = mapper.selectByMultiConditionWithWhere(<span class="string">&quot;丰⽥&quot;</span>, <span class="number">20.0</span>, <span class="string">&quot;燃油 ⻋&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByMultiConditionWithWhere&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line"> select * from t_car</span><br><span class="line"> <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand != null and brand != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> or brand like #&#123;brand&#125;&quot;%&quot;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;guidePrice != null and guidePrice != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> and guide_price &gt;= #&#123;guidePrice&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;carType != null and carType != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> and car_type = #&#123;carType&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执⾏结果： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008112541446.png" alt="image-20221008112541446"></p><h3 id="8-3-trim标签"><a href="#8-3-trim标签" class="headerlink" title="8.3 trim标签"></a>8.3 trim标签</h3><ul><li>trim标签的属性： </li></ul><p>prefix：在trim标签中的语句前添加内容 </p><p>suffix：在trim标签中的语句后添加内容 </p><p>prefixOverrides：前缀覆盖掉（去掉） </p><p>suffixOverrides：后缀覆盖掉（去掉）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据多条件查询Car，使⽤trim标签</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> guidePrice</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> carType</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Car&gt; <span class="title function_">selectByMultiConditionWithTrim</span><span class="params">(<span class="meta">@Param(&quot;brand&quot;)</span> String brand, <span class="meta">@Param(&quot;guidePrice&quot;)</span> Double guidePrice, <span class="meta">@Param(&quot;carType&quot;)</span> String carType)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByMultiConditionWithTrim&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line"> select * from t_car</span><br><span class="line"> <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand != null and brand != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> brand like #&#123;brand&#125;&quot;%&quot; and</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;guidePrice != null and guidePrice != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> guide_price &gt;= #&#123;guidePrice&#125; and</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;carType != null and carType != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> car_type = #&#123;carType&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByMultiConditionWithTrim</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.class);</span><br><span class="line"> List&lt;Car&gt; cars = mapper.selectByMultiConditionWithTrim(<span class="string">&quot;丰⽥&quot;</span>, <span class="number">20.0</span>, <span class="string">&quot;&quot;</span>) ;</span><br><span class="line"> System.out.println(cars); &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008113527108.png" alt="image-20221008113527108"></p><p>如果所有条件为空，where会被加上吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; cars = mapper.selectByMultiConditionWithTrim(<span class="string">&quot;&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>执⾏结果： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008113554418.png" alt="image-20221008113554418"></p><h3 id="8-4-set标签"><a href="#8-4-set标签" class="headerlink" title="8.4 set标签"></a>8.4 set标签</h3><p>主要使⽤在update语句当中，⽤来⽣成set关键字，同时去掉最后多余的“,” </p><p>⽐如我们只更新提交的不为空的字段，如果提交的数据是空或者””，那么这个字段我们将不更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 更新信息，使⽤set标签</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> car</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateWithSet</span><span class="params">(Car car)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateWithSet&quot;</span>&gt;</span></span><br><span class="line"> update t_car</span><br><span class="line"> <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;carNum != null and carNum != &#x27;&#x27;&quot;</span>&gt;</span>car_num = #&#123;carNum&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand != null and brand != &#x27;&#x27;&quot;</span>&gt;</span>brand = #&#123;brand&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;guidePrice != null and guidePrice != &#x27;&#x27;&quot;</span>&gt;</span>guide_price = #&#123;guidePrice&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;produceTime != null and produceTime != &#x27;&#x27;&quot;</span>&gt;</span>produce_time = #&#123;produceTime&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;carType != null and carType != &#x27;&#x27;&quot;</span>&gt;</span>car_type = #&#123;carType&#125;,&lt;/i f&gt;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"> where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateWithSet</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.cla</span><br><span class="line">ss);</span><br><span class="line"> <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="number">38L</span>,<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;丰⽥霸道2&quot;</span>,<span class="number">10.0</span>,<span class="string">&quot;&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> mapper.updateWithSet(car);</span><br><span class="line"> System.out.println(count);</span><br><span class="line"> SqlSessionUtil.openSession().commit(); &#125;</span><br></pre></td></tr></table></figure><p>执⾏结果：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008113756964.png" alt="image-20221008113756964"></p><h3 id="8-5-choose-when-otherwise"><a href="#8-5-choose-when-otherwise" class="headerlink" title="8.5 choose when otherwise"></a>8.5 choose when otherwise</h3><p>这三个标签是在⼀起使⽤的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;choose&gt;</span><br><span class="line"> &lt;when&gt;&lt;/when&gt;</span><br><span class="line"> &lt;when&gt;&lt;/when&gt;</span><br><span class="line"> &lt;when&gt;&lt;/when&gt;</span><br><span class="line"> &lt;otherwise&gt;&lt;/otherwise&gt;</span><br><span class="line">&lt;/choose&gt;</span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>只有⼀个分⽀会被选择！！！！</p><p>需求：先根据品牌查询，如果没有提供品牌，再根据指导价格查询，如果没有提供指导价格，就根据⽣产⽇期查询。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使⽤choose when otherwise标签查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> guidePrice</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> produceTime</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Car&gt; <span class="title function_">selectWithChoose</span><span class="params">(<span class="meta">@Param(&quot;brand&quot;)</span> String brand, <span class="meta">@Param(&quot;guidePrice&quot;)</span> Double guidePrice, <span class="meta">@Param(&quot;produceTime&quot;)</span> String produceTime)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWithChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line"> select * from t_car</span><br><span class="line"> <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brand != null and brand != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> brand like #&#123;brand&#125;&quot;%&quot;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;guidePrice != null and guidePrice != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"> guide_price &gt;= #&#123;guidePrice&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line"> produce_time &gt;= #&#123;produceTime&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectWithChoose</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.cla</span><br><span class="line">ss);</span><br><span class="line"> <span class="comment">//List&lt;Car&gt; cars = mapper.selectWithChoose(&quot;丰⽥霸道&quot;, 20.0, &quot;2000-10-1</span></span><br><span class="line"><span class="number">0</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string"> //List&lt;Car&gt; cars = mapper.selectWithChoose(&quot;</span><span class="string">&quot;, 20.0, &quot;</span><span class="number">2000</span>-<span class="number">10</span>-<span class="number">10</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string"> //List&lt;Car&gt; cars = mapper.selectWithChoose(&quot;</span><span class="string">&quot;, null, &quot;</span><span class="number">2000</span>-<span class="number">10</span>-<span class="number">10</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string"> List&lt;Car&gt; cars = mapper.selectWithChoose(&quot;</span><span class="string">&quot;, null, &quot;</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string"> System.out.println(cars); &#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008114003604.png" alt="image-20221008114003604"></p><h3 id="8-6-foreach标签"><a href="#8-6-foreach标签" class="headerlink" title="8.6  foreach标签"></a>8.6  foreach标签</h3><p>循环数组或集合，动态⽣成sql，⽐如这样的SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_car <span class="keyword">where</span> id <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_car <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">or</span> id <span class="operator">=</span> <span class="number">3</span>; <span class="number">12</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_car <span class="keyword">values</span></span><br><span class="line"> (<span class="keyword">null</span>,<span class="string">&#x27;1001&#x27;</span>,<span class="string">&#x27;凯美瑞&#x27;</span>,<span class="number">35.0</span>,<span class="string">&#x27;2010-10-11&#x27;</span>,<span class="string">&#x27;燃油⻋&#x27;</span>),</span><br><span class="line"> (<span class="keyword">null</span>,<span class="string">&#x27;1002&#x27;</span>,<span class="string">&#x27;⽐亚迪唐&#x27;</span>,<span class="number">31.0</span>,<span class="string">&#x27;2020-11-11&#x27;</span>,<span class="string">&#x27;新能源&#x27;</span>),</span><br><span class="line"> (<span class="keyword">null</span>,<span class="string">&#x27;1003&#x27;</span>,<span class="string">&#x27;⽐亚迪宋&#x27;</span>,<span class="number">32.0</span>,<span class="string">&#x27;2020-10-11&#x27;</span>,<span class="string">&#x27;新能源&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><ul><li>⽤in来删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过foreach完成批量删除</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteBatchByForeach</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> Long[] ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">collection：集合或数组</span></span><br><span class="line"><span class="comment">item：集合或数组中的元素</span></span><br><span class="line"><span class="comment">separator：分隔符</span></span><br><span class="line"><span class="comment">open：foreach标签中所有内容的开始</span></span><br><span class="line"><span class="comment">close：foreach标签中所有内容的结束</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatchByForeach&quot;</span>&gt;</span></span><br><span class="line"> delete from t_car where id in</span><br><span class="line"> <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line"> #&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBatchByForeach</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.cla</span><br><span class="line">ss);</span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> mapper.deleteBatchByForeach(<span class="keyword">new</span> <span class="title class_">Long</span>[]&#123;<span class="number">40L</span>, <span class="number">41L</span>, <span class="number">42L</span>&#125;);</span><br><span class="line"> System.out.println(<span class="string">&quot;删除了⼏条记录：&quot;</span> + count);</span><br><span class="line"> SqlSessionUtil.openSession().commit(); &#125;</span><br></pre></td></tr></table></figure><p>执⾏结果： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008114449025.png" alt="image-20221008114449025"></p><ul><li>⽤or来删除 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过foreach完成批量删除</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteBatchByForeach2</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> Long[] ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatchByForeach2&quot;</span>&gt;</span></span><br><span class="line"> delete from t_car where</span><br><span class="line"> <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line"> id = #&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBatchByForeach2</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.cla</span><br><span class="line">ss);</span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> mapper.deleteBatchByForeach2(<span class="keyword">new</span> <span class="title class_">Long</span>[]&#123;<span class="number">40L</span>, <span class="number">41L</span>, <span class="number">42L</span>&#125;);</span><br><span class="line"> System.out.println(<span class="string">&quot;删除了⼏条记录：&quot;</span> + count);</span><br><span class="line"> SqlSessionUtil.openSession().commit(); &#125;</span><br></pre></td></tr></table></figure><p>执行结果 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008114551486.png" alt="image-20221008114551486"></p><h4 id="批量添加"><a href="#批量添加" class="headerlink" title="批量添加"></a>批量添加</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 批量添加，使⽤foreach标签</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> cars</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertBatchByForeach</span><span class="params">(<span class="meta">@Param(&quot;cars&quot;)</span> List&lt;Car&gt; cars)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatchByForeach&quot;</span>&gt;</span></span><br><span class="line"> insert into t_car values</span><br><span class="line"> <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;cars&quot;</span> <span class="attr">item</span>=<span class="string">&quot;car&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line"> (null,#&#123;car.carNum&#125;,#&#123;car.brand&#125;,#&#123;car.guidePrice&#125;,#&#123;car.produceTime&#125;,#</span><br><span class="line">&#123;car.carType&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertBatchByForeach</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.cl</span><br><span class="line">ass);</span><br><span class="line"> <span class="type">Car</span> <span class="variable">car1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="literal">null</span>, <span class="string">&quot;2001&quot;</span>, <span class="string">&quot;兰博基尼&quot;</span>, <span class="number">100.0</span>, <span class="string">&quot;1998-10-11&quot;</span>, <span class="string">&quot;燃油 ⻋&quot;</span>);</span><br><span class="line"> <span class="type">Car</span> <span class="variable">car2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="literal">null</span>, <span class="string">&quot;2001&quot;</span>, <span class="string">&quot;兰博基尼&quot;</span>, <span class="number">100.0</span>, <span class="string">&quot;1998-10-11&quot;</span>, <span class="string">&quot;燃油 ⻋&quot;</span>);</span><br><span class="line"> <span class="type">Car</span> <span class="variable">car3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="literal">null</span>, <span class="string">&quot;2001&quot;</span>, <span class="string">&quot;兰博基尼&quot;</span>, <span class="number">100.0</span>, <span class="string">&quot;1998-10-11&quot;</span>, <span class="string">&quot;燃油 ⻋&quot;</span>);</span><br><span class="line"> List&lt;Car&gt; cars = Arrays.asList(car1, car2, car3);</span><br><span class="line"> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> mapper.insertBatchByForeach(cars);</span><br><span class="line"> System.out.println(<span class="string">&quot;插⼊了⼏条记录&quot;</span> + count);</span><br><span class="line"> SqlSessionUtil.openSession().commit(); &#125;</span><br></pre></td></tr></table></figure><p>执⾏结果：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008114715205.png" alt="image-20221008114715205"></p><h3 id="8-7-sql标签与include标签"><a href="#8-7-sql标签与include标签" class="headerlink" title="8.7 sql标签与include标签"></a>8.7 sql标签与include标签</h3><p>sql标签⽤来声明sql⽚段 </p><p>include标签⽤来将声明的sql⽚段包含到某个sql语句当中 </p><p>作⽤：代码复⽤。易维护</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;carCols&quot;</span>&gt;</span>id,car_num carNum,brand,guide_price guidePrice,produce_t</span><br><span class="line">ime produceTime,car_type carType<span class="tag">&lt;/<span class="name">sql</span>&gt;</span> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllRetMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line"> select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;carCols&quot;</span>/&gt;</span> from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllRetListMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line"> select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;carCols&quot;</span>/&gt;</span> carType from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByIdRetMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line"> select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;carCols&quot;</span>/&gt;</span> from t_car where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第九章-MyBatis的⾼级映射及延迟加载"><a href="#第九章-MyBatis的⾼级映射及延迟加载" class="headerlink" title="第九章 MyBatis的⾼级映射及延迟加载"></a>第九章 MyBatis的⾼级映射及延迟加载</h2><p>模块名：mybatis-009-advanced-mapping </p><p>打包⽅式：jar </p><p>依赖：mybatis依赖、mysql驱动依赖、junit依赖、logback依赖 </p><p>配置⽂件：mybatis-config.xml、logback.xml、jdbc.properties </p><p>拷⻉⼯具类：SqlSessionUtil </p><p>准备数据库表：⼀个班级对应多个学⽣。班级表：t_clazz。学⽣表：t_student</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008170404883.png" alt="image-20221008170404883"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008170431627.png" alt="image-20221008170431627"></p><p>创建pojo：Student、Clazz</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.pojo;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学⽣类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> Integer sid;</span><br><span class="line"> <span class="keyword">private</span> String sname;</span><br><span class="line"> <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.pojo;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 班级类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> Integer cid;</span><br><span class="line"> <span class="keyword">private</span> String cname;</span><br><span class="line"> <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建mapper接⼝：StudentMapper、ClazzMapper </p><p>创建mapper映射⽂件：StudentMapper.xml、ClazzMapper.xml</p><h3 id="9-1-多对一"><a href="#9-1-多对一" class="headerlink" title="9.1 多对一"></a>9.1 多对一</h3><p>多种⽅式，常⻅的包括三种： </p><p>● 第⼀种⽅式：⼀条SQL语句，级联属性映射。 </p><p>● 第⼆种⽅式：⼀条SQL语句，association。 </p><p>● 第三种⽅式：两条SQL语句，分步查询。（这种⽅式常⽤：优点⼀是可复⽤。优点⼆是⽀持懒加载。） </p><h4 id="第一种方式：-级联属性映射"><a href="#第一种方式：-级联属性映射" class="headerlink" title="第一种方式： 级联属性映射"></a>第一种方式： 级联属性映射</h4><p>pojo类Student中添加⼀个属性：Clazz clazz; 表示学⽣关联的班级对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.pojo;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学⽣类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> Integer sid;</span><br><span class="line"> <span class="keyword">private</span> String sname;</span><br><span class="line"> <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.powernode.mybatis.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;clazz.cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;clazz.cname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBySid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentResultMap&quot;</span>&gt;</span></span><br><span class="line"> select s.*, c.* from t_student s join t_clazz c on s.cid = c.cid where sid = #&#123;sid&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.test;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.mapper.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.utils.SqlSessionUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentMapperTest</span> &#123;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBySid</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">StudentMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(Stud</span><br><span class="line">entMapper.class);</span><br><span class="line"> <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> mapper.selectBySid(<span class="number">1</span>);</span><br><span class="line"> System.out.println(student);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008171014889.png" alt="image-20221008171014889"></p><h4 id="第⼆种⽅式：association"><a href="#第⼆种⽅式：association" class="headerlink" title="第⼆种⽅式：association"></a>第⼆种⽅式：association</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Clazz&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第三种⽅式：分步查询"><a href="#第三种⽅式：分步查询" class="headerlink" title="第三种⽅式：分步查询"></a>第三种⽅式：分步查询</h4><p>其他位置不需要修改，只需要修改以及添加以下三处： </p><p>第⼀处：association中select位置填写sqlId。sqlId=namespace+id。其中column属性作为这条⼦sql语句的条件。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;clazz&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">&quot;com.powernode.mybatis.mapper.ClazzMapper.selectByCid&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBySid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentResultMap&quot;</span>&gt;</span></span><br><span class="line"> select s.* from t_student s where sid = #&#123;sid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第⼆处：在ClazzMapper接⼝中添加⽅法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.mapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Clazz;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Clazz映射器接⼝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClazzMapper</span> &#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据cid获取Clazz信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> Clazz <span class="title function_">selectByCid</span><span class="params">(Integer cid)</span>; &#125;</span><br></pre></td></tr></table></figure><p>第三处：在ClazzMapper.xml⽂件中进⾏配置 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.powernode.mybatis.mapper.ClazzMapper&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Clazz&quot;</span>&gt;</span></span><br><span class="line"> select * from t_clazz where cid = #&#123;cid&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执⾏结果，可以很明显看到先后有两条sql语句执⾏： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008172213485.png" alt="image-20221008172213485"></p><p>分步优点： </p><p>第⼀个优点：代码复⽤性增强。 </p><p>第⼆个优点：⽀持延迟加载。【暂时访问不到的数据可以先不查询。提⾼程序的执⾏效率。】</p><h3 id="9-2-多对⼀延迟加载"><a href="#9-2-多对⼀延迟加载" class="headerlink" title="9.2 多对⼀延迟加载"></a>9.2 多对⼀延迟加载</h3><p>在mybatis中如何开启全局的延迟加载呢？需要setting配置，如下：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008172318065.png" alt="image-20221008172318065"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把fetchType=”lazy”去掉。 </p><p>执⾏以下程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentMapperTest</span> &#123;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBySid</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">StudentMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(StudentMapper.class);</span><br><span class="line"> <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> mapper.selectBySid(<span class="number">1</span>);</span><br><span class="line"> <span class="comment">//System.out.println(student);</span></span><br><span class="line"> <span class="comment">// 只获取学⽣姓名</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">sname</span> <span class="operator">=</span> student.getSname();</span><br><span class="line"> System.out.println(<span class="string">&quot;学⽣姓名：&quot;</span> + sname);</span><br><span class="line"> <span class="comment">// 到这⾥之后，想获取班级名字了</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">cname</span> <span class="operator">=</span> student.getClazz().getCname();</span><br><span class="line"> System.out.println(<span class="string">&quot;学⽣的班级名称：&quot;</span> + cname);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008172426891.png" alt="image-20221008172426891" style="zoom:80%;" /></p><p>通过以上的测试可以看出，我们已经开启了全局延迟加载策略。 </p><p>开启全局延迟加载之后，所有的sql都会⽀持延迟加载，如果某个sql你不希望它⽀持延迟加载怎么办呢？ </p><p>将fetchType设置为eager： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;clazz&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">&quot;com.powernode.mybatis.mapper.ClazzMapper.selectByCid&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008172501714.png" alt="image-20221008172501714" style="zoom:80%;" /></p><p>这样的话，针对某个特定的sql，你就关闭了延迟加载机制。 </p><p>后期我们要不要开启延迟加载机制，主要看实际的业务需求是怎样的。</p><h3 id="9-3-⼀对多"><a href="#9-3-⼀对多" class="headerlink" title="9.3 ⼀对多"></a>9.3 ⼀对多</h3><p>⼀对多的实现，通常是在⼀的⼀⽅中有List集合属性。 </p><p>在Clazz类中添加List<Student\> stus; 属性。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> Integer cid;</span><br><span class="line"> <span class="keyword">private</span> String cname;</span><br><span class="line"> <span class="keyword">private</span> List&lt;Student&gt; stus;</span><br><span class="line"> <span class="comment">// set get⽅法</span></span><br><span class="line"> <span class="comment">// 构造⽅法</span></span><br><span class="line"> <span class="comment">// toString⽅法 &#125;</span></span><br></pre></td></tr></table></figure><p>⼀对多的实现通常包括两种实现⽅式：</p><ul><li><p>第⼀种⽅式：collection </p></li><li><p>第⼆种⽅式：分步查询 </p></li></ul><h4 id="第⼀种⽅式：collection"><a href="#第⼀种⽅式：collection" class="headerlink" title="第⼀种⽅式：collection"></a>第⼀种⽅式：collection</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.mapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Clazz;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Clazz映射器接⼝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClazzMapper</span> &#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据cid获取Clazz信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> Clazz <span class="title function_">selectByCid</span><span class="params">(Integer cid)</span>;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据班级编号查询班级信息。同时班级中所有的学⽣信息也要查询。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> Clazz <span class="title function_">selectClazzAndStusByCid</span><span class="params">(Integer cid)</span>; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;clazzResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Clazz&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;stus&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectClazzAndStusByCid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;clazzResultMap&quot;</span>&gt;</span></span><br><span class="line"> select * from t_clazz c join t_student s on c.cid = s.cid where c.cid =</span><br><span class="line">#&#123;cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意是ofType，表示“集合中的类型”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.test;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.mapper.ClazzMapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Clazz;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.utils.SqlSessionUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClazzMapperTest</span> &#123;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectClazzAndStusByCid</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">ClazzMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(ClazzMapper.class);</span><br><span class="line"> <span class="type">Clazz</span> <span class="variable">clazz</span> <span class="operator">=</span> mapper.selectClazzAndStusByCid(<span class="number">1001</span>);</span><br><span class="line"> System.out.println(clazz);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执⾏结果：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008185003193.png" alt="image-20221008185003193"></p><h4 id="第⼆种⽅式：分步查询-比较常用"><a href="#第⼆种⽅式：分步查询-比较常用" class="headerlink" title="第⼆种⽅式：分步查询(比较常用)"></a>第⼆种⽅式：分步查询(比较常用)</h4><p>修改以下三个位置即可： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;clazzResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Clazz&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--主要看这⾥--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;stus&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">&quot;com.powernode.mybatis.mapper.StudentMapper.selectByC</span></span></span><br><span class="line"><span class="string"><span class="tag">id&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--sql语句也变化了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectClazzAndStusByCid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;clazzResultMap&quot;</span>&gt;</span></span><br><span class="line"> select * from t_clazz c where c.cid = #&#123;cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据班级编号获取所有的学⽣。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Student&gt; <span class="title function_">selectByCid</span><span class="params">(Integer cid)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line"> select * from t_student where cid = #&#123;cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执⾏结果： </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008185103148.png" alt="image-20221008185103148" style="zoom:50%;" /></p><h3 id="9-4-⼀对多延迟加载"><a href="#9-4-⼀对多延迟加载" class="headerlink" title="9.4 ⼀对多延迟加载"></a>9.4 ⼀对多延迟加载</h3><p>⼀对多延迟加载机制和多对⼀是⼀样的。同样是通过两种⽅式：</p><ul><li><p>第⼀种：fetchType=”lazy” </p></li><li><p>第⼆种：修改全局的配置setting，lazyLoadingEnabled=true，如果开启全局延迟加载，想让某个 sql不使⽤延迟加载：fetchType=”eager” </p></li></ul><h2 id="第十章-MyBatis的缓存"><a href="#第十章-MyBatis的缓存" class="headerlink" title="第十章 MyBatis的缓存"></a>第十章 MyBatis的缓存</h2><p>缓存：cache </p><p>缓存的作⽤：通过减少IO的⽅式，来提⾼程序的执⾏效率。 </p><p>mybatis的缓存：将select语句的查询结果放到缓存（内存）当中，下⼀次还是这条select语句的话，直 接从缓存中取，不再查数据库。⼀⽅⾯是减少了IO。另⼀⽅⾯不再执⾏繁琐的查找算法。效率⼤⼤提升。</p><p>mybatis缓存包括： </p><blockquote><p>⼀级缓存：将查询到的数据存储到SqlSession中。 </p><p>⼆级缓存：将查询到的数据存储到SqlSessionFactory中。 </p><p>或者集成其它第三⽅的缓存：⽐如EhCache Java语⾔开发的】、Memcache【C语⾔开发的】 等</p></blockquote><font color='red'>缓存只针对于DQL语句，也就是说缓存机制只对应select语句。 </font><h3 id="10-1-⼀级缓存"><a href="#10-1-⼀级缓存" class="headerlink" title="10.1 ⼀级缓存"></a>10.1 ⼀级缓存</h3><p>⼀级缓存默认是开启的。不需要做任何配置。 </p><p>原理：只要使⽤同⼀个SqlSession对象执⾏同⼀条SQL语句，就会⾛缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.mapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Car;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarMapper</span> &#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id获取Car信息。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> Car <span class="title function_">selectById</span><span class="params">(Long id)</span>; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.powernode.mybatis.mapper.CarMapper&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line"> select * from t_car where id = #&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.test;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.mapper.CarMapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Car;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.utils.SqlSessionUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarMapperTest</span> &#123;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> <span class="comment">// 注意：不能使⽤我们封装的SqlSessionUtil⼯具类。</span></span><br><span class="line"> <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> builder.build(Resources.getR</span><br><span class="line"><span class="title function_">esourceAsStream</span><span class="params">(<span class="string">&quot;mybatis-config.xml&quot;</span>)</span>);</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession1.getMapper(CarMapper.class);</span><br><span class="line"> <span class="type">Car</span> <span class="variable">car1</span> <span class="operator">=</span> mapper1.selectById(<span class="number">83L</span>);</span><br><span class="line"> System.out.println(car1);</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession1.getMapper(CarMapper.class);</span><br><span class="line"> <span class="type">Car</span> <span class="variable">car2</span> <span class="operator">=</span> mapper2.selectById(<span class="number">83L</span>);</span><br><span class="line"> System.out.println(car2);</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper3</span> <span class="operator">=</span> sqlSession2.getMapper(CarMapper.class);</span><br><span class="line"> <span class="type">Car</span> <span class="variable">car3</span> <span class="operator">=</span> mapper3.selectById(<span class="number">83L</span>);</span><br><span class="line"> System.out.println(car3);</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper4</span> <span class="operator">=</span> sqlSession2.getMapper(CarMapper.class);</span><br><span class="line"> <span class="type">Car</span> <span class="variable">car4</span> <span class="operator">=</span> mapper4.selectById(<span class="number">83L</span>);</span><br><span class="line"> System.out.println(car4);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果 ：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008185626009.png" alt="image-20221008185626009"></p><p>什么情况下不⾛缓存？ </p><blockquote><p>第⼀种：不同的SqlSession对象。 </p><p>第⼆种：查询条件变化了。 </p></blockquote><p>⼀级缓存失效情况包括两种： </p><ul><li>第⼀种：第⼀次查询和第⼆次查询之间，⼿动清空了⼀级缓存。 </li></ul><p><strong>清空一级缓存</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.clearCache(); </span><br></pre></td></tr></table></figure><ul><li>第⼆种：第⼀次查询和第⼆次查询之间，执⾏了增删改操作。【这个增删改和哪张表没有关系，只要 有insert delete update操作，⼀级缓存就失效。】</li></ul><h3 id="10-4-⼆级缓存"><a href="#10-4-⼆级缓存" class="headerlink" title="10.4 ⼆级缓存"></a>10.4 ⼆级缓存</h3><p>⼆级缓存的范围是SqlSessionFactory。 使⽤⼆级缓存需要具备以下⼏个条件：</p><ol><li><p><setting name="cacheEnabled" value="true"> 全局性地开启或关闭所有映射器配置⽂件中已配置的任何缓存。默认就是true，⽆需设置。 </p></li><li><p>在需要使⽤⼆级缓存的SqlMapper.xml⽂件中添加配置：<cache /></p></li><li><p>使⽤⼆级缓存的实体类对象必须是可序列化的，也就是必须实现java.io.Serializable接⼝ </p></li><li><p>SqlSession对象关闭或提交之后，⼀级缓存中的数据才会被写⼊到⼆级缓存当中。此时⼆级缓存才可⽤。 </p></li></ol><p>测试⼆级缓存：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession1.getMapper(CarMapper.class);</span><br><span class="line"> <span class="type">Car</span> <span class="variable">car1</span> <span class="operator">=</span> mapper1.selectById(<span class="number">83L</span>);</span><br><span class="line"> System.out.println(car1);</span><br><span class="line"> <span class="comment">// 关键⼀步</span></span><br><span class="line"> sqlSession1.close();</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(CarMapper.class);</span><br><span class="line"> <span class="type">Car</span> <span class="variable">car2</span> <span class="operator">=</span> mapper2.selectById(<span class="number">83L</span>);</span><br><span class="line"> System.out.println(car2); &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008190139922.png" alt="image-20221008190139922"></p><p>⼆级缓存的失效：只要两次查询之间出现了增删改操作。⼆级缓存就会失效。【⼀级缓存也会失效】 </p><p>⼆级缓存的相关配置</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008190213512.png" alt="image-20221008190213512" style="zoom:80%;" /></p><ol><li>eviction：指定从缓存中移除某个对象的淘汰算法。默认采⽤LRU策略。 </li></ol><p>a. LRU：Least Recently Used。最近最少使⽤。优先淘汰在间隔时间内使⽤频率最低的对象。(其 </p><p>实还有⼀种淘汰算法LFU，最不常⽤。) </p><p>b. FIFO：First In First Out。⼀种先进先出的数据缓存器。先进⼊⼆级缓存的对象最先被淘汰。 </p><p>c. SOFT：软引⽤。淘汰软引⽤指向的对象。具体算法和JVM的垃圾回收算法有关。 </p><p>d. WEAK：弱引⽤。淘汰弱引⽤指向的对象。具体算法和JVM的垃圾回收算法有关。 </p><ol><li>flushInterval： </li></ol><p>a. ⼆级缓存的刷新时间间隔。单位毫秒。如果没有设置。就代表不刷新缓存，只要内存⾜够⼤，⼀ </p><p>直会向⼆级缓存中缓存数据。除⾮执⾏了增删改。 </p><ol><li><p>readOnly：a. true：多条相同的sql语句执⾏之后返回的对象是共享的同⼀个。性能好。但是多线程并发可能 </p><p>会存在安全问题。 </p><p>b. false：多条相同的sql语句执⾏之后返回的对象是副本，调⽤了clone⽅法。性能⼀般。但安 </p><p>全。 </p></li><li><p>size：</p><p>a. 设置⼆级缓存中最多可存储的java对象数量。默认值1024。 </p></li></ol><h2 id="第十一章-MyBatis的逆向⼯程"><a href="#第十一章-MyBatis的逆向⼯程" class="headerlink" title="第十一章 MyBatis的逆向⼯程"></a>第十一章 MyBatis的逆向⼯程</h2><p>所谓的逆向⼯程是：根据数据库表逆向⽣成Java的pojo类，SqlMapper.xml⽂件，以及Mapper接⼝类 等。要完成这个⼯作，需要借助别⼈写好的逆向⼯程插件。</p><p>思考：使⽤这个插件的话，需要给这个插件配置哪些信息？ </p><p>● pojo类名、包名以及⽣成位置。 </p><p>● SqlMapper.xml⽂件名以及⽣成位置。 </p><p>● Mapper接⼝名以及⽣成位置。 </p><p>● 连接数据库的信息。 </p><p>● 指定哪些表参与逆向⼯程。 </p><p>● ……..</p><h3 id="11-1-逆向⼯程配置与⽣成"><a href="#11-1-逆向⼯程配置与⽣成" class="headerlink" title="11.1 逆向⼯程配置与⽣成"></a>11.1 逆向⼯程配置与⽣成</h3><h4 id="第⼀步：基础环境准备"><a href="#第⼀步：基础环境准备" class="headerlink" title="第⼀步：基础环境准备"></a>第⼀步：基础环境准备</h4><p>新建模块：mybatis-011-generator </p><p>打包⽅式：jar </p><h4 id="第⼆步：在pom中添加逆向⼯程插件"><a href="#第⼆步：在pom中添加逆向⼯程插件" class="headerlink" title="第⼆步：在pom中添加逆向⼯程插件"></a>第⼆步：在pom中添加逆向⼯程插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定制构建过程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--可配置多个插件--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--其中的⼀个插件：mybatis逆向⼯程插件--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--插件的GAV坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--允许覆盖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--插件的依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--mysql驱动依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第三步：配置generatorConfig-xml"><a href="#第三步：配置generatorConfig-xml" class="headerlink" title="第三步：配置generatorConfig.xml"></a>第三步：配置generatorConfig.xml</h4><p>该⽂件名必须叫做：generatorConfig.xml </p><p>该⽂件必须放在类的根路径下。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//E</span></span></span><br><span class="line"><span class="string"><span class="meta">N&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> targetRuntime有两个值：</span></span><br><span class="line"><span class="comment"> MyBatis3Simple：⽣成的是基础版，只有基本的增删改查。</span></span><br><span class="line"><span class="comment"> MyBatis3：⽣成的是增强版，除了基本的增删改查之外还有复杂的增删改查。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--防⽌⽣成重复代码--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersP</span></span></span><br><span class="line"><span class="string"><span class="tag">lugin&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--是否去掉⽣成⽇期--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--是否去除注释--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--连接数据库信息--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/powerno</span></span></span><br><span class="line"><span class="string"><span class="tag">de&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- ⽣成pojo包名和位置 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.powernode.mybatis.pojo&quot;</span> <span class="attr">tar</span></span></span><br><span class="line"><span class="tag"><span class="attr">getProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--是否开启⼦包--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--是否去除字段名的前后空⽩--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- ⽣成SQL映射⽂件的包名和位置 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.powernode.mybatis.mapper&quot;</span> <span class="attr">targ</span></span></span><br><span class="line"><span class="tag"><span class="attr">etProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--是否开启⼦包--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- ⽣成Mapper接⼝的包名和位置 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">javaClientGenerator</span></span></span><br><span class="line"><span class="tag"> <span class="attr">type</span>=<span class="string">&quot;xmlMapper&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">targetPackage</span>=<span class="string">&quot;com.powernode.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 表名和对应的实体类名--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_car&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Car&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第四步：运⾏插件"><a href="#第四步：运⾏插件" class="headerlink" title="第四步：运⾏插件"></a>第四步：运⾏插件</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008190626618.png" alt="image-20221008190626618"></p><h2 id="第十二章-MyBatis使⽤PageHelper"><a href="#第十二章-MyBatis使⽤PageHelper" class="headerlink" title="第十二章 MyBatis使⽤PageHelper"></a>第十二章 MyBatis使⽤PageHelper</h2><h3 id="12-1-limit分⻚"><a href="#12-1-limit分⻚" class="headerlink" title="12.1 limit分⻚"></a>12.1 limit分⻚</h3><p>mysql的limit后⾯两个数字： </p><p>第⼀个数字：startIndex（起始下标。下标从0开始。） </p><p>第⼆个数字：pageSize（每⻚显示的记录条数） </p><p>假设已知⻚码pageNum，还有每⻚显示的记录条数pageSize，第⼀个数字可以动态的获取吗？ </p><p>startIndex = (pageNum - 1) * pageSize </p><p>所以，标准通⽤的mysql分⻚SQL： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line"> tableName ......</span><br><span class="line">limit</span><br><span class="line"> (pageNum <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> pageSize, pageSize</span><br></pre></td></tr></table></figure><p><strong>在MyBatis中使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.mapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Car;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarMapper</span> &#123;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分⻚的⽅式获取Car列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startIndex ⻚码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 每⻚显示记录条数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> List&lt;Car&gt; <span class="title function_">selectAllByPage</span><span class="params">(<span class="meta">@Param(&quot;startIndex&quot;)</span> Integer startIndex, <span class="meta">@Param(&quot;pageSize&quot;)</span> Integer pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.powernode.mybatis.mapper.CarMapper&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line"> select * from t_car limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.mybatis.test;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.mapper.CarMapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.mybatis.pojo.Car;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageTest</span> &#123;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(CarMapper.class);</span><br><span class="line"> <span class="comment">// ⻚码</span></span><br><span class="line"> <span class="type">Integer</span> <span class="variable">pageNum</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"> <span class="comment">// 每⻚显示记录条数</span></span><br><span class="line"> <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"> <span class="comment">// 起始下标</span></span><br><span class="line"> <span class="type">Integer</span> <span class="variable">startIndex</span> <span class="operator">=</span> (pageNum - <span class="number">1</span>) * pageSize;</span><br><span class="line"> List&lt;Car&gt; cars = mapper.selectAllByPage(startIndex, pageSize);</span><br><span class="line"> cars.forEach(car -&gt; System.out.println(car));</span><br><span class="line"> sqlSession.commit();</span><br><span class="line"> sqlSession.close();</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure><p>执⾏结果：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20221008190927054.png" alt="image-20221008190927054"></p><h3 id="12-2-PageHelper插件"><a href="#12-2-PageHelper插件" class="headerlink" title="12.2  PageHelper插件"></a>12.2  PageHelper插件</h3><p>使⽤PageHelper插件进⾏分⻚，更加的便捷。</p><h4 id="第⼀步：引⼊依赖"><a href="#第⼀步：引⼊依赖" class="headerlink" title="第⼀步：引⼊依赖"></a>第⼀步：引⼊依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第⼆步：在mybatis-config-xml⽂件中配置插件"><a href="#第⼆步：在mybatis-config-xml⽂件中配置插件" class="headerlink" title="第⼆步：在mybatis-config.xml⽂件中配置插件"></a>第⼆步：在mybatis-config.xml⽂件中配置插件</h4><p>typeAliases标签下⾯进⾏配置： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第三步：编写Java代码"><a href="#第三步：编写Java代码" class="headerlink" title="第三步：编写Java代码"></a>第三步：编写Java代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line"> select * from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关键点：</p><ul><li>在查询语句之前开启分⻚功能。</li><li>在查询语句之后封装PageInfo对象。（PageInfo对象将来会存储到request域当中。在⻚⾯上展示。）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().b</span><br><span class="line"><span class="title function_">uild</span><span class="params">(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>)</span>);</span><br><span class="line"> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"> <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(CarMapper.class);</span><br><span class="line"> <span class="comment">// 开启分⻚</span></span><br><span class="line"> PageHelper.startPage(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"> <span class="comment">// 执⾏查询语句</span></span><br><span class="line"> List&lt;Car&gt; cars = mapper.selectAll();</span><br><span class="line"> <span class="comment">// 获取分⻚信息对象</span></span><br><span class="line"> PageInfo&lt;Car&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(cars, <span class="number">5</span>);</span><br><span class="line"> System.out.println(pageInfo); &#125;</span><br></pre></td></tr></table></figure><p>执⾏结果： </p><p>PageInfo{pageNum=2, pageSize=2, size=2, startRow=3, endRow=4, total=6, pages=3, </p><p>list=Page{count=true, pageNum=2, pageSize=2, startRow=2, endRow=4, total=6, pages=3, </p><p>reasonable=false, pageSizeZero=false}[Car{id=86, carNum=’1234’, brand=’丰⽥霸道’, </p><p>guidePrice=50.5, produceTime=’2020-10-11’, carType=’燃油⻋’}, Car{id=87, carNum=’1234’, </p><p>brand=’丰⽥霸道’, guidePrice=50.5, produceTime=’2020-10-11’, carType=’燃油⻋’}], prePage=1, </p><p>nextPage=3, isFirstPage=false, isLastPage=false, hasPreviousPage=true, hasNextPage=true, </p><p>navigatePages=5, navigateFirstPage=1, navigateLastPage=3, navigatepageNums=[1, 2, 3]} </p><p>对执⾏结果进⾏格式化：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PageInfo&#123;</span><br><span class="line"> pageNum=2, pageSize=2, size=2, startRow=3, endRow=4, total=6, pages=3,</span><br><span class="line"> list=Page&#123;count=true, pageNum=2, pageSize=2, startRow=2, endRow=4, total=</span><br><span class="line">6, pages=3, reasonable=false, pageSizeZero=false&#125;</span><br><span class="line"> [Car&#123;id=86, carNum=&#x27;1234&#x27;, brand=&#x27;丰⽥霸道&#x27;, guidePrice=50.5, produceTime</span><br><span class="line">=&#x27;2020-10-11&#x27;, carType=&#x27;燃油⻋&#x27;&#125;,</span><br><span class="line"> Car&#123;id=87, carNum=&#x27;1234&#x27;, brand=&#x27;丰⽥霸道&#x27;, guidePrice=50.5, produceTime</span><br><span class="line">=&#x27;2020-10-11&#x27;, carType=&#x27;燃油⻋&#x27;&#125;],</span><br><span class="line"> prePage=1, nextPage=3, isFirstPage=false, isLastPage=false, hasPreviousPa</span><br><span class="line">ge=true, hasNextPage=true,</span><br><span class="line"> navigatePages=5, navigateFirstPage=1, navigateLastPage=3, navigatepageNum</span><br><span class="line">s=[1, 2, 3]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis学习笔记&quot;&gt;&lt;a href=&quot;#MyBatis学习笔记&quot; class=&quot;headerlink&quot; title=&quot;MyBatis学习笔记&quot;&gt;&lt;/a&gt;MyBatis学习笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🏠个人主页：&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="开发必备框架" scheme="https://manamn.space/categories/%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="开发必备框架" scheme="https://manamn.space/tags/%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>代理模式你了解多少</title>
    <link href="https://manamn.space/2022/10/17/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/"/>
    <id>https://manamn.space/2022/10/17/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/</id>
    <published>2022-10-17T04:46:09.000Z</published>
    <updated>2022-10-17T13:29:51.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始</strong>  —————</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png" alt=""></p><h2 id="代理模式-1"><a href="#代理模式-1" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="代理模式：目标对象不可访问，通过代理对象增强功能访问。"><a href="#代理模式：目标对象不可访问，通过代理对象增强功能访问。" class="headerlink" title="代理模式：目标对象不可访问，通过代理对象增强功能访问。"></a>代理模式：目标对象不可访问，通过代理对象增强功能访问。</h3><blockquote><p>生活中：</p><p>房东                                  ====&gt;      目标对象</p><p>房屋中介                           ====&gt;      代理对象    </p><p>我们大家                           ====&gt;      客户端对象</p><p>服务生产商                        ====&gt;     目标对象</p><p>门店（旗舰店）                 ====&gt;     目标对象</p></blockquote><h3 id="什么是代理模式-？"><a href="#什么是代理模式-？" class="headerlink" title="什么是代理模式 ？"></a>什么是代理模式 ？</h3><p>​        代理模式是指，为其他对象提供一种代理以控制对这个对象的访问。在某些情况下， 一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户和目标对象之间起到中介的作用。</p><p>​        换句话说，使用代理对象，是为了在不修改目标对象的基础上，增强主业务逻辑。客户类真正的想要访问的对象是目标对象，但客户类真正可以访问的对象是代理对象。客户类对目标对象的访问是通过访问代理对象来实现的。当然，代理类与目标类要实现同一个接口。</p><blockquote><p>例如： 有 A，B，C 三个类， A 原来可以调用 C 类的方法， 现在因为某种原因 C 类不允许A 类调用其方法，但 B 类可以调用 C 类的方法。A 类通过 B 类调用 C 类的方法。这里 B 是 C的代理。 A 通过代理 B 访问 C。</p></blockquote><p><strong>原来的访问关系</strong>：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220710210608597.png" alt="image-20220710210608597"></p><blockquote><p>Window 系统的快捷方式也是一种代理模式。快捷方式代理的是真实的程序，双击快捷方式是启动它代表的程序。</p></blockquote><h3 id="代理模式的作用"><a href="#代理模式的作用" class="headerlink" title="代理模式的作用"></a>代理模式的作用</h3><ul><li>控制目标对象的访问</li><li>增强功能</li></ul><h3 id="代理模式的分类"><a href="#代理模式的分类" class="headerlink" title="代理模式的分类"></a>代理模式的分类</h3><ul><li><code>静态代理</code></li><li><code>动态代理又分为JDK动态代理和CGlib动态代理</code></li></ul><h3 id="代理模式的实现方式"><a href="#代理模式的实现方式" class="headerlink" title="代理模式的实现方式"></a>代理模式的实现方式</h3><ul><li>静态代理实现</li><li>动态代理的实现又分为JDK代理和CGlib动态代理。</li></ul><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="静态代理的特点"><a href="#静态代理的特点" class="headerlink" title="静态代理的特点"></a>静态代理的特点</h3><blockquote><p> 静态代理要求目标对象和代理对象实现同一个业务接口。代理对象中的核心功能是由目标对象来完成，代理对象负责增强功能。</p></blockquote><h3 id="静态代理的实现"><a href="#静态代理的实现" class="headerlink" title="静态代理的实现"></a>静态代理的实现</h3><blockquote><p><strong>需求：</strong><br>有个明星(目标对象)很大腕，档期很满，我们想约这个明星来学校表演。我们只能通过他的助理来约他，助理就是（代理对象）。具体的时间、地点、场合、费用都只能跟助理来谈。助理完全负责明星的所有行程。并且安排明星来表演。</p></blockquote><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220710210723708.png" alt="image-20220710210723708"></p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="1-定义业务接口"><a href="#1-定义业务接口" class="headerlink" title="1. 定义业务接口"></a>1. 定义业务接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">定义业务接口 Service（目标对象和代理对象都要实现的业务接口）。</span><br><span class="line">    <span class="keyword">package</span> com.manman.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 满满</span></span><br><span class="line"><span class="comment"> * createDate 2022/6/18 21:46</span></span><br><span class="line"><span class="comment"> * description : 测试绑定业务功能的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个唱歌的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-定义目标实现类对象"><a href="#2-定义目标实现类对象" class="headerlink" title="2. 定义目标实现类对象"></a>2. 定义目标实现类对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.manman.service.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 满满</span></span><br><span class="line"><span class="comment"> * createDate 2022/6/18 21:45</span></span><br><span class="line"><span class="comment"> * description :</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperStarLiu</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是刘德华,我正在唱歌........ &quot;</span>  );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-定义代理实现类功能"><a href="#3-定义代理实现类功能" class="headerlink" title="3. 定义代理实现类功能"></a>3. 定义代理实现类功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.manman.service.Service;</span><br><span class="line"><span class="keyword">import</span> com.manman.service.impl.SuperStarLiu;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 满满</span></span><br><span class="line"><span class="comment"> * createDate 2022/6/18 21:46</span></span><br><span class="line"><span class="comment"> * description :</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是华仔的助理,正在预定时间.....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;我是华仔的助理,正在预定场地.....&quot;</span>);</span><br><span class="line"><span class="comment">//        创建刘德华对象</span></span><br><span class="line">        <span class="type">SuperStarLiu</span> <span class="variable">liu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuperStarLiu</span>();</span><br><span class="line">        liu.sing();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是华仔的助理,正在结算费用......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-测试类"><a href="#4-测试类" class="headerlink" title="4. 测试类"></a>4. 测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.manman.Agent;</span><br><span class="line"><span class="keyword">import</span> com.manman.service.Service;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 满满</span></span><br><span class="line"><span class="comment"> * createDate 2022/6/18 21:44</span></span><br><span class="line"><span class="comment"> * description :</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 用于测试 : 静态代理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Service</span> <span class="variable">agent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Agent</span>();</span><br><span class="line">        agent.sing();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-运行结果"><a href="#5-运行结果" class="headerlink" title="5. 运行结果"></a>5. 运行结果</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220710210702986.png" alt="image-20220710210702986"></p><h4 id="6-代理功能改造"><a href="#6-代理功能改造" class="headerlink" title="6. 代理功能改造"></a>6. 代理功能改造</h4><p>现在的代理类只能代理一个目标对象,不够灵活.如果需要代理多个目标对象,是可以使用面向接口编程.</p><p>  <strong>面向接口编程的要点:</strong></p><blockquote><p>A. 类中的成员变量设计为接口</p><p>B. 方法的参数设计为接口</p><p>C. 方法的返回值设计为接口</p><p>D. 调用时接口指向实现类</p></blockquote><p>  <strong>切记:上了接口就是上灵活.</strong></p><p><strong>改造后Agent</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.manman.service.Service;</span><br><span class="line"><span class="keyword">import</span> com.manman.service.impl.SuperStarLiu;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 满满</span></span><br><span class="line"><span class="comment"> * createDate 2022/6/18 21:46</span></span><br><span class="line"><span class="comment"> * description :</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"><span class="comment">//    将成员设置为接口类型</span></span><br><span class="line">    <span class="keyword">public</span> Service target;</span><br><span class="line"><span class="comment">//  提供有参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Agent</span><span class="params">(Service target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在预定时间.....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;正在预定场地.....&quot;</span>);</span><br><span class="line"><span class="comment">/*        创建刘德华对象</span></span><br><span class="line"><span class="comment">        SuperStarLiu liu = new SuperStarLiu();</span></span><br><span class="line"><span class="comment">        liu.sing();*/</span></span><br><span class="line">        target.sing();</span><br><span class="line">        System.out.println(<span class="string">&quot;正在结算费用......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态代理的缺陷"><a href="#静态代理的缺陷" class="headerlink" title="静态代理的缺陷"></a>静态代理的缺陷</h3><h4 id="代理复杂，难于管理"><a href="#代理复杂，难于管理" class="headerlink" title="代理复杂，难于管理"></a>代理复杂，难于管理</h4><blockquote><p>代理类和目标类实现了相同的接口，每个代理都需要实现目标的方法，这样就出现了大量的代码重复。如果接口增加了一个新的业务方法，除了所有目标类要实现这个方法以外，所有的代理类也需要实现这个方法。增加了代码维护的复杂度。</p></blockquote><h3 id="代理类依赖于目标类，代理类过多"><a href="#代理类依赖于目标类，代理类过多" class="headerlink" title="代理类依赖于目标类，代理类过多"></a>代理类依赖于目标类，代理类过多</h3><blockquote><p>代理类只服务于一种类型的目标类，如果要服务多个类型。势必要为每一种目标类都进行代理， 静态代理在程序规模稍大时就无法胜任了，代理类数量过多</p></blockquote><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><blockquote><p>动态代理是指代理类对象在程序运行时由 JVM 根据反射机制动态生成的。动态代理不需要定义代理类的.java 源文件。动态代理其实就是 jdk 运行期间，动态创建 class 字节码并加载到 JVM。动态代理的实现方式常用的有两种：使用 <code>JDK 动态代理</code>和 <code>CGLIB 动态代理</code>。</p></blockquote><p><strong>代理运行对象在程序运行的过程中动态的在内存进行构建，可以灵活的进行业务功能的切换。</strong></p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><blockquote><p>JDK动态代理是基于 Java 的反射机制实现的。使用 JDK中接口和类实现代理对象的动态创建。JDK的动态代理要求目标对象必须实现接口，而代理对象不必实现业务接口，这是 java 设计上的要求。从 jdk1.3 以来，java 语言通过 java.lang.reflect 包提供三个类和接口支持代理模式，它们分别Proxy, Method和 InvocationHandler。</p></blockquote><ul><li>目标对象必须实现业务接口</li><li>JDK代理代理对象不需要实现业务接口</li><li>动态代理的对象在程序运行中不存在</li><li>动态代理灵活的进行业务功能的切换</li></ul><h4 id="Proxy类"><a href="#Proxy类" class="headerlink" title="Proxy类"></a>Proxy类</h4><blockquote><p>通过JDK的java.lang.reflect.Proxy类实现动态代理，会使用其静态方法newProxyInstance()，依据目标对象、业务接口及调用处理器三者，自动生成一个动态代理对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">newProxyInstance</span> <span class="params">( ClassLoader loader, Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">InvocationHandler handler)</span></span><br><span class="line">loader：目标类的类加载器，通过目标对象的反射可获取</span><br><span class="line">interfaces：目标类实现的接口数组，通过目标对象的反射可获取</span><br><span class="line">handler：调用处理器。</span><br></pre></td></tr></table></figure><h4 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h4><blockquote><p>invoke()方法的第二个参数为 Method 类对象，该类有一个方法也叫 invoke()，可以调用目标方法。这两个 invoke()方法，虽然同名，但无关。</p></blockquote><ul><li>反射用的类，用来进行目标的对象的方法的反射调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span> <span class="params">( Object obj, Object... args)</span></span><br><span class="line">obj：表示目标对象</span><br><span class="line">args：表示目标方法参数，就是其上一层 invoke 方法的第三个参数</span><br><span class="line">该方法的作用是：调用执行 obj 对象所属类的方法，这个方法由其调用者 Method 对象确定。在代码中，一般的写法为</span><br><span class="line">method.invoke(target, args);</span><br><span class="line">其中，method 为上一层 invoke 方法的第二个参数。这样，即可调用了目标类的目标方法。</span><br></pre></td></tr></table></figure><h4 id="IocationHandler接口"><a href="#IocationHandler接口" class="headerlink" title="IocationHandler接口"></a>IocationHandler接口</h4><blockquote><p>InvocationHandler 接口叫做调用处理器，负责完成调用目标方法，并增强功能。通过代理对象执行目标接口中的方法 ， 会把方法的调用分派给调用处理器(InvocationHandler)的实现类，执行实现类中的 invoke()方法，我们需要把功能代理写在 invoke（）方法中 。此接口中只有一个方法。</p></blockquote><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220710210804260.png" alt="image-20220710210804260"></p><blockquote><p>在 invoke 方法中可以截取对目标方法的调用。在这里进行功能增强。Java 的动态代理是建立在反射机制之上的。实现了 InvocationHandler 接口的类用于加强目标类的主业务逻辑。这个接口中有一个方法 invoke()，具体加强的代码逻辑就是定义在该方法中的。通过代理对象执行接口中的方法时，会自动调用 invoke()方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">invoke()方法的介绍如下：</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span> <span class="params">( Object proxy, Method method, Object[] args)</span></span><br><span class="line">proxy：代表生成的代理对象</span><br><span class="line">method：代表目标方法</span><br><span class="line">args：代表目标方法的参数</span><br><span class="line">第一个参数 proxy 是 jdk 在运行时赋值的，在方法中直接使用，第二个参数后面介绍，</span><br><span class="line">第三个参数是方法执行的参数， 这三个参数都是 jdk 运行时赋值的，无需程序员给出。</span><br></pre></td></tr></table></figure><h4 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li>代理对象不需要实现接口。</li><li>代理对象的生成是利用JDK中的proxy类，动态的在内存中构建代理对象。</li></ol><ol><li><p>代码实现接口</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220710210817906.png" alt="image-20220710210817906"></p></li><li><p>ProxyFactory.java代理实例生成工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.manman.service.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 满满</span></span><br><span class="line"><span class="comment"> * createDate 2022/6/19 11:34</span></span><br><span class="line"><span class="comment"> * description : 代理工厂演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//任何的代理对象，都要清楚目标对象，在此得设置一个目标对象，</span></span><br><span class="line">        <span class="keyword">private</span> Service superStar;</span><br><span class="line">        <span class="comment">//传入目标对象</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Service superStar)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.superStar=superStar;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//给目标对象生成代理实例</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getProxyInstance</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Proxy.newProxyInstance(</span><br><span class="line">                    <span class="comment">//指定当前目标对象，使用类加载器获得</span></span><br><span class="line">                    superStar.getClass().getClassLoader(),</span><br><span class="line">                    <span class="comment">//获得目标对象实现的所有接口</span></span><br><span class="line">                    superStar.getClass().getInterfaces(),</span><br><span class="line">                    <span class="comment">//处理代理实例上的方法并返回调用结果</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(</span></span><br><span class="line"><span class="params">                                //代理对象的实例</span></span><br><span class="line"><span class="params">                                Object proxy,</span></span><br><span class="line"><span class="params">                                //代理的目标对象的实现方法</span></span><br><span class="line"><span class="params">                                Method method,</span></span><br><span class="line"><span class="params">                                //代理的目标对象实现方法的参数</span></span><br><span class="line"><span class="params">                                Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;预定场地..........&quot;</span>);</span><br><span class="line">                            System.out.println(<span class="string">&quot;预定时间..........&quot;</span>);</span><br><span class="line">                            <span class="comment">//目标对象执行自己的方法</span></span><br><span class="line">                            <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> method.invoke(superStar, args);</span><br><span class="line">                            System.out.println(<span class="string">&quot;结帐走人.........&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span> returnValue;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                        <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.manman.proxy.ProxyFactory;</span><br><span class="line"><span class="keyword">import</span> com.manman.service.Service;</span><br><span class="line"><span class="keyword">import</span> com.manman.service.impl.SuperStarZhou;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 满满</span></span><br><span class="line"><span class="comment"> * createDate 2022/6/19 11:33</span></span><br><span class="line"><span class="comment"> * description : JDK动态代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 用于测试 : JDK动态代理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        创建代理工厂对象</span></span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(<span class="keyword">new</span> <span class="title class_">SuperStarZhou</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Service</span> <span class="variable">agent</span> <span class="operator">=</span> (Service) factory.getProxyInstance();</span><br><span class="line">        agent.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li>结果截图</li></ol><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220710210828899.png" alt="image-20220710210828899"></p><blockquote><p>注意：JDK动态代理中，代理对象不需要实现接口，但是目标对象一定要实现接口，否则不能用JDK动态代理。</p></blockquote><h3 id="CGlib（Code-Generation-Library）动态代理"><a href="#CGlib（Code-Generation-Library）动态代理" class="headerlink" title="CGlib（Code Generation Library）动态代理"></a>CGlib（Code Generation Library）动态代理</h3><ul><li>又称为子类通过动态的的在内存中构建子类对象，重写父类方法进行代理功能的增强。</li></ul><blockquote><p>想要功能扩展，但目标对象没有实现接口，怎样功能扩展？</p><p>解决方案：<strong>子类的方式</strong></p><p>​    Class subclass  extends  UserDao{}</p><p>以子类的方式实现(cglib代理)，在内存中构建一个子类对象从而实现对目标对象功能的扩展。</p></blockquote><h3 id="CGlib动态代理的特点"><a href="#CGlib动态代理的特点" class="headerlink" title="CGlib动态代理的特点"></a>CGlib动态代理的特点</h3><ol><li>JDK动态代理有一个限制，就是使用动态代理的目标对象必须实现一个或多个接口。如果想代理没有实现类的接口，就可以使用CGLIB进行代理。</li><li>CGLIB是一个强大的高性能的代码生成包，它可以在运行期扩展Java类与实现Java接口。它广泛的被许多AOP的框架使用，例如Spring AOP和dynaop，为他们提供方法的interception。 </li><li><code>CGLIB包的底层是通过使用一个小而快的字节码处理框架ASM，来转换字节码并生成新的类</code>。不鼓励直接使用ASM，因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉。</li></ol><h3 id="CGLIB的实现步骤"><a href="#CGLIB的实现步骤" class="headerlink" title="CGLIB的实现步骤"></a>CGLIB的实现步骤</h3><ol><li>需要spring-core-5.2.5.jar依赖即可。</li><li>引入功能包后，就可以在内存中动态构建子类</li><li>被代理的类不能为final， 否则报错。</li><li>目标对象的方法如果为final/static, 那么就不会被拦截，即不会执行目标对象额外的业务方法。</li><li>代码实现结构</li></ol><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220710210840937.png" alt="image-20220710210840937"></p><p>​    <strong>ProxyFactory.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"><span class="comment">//目标对象</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"><span class="comment">//传入目标对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.target=target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Cglib采用底层的字节码技术，在子类中采用方法拦截的技术，拦截父类指定方法的调用，并顺势植入代理功能的代码</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, Method method, Object[] arg2, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">//代理对象的功能</span></span><br><span class="line">System.out.println(<span class="string">&quot;预定场地............&quot;</span>);</span><br><span class="line"><span class="comment">//调用目标对象的方法</span></span><br><span class="line">Object returnValue=method.invoke(target, arg2);</span><br><span class="line"><span class="comment">//代理对象的功能</span></span><br><span class="line">System.out.println(<span class="string">&quot;结帐走人............&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getProxyInstance</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//1.使用工具类</span></span><br><span class="line">Enhancer en=<span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line"><span class="comment">//2.设置父类</span></span><br><span class="line">en.setSuperclass(target.getClass());</span><br><span class="line"><span class="comment">//3.设置回调函数</span></span><br><span class="line">en.setCallback(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//4.创建子类（代理）对象</span></span><br><span class="line"><span class="keyword">return</span> en.create();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCglibProxy</span><span class="params">()</span>&#123;</span><br><span class="line">SuperStar superStar=<span class="keyword">new</span> <span class="title class_">SuperStar</span>();</span><br><span class="line">System.out.println(superStar.getClass());</span><br><span class="line">SuperStar proxy=(SuperStar) <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(superStar).getProxyInstance();</span><br><span class="line">System.out.println(proxy.getClass());</span><br><span class="line">proxy.sing();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><p><strong>面向接口编程的四大注意事项：</strong></p><ul><li>类中的成员方法设置为接口</li><li>方法的参数设置为接口</li><li>方法的返回值设置为接口</li><li>使用时接口指向实现类</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220710210957447.png" alt="image-20220710210957447" style="zoom:200%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🏠个人主页：&lt;a href=&quot;https://blog.csdn.net/qq_58608526</summary>
      
    
    
    
    <category term="开发必备框架" scheme="https://manamn.space/categories/%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="开发必备框架" scheme="https://manamn.space/tags/%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Maven学习笔记</title>
    <link href="https://manamn.space/2022/10/17/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://manamn.space/2022/10/17/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-17T04:45:25.000Z</published>
    <updated>2022-10-17T13:33:49.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven学习笔记"><a href="#Maven学习笔记" class="headerlink" title="Maven学习笔记"></a>Maven学习笔记</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始</strong>  —————</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.png" alt=""></p><h1 id="第1章-为什么要使用Maven"><a href="#第1章-为什么要使用Maven" class="headerlink" title="第1章 为什么要使用Maven"></a>第1章 为什么要使用Maven</h1><p>之所以会提出这个问题，是因为即使不使用Maven我们仍然可以进行B/S结构项目的开发。</p><p>从表述层、业务逻辑层到持久化层再到数据库都有成熟的解决方案——不使用Maven我们一样可以开发项目啊？</p><p>所以我们有必要通过企业开发中的实际需求来看一看哪些方面是我们现有技术的不足。</p><h2 id="1-1-获取第三方jar包"><a href="#1-1-获取第三方jar包" class="headerlink" title="1.1 获取第三方jar包"></a>1.1 获取第三方jar包</h2><p>开发中需要使用到的jar包种类繁多，获取jar包的方式都不尽相同。为了查找一个jar包找遍互联网，身心俱疲。不仅如此，费劲心血找到的jar包里有的时候并没有你需要的那个类，又或者有同名的类没有你要的方法——以不规范的方式获取的jar包也往往是不规范的。</p><p>使用Maven我们可以享受到一个完全规范的jar包管理系统。你只需要在你的项目中以坐标的形式依赖一个jar包，Maven就会自动去中央仓库进行下载，并同时下载这个jar包所依赖的其他jar包—-规范、完整、准确！一次性解决所有问题！这也就是我们选择Maven的原因之一吧。</p><p>​    </p><h2 id="1-2-添加第三方jar包"><a href="#1-2-添加第三方jar包" class="headerlink" title="1.2 添加第三方jar包"></a>1.2 添加第三方jar包</h2><p>在今天开发领域，有大量的第三方框架和工具可以供我们使用。要使用这些jar包最简单的方法就是复制粘贴到WEB-INF目录下的lib目录下。但是这会导致每次创建一个新的工程就需要将jar包重复复制到lib目录下，从而造成工作区中存在大量重复的文件。</p><blockquote><p>而使用Maven后每个jar包都会在Maven本地仓库中保存一份，需要jar包的工程只需要维护一个文本形式的jar包的引用—-我们称之为 <code>坐标</code>。不仅极大的节约了我们电脑的存储空间，让项目更轻巧，更避免了重复文件太多而造成的混乱。</p></blockquote><h2 id="1-3-jar包之间的依赖关系"><a href="#1-3-jar包之间的依赖关系" class="headerlink" title="1.3 jar包之间的依赖关系"></a>1.3 jar包之间的依赖关系</h2><p>jar包往往不是孤立存在的，很多jar包都需要在其他jar包的支持下才能够正常工作，我们称之为jar包之间的依赖关系。最典型的例子是：commons-fileupload-1.3.jar依赖于commons-io-2.0.1.jar，如果没有IO包，FileUpload包就不能正常工作。</p><p>那么问题来了，你知道你所使用的所有jar包的依赖关系吗？当你拿到一个新的从未使用过的jar包，你如何得知他需要哪些jar包的支持呢？如果不了解这个情况，导入的jar包不够，那么现有的程序将不能正常工作。再进一步，当你的项目中需要用到上百个jar包时，你还会人为的，手工的逐一确认它们依赖的其他jar包吗？这简直是不可想象的</p><blockquote><p>而引入Maven后，Maven就可以替代我们自动将当前的jar包所依赖的其他所有jar包全部导进来，不需要我们自己再导了，节约了我们大量的时间和精力。用实际例子来说明就是：通过Maven导入commons-fileupload-1.3.jar后，commons-io-2.0.1.jar会被自动导入，程序员不必了解这个依赖关系。</p></blockquote><h2 id="1-4-处理jar包之间的冲突"><a href="#1-4-处理jar包之间的冲突" class="headerlink" title="1.4 处理jar包之间的冲突"></a>1.4 处理jar包之间的冲突</h2><p>上一点说的是jar包不足项目无法正常工作，但其实有的时候jar包多了项目仍然无法正常工作，这就是jar包之间的冲突。</p><p>举个例子：我们现在有三个工程MakeFriend、HelloFriend、和Hello。MakeFriend依赖HelloFriend，HelloFriend依赖Hello。而Hello依赖log4j.1.2.17.jar，HelloFriend依赖log4j.1.2.14.jar。如下图所示：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917154032704.png" alt="image-20220917154032704"></p><p>那么MakeFriend工程的运行时环境中该导入log4j.1.2.14.jar呢还是log4j.1.2.17.jar呢？</p><p>这样的问题一个两个还可以手工解决，但如果系统中存在几十上百的jar包，他们之间的依赖关系会非常复杂，几乎不可能手工实现依赖关系的梳理。</p><p><strong>使用Maven就可以自动的处理jar包的冲突问题。</strong>因为Maven中内置了两条依赖原则：</p><blockquote><p>最短路径者优先和先声明者优先，上述问题MakeFriend工程会自动使用log4j.1.2.14.jar。</p></blockquote><h2 id="1-5-将项目拆分为多个工程模块"><a href="#1-5-将项目拆分为多个工程模块" class="headerlink" title="1.5 将项目拆分为多个工程模块"></a>1.5 将项目拆分为多个工程模块</h2><p>随着JavaEE项目的规模越来越庞大，开发团队的规模也与日俱增。一个项目上千人的团队持续开发很多年对于JavaEE项目来说再正常不过。那么我们想象一下：几百上千的人开发的项目是同一个Web工程。那么架构师、项目经理该如何划分项目的模块、如何分工呢？这么大的项目已经不可能通过package结构来划分模块，必须将项目拆分成多个工程协同开发。多个模块工程中有的是Java工程，有的是Web工程。</p><p>那么工程拆分后又如何进行互相调用和访问呢？这就需要用到Maven的依赖管理机制。大家请看调查项目拆分的情况：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917154313569.png" alt="image-20220917154313569"></p><p>下层模块依赖上层，所以上层模块中定义的API都可以为下层所调用和访问。</p><h2 id="1-6-实现项目的分布式部署"><a href="#1-6-实现项目的分布式部署" class="headerlink" title="1.6 实现项目的分布式部署"></a>1.6 实现项目的分布式部署</h2><p>在实际生产环境中，项目规模增加到一定程度后，可能每个模块都需要运行在独立的服务器上，我们称之为分布式部署，这里同样需要用到Maven。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps49.jpg" alt="img"></p><h1 id="第2章-Maven是什么-？"><a href="#第2章-Maven是什么-？" class="headerlink" title="第2章 Maven是什么 ？"></a>第2章 Maven是什么 ？</h1><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps50.jpg" alt="img"></p><p>如果上面的描述能够使你认识到使用Maven是多么的重要，我们下面就来介绍一下Maven是什么</p><h2 id="2-1-自动化构建"><a href="#2-1-自动化构建" class="headerlink" title="2.1 自动化构建"></a>2.1 自动化构建</h2><p>1) Maven这个单词的本意是：专家，内行。读音是[‘meɪv(ə)n]或[‘mevn]，不要读作“妈文”。</p><p>2) Maven是一款自动化构建工具，专注服务于Java平台的项目构建和依赖管理。在JavaEE开发的历史上构建工具的发展也经历了一系列的演化和变迁：</p><p>Make→Ant→Maven→Gradle→其他……</p><h2 id="2-2-构建的概念"><a href="#2-2-构建的概念" class="headerlink" title="2.2 构建的概念"></a>2.2 构建的概念</h2><p>1) 构建并不是创建，创建一个工程并不等于构建一个项目。<strong>构建是一个过程，</strong> 就是以我们编写的Java代码、框架配置文件、国际化等其他资源文件、JSP页面和图片等静态资源作为“<strong>原材料</strong>，去生产<strong>出一个可以运行的</strong>项目的过程。</p><p>那么项目构建的全过程中都包含哪些环节呢？</p><h2 id="2-3-构建环节"><a href="#2-3-构建环节" class="headerlink" title="2.3 构建环节"></a>2.3 构建环节</h2><p>1) 清理：删除以前的编译结果，为重新编译做好准备。</p><p>2) 编译：将Java源程序编译为字节码文件。</p><p>3) 测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。</p><p>4) 报告：在每一次测试后以标准的格式记录和展示测试结果。</p><p>5) 打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对应war包。</p><p>6) 安装：在Maven环境下特指将打包的结果——jar包或war包安装到本地仓库中。</p><p>7) 部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps51.jpg" alt="img"> </p><h1 id="第3章-Maven如何使用-？"><a href="#第3章-Maven如何使用-？" class="headerlink" title="第3章  Maven如何使用 ？"></a>第3章  Maven如何使用 ？</h1><p>在这一节中，我们来看看Maven核心程序的安装和本地仓库的必要设置。然后我们就可以编写第一个Maven程序了。</p><h2 id="3-1-安装Maven核心程序"><a href="#3-1-安装Maven核心程序" class="headerlink" title="3.1 安装Maven核心程序"></a>3.1 安装Maven核心程序</h2><p>1) 下载地址：<a href="http://maven.apache.org/">http://maven.apache.org/</a></p><p>2) 检查JAVA_HOME环境变量。Maven是使用Java开发的，所以必须知道当前系统环境中JDK的安装目录。</p><p>C:\Users\lemon&gt;echo %JAVA_HOME%D:\Java\jdk1.8.0_111</p><p>1) 解压Maven的核心程序。</p><p>将apache-maven-3.8.4-bin.zip解压到一个<strong>非中文无空格</strong>的目录下。例如：</p><p>D:\apache-maven-3.6.4</p><p>2) 配置环境变量。</p><div class="table-container"><table><thead><tr><th>MAVEN_HOME</th></tr></thead><tbody><tr><td>D:\apache-maven-3.6.4</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>path</th></tr></thead><tbody><tr><td>%MAVEN_HOME%\bin</td></tr></tbody></table></div><p>3) ④查看Maven版本信息验证安装是否正确</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917154952892.png" alt="image-20220917154952892"></p><h2 id="3-2-第一个Maven程序"><a href="#3-2-第一个Maven程序" class="headerlink" title="3.2 第一个Maven程序"></a>3.2 第一个Maven程序</h2><h3 id="3-2-1-Maven约定的目录结构以及说明"><a href="#3-2-1-Maven约定的目录结构以及说明" class="headerlink" title="3.2.1 Maven约定的目录结构以及说明"></a>3.2.1 Maven约定的目录结构以及说明</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917155152890.png" alt="image-20220917155152890"></p><blockquote><p>main目录用于存放主程序。</p><p>test目录用于存放测试程序。</p><p>java目录用于存放源代码文件。</p><p>resources目录用于存放配置文件和资源文件。</p></blockquote><h3 id="3-2-3-通过命令行的方式运行Maven程序"><a href="#3-2-3-通过命令行的方式运行Maven程序" class="headerlink" title="3.2.3 通过命令行的方式运行Maven程序"></a>3.2.3 通过命令行的方式运行Maven程序</h3><p>1) 在电脑的任意位置创建Hello目录（文件夹）</p><p>2) 在Hello目录中创建src目录和pom.xml文件</p><p>3) 在src目录中创建main和test目录</p><p>4) 在main和test目录中分别创建java和resources目录</p><p>5) 将以下内容复制到pom.xml文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.manman.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6) 编写主程序</p><p>在src/main/java目录下新建文件Hello.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span>+name+<span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7) 编写测试程序</p><p>在/src/test/java目录下新建测试文件HelloTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">maven</span> <span class="operator">=</span> hello.sayHello(<span class="string">&quot;Maven&quot;</span>);</span><br><span class="line">        System.out.println(maven);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8) 运行以下常用的Maven命令</p><p>打开cmd命令行，进入Hello项目根目录(pom.xml文件所在目录)执行mvn compile命令，查看根目录变化cmd 中继续录入mvn clean命令，然后再次查看根目录变化cmd 中录入 mvn  compile命令, 查看根目录变化cmd 中录入 mvn  test-compile命令， 查看target目录的变化cmd 中录入 mvn  test命令，查看target目录变化cmd 中录入 mvn  package命令,查看target目录变化cmd 中录入 mvn  install命令， 查看本地仓库的目录变化</p><blockquote><p>注意：运行Maven命令时一定要进入pom.xml文件所在的目录！</p></blockquote><h2 id="3-3-在IDEA中使用Maven"><a href="#3-3-在IDEA中使用Maven" class="headerlink" title="3.3 在IDEA中使用Maven"></a>3.3 在IDEA中使用Maven</h2><h3 id="3-3-1-在IDEA中配置Maven"><a href="#3-3-1-在IDEA中配置Maven" class="headerlink" title="3.3.1 在IDEA中配置Maven"></a>3.3.1 在IDEA中配置Maven</h3><p>dea中也自带Maven插件，而且我们也可以给自带的Maven插件进行配置，所以我们可以使用自带的Maven，也可以使用我们安装的Maven核心程序</p><p>1) 配置自带的Maven插件</p><p>1) Idea自带的Maven在Idea的安装目录的plugins目录中</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps52.jpg" alt="img"> </p><p>2) 在自带的Maven里配置了本地仓库之后打开Idea之后会发现本地仓库自动变成了我们设置的仓库</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps53.jpg" alt="img"> </p><p>3) 设置Maven自动导包</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps54.jpg" alt="img"> </p><p>2) 配置我们自己安装的Maven</p><p>1) 点击工具栏中的Settings</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps55.jpg" alt="img"> </p><p>2) 点击OK保存即可</p><h4 id="3-4-2在Idea中创建Maven项目"><a href="#3-4-2在Idea中创建Maven项目" class="headerlink" title="3.4.2在Idea中创建Maven项目"></a>3.4.2在Idea中创建Maven项目</h4><p>1) 点击File→New→Module…（如果之前没有Project选Project）→Maven</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps56.jpg" alt="img"> </p><p>2) 点击Next，配置要继承的模块（如果直接创建的是Project不存在这一项）、坐标（GAV）、路径。不同的Idea版本可能有所差别，我使用的是2019.3.3的版本</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps57.jpg" alt="img"> </p><p>3) 点击Finish即可创建成功</p><p>4) 创建完工程之后在settings→Build，Execusion，Development→Compiler→Java Compiler中发现默认的JDK的编译版本是1.5，在Maven的核心配置文件settings.xml文件中添加以下配置将编译版本改为1.8，重启Idea即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5) 配置Maven的核心配置文件pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6) 编写主代码</p><p>在src/<strong>main</strong>/java目录下新建文件Hello.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atmanman.maven;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span>+name+<span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7) 编写测试代码</p><p>​    在/src/<strong>test</strong>/java目录下新建测试文件HelloTest.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.atmanman.maven;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class HelloTest &#123;</span><br></pre></td></tr></table></figure><p>8) 使用Maven的方式运行Maven工程</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps58.jpg" alt="img"> </p><h4 id="3-4-3在Idea中导入Maven项目"><a href="#3-4-3在Idea中导入Maven项目" class="headerlink" title="3.4.3在Idea中导入Maven项目"></a>3.4.3在Idea中导入Maven项目</h4><p>1) 点击Project Structure</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps59.jpg" alt="img"> </p><p>2) 点击Modules→➕→Import Module</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps60.jpg" alt="img"> </p><p>3) 找到项目所在的位置</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps61.jpg" alt="img"> </p><p>4) 选择Import module from external model（从外部模型导入模块）→Maven→Finish</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps62.jpg" alt="img"></p><h2 id="3-4-Maven的联网问题"><a href="#3-4-Maven的联网问题" class="headerlink" title="3.4 Maven的联网问题"></a>3.4 Maven的联网问题</h2><p>1) 配置本地仓库</p><p>1) Maven的核心程序并不包含具体功能，仅负责宏观调度。具体功能由插件来完成。Maven核心程序会到本地仓库中查找插件。如果本地仓库中没有就会从远程中央仓库下载。此时如果不能上网则无法执行Maven的具体功能。为了解决这个问题，我们可以将Maven的本地仓库指向一个在联网情况下下载好的目录。</p><p>2) Maven默认的本地仓库：~.m2\repository目录。</p><p>Tips：~表示当前用户的家目录。</p><p>3) Maven的核心配置文件位置：</p><p>解压目录D:\apache-maven-3.6.3\conf\settings.xml</p><p>4) 设置方式</p><div class="table-container"><table><thead><tr><th><localRepository>以及准备好的仓库位置</localRepository></th></tr></thead><tbody><tr><td><localRepository>D:\LocalRepository</localRepository></td></tr></tbody></table></div><p>5) 为了以后下载jar包方便，配置阿里云镜像</p><p>将以下标签配置到<mirrors></mirrors>标签里面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第4章-Maven的核心概念"><a href="#第4章-Maven的核心概念" class="headerlink" title="第4章 Maven的核心概念"></a>第4章 Maven的核心概念</h1><h2 id="4-1-核心概念"><a href="#4-1-核心概念" class="headerlink" title="4.1 核心概念"></a>4.1 核心概念</h2><p>1) POM</p><p>2) 约定的目录结构</p><p>3) 插件和目标</p><p>4) 生命周期</p><p>5) 仓库</p><p>6) 坐标</p><p>7) 依赖</p><p>8) 继承</p><p>9) 聚合</p><h2 id="4-2-POM"><a href="#4-2-POM" class="headerlink" title="4.2 POM"></a>4.2 POM</h2><p>Project Object Model：项目对象模型。将Java工程的相关信息封装为对象作为便于操作和管理的模型。Maven工程的核心配置。可以说学习Maven就是学习pom.xml文件中的配置。</p><h2 id="4-3-约定的目录结构"><a href="#4-3-约定的目录结构" class="headerlink" title="4.3 约定的目录结构"></a>4.3 约定的目录结构</h2><p>现在JavaEE开发领域普遍认同一个观点：约定&gt;配置&gt;编码。意思就是能用配置解决的问题就不编码，能基于约定的就不进行配置。而Maven正是因为指定了特定文件保存的目录才能够对我们的Java工程进行自动化构建。</p><h2 id="4-4-插件和目标"><a href="#4-4-插件和目标" class="headerlink" title="4.4 插件和目标"></a>4.4 插件和目标</h2><p>1) Maven的核心仅仅定义了抽象的生命周期，具体的任务都是交由插件完成的。</p><p>2) 每个插件都能实现多个功能，每个功能就是一个插件目标。</p><p>3) Maven的生命周期与插件目标相互绑定，以完成某个具体的构建任务。</p><p>例如：compile就是插件maven-compiler-plugin的一个功能；pre-clean是插件maven-clean-plugin的一个目标。</p><h2 id="4-5-生命周期"><a href="#4-5-生命周期" class="headerlink" title="4.5 生命周期"></a>4.5 生命周期</h2><p>1) 什么是Maven的生命周期？</p><p>Maven生命周期定义了各个构建环节的执行顺序，有了这个清单，Maven就可以自动化的执行构建命令了。</p><p>Maven有三套相互独立的生命周期，分别是： </p><p>Clean Lifecycle在进行真正的构建之前进行一些清理工作。</p><p>Default Lifecycle构建的核心部分，编译，测试，打包，安装，部署等等。</p><p>Site Lifecycle生成项目报告，站点，发布站点。</p><p>再次强调一下它们是<strong>相互独立的</strong>，你可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。当然你也可以直接运行 <strong>mvn clean install site</strong> 运行所有这三套生命周期。</p><p>每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行mvn clean，这个clean是Clean生命周期的一个阶段。有Clean生命周期，也有clean阶段。</p><p>2) clean生命周期</p><p>Clean生命周期一共包含了三个阶段：</p><p>pre-clean 执行一些需要在clean之前完成的工作 </p><p>clean 移除所有上一次构建生成的文件 </p><p>post-clean 执行一些需要在clean之后立刻完成的工作 </p><p>3) Site生命周期</p><p>​    pre-site 执行一些需要在生成站点文档之前完成的工作</p><p>​    site 生成项目的站点文档</p><p>​    post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</p><p>​    site-deploy 将生成的站点文档部署到特定的服务器上</p><p>这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。</p><p>4) Default生命周期</p><p>Default生命周期是Maven生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：</p><p>validate</p><p>generate-sources</p><p>process-sources</p><p>generate-resources</p><p>process-resources 复制并处理资源文件，至目标目录，准备打包。</p><p><strong>compile</strong> 编译项目的源代码。</p><p>process-classes</p><p>generate-test-sources</p><p>process-test-sources</p><p>generate-test-resources</p><p>process-test-resources 复制并处理资源文件，至目标测试目录。</p><p><strong>test-compile</strong> 编译测试源代码。</p><p>process-test-classes</p><p><strong>test</strong> 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。</p><p>prepare-package</p><p><strong>package</strong> 接受编译好的代码，打包成可发布的格式，如JAR。</p><p>pre-integration-test</p><p>integration-test</p><p>post-integration-test</p><p>verify</p><p><strong>install</strong>将包安装至本地仓库，以让其它项目依赖。</p><p>deploy将最终的包复制到远程的仓库，以让其它开发人员与项目共享或部署到服务器上运行。</p><p>5) 生命周期与自动化构建</p><p><strong>运行任何一个阶段的时候，它前面的所有阶段都会被运行</strong>，例如我们运行mvn install 的时候，代码会被编译，测试，打包。这就是Maven为什么能够自动执行构建过程的各个环节的原因。此外，Maven的插件机制是完全依赖Maven的生命周期的，因此理解生命周期至关重要。</p><h2 id="4-6-仓库"><a href="#4-6-仓库" class="headerlink" title="4.6 仓库"></a>4.6 仓库</h2><p>1) 分类</p><p>① 本地仓库：为当前本机电脑上的所有Maven工程服务。</p><p>② 远程仓库</p><p>[1] 私服：架设在当前局域网环境下，为当前局域网范围内的所有Maven工程服务。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220917160305967.png" alt="image-20220917160305967"></p><p>[2]中央仓库：架设在Internet上，为全世界所有Maven工程服务。</p><p>[3]中央仓库的镜像：架设在各个大洲，为中央仓库分担流量。减轻中央仓库的压力，同时更快的响应用户请求。</p><p>1) 仓库中的文件</p><p>① Maven的插件</p><p>② 我们自己开发的项目的模块</p><p>③ 第三方框架或工具的jar包</p><p>​    ※不管是什么样的jar包，在仓库中都是按照坐标生成目录结构，所以可以通过统一的方式查询或依赖。</p><h2 id="4-7-坐标"><a href="#4-7-坐标" class="headerlink" title="4.7 坐标"></a>4.7 坐标</h2><p>1) 几何中的坐标</p><p>[1]在一个平面中使用x、y两个向量可以唯一的确定平面中的一个点。</p><p>[2]在空间中使用x、y、z三个向量可以唯一的确定空间中的一个点。</p><p>2) Maven的坐标</p><p>使用如下三个向量在Maven的仓库中唯一的确定一个Maven工程。</p><p>[1]groupId：公司或组织的域名倒序+当前项目名称</p><p>[2]artifactId：当前项目的模块名称</p><p>[3]version：当前模块的版本</p><p>​    &lt;<strong>g</strong>roupId&gt;com.atguigu.maven&lt;/groupId&gt;    &lt;<strong>a</strong>rtifactId&gt;Hello&lt;/artifactId&gt;    &lt;<strong>v</strong>ersion&gt;1.0-SNAPSHOT&lt;/version&gt;</p><p>3) 如何通过坐标到仓库中查找jar包？</p><p>[1]将gav三个向量连起来</p><p>com.atmanman.maven+Hello+1.0-SNAPSHOT</p><p>[2]以连起来的字符串作为目录结构到仓库中查找</p><p>com/atmanman/maven/Hello/1.0-SNAPSHOT/Hello<strong>-</strong>1.0-SNAPSHOT.jar</p><blockquote><p>※注意：我们自己的Maven工程必须执行安装操作才会进入仓库。安装的命令是：mvn install</p></blockquote><h2 id="4-8-第二个Maven程序"><a href="#4-8-第二个Maven程序" class="headerlink" title="4.8 第二个Maven程序"></a>4.8 第二个Maven程序</h2><h2 id="4-9-依赖管理"><a href="#4-9-依赖管理" class="headerlink" title="4.9 依赖管理"></a>4.9 依赖管理</h2><p>1) 基本概念</p><p>当A jar包需要用到B jar包中的类时，我们就说A对B有依赖。例如：commons-fileupload-1.3.jar依赖于commons-io-2.0.1.jar。</p><p>通过第二个Maven工程我们已经看到，当前工程会到本地仓库中根据坐标查找它所依赖的jar包。</p><p>配置的基本形式是使用dependency标签指定目标jar包的坐标。例如：</p><p>2) 直接依赖和间接依赖</p><p>如果A依赖B，B依赖C，那么A→B和B→C都是直接依赖，而A→C是间接依赖。</p><h3 id="4-9-1-依赖的范围"><a href="#4-9-1-依赖的范围" class="headerlink" title="4.9.1 依赖的范围"></a>4.9.1 依赖的范围</h3><p>1) compile（默认就是这个范围）</p><blockquote><p>[1]main目录下的Java代码<strong>可以</strong>访问这个范围的依赖</p><p>[2]test目录下的Java代码<strong>可以</strong>访问这个范围的依赖</p><p>[3]部署到Tomcat服务器上运行时<strong>要</strong>放在WEB-INF的lib目录下</p></blockquote><p>例如：对Hello的依赖。主程序、测试程序和服务器运行时都需要用到。</p><p>2) test</p><blockquote><p>[1]main目录下的Java代码<strong>不能</strong>访问这个范围的依赖</p><p>[2]test目录下的Java代码<strong>可以</strong>访问这个范围的依赖</p><p>[3]部署到Tomcat服务器上运行时<strong>不会</strong>放在WEB-INF的lib目录下</p></blockquote><p>例如：对junit的依赖。仅仅是测试程序部分需要。</p><p>3) provided</p><blockquote><p>[1]main目录下的Java代码<strong>可以</strong>访问这个范围的依赖</p><p>[2]test目录下的Java代码<strong>可以</strong>访问这个范围的依赖</p><p>[3]部署到Tomcat服务器上运行时<strong>不会</strong>放在WEB-INF的lib目录下</p></blockquote><p>例如：servlet-api在服务器上运行时，Servlet容器会提供相关API，所以部署的时候不需要。</p><p>4) 其他：runtime、import、system等。</p><p>各个依赖范围的作用可以概括为下图：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps63.jpg" alt="img"></p><h3 id="4-9-2"><a href="#4-9-2" class="headerlink" title="4.9.2"></a>4.9.2</h3><p>当存在间接依赖的情况时，主工程对间接依赖的jar可以访问吗？这要看间接依赖的jar包引入时的依赖范围——只有依赖范围为compile时可以访问，即依赖范围是compile时才具有传递性。例如：</p><div class="table-container"><table><thead><tr><th style="text-align:left">Maven工程</th><th>依赖范围</th><th>对A的可见性</th><th></th><th></th></tr></thead><tbody><tr><td style="text-align:left">A</td><td>B</td><td>C</td><td>compile</td><td>√</td></tr><tr><td style="text-align:left"></td><td></td><td>D</td><td>test</td><td>×</td></tr><tr><td style="text-align:left"></td><td></td><td>E</td><td>provided</td><td>×</td></tr></tbody></table></div><h3 id="4-9-3-结局依赖的原则-：结局jar包冲突"><a href="#4-9-3-结局依赖的原则-：结局jar包冲突" class="headerlink" title="4.9.3 结局依赖的原则 ：结局jar包冲突"></a>4.9.3 结局依赖的原则 ：结局jar包冲突</h3><h4 id="1-路径最短者优先"><a href="#1-路径最短者优先" class="headerlink" title="1. 路径最短者优先"></a>1. 路径最短者优先</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220925111139067.png" alt="image-20220925111139067"></p><h4 id="2-路径相同时先声明者优先"><a href="#2-路径相同时先声明者优先" class="headerlink" title="2. 路径相同时先声明者优先"></a>2. 路径相同时先声明者优先</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220925111212347.png" alt="image-20220925111212347"></p><h3 id="4-9-4-依赖的排除"><a href="#4-9-4-依赖的排除" class="headerlink" title="4.9.4 依赖的排除"></a>4.9.4 依赖的排除</h3><p>1) 有的时候为了确保程序正确可以将有可能重复的间接依赖排除。请看如下的例子：</p><p>假设当前工程为MakeFriend，直接依赖OurFriends。</p><p>OurFriends依赖commons-logging的1.1.1对于MakeFriend来说是间接依赖。</p><p>当前工程MakeFriend直接依赖commons-logging的1.1.2</p><p>加入exclusions配置后可以在依赖OurFriends的时候排除版本为1.1.1的commons-logging的间 接依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>OurFriends<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖排除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-9-5-统一管理目标jar包的管理"><a href="#4-9-5-统一管理目标jar包的管理" class="headerlink" title="4.9.5 统一管理目标jar包的管理"></a>4.9.5 统一管理目标jar包的管理</h3><p>以对Spring的jar包依赖为例：Spring的每一个版本中都包含spring-context，springmvc等jar包。我们应该导入版本一致的Spring jar包，而不是使用5.3.1的spring-context的同时使用5.3.2的springmvc。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问题是如果我们想要将这些jar包的版本统一升级为5.3.2，是不是要手动一个个修改呢？显然，我们有统一配置的方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--统一管理当前模块的jar包的版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这样一来，进行版本调整的时候只改一改地方就行了。</p></blockquote><h1 id="第5章-继承"><a href="#第5章-继承" class="headerlink" title="第5章 继承"></a>第5章 继承</h1><h2 id="5-1-为什么要使用继承机制-？"><a href="#5-1-为什么要使用继承机制-？" class="headerlink" title="5.1 为什么要使用继承机制 ？"></a>5.1 为什么要使用继承机制 ？</h2><p>由于非compile范围的依赖信息是不能在“依赖链”中传递的，所以有需要的工程只能单独配置。例如：</p><div class="table-container"><table><thead><tr><th>Hello</th><th><dependency>     <groupId>junit</groupId>     <artifactId>junit</artifactId>     <version>4.13.2</version>     <scope>test</scope> </dependency></th></tr></thead><tbody><tr><td>HelloFriend</td><td><dependency>     <groupId>junit</groupId>     <artifactId>junit</artifactId>     <version>4.13.2</version>     <scope>test</scope> </dependency></td></tr><tr><td>MakeFriend</td><td><dependency>     <groupId>junit</groupId>     <artifactId>junit</artifactId>     <version>4.13.2</version>     <scope>test</scope> </dependency></td></tr></tbody></table></div><p>此时如果项目需要将各个模块的junit版本统一为4.9，那么到各个工程中手动修改无疑是非常不可取的。使用继承机制就可以将这样的依赖信息统一提取到父工程模块中进行统一管理。</p><h2 id="5-2-创建父工程"><a href="#5-2-创建父工程" class="headerlink" title="5.2 创建父工程"></a>5.2 创建父工程</h2><blockquote><p>  父工程的打包方式为pom</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-3-在子工程中引入父工程"><a href="#5-3-在子工程中引入父工程" class="headerlink" title="5.3 在子工程中引入父工程"></a>5.3 在子工程中引入父工程</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 父工程坐标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>...<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>...<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>...<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定从当前pom.xml文件出发寻找父工程的pom.xml文件的相对路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>..<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--继承--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.manman.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定从当前pom.xml文件出发寻找父工程的pom.xml文件的相对路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../Parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><font color='red'>此时如果子工程的groupId和version如果和父工程重复则可以删除。</font><h2 id="5-4-在父工程中管理依赖"><a href="#5-4-在父工程中管理依赖" class="headerlink" title="5.4 在父工程中管理依赖"></a>5.4 在父工程中管理依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子项目中重新指定需要的依赖，<font color='red'>删除范围和版本号</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第6章-聚合"><a href="#第6章-聚合" class="headerlink" title="第6章 聚合"></a>第6章 聚合</h1><h3 id="6-1-为什么要使用聚合？"><a href="#6-1-为什么要使用聚合？" class="headerlink" title="6.1 为什么要使用聚合？"></a>6.1 为什么要使用聚合？</h3><p>将多个工程拆分为模块后，需要手动逐个安装到仓库后依赖才能够生效。修改源码后也需要逐个手动进行clean操作。而使用了聚合之后就可以批量进行Maven工程的安装、清理工作。</p><h3 id="6-2-如何配置聚合-？"><a href="#6-2-如何配置聚合-？" class="headerlink" title="6.2 如何配置聚合 ？"></a>6.2 如何配置聚合 ？</h3><p>在总的聚合工程中使用modules/module标签组合，指定模块工程的相对路径即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--聚合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../MakeFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../OurFriends<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../HelloFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../Hello<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Maven可以根据各个模块的继承和依赖关系自动选择安装的顺序</p><h1 id="第7章-通过Maven创建Web工程"><a href="#第7章-通过Maven创建Web工程" class="headerlink" title="第7章  通过Maven创建Web工程"></a>第7章  通过Maven创建Web工程</h1><p>1) 创建简单的Maven工程，打包方式为war包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.manman.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MavenWeb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2) 点击Project Structure</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps1.jpg" alt="img"> </p><p>3) 选择对应的Module，添加web目录</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps2.jpg" alt="img"> </p><p>4) 设置目录名称</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps3.jpg" alt="img"> </p><p>5) 在web目录下创建index.jsp页面</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps4.jpg" alt="img"> </p><p>6) 部署到Tomcat上运行</p><h1 id="第8章-Maven酷站"><a href="#第8章-Maven酷站" class="headerlink" title="第8章 Maven酷站"></a>第8章 Maven酷站</h1><p>我们可以到<a href="http://mvnrepository.com或http://search.maven.org">http://mvnrepository.com或http://search.maven.org</a></p><p>搜索需要的jar包的依赖信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Maven学习笔记&quot;&gt;&lt;a href=&quot;#Maven学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Maven学习笔记&quot;&gt;&lt;/a&gt;Maven学习笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🏠个人主页：&lt;a href=&quot;https://blog.</summary>
      
    
    
    
    <category term="开发必备框架" scheme="https://manamn.space/categories/%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="开发必备框架" scheme="https://manamn.space/tags/%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记</title>
    <link href="https://manamn.space/2022/10/17/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://manamn.space/2022/10/17/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-17T04:37:06.000Z</published>
    <updated>2022-10-17T14:08:32.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux笔记"><a href="#Linux笔记" class="headerlink" title="Linux笔记"></a>Linux笔记</h1><h1 id="虚拟的克隆和快照及迁移和删除"><a href="#虚拟的克隆和快照及迁移和删除" class="headerlink" title="虚拟的克隆和快照及迁移和删除"></a>虚拟的克隆和快照及迁移和删除</h1><ul><li><p>克隆</p><p>​        1.方式一：直接拷贝一份安装好的虚拟机文件</p><p>​        2.方式二：使用VMware的克隆操作，<strong>注意</strong>  克隆时需要关闭linux系统</p></li><li><p>虚拟机快照</p><p>​                        <strong>使用场景：避免出现误操作，可以先保留之前的状态，然后使用快照功能回到原来的状态</strong></p></li><li><p>虚拟机的迁移和删除</p><p>​        1.<strong>迁移和删除：</strong>把安装虚拟系统的文件夹整体拷贝或者剪切到其他位置，删除直接把文件夹删除即可</p><p>​        2.<strong>移除：</strong>使用VMware进行移除</p></li></ul><h1 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h1><ul><li><strong>第一步安装vmtools</strong><ul><li>进入centos<ul><li>点击vm菜单的-&gt;install vmware tools</li><li>centos会出现一个vm的安装包，xx.tar.gz</li><li>拷贝到/opt</li><li>使用解压命令tar，得到一个安装文件 cd /opt[进入到    opt目录]   tar -zxvf  xx.tar.gz</li><li>进入该vm解压的目录，<code>/opt</code> 目录下 <code>cd vmware...</code></li><li>安装<code>/vmware-install.pl</code></li><li>全部使用默认的设置即可，就可以安装成功</li></ul></li></ul></li><li><strong>第二步，设置共享文件夹(如果安装过vmtools，第一步可直接跳过)</strong><ul><li>菜单-&gt;vm-&gt;setting,设置选项为always enable</li><li>windows和centos可以共享 xx 目录</li><li>共享文件在centos的<strong>/mnt/hgfs</strong>目录下</li><li>查看ip地址：<code>ifconfig -a</code></li></ul></li></ul><h1 id="Linux-目录结构"><a href="#Linux-目录结构" class="headerlink" title="Linux    目录结构"></a>Linux    目录结构</h1><p>1.linux的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录<code>/</code>，然后在次目录下创建其他目录。</p><p>2.<code>/bin</code>    [常用] (<code>/usr/bin</code> <code>/usr/local/bin</code>)    是Binary的缩写，这个目录存放着最经常使用的命令</p><p>3.<code>/sbin</code>    (<code>/usr/sbin</code>      <code>/usr/local/sbin</code>)    s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p><p>4.<code>/home</code>    [常用] 存放普通用户的主目录，在Linux中每一个用户都有自己的目录，一般该目录是以用户的账户名命名。</p><p>5.<code>/root</code>    [常用] 该目录为系统管理员，也称作超级权限者的用户主目录</p><p>6.<code>/lib</code>    系统开机所需要的最基本的动态连接共享库，其作用类似于Windows里面的DLL文件,几乎所有的用户程序都需要用到这些共享库。</p><p>7.<code>/lost+found</code>    这个目录一般是空的，当系统非法关机后，这里面就存放了一些文件</p><p>8.<code>/etc</code>    [常用]    所有的系统管理所需要的配置文件和子目录，比如安装Mysql数据库 my.conf</p><p>9.<code>/usr</code>    [常用]    用户的很多应用程序和文件都放在这个目录下，类似于windows下的program.file目录</p><p>10.<code>/boot</code>    [常用]    存放的是启动Linux时使用的一些核心文件，包括一些连接文件和镜像文件</p><p>11.<code>/proc</code>    [不能动]    这个目录是一个虚拟的目录，他是系统内存的映射，访问这个目录来获取系统信息</p><p>12.<code>/srv</code>    [不能动]    service的缩写，该目录存放一些服务器启动之后需要提取的数据</p><p>13.<code>/sys</code>    [不能动]    这是一个linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs =&gt;[不能动]</p><p>14.<code>/tmp</code>    这个目录是用来存放一些临时文件的</p><p>15.<code>/dev</code>    类似于windows的设备管理器，把所有的硬件用文件的形似储存</p><p>16.<code>media</code>    [常用]    linux系统会自动识别一些设备，例如u盘，光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</p><p>17.<code>/mnt</code>    [常用]    系统提供该目录是为了让用户临时挂载别的文件系统，我们可以将外部的存储挂载在<strong>/mnt</strong>上，然后进入该目录就可以查看里面的内容。</p><p>18.<code>/opt</code>    这是给主机额外安装软件所存放的目录。</p><p>19.<code>/usr/local</code>    [常用]    这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序。</p><p>20.<code>/var</code>    [常用]    这个目录中存放着在不断扩充的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件。</p><p>21.<code>/selinux[security-enhanced linux]</code>    SElinux 是一种安全子系统，他能控制程序只能访问特定文件，有三种工作模式，可以自行设置。</p><h1 id="Vi和Vim编辑器"><a href="#Vi和Vim编辑器" class="headerlink" title="Vi和Vim编辑器"></a>Vi和Vim编辑器</h1><p><strong>介绍vi和vim：</strong></p><p>​                <strong>vi:</strong>    vi是Linux内置的文本编辑器</p><p>​                <strong>vim：</strong>    vim可以看作是vi的增强版，可以主动的以字体颜色辨别的语法的正确性，方便程序设计。代码补全，编辑错误等等功能。</p><p><strong>vi和vim的三种模式：</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E5%9B%BE%E7%89%8720220929085717.png" alt="三种模式的相互切换"></p><p><strong>1.正常模式：</strong></p><p>​                以vim或者vi打开一个档案就直接进入了(这是<strong>默认的模式</strong>)。在这个模式中，你可以使用 <strong>[上下左右]</strong>按键来移动光标，可以使用    [删除字符] 或者 [删除整行] 来处理档案内容，也可以使用 [复制、粘贴] 来处理你的文件数据。</p><p><strong>2.插入模式：</strong></p><p>​                按下<code>i,I,o,O,a,A,r,R</code> 等任何一个字母后才会进入编辑模式，一般来说按i即可。</p><p><strong>3.命令行模式：</strong></p><p>​                输入<code>esc</code> 键再输入 <code>：</code> 在这个模式当中，可以提供你相关指令，完成读取、存盘、替换、离开vim、显示行号等的动作是在次模式中完成的。</p><p><strong>4.vi和vim基本使用：</strong></p><p>​                使用    vim 开发一个Hello.java程序，保存步骤说明演示</p><p>在主页面输入<code>vim hello.java</code>  然后回车，进入正常模式</p><p>按下<code>i</code> 进入编辑模式</p><p>然后输入一下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;hello,shell&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后按下<code>:wq</code> (保存并退出)</p><p><strong>5.vim常用快捷键</strong></p><p>1.拷贝当行<code>yy</code> , 拷贝当行向下的5行<code>5yy</code> , 并粘贴 <code>p</code>。</p><p>2.删除当行 <code>dd</code> , 删除当前行向下的5行 <code>5dd</code> 。</p><p>3.在文件中查找某个单词 [命令行下， <code>/ + 关键字</code> ，回车 查找，输入<code>n</code> 就是查找下一个]</p><p>4.设置文件的行号，取消文件的行号[命令行下，<code>:set nu</code>  和 <code>:set nonu</code>] </p><p>5.文件的跳转,在一般模式下，使用快捷键到该文档的最末行 <code>G</code> 和最首行 <code>gg</code> ,在一般模式下，并将光标移动到，输入 <code>20</code> 再输入<code>shift 键 + g</code> 。</p><p>6.在一个文件中输入’’Hello’’,在一般模式下，然后又撤销这个动作 <code>u</code> 。</p><p>7.快捷键的键盘对应图</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E5%9B%BE%E7%89%8720220929101349.png" alt=""></p><h1 id="开机、重启和用户登录注销"><a href="#开机、重启和用户登录注销" class="headerlink" title="开机、重启和用户登录注销"></a>开机、重启和用户登录注销</h1><ul><li><p><strong>关机&amp;重启命令</strong></p><ul><li><p>基本介绍            </p><ol><li><p><code>shutdown -h now</code> 立刻进行关机</p></li><li><p><code>shutdown  -h 1</code>  1分钟后关机</p></li><li><code>shutdown -r now</code> 现在重启计算机</li><li><code>halt</code> 立刻关机</li><li><code>reboot</code> 现在重启计算机</li><li><code>sync</code>  把内存的数据同步到磁盘 </li></ol></li><li><p><strong>注意细节</strong></p><ul><li>1.不管是重启系统还是关闭系统，首先要运行<code>sync</code> 命令，把内存中的数据写入磁盘中。</li><li>2.目前的 <code>shutdown/reboot/halt</code> 等命令均在关机前进行了<code>sync</code> ，但是避免失误，最好在工作中进行手动<code>sync</code>。</li></ul></li></ul></li><li><p><strong>用户登录和注销</strong></p><ul><li>基本介绍<ul><li>1.登录时尽量别用root用户登录，因为它是系统管理员，最大的权限，避免失误操作。可以利用普通用户登录，登录后再用<code>su - +用户名</code>    命令来切换成系统管理员身份。</li><li>2.在提示符下输入<code>logout</code> 即可注销用户。</li></ul></li><li><strong>使用细节</strong><ul><li>1.<code>logout</code> 注销指令在图形运行级别无效，在运行级别 3 下有效。</li></ul></li></ul></li></ul><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><ul><li><strong>一.基本介绍</strong><ul><li>linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</li></ul></li><li><strong>二.添加用户</strong><ul><li>1.基本语法：<code>useradd</code> + 用户名。</li><li>2.细节说明：当创建用户成功后，会自动的创建和用户相同的家目录,也可以通过<code>useradd -d + 指定的目录名 + 新的用户名</code> 给新的用户创建指定的家目录。</li></ul></li><li><strong>三.指定修改密码</strong><ul><li>基本语法：<code>passwd + 用户名</code>     </li></ul></li><li><strong>四.删除用户</strong><ul><li>1.基本语法：<code>userdel + 用户名</code></li><li>2.删除用户及用户主目录<code>userdel -r + 用户名</code></li></ul></li><li><strong>五.查询用户信息指令</strong><ul><li>基本语法：<code>id + 用户名</code></li></ul></li><li><strong>六.切换用户</strong><ul><li><code>su - 用户名</code><ul><li>细节说明：从权限高的用户切换到权限低的用户，不需要用户密码，反之需要,当需要返回到原来用户时，使用<code>exit\logout</code> 指令。</li></ul></li></ul></li><li><strong>七.查看当前用户/登录用户</strong><ul><li>基本语法<code>who am i</code> </li></ul></li><li><strong>八.用户组</strong><ul><li>介绍：系统可以对有共同性/权限的多个用户进行统一管理</li><li>新增组：<ul><li>指令<code>groupadd + 组名</code></li></ul></li><li>删除组：<ul><li>指令<code>groupdel + 组名</code></li></ul></li><li>增加用户时直接给加上组<ul><li>指令 : <code>useradd -g 用户组 用户名</code> </li><li>例如：增加一个用户 zwj  ，直接将他指定到 wudang 组<ul><li>第一步先创建组：<code>groupadd wudang</code>            </li><li>第二步创建用户并将用户放置到改组：<code>useradd -g wudang zwj</code></li></ul></li></ul></li><li>修改用户的组 : <ul><li>指令 ：<code>usermod -g 用户组 用户名</code></li><li>案例演示：<ul><li>第一步创建一个组：mojiao  <code>groupadd mojiap</code></li><li>第二步把 zwj 放入到 mojiao ：<code>usermod -g mojiao zwj</code></li></ul></li></ul></li></ul></li><li><strong>九.用户和组相关文件</strong><ul><li><code>/etc/passwd</code> 文件<ul><li>用户 <strong>user</strong> 的配置文件，记录用户的各种信息</li><li>每行的含义：用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录Shell</li></ul></li><li><code>/etc/shadow</code> 文件<ul><li>口令的配置文件</li><li>每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</li></ul></li><li><code>/etc/group</code> 文件<ul><li>组 <strong>(group)</strong> 的配置文件，记录 <strong>Linux</strong> 包含的组的信息</li><li>每行的含义：组名：口令：组标识号：组内用户列表</li></ul></li></ul></li></ul><h1 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h1><h5 id="一-指定Linux运行级别"><a href="#一-指定Linux运行级别" class="headerlink" title="一.指定Linux运行级别"></a>一.指定Linux运行级别</h5><ul><li><p>基本介绍：</p><ul><li><p>运行级别说明：</p><p><strong>0 ：关机</strong></p><p><strong>1 ：单用户[找回丢失密码]</strong></p><p><strong>2 :  多用户状态没有网络</strong></p><p><strong>3 ： 多用户状态有网络服务</strong></p><p><strong>4 :  系统未使用保留给用户</strong></p><p><strong>5 ： 图形界面</strong></p><p><strong>6 ： 系统重启</strong></p></li><li><p><strong>常用运行级别是 3 和 5 ，也可以默认运行级别。</strong></p></li></ul></li><li><p>应用实例：</p><ul><li>命令：<code>init [0123456]</code> : 通过 <code>init</code> 来切换不同的运行级别，比如 <code>init 3</code> ,就是传统的dos界面。</li><li>第二种方式：<code>systemctl set-default TARGET.target</code></li></ul></li></ul><h5 id="二-帮助指令"><a href="#二-帮助指令" class="headerlink" title="二.帮助指令"></a>二.帮助指令</h5><ul><li><code>1. man</code> <strong>获得帮助信息</strong><ul><li>基本语法：<code>man[命令或者配置文件]</code> (功能描述：获取帮助信息)</li><li>案例：查看<code>ls</code> 命令的帮助信息，<code>man ls</code> </li><li>在Linux下，隐藏文件是以 . 开头，选项可以组合使用，比如 <code>ls -al</code> ,比如 <code>ls -al/root</code>  </li></ul></li><li><code>2. help</code> 指令<ul><li>基本语法 ：<code>help + 命令</code> ，(功能描述：获取shell内置命令的帮助信息)</li><li>应用实例：查看 <code>cd</code> 命令的帮助信息 ：<code>help cd</code></li></ul></li></ul><h5 id="三-文件目录类"><a href="#三-文件目录类" class="headerlink" title="三.文件目录类"></a>三.文件目录类</h5><ul><li><p><strong><code>1. pwd</code> 命令</strong></p><ul><li>基本语法：<code>pwd</code> (功能描述 ： 显示当前工作目录的绝对路径)</li><li>应用实例：案例：显示当前工作目录的绝对路径</li></ul></li><li><p><strong><code>2. ls</code> 指令</strong></p><ul><li>基本语法：<code>ls [选项] [目录或者文件]</code></li><li>常用选项：<ul><li><strong>-a</strong>  : 显示当前目录所有的文件和目录，包括隐藏的</li><li><strong>-l</strong>  : 以列的方式显示信息</li></ul></li></ul></li><li><p><strong><code>3. cd</code> 指令</strong></p><ul><li><p>基本语法：<code>cd [参数]</code> (功能描述：切换到指定的目录)</p></li><li><p>理解：绝对路径和相对路径</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E5%9B%BE%E7%89%8720221002190815.png" alt=""></p></li><li><p><code>cd ~ 或者 cd</code> : 回到自己的家目录，比如 你是’root’ , cd~ 到 /root</p></li><li><p><code>cd ..</code> 回到当前目录的上一级目录</p></li><li><p>应用实例：</p><ul><li>案例1：使用绝对路径切换到 root 目录， <code>cd /root</code></li><li>案例2：使用相对路径到 root 目录，比如在 /home/tem, <code>cd ../../root</code></li><li>案例3：表示回到当前目录的上一级，<code>cd ..</code> </li><li>案例4：回到家目录，<code>cd ~</code></li></ul></li></ul></li><li><p><strong><code>4. mkdir</code> 指令</strong></p><ul><li><code>mkdir</code> 指令用于创建目录：<ul><li>基本语法：<code>mkdir [选项] 要创建的目录名称</code></li></ul></li><li>常用选项<ul><li><code>-p</code> : 创建多级目录</li></ul></li><li>应用实例：<ul><li>案例1：<strong>创建一个目录 /home/dong</strong><ul><li>指令：<code>mkdir /home/dong</code></li></ul></li><li>案例2：<strong>创建多级目录 /home/animal/taiger</strong><ul><li>指令 <code>mkdir  -p /home/animal/taiger</code></li></ul></li></ul></li></ul></li><li><p><strong><code>5. rmdir</code> 指令</strong></p><ul><li>基本语法：<code>rmdir [选项] 要删除的目录</code></li><li>应用实例：<ul><li>案例：删除一个目录 /home/dog <ul><li>指令：<code>rmdir /home/dog</code></li></ul></li></ul></li><li>使用细节：<ul><li><code>rmdir</code> 删除的是空目录，如果目录下有内容时无法删除</li><li>提示：<strong>如果需要删除非空目录，需要使用<code>rm -rf 要删除的目录</code> </strong></li><li>比如：<code>rm -rf /home/animal</code></li></ul></li></ul></li><li><p><strong><code>6. touch</code> 指令</strong></p><ul><li><code>touch</code> 指令创建空文件</li><li>基本语法：<code>touch 文件名称</code></li><li>应用案例：在/home 目录下，创建一个空文件 hello.txt<ul><li>指令 <code>touch hello.txt</code></li></ul></li></ul></li><li><p><strong><code>7.cp</code> 指令</strong></p><ul><li><code>cp</code> 指令拷贝文件到指定目录</li><li>基本语法：<code>cp [选项] source  dest</code></li><li>常用选项：<ul><li><code>-r</code> :递归复制整个文件</li></ul></li><li>应用实例：<ul><li>案例1：将 /home/hello.txt  拷贝到  /home/bbb 目录下<ul><li>指令：<code>cp /home/hello.txt /home/bbb</code></li></ul></li><li>案例2：递归复制整个文件夹，举例，比如将 /home/bbb 整个目录，拷贝到 /opt<ul><li>指令：<code>cp -r /home/bbb /opt</code></li></ul></li></ul></li><li>使用细节：如果目标目录下已存在该文件名，那么该操作会覆盖该文件<ul><li>强制覆盖不提示的方法：<code>\cp</code> 在cp 前加上\</li><li>比如：<code>\cp -r /home/bbb /opt</code></li></ul></li></ul></li><li><p><strong><code>8. rm</code> 指令</strong></p><ul><li>说明：<code>rm</code> 指令移除文件或者目录</li><li>基本语法：<code>rm [选项] 要删除的文件或者目录</code></li><li>常用选项：<ul><li><code>-r</code> ：递归删除整个文件夹</li><li><code>-f</code> ：强制删除，不在提示</li></ul></li><li>应用实例：<ul><li>案例1：将/home/hello.txt 删除，<code>rm /home/hello.txt</code></li><li>案例2：递归删除整个文件夹 /home/bbb, <code>rm -rf /home/bbb</code></li></ul></li><li>使用细节：强制删除不提示的方法：带上 <code>-f</code> 参数即可</li></ul></li><li><p><strong><code>9. mv</code> 指令</strong></p><ul><li><code>mv</code> <strong>移动文件与目录或者重命名</strong></li><li>基本语法：<ul><li><code>mv oldNameFile newNameFile</code> (功能描述：重命名)</li><li><code>mv /temp/movefile /targetFolder</code> (功能描述：移动文件)</li></ul></li><li>应用实例：<ul><li>案例1：将 /home/cat.txt  文件  重新命名为  pig.txt    <code>mv /home/cat.txt pig.txt</code></li><li>案例2：将 /home/pig.txt  文件移动到  /root   目录下 <code>mv /home/pig.txt  /root</code></li><li>案例3：将 /opt/bbb 整个目录，移动到/home下 <code>mv /opt/bbb /home</code></li></ul></li></ul></li><li><p><strong><code>10. cat</code> 指令</strong></p><ul><li><code>cat</code> 查看文件内容</li><li>基本语法：<code>cat [选项] 要查看的文件</code></li><li>常用选项：<ul><li><code>-n</code> 显示行号</li></ul></li><li>应用实例：<code>cat -n /ect/profile</code>  查看文件内容，并显示行号 </li><li>使用细节：<ul><li>1.<code>cat</code> 指令只能浏览文件，而不能修改文件，为了浏览方便，一般会带上，管道命令  <code>|more</code></li><li>2.<code>cat -n /ect/profile | more</code></li></ul></li></ul></li><li><p><strong><code>11. more</code> 指令</strong></p><ul><li><p>基本语法：如图</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221003150512.png" alt=""></p></li><li><p>应用实例：案例：采用 more 查看文件 <code>cat -n /ect/profile | more</code></p></li></ul></li><li><p><strong><code>12. less</code> 指令</strong></p><ul><li><p><strong>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</strong></p></li><li><p>基本语法：<code>less 要查看的文件</code></p></li><li><p>操作说明：如图</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221003151722.png" alt=""></p></li><li><p>应用实例：采用<code>less</code> 查看一个大文件 <code>/opt/杂文.txt</code>  指令<code>less /opt/杂文.txt</code> </p></li></ul></li><li><p><strong><code>13. echo</code> 指令</strong></p><ul><li><code>echo</code> 输出内容到控制台</li><li>基本语法：<code>echo [选项] [输出的内容]</code></li><li>类似 Java 中的 <code>println(&quot;输出的内容&quot;)</code></li></ul></li><li><p><strong><code>14. head</code> 指令</strong></p><ul><li><code>head</code> 用于显示文件的开头部分内容，默认情况下<code>head</code> 指令显示文件的前10行内容</li><li>基本语法<ul><li><ol><li><code>head 文件</code> (功能描述：查看文件前10行内容)</li><li><code>head -n 5 文件</code> (功能描述：查看文件头5行内容，5 如果是20，则标识前20行内容)</li></ol></li></ul></li></ul></li><li><p><strong><code>15. tail</code> 指令</strong></p><ul><li><code>tail</code> 用于输出文件中尾部的内容，默认情况下tail显示文件后10行内容</li><li>基本语法：<ul><li><code>tail 文件</code> (功能描述：查看文件尾行10行内容)</li><li><code>tail -n 5 文件</code> (功能描述 ：查看文件尾行5行内容) </li><li><code>tail -f  文件</code> (功能描述：实时追踪该文档的所有更新)</li></ul></li></ul></li><li><p><strong><code>16. &gt; 和 &gt;&gt;</code> 指令</strong></p><ul><li><code>&gt;</code> 输出重定向和：<code>文件内容 &gt; 文件名</code> <strong>后者中的文件内容将会被新的文件内容覆盖</strong></li><li><code>&gt;&gt;</code> 追加：<code>文件内容 &gt; 文件名</code> <strong>后者中的文件内容将不会被新的文件内容覆盖，只是追加在原来的内容后面</strong></li><li>基本语法：<ul><li><code>ls -l &gt; 文件</code> (功能描述：显示的列表内容写入文件中 <strong>（覆盖写）</strong>)</li><li><code>ls -al &gt;&gt; 文件</code> (功能描述：列表显示的内容追加到文件中末尾)</li><li><code>cat 文件1 &gt; 文件2</code> (功能描述：将文件1中的内容 <strong>覆盖</strong>  文件2的内容)</li></ul></li></ul></li><li><p><strong><code>17. ln</code> 指令</strong></p><ul><li><strong>软链接也称为符号链接，类似window里的快捷键，主要存放了链接其他文件的路径</strong></li><li>基本语法：<code>ln -s [原文件或者目录][软链接名]</code> (功能描述：给原文件创建一个软链接)</li><li>应用案例：<ul><li>在 /home  目录下创建一个软链接 myroot ，连接到 /root 目录</li><li>指令：<code>ln -s /root /home/myroot</code> </li></ul></li><li>删除软链接：<code>rm -f /home/myroot</code></li><li>细节说明：当我们使用 <code>pwd</code> 查看目录时，仍然看到的是软链接所在目录</li></ul></li><li><p><strong><code>18. history</code> 指令</strong></p><ul><li>查看已经执行过的历史命令，也可以执行历史命令</li><li>基本语法：<code>history</code> (功能描述：查看已经执行过的历史命令)</li><li>实用案例：<ul><li>显示所有的历史命令：<code>history</code></li><li>显示最近使用的是个历史命令：<code>history 10</code></li><li>执行历史编号为5的指令：<code>history</code> <code>!5</code></li></ul></li></ul></li></ul><h5 id="四-时间日期类"><a href="#四-时间日期类" class="headerlink" title="四.时间日期类"></a><strong>四.时间日期类</strong></h5><ul><li><strong><code>1. date</code> 指令-显示当前日期</strong><ul><li>基本语法：<ul><li><code>date</code> (功能描述：显示当前时间)</li><li><code>date + %Y</code> (功能描述：显示当前年份)</li><li><code>date + %m</code>  (功能描述：显示当前月份)</li><li><code>date + %d</code> (功能描述：显示当前是那一天)</li><li><code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code> (功能描述：显示：年-月-日 时：分：秒) </li></ul></li><li>应用案例：<ul><li>案例1：显示当前时间信息  —- 指令 <code>date</code></li><li>案例2：显示当前时间年月日——指令 <code>date &quot;+%Y-%m-%d&quot;</code></li><li>案例3：显示当前时间年月日时分秒——-指令 <code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code></li></ul></li></ul></li><li><strong><code>2. date 指令设置时间</code></strong><ul><li>基本语法：<code>date -s [需要设置的字符串时间]</code></li><li>应用案例：设置系统当前时间，比如设置成  2020-11-03 20：02：10 —- 指令 <code>date -s &quot;2020-11-03 20：02：10&quot;</code></li></ul></li><li><strong><code>3. cal</code> 指令</strong><ul><li>查看日历指令：<code>cal</code></li><li>基本语法：<ul><li><code>cal [选项]</code> (功能描述：不加选项，显示本月日历)</li></ul></li><li>应用实例：<ul><li>案例1：显示当前日历 —-指令 <code>cal</code></li><li>案例2：显示2020年日历 —— 指令 <code>:cal 2020</code></li></ul></li></ul></li></ul><h5 id="五-搜索查找类"><a href="#五-搜索查找类" class="headerlink" title="五.搜索查找类"></a>五.搜索查找类</h5><ul><li><p><strong><code>1. find</code> 指令</strong> </p><ul><li><p><code>find</code> 指令将从指定目录向下递归的遍历其各个子目录，将满足条件的文件或者目录显示在终端</p></li><li><p>基本语法：<code>find [搜索范围] [选项]</code></p></li><li><p>选项说明：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221003222620.png" alt=""></p></li><li><p>应用实例：</p><ul><li>案例1：按照文件名：根据名称查找/home 目录下的 hello.txt<ul><li>指令：<code>find /home -name hello.txt</code></li></ul></li><li>案例2：按照拥有者：查找 /opt 目录下的，用户名称为 nobody 的文件<ul><li>指令：<code>find /opt -user nobody</code></li></ul></li><li>案例3：查找整个文件大于200M的文件，(+n  大于n  ，n 等于n  ，-n  小于n， 单位有k,M,G)<ul><li>指令：<code>find -size +200M</code></li></ul></li></ul></li></ul></li><li><p><strong><code>2. locate</code> 指令</strong></p><ul><li>locate指令可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。</li><li>基本语法：<code>locate [搜索的文件]</code></li><li>特别说明：由于locate指令基于数据库进行查询，所以第一次运行前， 必须使用updatedb指令创建locate数据库。</li><li>应用实例：<ul><li>案例1:请使用locate指令快速定位hello.txt 文件所在目录</li><li>指令：<code>updatedb</code> <code>locate hello.txt</code> (如果是第一次使用则需要第一条指令，否则不需要)</li></ul></li></ul></li><li><p><strong><code>3. which 指令</code></strong></p><ul><li>which指令，可以查看某个指令在哪个目录下，比如ls 指令在哪个目录 —— 指令：<code>which ls</code></li></ul></li><li><p><strong><code>4. grep</code></strong>  过滤查找，管道符：<code>|</code>  ,表示将前一个命令的处理结果输出传递给后面的命令处理</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221003224631.png" alt=""></p><ul><li><p>基本语法：<code>grep [选项] 查找内容 源文件</code></p></li><li><p>常用选项：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221003225410.png" alt=""></p></li><li><p>应用实例：</p><ul><li>案例1:请在hello.txt 文件中，查找”yes”所在行， 并且显示行号<ul><li>写法1: cat /home/hello.txt| grep “yes”</li><li>写法2: grep -n “yes” /home/hello.txt</li></ul></li></ul></li></ul></li></ul><h5 id="六-压缩和解压类"><a href="#六-压缩和解压类" class="headerlink" title="六.压缩和解压类"></a>六.压缩和解压类</h5><ul><li><p><strong><code>1. gzip/gunzip</code> 指令</strong></p><ul><li><code>gzip</code> 用于压缩文件，<code>gunzip</code>  用于解压文件</li><li>基本语法：<ul><li><code>gzip 文件</code> (功能描述：压缩文件，只能将文件压缩为*.gz 文件) </li><li><code>gunzip 文件.gz</code>  (功能描述：解压缩文件命令)</li></ul></li><li>应用实例：<ul><li>案例1：gzip 压缩， 将 /home 下的 hello.txt 文件进行压缩——- 指令 <code>gzip /home/hello.txt</code></li><li>案例2：gunzip 解压,  将 /home 下的 hello.txt.gz 文件解压缩——-指令 <code>gunzip /home/hello.txt.gz</code></li></ul></li></ul></li><li><p><strong><code>2. zip/unzip</code> 指令</strong></p><ul><li><p>zip 用于压缩文件，unzip 用于解压文件， <strong>这个在项目打包发布中很有用</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221003230923.png" alt=""></p></li><li><p>基本语法：</p><ul><li><code>zip [选项] XXX.zip  将要压缩的内容</code> (功能描述：压缩文件和目录的命令)</li><li><code>unzip [选项] XXX.zip</code> (功能描述：解压缩文件)</li></ul></li><li><p>zip 常用选项</p><ul><li><code>-r</code> 递归压缩：即压缩目录</li></ul></li><li><p>unzip 常用选项</p><ul><li><code>-d 目录</code> ：指定解压后文件的存放目录</li></ul></li><li><p>应用实例</p><ul><li>案例1: 将 /home 下的所有文件/文件夹进行压缩成myhome .zip <ul><li>指令: <code>zip -r myhome.zip /home/[将home日录及其包含的文件和子文件夹都压缩]</code></li></ul></li><li>案例2: 将myhome.zip 解压到 /opt/tmp 目录下<ul><li>指令：<code>mkdir /opt/tmp</code>  <code>unzip -d /opt/tmp /home/myhome.zip</code></li></ul></li></ul></li></ul></li><li><p><strong><code>3. tar</code> 指令</strong></p><ul><li><p>tar指令是打包指令，最后打包后的文件是.tar.gz 的文件。</p></li><li><p>基本语法：<code>tar [选项] XXX.tar.gz  打包的内容</code> (功能描述：打包目录，压缩后的文件格式.tar.gz)</p></li><li><p>选项说明</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221003232435.png" alt=""></p></li><li><p>应用实例</p><ul><li>案例1:  压缩多个文件，将 /home/pig.txt 和 /home/cat.txt  压缩成pc.tar.gz<ul><li>指令：<code>tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt</code></li></ul></li><li>案例2:  将 /home 的文件夹压缩成 myhome.tar.gz<ul><li>指令：<code>tar -zcvf myhome.tar.gz /home/</code></li></ul></li><li>案例3:  将 pc.tar.gz 解压到当前目录<ul><li>指令：<code>tar -zxvf pc.tar.gz</code></li></ul></li><li>案例4:  将  myhome.tar.gz 解压到  /opt/tmp2 目录下<ul><li>指令：<code>mkdir /opt/tmp2</code> <code>tar -zxvf /home/myhome.tar.gz -C /opt/tmp2</code></li></ul></li></ul></li></ul></li></ul><h1 id="组管理和权限管理"><a href="#组管理和权限管理" class="headerlink" title="组管理和权限管理"></a>组管理和权限管理</h1><h5 id="一-linux-组的基本介绍"><a href="#一-linux-组的基本介绍" class="headerlink" title="一.linux 组的基本介绍"></a>一.linux 组的基本介绍</h5><ul><li>在 Linux 中的每一个用户必须属于一个组，不能独立于组外。在 Linux 中每个文件，所有者、所在组、其他组的概念。</li><li><ol><li>所有者</li><li>所在组</li><li>其他组</li><li>改变用户所在的组</li></ol></li><li><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221008083106.png" alt=""></li></ul><h5 id="二-文件-目录-所有者"><a href="#二-文件-目录-所有者" class="headerlink" title="二.文件/目录 所有者"></a>二.文件/目录 所有者</h5><ul><li><p>一般为文件的所创建者，谁创建了该文件，就自然的成为该文件的所创建者</p></li><li><p><strong><code>1. ls -ahl</code> 查看文件的所有者</strong></p><ul><li><p>指令： <code>ls -ahl</code></p></li><li><p>应用实例：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221008083707.png" alt=""></p></li></ul></li><li><p><strong><code>2. chown [用户名] [文件名]</code> 修改文件的所有者</strong></p><ul><li>指令：<code>chown [用户名] [文件名]</code> </li><li>应用实例：要求：使用 root 创建一个 apple.txt 文件，然后将其所有者改为 tom </li><li><code>chown tom apple.txt</code></li></ul></li><li><p><strong><code>3. groupadd [组名]</code> 组的创建</strong></p><ul><li>指令：<code>groupadd [组名]</code></li><li>应用实例：<ul><li>创建一个组：monster</li><li><code>groupadd monster</code></li><li>创建一个用户 fox ，并放入到 monster 组中</li><li><code>useradd -g monster fox</code></li></ul></li></ul></li></ul><h5 id="三-文件-目录所在组"><a href="#三-文件-目录所在组" class="headerlink" title="三.文件/目录所在组"></a>三.文件/目录所在组</h5><p>当某个用户创建了一个文件后，这个文件的所在组就是该用户的组(默认)</p><ul><li><strong><code>1. ls -ahl</code> 查看目录/文件所在组</strong><ul><li>基本指令：<code>ls -ahl</code></li><li>应用实例：<ul><li>使用 fox 来创建一个文件，看看改文件属于那个组</li><li><code>touch ok.txt</code> <code>ls -ahl</code></li><li><code>-rw-r--r--.1 fox monster 0 11月 5 12：50 0k.txt</code></li></ul></li></ul></li><li><strong><code>2. chgrp [组名][文件名]</code> 修改文件/目录所在组</strong><ul><li>基本指令：<code>chgrp [组名][文件名]</code></li><li>应用实例：使用 root 用户来创建文件 orange.txt ,看看当前文件属于那个组，然后将这个文件所在组，修改到 fruit 组</li><li>指令：<ul><li><code>groupadd fruit</code></li><li><code>touch orange.txt</code></li><li><code>chgrp fruit orange.txt</code></li></ul></li></ul></li><li><strong>其他组</strong><ul><li>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组</li></ul></li><li><strong>改变用户所在组</strong><ul><li>在添加用户时，可以指定将用户添加到那个组中，同样的使用 root 的管理权限可以改变某个用户的所在的组。</li><li><strong>改变用户的所在组</strong><ul><li><code>usermod -g [新组名][用户名]</code></li><li><code>usermod -d [目录名][用户名]</code> 改变该用户登录的初始目录。</li></ul></li><li>应用实例：<ul><li>将 zwj  这个用户从原来的所在组，修改到 wudang 组</li><li><code>usermod -g wudang zwj</code></li></ul></li></ul></li></ul><h5 id="四-权限的基本介绍"><a href="#四-权限的基本介绍" class="headerlink" title="四.权限的基本介绍"></a>四.权限的基本介绍</h5><ul><li><p>基本介绍：</p><ul><li><p><code>ls -l</code> 或者 <code>ll</code>     显示所在目录的所有文件及目录的权限  <code>-rwxrw-r-- 1 root root 1213 Feb 2 09:39 abc</code></p></li><li><p><strong>0~9位说明</strong></p></li><li><p>第 0 位说明文件类型(d, -, l, c, b)</p><ul><li>l 是链接，Linux中的软链接类似于Windows中的快捷键</li><li>d 是目录，相当于windows中的文件夹</li><li>c 是字符设备文件，鼠标，键盘</li><li>b 是块设备，比如硬盘</li><li><code>-</code> 是普通文件，如 .txt</li></ul></li><li><p>第 1~3 位确定 <strong>所有者</strong> (该文件的所有者) 拥有改文件的权限 —-User</p></li><li><p>第 4~6 位确定 <strong>所属组</strong> (同用户组的) 拥有改文件的权限—-Group</p></li><li><p>第 7~9 位确定 <strong>其它用户</strong> 拥有该文件的权限—-Other</p></li><li><p>可以使用数字表示为：r = 4, w = 2, x = 1,所有 rwx = 4 + 2 + 1 = 7,数字可以进行组合</p></li><li><p><strong>其他说明</strong></p><p>| ———————- | —————————————————————————————————- |<br>| ———————- | —————————————————————————————— |<br>| 1               | 文件：硬链接数或目录：子目录数                               |<br>| root            | 用户                                                         |<br>| root            | 组                                                           |<br>| 1213            | 文件大小(字节），如果是文件夹，显示 4096 字节                |<br>| Feb 2 09:39     | 最后修改的时间                                               |<br>| abc             | 文件名                                                       |</p></li></ul></li><li><p><strong>rwx 权限详解</strong></p><ul><li><strong><code>rwx</code> 作用到文件</strong><ul><li>[r] ：代表可以读 read : 可以读取，查看</li><li>[w] : 代表可写 write : 可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在目录有写的权限，才能删除该文件</li><li><code>x</code> : 代表可执行 execute : 可以被执行</li></ul></li><li><strong><code>rwx</code> 作用到目录</strong><ul><li>[r] ：代表可以读 read : 可以读取，<code>ls</code> 查看目录内容</li><li>[w] : 代表可以写 write : 可以修改，对目录内 创建+删除+目录重命名</li><li><code>x</code> : 代表可执行 execute : 可以进入该目录</li></ul></li></ul></li></ul><h5 id="五-文件-目录权限操作"><a href="#五-文件-目录权限操作" class="headerlink" title="五.文件/目录权限操作"></a>五.文件/目录权限操作</h5><ul><li><strong><code>1. chmod</code> 修改权限</strong><ul><li>通过 <code>chmod</code> 指令，可以修改 <strong>文件或者目录</strong> 的权限</li></ul></li><li><strong><code>2. + 、- 、=</code> 第一种方式变更权限</strong><ul><li>u: 所有者    g: 所在组    o: 其他人    a: 所有人(u、g、o 的总合)<ul><li><ol><li><code>chmod u=rxw,g=rx,o=x [文件/目录名]</code>  </li><li><code>chmod o+w [文件/目录名]</code>  </li><li><code>chmod a-x [文件/目录名]</code>  </li></ol></li></ul></li><li>案例演示：<ul><li><ol><li>给 abc 文件 的所有者读写执行的权限(rwx) ,给所在组读执行的权限(rx),给其他组读执行的权限(rx)   指令：<code>chmod u=rwx,g=rx,o=rx abc</code></li><li>给 abc 文件的所有者除去执行的权限，组增加写的权限   指令：<code>chmod u-x,g+w abc</code></li><li>给文件 abc 的所有用户添加读的权限    指令：<code>chmod o+r abc</code></li></ol></li></ul></li></ul></li><li><code>3. 第二种方式：通过数字变更权限</code><ul><li>r = 4;    w = 2;    x = 1;    rwx = 4+2+1</li><li><code>chmod u=rwx,g=rx,o=x [文件目录名]</code>  == <code>chmod 751 [文件目录名]</code></li><li><strong>案例演示：</strong><ul><li>要求：将 /home/abc.txt 文件的权限修改成  rwx r-x r-x 使用数字方式实现<ul><li>指令：<code>chmod 755 /home/abc.txt</code></li></ul></li></ul></li></ul></li><li><strong><code>chown</code> 修改文件所有者</strong><ul><li>指令：<code>chown [用户名] [文件/目录名]</code>                            <strong>改变所有者</strong></li><li>指令：<code>chown  [用户名] [文件/目录名]</code>  -R  如果是目录，则递归           <strong>改变所有者和所在组</strong></li><li>应用实例：要求：使用 root 创建一个 apple.txt 文件，然后将其所有者改为 tom <ul><li>指令：<code>chown tom apple.txt</code></li></ul></li><li>应用实例：请将 /home/test 目录下的所有文件和目录的所有者和所在组 tom<ul><li>指令：<code>chown -R tom /home/test</code></li></ul></li></ul></li><li><strong><code>chgup</code> 修改文件/目录所在组</strong><ul><li>基本指令：<code>chgrp [组名][文件名]</code>                         <strong>改变所在组</strong></li><li>案例演示：<ul><li>请将 /home/abc.txt 文件的所在组修改成 shaolin<ul><li>指令：<code>groupadd shaolin</code>      <code>chgrp shaolin /home/acb.txt</code></li></ul></li><li>请将 /home/test 目录下的所有文件和目录的所在组都修改成 shaolin<ul><li>指令：<code>chgrp -R shaolin /home/test</code></li></ul></li></ul></li></ul></li></ul><h1 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h1><h5 id="1-crond-任务调度"><a href="#1-crond-任务调度" class="headerlink" title="1. crond 任务调度"></a>1. crond 任务调度</h5><ul><li><p><strong>概述：</strong></p><ul><li><p>任务调度：是指系统在某个时间执行的特定的命令或程序</p></li><li><p>任务调度分类：1.系统工作：有些重要的工作必须周而复始地执行，比如病毒扫描等</p></li><li><p>个别用户工作：个别用可能希望执行某些程序，比如对 mysql 数据库的备份</p></li><li><p>示意图：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221009225759.png" alt=""></p></li></ul></li><li><p><strong>基本语法</strong></p><ul><li><p><code>crontab [选项]</code></p></li><li><p>常用选项：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221009230026.png" alt=""></p></li><li><p>快速入门：</p><ul><li><p>设置任务调度文件：/etc/crontab</p></li><li><p>设置个人任务调度，执行一次 <code>crontab -e</code> 命令</p></li><li><p>接着输入任务到调度文件</p></li><li><p>如：<code>*/1 * * * * ls -l /etc/ &gt; /tmp/to.txt</code>  : 意思是说每分钟都执行一次 <code>ls -l /etc/ &gt; /tmp/to.txt</code></p></li><li><p>参数细节说明:  五个占位符说明</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221009230657.png" alt=""></p></li><li><p>特殊符号说明</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221009230805.png" alt=""></p></li><li><p>特殊时间执行案例</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221009230925.png" alt=""></p></li></ul></li><li><p>应用实例</p><ul><li>案例1：每隔一分钟，将当前时间的日期信息，追加到 /tmp/mydate 文件中<ul><li>指令：<code>*/1 * * * * date &gt;&gt; /tmp/mydate</code></li></ul></li><li>案例2：每隔一分钟。将当前日历和日期都追加到 /home/mycal 文件中<ul><li>步骤：</li><li><ol><li><code>vim /home/my.sh</code>  写入内容：<code>date &gt;&gt; /home/mycal 和 cal &gt;&gt; /home/mycal</code></li><li>给 my.sh 增加执行的权限：<code>chmod u+x /home/my.sh</code></li><li><code>crontab -e</code> 然后回车，进入编辑 增加 <code>*/1 * * * * /home/my.sh</code></li></ol></li></ul></li><li>案例3：每天凌晨2点 将 mysql 数据库 testbd,备份到文件夹中<ul><li>步骤<ul><li><ol><li><code>crontab -e</code></li><li><code>0 2 * * * mysqldump -uroot -p1578 testbd &gt; /home/db.bak</code></li></ol></li></ul></li></ul></li></ul></li></ul></li></ul><h5 id="2-at-一次性定时计划任务"><a href="#2-at-一次性定时计划任务" class="headerlink" title="2.at 一次性定时计划任务"></a>2.at 一次性定时计划任务</h5><ul><li><p>基本介绍：</p><ul><li><p>at命令是一次性定时计划任务，at 的守护进程atd 会以后台模式运行，检查作业队列来运行。</p></li><li><p>默认情况下，atd守护进程每60秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业</p></li><li><p>at命令是一次性定时计划任务，执行完一个任务后不再执行此任务了</p></li><li><p>在使用at命令的时候，一定要保证 atd进程的启动﹐可以使用相关指令来查看<code>ps -ef | grep atd</code>可以检测atd是否在运行</p></li><li><p>示意图：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221009233055.png" alt=""></p></li></ul></li><li><p>at 命令格式</p><ul><li>指令：<code>at [选项][时间]</code>  <strong>Ctrl + D  结束 at 命令输入后，输入两次</strong>   </li></ul></li><li><p>at 命令选项</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221009233325.png" alt=""></p></li><li><p>at 时间定义</p><ul><li>接受在当天的 h:mm(小时:分钟)式的时间指定。假如该时间已过去，那么就放在第二天执行。例如:04:002)</li><li>使用midnight(深夜)，noon(中午) ，teatime(饮茶时间，一般是下午4点〉等比较模糊的词语来指定时间。</li><li>采用12小时计时制，即在时间后面加上AM (上午)或PM(下午）来说明是上午还是下午。例如： 12pm</li><li>指定命令执行的具体日期，指定格式为month day(月日)或mm/dd/yy (月/日/年)或dd.mm.yy(日.月.年），指定的日期必须跟在指定时间的后面。例如:04:002021-03-1</li><li>使用相对计时法.指定格式为: now + count time-units ,now就是当前时间, time-units是时间单位,这里能够是minutes(分钟)、hours (小时)、days(天)、weeks (星期)。count是时间的数量，几天，几小时。例如: now + 5 minutes</li><li>直接使用today(今天)、tomorrow(明天）来指定完成命令的时间。</li></ul></li><li><p>应用实例</p><ul><li>案例1：2天后的下午 5 点 执行 /bin/ls /home<ul><li>指令：<code>at 5pm + 2 days</code> <strong>回车</strong>  <code>/bin/ls /home</code></li></ul></li><li>案例2：<code>atq</code> 命令查看系统中有没有执行的工作任务</li><li>案例3：每天17点钟，输出时间到指定文件夹内，比如 /root/date100.log<ul><li>指令：<code>at 5pm tomorrow</code>  <strong>回车</strong>  date &gt;  /root/date100.log</li></ul></li><li>案例4：2分钟后，输出时间到指定文件夹，比如：/root/date200.log<ul><li>指令：<code>at now + 2 minutes</code> <strong>回车</strong>  /root/date200.log</li></ul></li><li>案例5：删除已经设置的任务 <code>atrm [编号]</code><ul><li><code>atrm 4</code>  表示将job队列，编号为4的job删除</li></ul></li></ul></li></ul><h1 id="磁盘分区和挂载"><a href="#磁盘分区和挂载" class="headerlink" title="磁盘分区和挂载"></a>磁盘分区和挂载</h1><h5 id="一-Linux-分区"><a href="#一-Linux-分区" class="headerlink" title="一.Linux 分区"></a>一.Linux 分区</h5><ul><li><p>原理介绍</p><ul><li><ol><li><p>Linux 来说无论有几个分区，分给哪一个目录使用，它归根到底就只有一个根目录，一个独立且唯一的文件结构，Linux 中每一个分区都是用来组成整个文件系统的一部分。</p></li><li><p>Linux 采用了一种叫 ”挂载“ 的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的储存空间在一个目录下获得。</p></li><li><p>示意图</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221010230403.png" alt=""></p></li></ol></li></ul></li><li><p>硬盘说明</p><ul><li><ol><li>Linux 硬盘分为两种 ：IDE 硬盘    SCSI硬盘，目前基本上使用的都是：SCSI硬盘。</li><li>对于 IDE硬盘 ，驱动器标识符为 <strong>hdx~</strong> ,其中 hd 表明分区所在设备的类型，这里是指 IDE硬盘，x 表示为盘号(a 为基本盘， b为基本从属盘，c为辅助主盘，d为辅助从属盘)， ~ 代表分区，前四个分区分别是用数字 1~4 表示，它们是主分区或扩展分区，从5开始就是逻辑分区。 例如： <strong>hda3</strong> 表示 ：是一个 IDE硬盘上的基本盘上的第三主分区或扩展分区</li><li>对于 SCSI硬盘 驱动器标识符则为 <strong>sdx~</strong> ,SCSI硬盘是用  ”sd“ 表示分区所在设备的类型，其余的则是和IDE硬盘的表示方法一样</li></ol></li></ul></li><li><p>查看所有设备挂载情况</p><ul><li>指令：<code>lsblk</code>  或者 <code>lsblk -f</code><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221010232137.png" alt=""></li></ul></li></ul><h5 id="二-挂载案例及步骤"><a href="#二-挂载案例及步骤" class="headerlink" title="二.挂载案例及步骤"></a>二.挂载案例及步骤</h5><ul><li><p>说明：下面我们以增加一块硬盘为例来熟悉下磁盘的相关指令和深入理解磁盘分区、挂载、卸载的概念</p></li><li><p>如何增加一块硬盘</p><ul><li>虚拟机添加硬盘</li><li>分区</li><li>格式化</li><li>挂载</li><li>设置可以自动挂载</li></ul></li><li><p><strong>虚拟机添加硬盘步骤1</strong></p><ul><li><p>在 虚拟机 菜单中，选择 设置 ，然后设备列表里添加硬盘，然后一路 下一步 ，中间只有选择磁盘大小的地方需要修改，直至完成。然后重启系统(系统需要扫描，才能识别)</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012073710.png" alt=""></p></li></ul></li><li><p><strong>虚拟机增加硬盘步骤2</strong></p><ul><li><p><code>fdisk /dev/sdb</code> 分区命令，开始对 /sdb 分区</p><ul><li><p><code>m</code> 显示命令列表</p></li><li><p><code>p</code> 显示磁盘分区，同 <code>fdisk -l</code> 作用一样</p></li><li><p><code>n</code> 新增分区</p></li><li><p><code>d</code> 删除分布</p></li><li><p><code>w</code> 写入并退出</p></li><li><p>说明：开始分区后输入 n ，新增分区，然后选择 p ，分区类型为主分区。两次回车默认剩余全部空间。最后输入 w 写入并退出，若不保存退出输入 q。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012114356.png" alt=""></p></li></ul></li></ul></li><li><p><strong>虚拟机增加硬盘步骤3</strong></p><ul><li>格式化磁盘<ul><li>指令：<code>mkfs -t ext4 /dev/sdb1</code>  其中 ext4 是文件类型</li><li>注意： <strong>用命令进行挂载，重启后挂载会失效</strong></li></ul></li></ul></li><li><p><strong>虚拟机增加硬盘步骤4</strong></p><ul><li>挂载：将一个分区与一个目录进行联系起来<ul><li>指令：<code>mount [设备名称] [挂载目录]</code>  </li><li>比如：<code>mount /dev/sdb1  /newdisk</code></li></ul></li><li>取消挂载<ul><li>指令：<code>umount [设备名称] 或者 [挂载目录]</code>、</li><li>比如：<code>umount /dev/sdb1</code>  或者 <code>umount /newdisk</code></li></ul></li></ul></li><li><p><strong>虚拟机增加硬盘步骤5</strong></p><ul><li><p>永久挂载：通过修改 /etc/fstab/ 实现挂载</p></li><li><p>使用：<code>vim /etc/fatab</code> 指令进入该文件进行修改</p></li><li><p>添加后 执行 <code>mount -a</code> 即刻生效</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012115543.png" alt=""></p></li></ul></li></ul><h5 id="三-磁盘情况查询"><a href="#三-磁盘情况查询" class="headerlink" title="三.磁盘情况查询"></a>三.磁盘情况查询</h5><ul><li><p>查询系统整体磁盘使用情况</p><ul><li><p>基本语法：<code>df -h</code></p></li><li><p>应用实例：查询系统整体磁盘使用情况</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012115927.png" alt=""></p></li></ul></li><li><p>查询指定目录的磁盘占用情况</p><ul><li><p>基本语法：<code>du - h</code></p></li><li><p>查询指定目录的磁盘占用情况，默认从当前目录</p><ul><li><code>-s</code>     指定目录占用大小汇总</li><li><code>-h</code>      带计量单位</li><li><code>-a</code>      含文件</li><li><code>--max-depth=1</code>   子目录深度</li><li><code>-c</code>       列出明细的同时，增加汇总值</li></ul></li><li><p>应用实例：</p><ul><li><p>查询 /opt 目录占用磁盘的情况，深度为1</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012120609.png" alt=""></p></li></ul></li></ul></li></ul><h5 id="四-磁盘情况-工作实用指令"><a href="#四-磁盘情况-工作实用指令" class="headerlink" title="四.磁盘情况-工作实用指令"></a>四.磁盘情况-工作实用指令</h5><ul><li><p>统计 /opt  文件夹下文件个数</p><ul><li>指令：<code>ls -l /opt | grep &quot;^-&quot; | wc -l</code></li></ul></li><li><p>统计 /opt  文件夹下目录个数</p><ul><li>指令：<code>ls -l /opt | grep &quot;^d&quot; | wc -l</code></li></ul></li><li><p>统计 /opt  文件夹下文件个数，包括子文件里面的</p><ul><li>指令：<code>ls -lR /opt | grep &quot;^-&quot; | wc -l</code></li></ul></li><li><p>统计 /opt  文件夹下目录个数,包括子文件里面的</p><ul><li>指令：<code>ls -lR /opt | grep &quot;^d&quot; | wc -l</code></li></ul></li><li><p>以树结构显示目录结构 tree 目录，注意，如果没有 tree，则使用 <code>yum install tree</code> 安装</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012121351.png" alt=""></p></li></ul><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><h5 id="一-网络配置原理图"><a href="#一-网络配置原理图" class="headerlink" title="一.网络配置原理图"></a>一.网络配置原理图</h5><ul><li><p>Linux 网络配置原理图</p><p><img src="D:\图片\资料\QQ截图20221012154456.png" alt=""></p></li></ul><h5 id="二-查看虚拟网络编辑器和修改-IP-地址"><a href="#二-查看虚拟网络编辑器和修改-IP-地址" class="headerlink" title="二.查看虚拟网络编辑器和修改 IP 地址"></a>二.查看虚拟网络编辑器和修改 IP 地址</h5><ul><li><p>修改IP：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012155528.png" alt=""></p></li><li><p>查看网关：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012160453.png" alt=""></p></li></ul><h5 id="三-查看-windows-环境中-VMnet8-网络配置-ipconfig-指令"><a href="#三-查看-windows-环境中-VMnet8-网络配置-ipconfig-指令" class="headerlink" title="三.查看 windows 环境中 VMnet8 网络配置(ipconfig 指令)"></a>三.查看 windows 环境中 VMnet8 网络配置(ipconfig 指令)</h5><ul><li><p>指令：在 windows 的 dos 命令窗口 输入 <code>ipconfig</code></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012161245.png" alt=""></p></li><li><p>查看 Linux 的网络配置 (ifconfig)</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012161507.png" alt=""></p></li><li><p>ping 测试主机之间网络连通性</p><ul><li>基本语法：<code>ping [ip] 或者[dns]</code> (功能描述：测试当前服务器是否可以连接目的主机)</li><li>应用实例：测试当前服务器是否可以连接百度 <code>ping www.baidu.com</code></li></ul></li></ul><h5 id="四-Linux-网络环境配置"><a href="#四-Linux-网络环境配置" class="headerlink" title="四.Linux 网络环境配置"></a>四.Linux 网络环境配置</h5><ul><li>第一种方式(自动获取 DHCP)<ul><li>说明：登录后，通过界面的设置来自动获取ip，特点：Linux 启动后会自动获取ip，缺点是每次自动获取的ip地址可能会不一样(当该ip被其他主机占用时，会重新分配一个新的ip)</li></ul></li><li>第二种方式(指定ip)<ul><li>说明：直接修改配置文件夹来指定ip，并可以连接到外网</li><li>编辑：<code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></li><li>要求：将 ip 地址配置为静态，比如：ip地址为：192.168.200.130</li><li>ifcfg-ens33 文件说明<ul><li><img src="D:\图片\资料\QQ截图20221012164508.png" alt=""></li><li><img src="D:\图片\资料\QQ截图20221012164542.png" alt=""></li></ul></li><li>重启网络服务或者重启系统生效<ul><li>指令：<code>service network restart</code> (重启网络服务)  或者 <code>reboot</code></li></ul></li></ul></li></ul><h5 id="五-设置主机名和hosts映射"><a href="#五-设置主机名和hosts映射" class="headerlink" title="五.设置主机名和hosts映射"></a>五.设置主机名和hosts映射</h5><ul><li><p>设置主机别名</p><ul><li><ol><li>为了方便记忆，可以给Linux系统设置主机别名，也可以根据需要修改主机别名</li><li>指令：<code>hostname</code> : 查看主机名</li><li>修改文件在 /etc/hostname  指定</li><li>修改后，重启生效</li></ol></li></ul></li><li><p>设置hosts映射</p><ul><li>windows<ul><li>在 C:\Windows\System32\drivers\etc\hosts  文件指定即可</li></ul></li><li>linux<ul><li>在 /etc/hosts  文件指定</li></ul></li></ul></li><li><p>主机域名解析 过程分析(DNS、Hosts) </p><ul><li><p>Hosts 是什么 ：一个文本文件，用来记录 IP 和 Hostname(主机名) 的映射关系</p></li><li><p>DNS：DNS 就是 Domain Name System 的缩写，翻译过来就是域名系统，是互联网上作为域名和 IP 地址相互映射的一个分布式数据库</p></li><li><p>应用实例：用户在浏览器上输入一个 <code>www.baidu.com</code></p><ul><li><p>浏览器先检查浏览器缓存中有没有该域名解析IP地址，有就先调用这个IP完成解析；如果没有，就检查DNS解析器缓存，如果有就直接返回IP完成解析。这两个缓存，可以理解为，本地解析器缓存</p></li><li><p>如果本地解析器缓存没有找到对应的映射，检查系统中 hosts 文件中有没有配置对应的域名IP映射，如果有，则完成解析返回</p></li><li><p>如果本地DNS解析器 和hosts文件中 没有找到对应映射，则到域名服务器 DNS 进行解析域</p><p>示意图：</p><p>​    <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012213541.png" alt=""></p></li><li><p>一般来说，当电脑第一次成功访问某一个网站后，在一定时间内，浏览器或操作系统会缓存他的IP地址(DNS解析记录)。如在 cmd 窗口输入</p><ul><li><code>ipconfig /displaydns</code>  //DNS 域名解析缓存</li><li><code>ipconfig /flushdns</code>   //手动清理 dns 缓存</li></ul></li></ul></li></ul></li></ul><h1 id="进程管理-重点"><a href="#进程管理-重点" class="headerlink" title="进程管理(重点)"></a>进程管理(重点)</h1><ul><li><p>基本介绍：</p><ul><li><p>在 Linux 中，每一个执行的程序都称为一个进程。每一个进程都分配了一个 ID号(端口port) pid</p></li><li><p>每一个进程都可以以两种方式存在。前台和后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。(服务器类似后台)</p></li><li><p>一般系统的服务器都是以后台进程进行存在，而且都会常驻在系统中，直至关机才结束</p><p>示意图：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012214321.png" alt=""></p></li></ul></li></ul><h5 id="一-显示系统执行的进程"><a href="#一-显示系统执行的进程" class="headerlink" title="一.显示系统执行的进程"></a>一.显示系统执行的进程</h5><ul><li><p>基本介绍：<code>ps</code>  命令是用来查看目前系统中，有哪些正在执行的进程，以及它们执行的状况。可以不加参数</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221012215033.png" alt=""></p></li><li><p><code>ps</code> 详解</p><ul><li>指令：<code>ps-aux | grep xxx</code>  比如查看有没有sshd 服务</li><li>指令说明<ul><li><code>System V</code> ： 展示风格</li><li><code>User</code> ：用户名称</li><li><code>PID</code> ：进程号</li><li><code>%CPU</code> ：进程占用CPU的百分比</li><li><code>%MEM</code> ：进程占用物理内存的百分比</li><li><code>VSZ</code> ：进程占用虚拟内存大小(单位：kb)</li><li><code>RSS</code> ：进程占用的物理内存大小(单位：kb)</li><li><code>TT</code> ：终端名称，缩写</li><li><code>STAT</code> : 进程状态，其中 S- 睡眠，s- 表示改进程是会话的先导进程，N- 表示进程拥有比普通优先级更低的优先级，R- 正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等</li><li><code>STARTED</code> : 进程启动时间</li><li><code>TIME</code> : CPU 时间，即进程使用CPU的总时间</li><li><code>COMMAND</code> : 启动进程所用的命令和参数，如果过长会被截断显示</li></ul></li><li>应用实例：<ul><li>要求：以全格式显示当前所有的进程，查看进程的父进程。查看 sshd 的父进程信息</li><li><code>ps -ef</code> 是以全格式显示当前所有的进程</li><li><code>-e</code> 是显示所有进程，<code>-f</code> 是全格式</li><li><code>ps -ef | grep sshd</code></li><li><strong>是BSD风格</strong></li><li><code>UID</code> : 用户ID</li><li><code>PID</code> : 进程ID</li><li><code>PPID</code> ：父进程ID</li><li><code>C</code>  ：CPU 用于计算执行优先级的因子。数值越大，表示进程是CPU密集型运算，执行优先级会降低；数值越小，表示进程是 I/O 密集型运算，执行优先级会提高</li><li><code>STIME</code> ：进程启动时间</li><li><code>TTY</code> ：完整的终端名称</li><li><code>TIEM</code> ：CPU 时间</li><li><code>CMD</code> ：启动进程所用的命令和参数</li></ul></li></ul></li></ul><h5 id="二-终止进程-kill-和-killall"><a href="#二-终止进程-kill-和-killall" class="headerlink" title="二.终止进程 kill 和 killall"></a>二.终止进程 kill 和 killall</h5><ul><li>介绍：若是某个进程执行到一半需要停止时，或是已消费了很大的系统资源时，此时可以考虑停止该进程。使用 kill 命令来完成此项任务</li><li>基本选项：<ul><li><code>kill [选项] [进程号]</code> (功能描述：通过进程号杀死/终止进程)</li><li><code>killall [进程名称]</code>  (功能描述：通过进程名称杀死进程，也支持通配符，这在系统负载过大而变得很慢时很有用)</li></ul></li><li>常用选项<ul><li><code>-9</code> : 表示强迫进程执行，立即停止</li></ul></li><li>应用实例：<ul><li>案例1：踢掉某个非法登录用户<ul><li>指令：<code>kill [进程号]</code>  <code>kill 11111</code></li></ul></li><li>案例2：终止远程登录服务 sshd,在适当的时候再次重启 sshd 服务<ul><li><code>kill sshd 11111</code>  11111 进程号 对应的是 /bin/system start sshd.service</li></ul></li><li>案例3：终止多个 gedit，演示<code>killall gedit</code></li><li>案例4：强制终止一个终端<ul><li>指令：<code>kill -9 bash [进程号]</code></li></ul></li></ul></li></ul><h5 id="三-查看进程树pstree"><a href="#三-查看进程树pstree" class="headerlink" title="三.查看进程树pstree"></a>三.查看进程树pstree</h5><ul><li>基本语法<ul><li><code>pstree [选项]</code> 可以更加直观的查看进程信息</li></ul></li><li>常用选项<ul><li><code>-p</code> : 显示进程的 PID</li><li><code>-u</code> ：显示进程的所属用户</li></ul></li><li>应用实例：<ul><li>案例1：请你以树状的形式显示进程的PID<ul><li>指令：<code>pstree -p</code></li></ul></li><li>案例2：请你以树状的形式显示进程的用户<ul><li>指令：<code>pstree -u</code></li></ul></li></ul></li></ul><h5 id="四-服务管理"><a href="#四-服务管理" class="headerlink" title="四.服务管理"></a>四.服务管理</h5><ul><li><p>介绍：服务(service)本质就是进程，但是是运行再后台的进程，通常都会监听某个端口，等待其他程序的请求，比如(mysqld,sshd,firewalld)等，因此我们又称为守护进程，是Linux中非常重要的知识。</p></li><li><p><strong><code>service</code> 管理指令</strong></p><ul><li><p><code>service [服务名] [ start | stop | restart | reload | status]</code> ：(服务器的开启与关闭)</p></li><li><p>在CentOS7.0后，很多服务不在使用 service ，而是 systemctl</p></li><li><p>service 指令管理的服务在 /etc/init.d 查看</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221014110742.png" alt=""></p></li></ul></li><li><p><strong>service 管理指令案例</strong></p><ul><li>请使用 service 指令，查看，关闭，启动， network [注意：在虚拟系统演示，因为网络连接会关闭]<ul><li>指令：<ul><li><code>service network status</code> ：network 服务的状态</li><li><code>service network stop</code> ：关闭，network 服务</li><li><code>service network start</code> : 开启，network 服务</li></ul></li></ul></li></ul></li><li><p><strong>查看服务名</strong></p><ul><li><p>方式1：使用 <code>setup</code> ——-&gt;系统服务 ，就能看到所有的服务</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221014111419.png" alt=""></p></li><li><p>方式2： /etc/init.d 查看 service 指令管理的服务</p><ul><li>指令：<code>ls -l /etc/init.d/</code></li></ul></li></ul></li><li><p><strong>服务的运行级别</strong></p><ul><li><p>运行级别0:系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</p></li><li><p>运行级别1:单用户工作状态，root 权限，用于系统维护，禁止远程登陆</p></li><li><p>运行级别2:多用户状态(没有NFS),不支持网络</p></li><li><p>运行级别3:完全的多用户状态(有NFS)，无界面，登陆后进入控制台命令行模式</p></li><li><p>运行级别4:系统未使用，保留</p></li><li><p>运行级别5: X11控制台，登陆后进入图形GUI模式</p></li><li><p>运行级别6:系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p></li><li><p><strong>开机的流程说明：</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221014112148.png" alt=""></p></li></ul></li><li><p><strong><code>chkconfig</code> 指令</strong></p><ul><li><p>介绍：</p><ul><li>通过chkconfig命令可以给服务的各个运行级别设置自启动/关闭</li><li><strong>chkconfig指令管理的服务在/etc/init.d 查看</strong>；注意：(只能管理里面列出的服务)</li><li>注意: Centos7.0后，很多服务使用systemctl管理(后 面马上讲)</li></ul></li><li><p><strong><code>chkconfig</code> 基本语法</strong></p><ul><li><ol><li><p>查看服务 ：<code>chkconfig --list | grep xxx</code></p><p>​    <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221014141555.png" alt=""></p></li><li><p>修改服务的运行级别：<code>chkconfig --level [级别] [服务名] on/off</code></p></li></ol></li><li><p>案例演示：对 network 服务，进行各种操作，把 network 在3运行级别，关闭自动启</p><ul><li><code>chkconfig --level 3 network off</code>  自启动：关闭</li><li><code>chkconfig --level 3 network on</code>   自启动：开启</li></ul></li><li><p>使用细节：chkconfig 重新设置服务后自启动或关闭，需要重新启动机器 reboot 生效</p></li></ul></li></ul></li><li><p><strong><code>systemctl</code> 管理指令</strong></p><ul><li>基本语法：<code>systemctl [ start | stop | restart | status] [服务名]</code> ：(服务器的开启与关闭)</li><li><strong>systemctl  指令管理的服务在  /use/bin/systemd/system  查看</strong></li><li>systemctl 设置服务的自启动状态<ul><li><code>systemctl list-unit-files | grep [服务名]</code>  ：查看服务开机启动状态</li><li><code>systemctl enable [服务名]</code> ：设置服务开机启动 <strong>(默认是3和5的运行级别)</strong></li><li><code>systemctl disable [服务名]</code> ：设置关闭服务开机启动 <strong>(默认是3和5的运行级别)</strong></li><li><code>systemctl is-enabled [服务名]</code> ：查看某个服务是否开机启动</li></ul></li><li>应用案例：<ul><li>查看当前防火墙的状况，关闭防火墙和重启防火墙。(firewalld.service)</li><li><code>systemctl status firewalld</code> ：查看防火墙的状态</li><li><code>systemctl stop firewalld</code> ：关闭防火墙</li><li><code>systemctl start firewalld</code> ：开启防火墙</li><li>关闭或者启用防火墙后，立即生效。[telnet 测试某 个端口即可]；这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。<strong>如果希望设置某个服务自启动或关闭永久生效，要使用systemctl [enable | disable] 服务名</strong></li></ul></li></ul></li><li><p><strong>打开或者关闭指定端口</strong></p><ul><li><p>在真正的生产环境，往往需要将防火墙打开，但问题来了，如果我们把防火墙打开，那么外部请求数据包就不能跟服务器监听端口通讯。这时，需要打开指定的端口。比如80、22、 8080等，这个又怎么做呢?老韩给给大家讲一讲。[示意图]</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221014145941.png" alt=""></p></li><li><p><code>firewall</code> 指令</p><ul><li>打开端口：<code>firewall-cmd --permanent --add-port=端口号/协议</code></li><li>关闭端口：<code>firewall-cmd --permanent --remove-port=端口号/协议</code></li><li>重新载入，才能生效：<code>firewall-cmd --reload</code></li><li>查询端口是否开放：<code>firewall-cmd --query-port=端口号/协议</code></li></ul></li><li><p>应用案例</p><ul><li>启用防火墙，测试 111 端口是否能 telnet (不能)  指令：<code>systemctl start firewalld</code></li><li>开放 111 端口<ul><li>指令：<code>firewall-cmd --permanent --add-port=111/tcp</code></li><li>需要重新加载，才能生效：<code>firewall-cmd --reload</code></li></ul></li><li>再次关闭端口<ul><li>指令：<code>firewall-cmd --permanent --remove-port=111/tcp</code></li><li>需要重新加载，才能生效：<code>firewall-cmd --reload</code></li></ul></li></ul></li></ul></li><li><p><strong>动态监控进程</strong></p><ul><li><p>介绍：<code>top</code> 与 <code>ps</code> 指令很相似，他们都是用来显示正在执行的进程。<code>top</code> 与 <code>ps</code> 最大的不同之处，在于 <strong>top 在执行一段时间后可以更新正在执行的进程</strong></p></li><li><p>基本语法：</p><ul><li><p>指令：<code>top [选项]</code></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221015113013.png" alt=""></p></li><li><p>选项说明：</p><p>| ————————- | —————————————————————————— |<br>| ————————- | —————————————————————————— |<br>| 选项              | 功能                                                 |<br>| -d （秒数）       | 指定top命令每隔几秒更新，默认是3秒                   |<br>| -i                | 使top不显示任何闲置或者僵死的进程                    |<br>| -p                | 通过指定监控进程PID来仅仅监控某个进程的状态          |</p></li><li><p>交互操作说明</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221015113745.png" alt=""></p></li><li><p>应用实例：</p><ul><li>案例1：监视特定用户，比如我们监控 tom 用户<ul><li><code>top</code>: 输入此命令，按回车，查看执行的进程</li><li><code>u</code> : 然后，再输入用 <strong>tom</strong>，回车即可</li></ul></li><li>案例2：终止特定的进程，比如我们要结束 tom 登录<ul><li><code>top</code>: 输入此命令，按回车，查看执行的进程</li><li><code>u</code> : 然后，再输入用户名，回车即可</li><li><code>k</code> ：然后回车，输入要结束进程的PID 回车，最后输入 9 表示强制执行</li></ul></li><li>案例3：指定系统状态更新的时间（每隔10秒自动更新），默认三秒<ul><li><code>top -d 10</code></li></ul></li></ul></li></ul></li></ul></li><li><p><strong>监控网络状况</strong></p><ul><li><p>查看系统网络情况：<code>netstat</code></p></li><li><p>基本语法：<code>netstat [选项]</code></p></li><li><p>选项说明：</p><ul><li><code>-an</code> 按照一定顺序排列</li><li><code>-p</code> 显示哪个进程再调用</li></ul></li><li><p>应用案例：</p><ul><li><p>请查看服务名 为 sshd 的服务信息</p></li><li><p>指令：<code>netstat -anp | grep sshd</code></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221015140951.png" alt=""></p></li></ul></li></ul></li><li><p><strong>检测主机连接命令 ping </strong></p><ul><li>是一种网络检测工具，它主要是用检测远程主机是否正常，或是两部主机的网线或网卡故障</li><li>指令：<code>ping [对方的IP]</code></li></ul></li></ul><h1 id="RPM-与-YUM"><a href="#RPM-与-YUM" class="headerlink" title="RPM 与 YUM"></a>RPM 与 YUM</h1><h5 id="rpm-包的管理"><a href="#rpm-包的管理" class="headerlink" title="rpm 包的管理"></a><strong>rpm 包的管理</strong></h5><ul><li>介绍：rpm用于互联网下载包的打包及安装工具，它包含在某些Linux分发版中。它生成具有.RPM扩展名的文件。RPM是RedHat Package Manager ( RedHat软件包管理工具)的缩写，类似windows的setupexe,这一文件格式名称虽然打上了RedHat的标志，但理念是通用的。Linux的分发版本都有采用(suse,redhat, centos等等)，可以算是公认的行业标准了。</li><li><strong>rpm 包名基本格式</strong><ul><li>一个 rpm 包名：firefox-60.2.2-1.e17.centos.x86_64</li><li>名称：firefox</li><li>版本号：60.2.2-1</li><li>适用操作系统：e17.centos.x86_64 ，表示 centos7.x 的64位操作系统，如果是 i686、i386 表示 32 位操作系统， noarch 表示通用</li></ul></li><li><strong>rmp 包的其他查询指令</strong><ul><li><code>rpm -qa</code>：查询所安装的所有 rpm 软件包</li><li><code>rpm -qa | more</code> </li><li><code>rpm -qa | grep xxx</code> ：查询已安装的 rpm 列表</li><li><code>rpm -q [软件包名]</code>  ：查询软件包，是否安装  <ul><li>举例：看看当前系统，是否安装了 firefox </li><li>指令：<code>rpm -q firefox</code>  或者 <code>rpm -qa | grep firefox</code></li></ul></li><li><code>rpm -qi [软件包名]</code> ：查询软件包名信息<ul><li>案例：<code>rpm -qi firefox</code></li></ul></li><li><code>rpm -qf [文件全路径名]</code> ：查询文件所属的软件包<ul><li>案例：查询 /etc/passwd 文件所属的软件包是什么</li><li><code>rpm -qf /etc/passwd</code></li></ul></li></ul></li><li><strong>卸载 rpm 包</strong><ul><li>基本语法：<code>rpm -e [RPM包的名称]</code> <ul><li>应用案例：删除 firefox 软件包</li><li>指令：<code>rpm -e firefox</code></li></ul></li><li>细节讨论<ul><li>如果其他软件包依赖于你要卸载的软件包，卸载时则会产生错误信息<ul><li>指令：<code>rpm -e foo</code></li><li>removing these packages would break dependencies:foo is needed by bar-1.0-1</li></ul></li><li>如果我们就是要删除foo这个rpm包，可以增加参数 —nodeps ,就可以强制删除，但是一.般不推荐这样做，因为依赖于该软件包的程序可能无法运行<ul><li>指令：<code>rpm -e --nodeps foo</code></li></ul></li></ul></li></ul></li><li><strong>安装 rpm 包</strong><ul><li>基本语法：<code>rpm -ivh [RPM包全路径名称]</code></li><li>参数说明：<ul><li><code>i</code> = install 安装</li><li><code>v</code> = verbose 提示</li><li><code>h</code> = hash 进度条</li></ul></li><li>应用案例 ：演示卸载和安装 firefox 浏览器<ul><li>卸载：<code>rpm -e firefox</code></li><li>安装：<code>rpm -ivh firefox</code></li></ul></li></ul></li></ul><h5 id="yum"><a href="#yum" class="headerlink" title="yum"></a><strong>yum</strong></h5><ul><li><p>介绍：Yum 是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且- -次安装所有依赖的软件包。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221015160020.png" alt=""></p></li><li><p><strong>yum 的基本指令</strong></p><ul><li>查询 yum 服务器是否有需要安装的软件</li><li>指令：<code>yum list | grep [软件包名]</code><ul><li>案例：查看 yum 服务器是否有 firefox</li><li>指令：<code>yum list | grep firefox</code></li></ul></li></ul></li><li><p><strong>安装指定的 yum 包</strong></p><ul><li>指令：<code>yum install [软件包名]</code> ：下载安装</li></ul></li><li><p>yum 应用实例：</p><ul><li>案例：请使用 yum 的方式，来安装 firefox</li><li>指令：<ul><li><code>rpm -e firefox</code>：删除firefox</li><li><code>yum list | grep firefox</code> ：查询 yum 服务器是否有firefox软件包</li><li><code>yum install firefox</code> ：从yum服务器上下载firefox</li></ul></li></ul></li></ul><h1 id="搭建javaSE环境"><a href="#搭建javaSE环境" class="headerlink" title="搭建javaSE环境"></a>搭建javaSE环境</h1><ul><li><p>概述：如果需要在Linux 下进行javaEE的开发，我们需要安装如下软件</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221017101750.png" alt=""></p></li></ul><h5 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h5><ul><li><p>安装步骤：</p><ul><li><ol><li><code>mkdir /opt/jdk</code>  ：创建新目录</li><li>通过 xftp6 上传到 /opt/jdk 下；将jdk 传至新目录下</li><li><code>cd /opt/jdk</code>：去已经有 jdk 的安装包下</li><li>解压 <code>tar -zxvf jdk-8u261-linux-x64.tar.gz</code>：对安装包进行解压</li><li><code>mkdir /usr/local/java</code> ：创建新目录</li><li><code>mv /opt/jdk/jdk.8.0_261 /usr/local/java</code> 将解压后的 jdk 放置在新目录下</li><li><code>vim /etc/profile</code> ：配置java环境变量的配置文件<ol><li>在配置文件下加入：<ol><li><code>export JAVA_HOME=/usr/local/java/jdk1.8.0_261</code> </li><li><code>export PATH=$JAVA_HOME/bin:$PATH</code></li></ol></li><li>保存并退出：<code>:wq</code></li></ol></li><li><code>source /etc/porfile</code> ：让新的环境变量生效</li></ol></li><li><p>测试是否安装成功</p><ul><li><p>编写一个简单的 Hello.java ;输出“hello,world”</p></li><li><p><code>vim Hello.java</code> 然后输入以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h5 id="安装-tomcat"><a href="#安装-tomcat" class="headerlink" title="安装 tomcat"></a>安装 tomcat</h5><ul><li><p>安装步骤：</p><ul><li><ol><li><code>mkdir /opt/tomcat</code>  ：创建新目录</li><li>通过 xftp6 将tomcat 传至新目录—-&gt;上传到 /opt/tomcat 下；</li><li><code>cd /opt/tomcat</code>：去已经有 tomcat 的安装包下</li><li>解压 <code>tar -zxvf [tomcat 的安装包]</code>：对安装包进行解压</li><li>进入 解压后的 /bin 目录；启动 tomcat<ol><li><code>cd /bin</code>      <code>./startup.sh</code></li></ol></li><li>开放端口 8080 <ol><li><code>firewall-cmd --permanent --add-port=8080/tcp</code></li><li>重新载入，才能生效：<code>firewall-cmd --reload</code></li></ol></li></ol></li></ul></li><li><p>测试是否安装成功</p><ul><li><p>在windows 的浏览器下的 URL 下输入：<a href="http://linuxip:8080">http://linuxip:8080</a> ;linuxip 为自己Linux的ip地址</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221017105827.png" alt=""></p><p>如果有此图表示成功</p></li></ul></li></ul><h5 id="idea2020的安装"><a href="#idea2020的安装" class="headerlink" title="idea2020的安装"></a>idea2020的安装</h5><ul><li>安装步骤：<ul><li><ol><li><code>mkdir /opt/idea</code>  ：创建新目录</li><li>通过 xftp6将idea 传至新目录—-&gt;上传到 /opt/idea 下；</li><li><code>cd /opt/idea</code>：去已经有 idea 的安装包下</li><li>解压 <code>tar -zxvf [idea 的安装包]</code>：对安装包进行解压</li><li>在 图形界面上进行操作：（不能远程操作及指令操作）<ol><li>通过指令进入 idea 的 bin 目录下：<code>cd /opt/idea</code>     <code>cd idea-IU-202.7660.26/</code>      <code>cd bin/</code></li><li>启动 idea bin目录下的 <code>./idea.sh</code>  就打开idea了</li></ol></li></ol></li></ul></li></ul><h5 id="mysql5-7的安装"><a href="#mysql5-7的安装" class="headerlink" title="mysql5.7的安装"></a>mysql5.7的安装</h5><ul><li><p>安装步骤：</p><ul><li><ol><li><p><code>mkdir /opt/mysql</code> : 新建文件夹/opt/mysql，并cd进去</p></li><li><p>通过 xftp6 将mysql传至新目录—-&gt;上传到 /opt/mysql 下 </p></li><li><p><code>cd /opt/mysql</code>：去已经有 mysql 的安装包下</p></li><li><p>运行 <code>tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</code> ：对安装包进行解压</p></li><li><p>centos7.6自带的类mysql数据库是mariadb，会跟mysql冲突，要先删除。</p><ol><li>运行 <code>rpm -qa|grep mari</code>，查询mariadb相关安装包</li><li>运行 <code>rpm -e --nodeps mariadb-libs</code>，卸载</li><li>运行 <code>rpm -e --nodeps marlisa</code>，卸载</li></ol></li><li><p>然后开始真正安装mysql，依次运行以下几条  </p><ol><li><code>rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</code></li><li><code>rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm</code></li><li><code>rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</code></li><li><code>rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</code></li></ol></li><li><p>运行 <code>systemctl start mysqld.service</code>，启动mysql</p></li><li><p>然后开始设置root用户密码</p><ol><li><p>Mysql自动给root用户设置随机密码，运行 <code>grep &quot;password&quot; /var/log/mysqld.log</code> 可看到当前密码  </p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221017112313.png" alt=""></p></li><li><p>运行 <code>mysql -u root -p</code>，用root用户登录，提示输入密码可用上述的，可以成功登陆进入mysql命令行</p></li><li><p>设置root密码，对于个人开发环境，如果要设比较简单的密码（<strong>生产环境服务器要设复杂密码</strong>），可以运行</p><p><code>set global validate_password_policy=0</code>  提示密码设置策略;（validate_password_policy默认值1，）</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20221017112515.png" alt=""></p></li><li><p><code>set password for &#39;root&#39;@&#39;localhost&#39; =password(&#39;hspedu100&#39;);</code> ：hspedu100 为新密码</p></li><li><p>运行 <code>flush privileges;</code> 使密码设置生效  （注意里面有 ; ）</p></li></ol></li></ol></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux笔记&quot;&gt;&lt;a href=&quot;#Linux笔记&quot; class=&quot;headerlink&quot; title=&quot;Linux笔记&quot;&gt;&lt;/a&gt;Linux笔记&lt;/h1&gt;&lt;h1 id=&quot;虚拟的克隆和快照及迁移和删除&quot;&gt;&lt;a href=&quot;#虚拟的克隆和快照及迁移和删除&quot; cla</summary>
      
    
    
    
    <category term="开发必备框架" scheme="https://manamn.space/categories/%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="开发必备框架" scheme="https://manamn.space/tags/%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Web环境搭建以及Servlet入门</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/Web%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8AServlet%E5%85%A5%E9%97%A8/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/Web%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8AServlet%E5%85%A5%E9%97%A8/</id>
    <published>2022-10-16T15:01:07.000Z</published>
    <updated>2022-10-17T13:38:41.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web环境搭建以及Servlet入门"><a href="#Web环境搭建以及Servlet入门" class="headerlink" title="Web环境搭建以及Servlet入门"></a>Web环境搭建以及Servlet入门</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始  —————</strong></p><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>理解WEB相关概念和WEB服务器概念</li><li>会安装、卸载、启动和关闭tomcat</li><li>掌握使用tomcat部署项目</li><li>能够使用Eclipse开发Web应用程序</li><li>了解Servlet概念</li><li>掌握Servlet的执行原理和生命周期</li><li>掌握Servlet的体系结构，了解其他Servlet配置</li><li>掌握Servlet3.0注解配置</li><li>理解HTTP协议及HTTP请求和响应</li><li>熟练掌握Request和Response核心API</li><li>熟练掌握登陆案例</li></ul><h1 id="一-、Web相关概念"><a href="#一-、Web相关概念" class="headerlink" title="一 、Web相关概念"></a>一 、Web相关概念</h1><h3 id="1-1-软件架构"><a href="#1-1-软件架构" class="headerlink" title="1.1 软件架构"></a>1.1 软件架构</h3><p>WEB：在英语中web即表示网页的意思，它用于表示Internet主机上供外界访问的资源。<br>JavaWeb：使用Java语言开发基于互联网的项目</p><h4 id="1-1-1-软件架构："><a href="#1-1-1-软件架构：" class="headerlink" title="1.1.1 软件架构："></a>1.1.1 软件架构：</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E5%9B%BE%E7%89%871.png" style="zoom:48%;" /></p><h4 id="1-1-2-软件架构详解："><a href="#1-1-2-软件架构详解：" class="headerlink" title="1.1.2 软件架构详解："></a>1.1.2 软件架构详解：</h4><ul><li><strong>C/S</strong>: Client/Server 客户端/服务器端<ul><li>在用户本地有一个客户端程序，在远程有一个服务器端程序<ul><li>如：QQ，迅雷…</li></ul></li><li>特点：<ul><li>充分发挥客户端PC的处理能力，很多数据可以通过客户端的处理后再发给服务器，降低了服务器的负荷，提高了速度。但维护和升级比较复杂，维护和升级是针对成千上万的客户机的。</li><li>必须安装专用的客户端软件。客户端是成千上万的，要安装专用软件，是多么大的工作量，如果一台客户机出现了问题，如：感染病毒、计算机故障等等原因，都需要进行安装或维护。系统软件需要升级的时候，每一台客户机都需要重新安装系统软件，维护和升级成本相当的高。</li><li>对客户机的操作系统有限制，对一些操作系统和新开发的操作系统不兼容。目前产品更新换代十分的快，要针对不同的操作系统系统版本开发不同的客户机软件，对成本而言是相当大。</li></ul></li></ul></li><li><strong>B/S</strong>: Browser/Server 浏览器/服务器端<ul><li>只需要一个浏览器，用户通过不同的网址(URL)，客户访问不同的服务器端程序<ul><li>如：淘宝，京东…</li></ul></li><li>特点：<ul><li>维护和升级简单，我们只要对服务器端进行维护和升级即可，不需要对成千上万的客服端进行维护和升级，减少了人力资源成本。</li><li>随时随地都可以访问，只要有一台连接互联网和安装了浏览器的计算机就可以访问。</li><li>减轻了客户端电脑载荷，客户端电脑只要运行少部分程序就能实现。因此对客服端电脑要求不高，对服务器端负荷较重，由于主要的功能都集中到了服务器端，因此对服务器要求高，但总体而言，还是大大降低了成本。</li></ul></li></ul></li><li><strong>总结</strong>：B/S对C/S而言，B/S具有的优势。<ul><li>分布性：可以随时随地进行查询和浏览等业务；</li><li>功能业务扩展比较方便：增加服务器的功能，就能增加浏览器端的功能；</li><li>维护简单方便：改变服务器端数据即可以实现所有用户同步更新；</li><li>开发简单，共享性强，成本低，数据可以持久存储在服务器端而不必担心数据的丢失。</li></ul></li></ul><h3 id="1-2-Web资源分类"><a href="#1-2-Web资源分类" class="headerlink" title="1.2 Web资源分类"></a>1.2 Web资源分类</h3><ul><li><strong>静态资源：</strong><ul><li>使用静态网页开发技术发布的资源</li><li>特点：<ul><li>所有用户访问，得到的结果是一样的<ul><li>如：文本，图片，音频、视频, <code>HTML,CSS,JavaScript</code></li></ul></li><li>如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源</li></ul></li></ul></li><li><strong>动态资源：</strong><ul><li>使用动态网页技术发布的资源</li><li>特点：<ul><li>所有用户访问，得到的结果可能不一样<ul><li>如：<code>jsp/servlet,php,asp...</code></li></ul></li><li>如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器            </li></ul></li></ul></li></ul><h3 id="1-3-网络通信三要素"><a href="#1-3-网络通信三要素" class="headerlink" title="1.3 网络通信三要素"></a>1.3 网络通信三要素</h3><p><strong>IP</strong>：电子设备(计算机)在网络中的唯一标识</p><p><strong>端口</strong>：应用程序在计算机中的唯一标识。 0~65536</p><p><strong>传输协议</strong>：规定了数据传输的规则</p><ul><li><p>基础协议：</p><ul><li>tcp:安全协议，三次握手。 速度稍慢</li><li>udp：不安全协议。 速度快</li></ul></li><li><p>高级协议</p><ul><li>http协议<ul><li>基于TCP/IP的高级协议</li><li>基于请求/响应模型的:一次请求对应一次响应</li></ul></li></ul></li></ul><h3 id="1-4-Web资源请求响应过程"><a href="#1-4-Web资源请求响应过程" class="headerlink" title="1.4 Web资源请求响应过程"></a>1.4 Web资源请求响应过程</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B.png" alt=""></p><h1 id="二、Web服务器软件"><a href="#二、Web服务器软件" class="headerlink" title="二、Web服务器软件"></a>二、Web服务器软件</h1><h3 id="2-1-web服务器软件概念"><a href="#2-1-web服务器软件概念" class="headerlink" title="2.1 web服务器软件概念"></a>2.1 web服务器软件概念</h3><p>服务器：安装了服务器软件的计算机。</p><p>服务器软件：接收用户的请求，处理请求，做出响应。</p><p>web服务器软件：接收用户的请求，处理请求，做出响应。</p><p>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目。</p><blockquote><p>疑问：学习web开发，为什么必须要先装一个WEB服务器 ?</p></blockquote><h3 id="2-2-常见的web服务器软件："><a href="#2-2-常见的web服务器软件：" class="headerlink" title="2.2 常见的web服务器软件："></a>2.2 常见的web服务器软件：</h3><ul><li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>webSphere：IBM公司， 大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</li></ul><h3 id="2-3-Tomcat：web服务器软件"><a href="#2-3-Tomcat：web服务器软件" class="headerlink" title="2.3 Tomcat：web服务器软件"></a>2.3 Tomcat：web服务器软件</h3><p>Tomcat免费的Web服务器，该服务器支持全部JSP以及Servlet规范，也是我们学习javaweb所使用的服务器，所以我们有必要深入了解;</p><h4 id="2-3-1-下载"><a href="#2-3-1-下载" class="headerlink" title="2.3.1 下载"></a>2.3.1 下载</h4><p>可以直接在官网下载：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><h4 id="2-3-2-安装"><a href="#2-3-2-安装" class="headerlink" title="2.3.2 安装"></a>2.3.2 安装</h4><p>解压压缩包即可。 </p><p>注意：安装目录建议不要有中文和空格,解压的目录结构如下图<br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/tomcat.png" style="zoom:75%;" /></p><h4 id="2-3-3-卸载"><a href="#2-3-3-卸载" class="headerlink" title="2.3.3 卸载"></a>2.3.3 卸载</h4><p>删除目录就行了</p><h4 id="2-3-4-启动"><a href="#2-3-4-启动" class="headerlink" title="2.3.4 启动"></a>2.3.4 启动</h4><p><code>bin/startup.bat</code> ,双击运行该文件即可</p><p>访问：浏览器输入：<a href="http://localhost:8080">http://localhost:8080</a> 回车访问自己</p><p>​                                   <a href="http://别人的ip:8080">http://别人的ip:8080</a> 访问别人</p><p>显示如下界面表示成功</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/sss.png" alt=""></p><p><strong>启动时可能遇到的问题</strong>：</p><ol><li><p>黑窗口一闪而过：</p><ol><li>原因： 没有正确配置JAVA_HOME环境变量</li><li>解决方案：正确配置JAVA_HOME环境变量</li></ol></li><li><p>端口号被占用：<br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%8D%A0%E7%94%A8.png" style="zoom:67%;" /></p></li><li><p>暴力解决：找到占用的端口号，并且找到对应的进程，杀死该进程</p><ol><li><p>使用命令<code>netstat –ano|findstr [指定端口号]</code>找到占用端口的进程 </p></li><li><p>打开任务管理器-&gt;查看-&gt;选择列-&gt;然后勾选PID选项，回到任务管理器上可以查看到对应的pid，然后结束进程</p></li><li><p>温柔解决：修改自身的端口号</p></li></ol><p>在conf/server.xml 配置文件中修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8888&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">redirectPort</span>=<span class="string">&quot;8445&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。</p><p>好处：在访问时，就不用输入端口号</p></blockquote></li></ol><h4 id="2-3-5-关闭"><a href="#2-3-5-关闭" class="headerlink" title="2.3.5 关闭"></a>2.3.5 关闭</h4><ul><li>正常关闭：<ul><li><code>bin/shutdown.bat</code></li><li><code>ctrl+c</code></li></ul></li><li>强制关闭：<ul><li>点击启动窗口的 <code>×</code></li></ul></li></ul><h4 id="2-3-6-Tomcat项目部署-（虚拟目录映射）"><a href="#2-3-6-Tomcat项目部署-（虚拟目录映射）" class="headerlink" title="2.3.6 Tomcat项目部署 （虚拟目录映射）"></a>2.3.6 Tomcat项目部署 （虚拟目录映射）</h4><p>Web应用开发好后，若想供外界访问，需要把web应用所在目录交给web服务器管理，这个过程称之为项目部署（虚拟目录的映射）。</p><ul><li><p>配置<code>conf/server.xml</code>文件, 在<code>&lt;Host&gt;</code>标签体中加入子标签配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;Context  path=&quot;虚拟路径&quot;   docBase =&quot;物理路径&quot; /&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;D:\hello&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/xixi&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure><ul><li><p><code>docBase</code>:项目存放的路径</p></li><li><p><code>path</code>：虚拟目录</p></li></ul></li><li><p>直接将项目放到webapps目录下即可</p><ul><li><code>/hello</code>：项目的访问路径—&gt;虚拟目录</li><li>简化部署：将项目打成一个war包，再将war包放置到webapps目录下。 war包会自动解压缩。</li></ul></li></ul><h1 id="三、使用IDEA开发Web应用程序"><a href="#三、使用IDEA开发Web应用程序" class="headerlink" title="三、使用IDEA开发Web应用程序"></a>三、使用IDEA开发Web应用程序</h1><h2 id="3-1-创建Web项目"><a href="#3-1-创建Web项目" class="headerlink" title="3.1 创建Web项目"></a>3.1 创建Web项目</h2><p><strong>File  ——-&gt;  New  ——-&gt;   Project ——-&gt;</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220819172013846.png" alt="image-20220819172013846"></p><p><strong>开始创建Web项目</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220819172350009.png" alt="image-20220819172350009" style="zoom: 80%;" /></p><p><strong>右键添加Web框架依赖 </strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220819172544437.png" alt="image-20220819172544437" style="zoom:67%;" /></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220819172629012.png" alt="image-20220819172629012" style="zoom:80%;" /></p><h2 id="3-2-IDEA配置Tomcat"><a href="#3-2-IDEA配置Tomcat" class="headerlink" title="3.2 IDEA配置Tomcat"></a>3.2 IDEA配置Tomcat</h2><p><strong>tomcat详细配置</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220819220432972.png" alt="image-20220819220432972" style="zoom:80%;" /></p><h2 id="3-3-JavaWeb应用目录结构"><a href="#3-3-JavaWeb应用目录结构" class="headerlink" title="3.3 JavaWeb应用目录结构"></a>3.3 JavaWeb应用目录结构</h2><p>开发web应用时，不同类型的文件有严格的存放规则，否则不仅可能会使web应用无法访问，还会导致web服务器启动报错</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/javaweb%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png"  /></p><blockquote><p>web应用中，web.xml文件是其中最重要的一个文件，它用于对web应用中的web资源进行配置。</p><p>但是在servlet3.0以后支持使用@Webservlet编程，进一步简化了JavaWeb开发。</p></blockquote><h1 id="四、Servlet"><a href="#四、Servlet" class="headerlink" title="四、Servlet"></a>四、Servlet</h1><h2 id="4-1-什么是Servlet？"><a href="#4-1-什么是Servlet？" class="headerlink" title="4.1 什么是Servlet？"></a>4.1 什么是Servlet？</h2><p>Servlet是一门用于开发动态web资源的技术，它是运行在服务器端的小程序。</p><p>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</p><p>作用：Servlet主要用于处理客户端传来的HTTP请求，并返回一个响应，它能够处理的请求有doGet()和doPost()等方法。</p><p>用户若想用发一个动态web资源(即开发一个Java程序向浏览器输出数据)，需要完成以下2个步骤：</p><ol><li>编写一个Java类，实现Servlet接口。</li><li>把开发好的Java类部署到web服务器中。</li></ol><h3 id="4-2什么是Servlet对象的生命周期"><a href="#4-2什么是Servlet对象的生命周期" class="headerlink" title="4.2什么是Servlet对象的生命周期"></a>4.2什么是Servlet对象的生命周期</h3><ul><li>Servlet对象什么时候被创建。</li><li>Servlet对象什么时候被销毁。</li><li>Servlet对象创建了几个？</li><li>Servlet对象的生命周期表示：一个Servlet对象从出生在最后的死亡，整个过程是怎样的。</li></ul><p>我们不需要在程序创建Servlet的对象，也没有去调用对象上的方法。Servlet对象的生命周期由web服务器负责</p><h3 id="Servlet对象是由谁来维护的？"><a href="#Servlet对象是由谁来维护的？" class="headerlink" title="Servlet对象是由谁来维护的？"></a>Servlet对象是由谁来维护的？</h3><ul><li>Servlet对象的创建，对象上方法的调用，对象最终的销毁，Javaweb程序员是无权干预的。</li><li>Servlet对象的生命周期是由Tomcat服务器（WEB Server）全权负责的。</li><li>Tomcat服务器通常我们又称为：WEB容器。（这个叫法你要知道【WEB Container】）</li><li>WEB容器来管理Servlet对象的死活。</li></ul><h3 id="思考：我们自己new的Servlet对象受WEB容器的管理吗？"><a href="#思考：我们自己new的Servlet对象受WEB容器的管理吗？" class="headerlink" title="思考：我们自己new的Servlet对象受WEB容器的管理吗？"></a>思考：我们自己new的Servlet对象受WEB容器的管理吗？</h3><ul><li>我们自己new的Servlet对象是不受WEB容器管理的。</li><li>WEB容器创建的Servlet对象，这些Servlet对象都会被放到一个集合当中（HashMap），只有放到这个HashMap集合中的Servlet才能够被WEB容器管理，自己new的Servlet对象不会被WEB容器管理。（自己new的Servlet对象不在容器当中）</li><li>web容器底层应该有一个HashMap这样的集合，在这个集合当中存储了Servlet对象和请求路径之间的关系</li><li><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220819233802399.png" alt="image-20220819233802399" style="zoom:80%;" /><br>key对应请求路径，value对应我们写的servlet程序</li></ul><h3 id="研究：服务器在启动的Servlet对象有没有被创建出来（默认情况下）？"><a href="#研究：服务器在启动的Servlet对象有没有被创建出来（默认情况下）？" class="headerlink" title="研究：服务器在启动的Servlet对象有没有被创建出来（默认情况下）？"></a>研究：服务器在启动的Servlet对象有没有被创建出来（默认情况下）？</h3><ul><li>在Servlet中提供一个无参数的构造方法，启动服务器的时候看看构造方法是否执行。</li><li><strong>经过测试得出结论：默认情况下，服务器在启动的时候Servlet对象并不会被实例化。</strong></li><li>这个设计是合理的。用户没有发送请求之前，如果提前创建出来所有的Servlet对象，必然是耗费内存的，并且创建出来的Servlet如果一直没有用户访问，显然这个Servlet对象是一个废物，没必要先创建。</li><li>怎么让服务器启动的时候创建Servlet对象呢？</li><li>在servlet标签中添加子标签，在该子标签中填写整数，越小的整数优先级越高。我写负数时，测试出来也不会创建对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>aservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.AServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>aservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/a<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220819233342293.png" alt="image-20220819233342293"></p><h3 id="Servlet对象生命周期"><a href="#Servlet对象生命周期" class="headerlink" title="Servlet对象生命周期"></a>Servlet对象生命周期</h3><ul><li>默认情况下服务器启动的时候AServlet对象并没有被实例化</li><li>下面这个是我用来测试Servlet生命周期写的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AServlet无参数构造方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AServlet&#x27;s init method execute!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AServlet&#x27;s service method execute!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AServlet&#x27;s destroy method execute!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>用户发送第一次请求的时候，控制台输出了以下内容：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AServlet无参数构造方法执行了</span><br><span class="line">AServlet<span class="string">&#x27;s init method execute!</span></span><br><span class="line"><span class="string">AServlet&#x27;</span>s service method execute!</span><br></pre></td></tr></table></figure><ul><li>根据以上输出内容得出结论：<ul><li>用户在发送第一次请求的时候Servlet对象被实例化（AServlet的构造方法被执行了。并且执行的是无参数构造方法。）<br>- AServlet对象被创建出来之后，Tomcat服务器马上调用了AServlet对象的init方法。（init方法在执行的时候，AServlet对象已经存在了。已经被创建出来了。）</li><li>用户发送第一次请求的时候，init方法执行之后，Tomcat服务器马上调用AServlet对象的service方法。</li></ul></li><li>用户继续发送第二次请求，控制台输出了以下内容：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AServlet<span class="string">&#x27;s service method execute!</span></span><br></pre></td></tr></table></figure><ul><li>根据以上输出结果得知，用户在发送第二次，或者第三次，或者第四次请求的时候，Servlet对象并没有新建，还是使用之前创建好的Servlet对象，直接调用该Servlet对象的service方法，这说明：<ul><li>第一：Servlet对象是单例的（单实例的。)(但是要注意：Servlet对象是单实例的，但是Servlet类并不符合单例模式。我们称之为假单例。之所以单例是因为Servlet对象的创建我们javaweb程序员管不着，这个对象的创建只能是Tomcat来说了算，Tomcat只创建了一个，所以导致了单例，但是属于假单例。真单例模式，构造方法是私有化的。）</li><li>第二：无参数构造方法、init方法只在第一次用户发送请求的时候执行。也就是说无参数构造方法只执行一次。init方法也只被Tomcat服务器调用一次。</li><li>第三：只要用户发送一次请求：service方法必然会被Tomcat服务器调用一次。发送100次请求，service方法会被调用100次。</li></ul></li><li>关闭服务器的时候，控制台输出了以下内容：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AServlet<span class="string">&#x27;s destroy method execute</span></span><br></pre></td></tr></table></figure><ul><li>通过以上输出内容，可以得出以下结论：<ul><li>Servlet的destroy方法只被Tomcat服务器调用一次。</li><li>destroy方法是在什么时候被调用的？<ul><li>在服务器关闭的时候。</li><li>因为服务器关闭的时候要销毁AServlet对象的内存。</li><li>服务器在销毁AServlet对象内存之前，Tomcat服务器会自动调用AServlet对象的destroy方法。</li></ul></li></ul></li><li>请问：destroy方法调用的时候，对象销毁了还是没有销毁呢？<ul><li>destroy方法执行的时候AServlet对象还在，没有被销毁。destroy方法执行结束之后，AServlet对象的内存才会被Tomcat释放。因为destroy方法不是静态方法，它是实例方法，需要有对象才能调用。</li></ul></li><li>Servlet对象更像一个人的一生：<ul><li>Servlet的无参数构造方法执行：标志着你出生了。</li><li>Servlet对象的init方法的执行：标志着你正在接受教育。</li><li>Servlet对象的service方法的执行：标志着你已经开始工作了，已经开始为人类提供服务了。</li><li>Servlet对象的destroy方法的执行：标志着临终。有什么遗言，抓紧的。要不然，来不及了。</li></ul></li><li>关于Servlet类中方法的调用次数？<ul><li>构造方法只执行一次。</li><li>init方法只执行一次。</li><li>service方法：用户发送一次请求则执行一次，发送N次请求则执行N次。</li><li>destroy方法只执行一次。</li></ul></li><li><strong>当我们Servlet类中编写一个有参数的构造方法，如果没有手动编写无参数构造方法会出现什么问题？</strong><ul><li>报错了：500错误。</li><li>注意：500是一个HTTP协议的错误状态码。</li><li>500一般情况下是因为服务器端的Java程序出现了异常。（服务器端的错误都是500错误：服务器内部错误。）</li><li>如果没有无参数的构造方法，会导致出现500错误，无法实例化Servlet对象。</li><li>所以，一定要注意：在Servlet开发当中，不建议程序员来定义构造方法，因为定义不当，一不小心就会导致无法实例化Servlet对象。</li></ul></li><li><strong>思考：Servlet的无参数构造方法是在对象第一次创建的时候执行，并且只执行一次。init方法也是在对象第一次创建的时候执行，并且只执行一次。那么这个无参数构造方法可以代替掉init方法吗？</strong><ul><li>不能。</li><li>Servlet规范中有要求，作为javaweb程序员，编写Servlet类的时候，不建议手动编写构造方法，因为编写构造方法，很容易让无参数构造方法消失，这个操作可能会导致Servlet对象无法实例化。所以init方法是有存在的必要的。</li></ul></li><li>init、service、destroy方法中使用最多的是哪个方法？<ul><li>使用最多就是service方法，service方法是一定要实现的，因为service方法是处理用户请求的核心方法。</li></ul></li></ul><h3 id="什么时候使用init方法呢？"><a href="#什么时候使用init方法呢？" class="headerlink" title="什么时候使用init方法呢？"></a>什么时候使用init方法呢？</h3><ul><li>init方法很少用。</li><li>通常在init方法当中做初始化操作，并且这个初始化操作只需要执行一次。例如：初始化数据库连接池，初始化线程池… 我们就想想什么样的代码只执行一次，并且在对象创建后执行</li><li>什么时候使用destroy方法呢？<ul><li>destroy方法也很少用。</li><li>通常在destroy方法当中，进行资源的关闭。马上对象要被销毁了，还有什么没有关闭的，抓紧时间关闭资源。还有什么资源没保存的，抓紧时间保存一下。</li></ul></li></ul><p>看完后，再来复习一下</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="在这里插入图片描述"></p><h2 id="4-2-Servlet快速入门"><a href="#4-2-Servlet快速入门" class="headerlink" title="4.2 Servlet快速入门"></a>4.2 Servlet快速入门</h2><h4 id="案例2："><a href="#案例2：" class="headerlink" title="案例2："></a>案例2：</h4><p>快速入门，用Servlet向浏览器输出“hello servlet”。</p><ol><li><p>创建JavaEE项目</p></li><li><p>定义一个类，实现Servlet接口</p><ul><li>public class Demo1Servlet implements Servlet</li></ul></li><li><p>实现接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bailiban.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Servlet快速入门</span></span><br><span class="line"><span class="comment"> * 定义一个类实现Servlet接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1Servlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//提供服务的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//向控制台输出一句话</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello Servlet&quot;</span>);</span><br><span class="line"><span class="comment">//得到输出对象</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> res.getWriter();</span><br><span class="line"><span class="comment">//向浏览器输出信息</span></span><br><span class="line">out.write(<span class="string">&quot;Hello Servlet&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在web.xml中配置Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.hp.servlet.Demo1Servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>运行效果</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/r1111.png" alt=""></p><p>6.Servlet执行原理</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/servlet%E5%8E%9F%E7%90%86.png" alt=""></p></li></ol><h2 id="4-3-Servlet3-0-注解配置"><a href="#4-3-Servlet3-0-注解配置" class="headerlink" title="4.3 Servlet3.0 注解配置"></a>4.3 Servlet3.0 注解配置</h2><p>Servlet3.0开始支持注解配置，通过WebServlet注解来实现映射，web.xml不再是必需的组件。</p><p><strong>步骤：</strong></p><ol><li>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</li><li>定义一个类，实现Servlet接口</li><li>复写方法</li><li>在类上使用<code>@WebServlet</code>注解，进行配置<ul><li><code>@WebServlet(&quot;资源路径&quot;)</code></li></ul></li></ol><p>下面是<code>@WebServlet</code>的源码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    </span><br><span class="line">String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;<span class="comment">//相当于&lt;Servlet-name&gt;</span></span><br><span class="line"></span><br><span class="line">String[] value() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//代表urlPatterns()属性配置</span></span><br><span class="line"></span><br><span class="line">String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//相当于&lt;url-pattern&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;<span class="comment">//相当于&lt;load-on-startup&gt;</span></span><br><span class="line"></span><br><span class="line"> WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="type">boolean</span> <span class="title function_">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"> String <span class="title function_">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> String <span class="title function_">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> String <span class="title function_">displayName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-Servlet体系结构"><a href="#4-3-Servlet体系结构" class="headerlink" title="4.3 Servlet体系结构"></a>4.3 Servlet体系结构</h2><p> <code>Servlet</code>— 接口<br>        |</p><p><code>GenericServlet</code> — 抽象类<br>        |</p><p><code>HttpServlet</code>  — 抽象类</p><ul><li><p>GenericServlet：将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象</p><ul><li>定义Servlet类时，可以继承GenericServlet，实现service()方法即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bailiban.servlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 继承 GenericServlet 方式 创建Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1Servlet</span> <span class="keyword">extends</span> <span class="title class_">GenericServlet</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="string">&quot;继承 GenericServlet 方式 创建Servlet&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>HttpServlet：对http协议的一种封装，简化操作 （我们一般使用这个）</p><ol><li>定义类继承HttpServlet</li><li>复写doGet/doPost方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bailiban.servlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承 HttpServlet方式创建servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果请求方式为get执行该方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;get方式~~~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//如果请求方式为post执行该方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;post方式~~~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="案例4："><a href="#案例4：" class="headerlink" title="案例4："></a>案例4：</h4><p>分别以继承GenericServlet和HttpServlet方式 创建Servlet。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web环境搭建以及Servlet入门&quot;&gt;&lt;a href=&quot;#Web环境搭建以及Servlet入门&quot; class=&quot;headerlink&quot; title=&quot;Web环境搭建以及Servlet入门&quot;&gt;&lt;/a&gt;Web环境搭建以及Servlet入门&lt;/h1&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="Web网页技术" scheme="https://manamn.space/categories/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="Web网页技术" scheme="https://manamn.space/tags/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>一文学懂JSP</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/%E4%B8%80%E6%96%87%E5%AD%A6%E6%87%82JSP/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/%E4%B8%80%E6%96%87%E5%AD%A6%E6%87%82JSP/</id>
    <published>2022-10-16T15:00:49.000Z</published>
    <updated>2022-10-17T13:37:37.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一文学懂JSP"><a href="#一文学懂JSP" class="headerlink" title="一文学懂JSP"></a>一文学懂JSP</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始</strong>  —————</p><h1 id="第1章-为什么要学习JSP"><a href="#第1章-为什么要学习JSP" class="headerlink" title="第1章 为什么要学习JSP"></a>第1章 为什么要学习JSP</h1><h2 id="1-1-现有技术不足"><a href="#1-1-现有技术不足" class="headerlink" title="1.1 现有技术不足"></a>1.1 现有技术不足</h2><p>Servlet可以通过转发或重定向跳转到某个HTML文档。但HTML文档中的内容不受Servlet的控制。比如登录失败时，跳转回登录表单页面无法显示诸如“用户名或密码不正确”的错误消息，所以我们目前采用的办法是跳转到一个错误信息页面。如果通过Servlet逐行输出响应信息则会非常繁琐。</p><p><strong>Servlet输入html页面的程序代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gaoziman</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/23 19:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置返回的数据内容的数据类型和编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html; charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取字符输出流</span></span><br><span class="line">        <span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="comment">//输出页面内容！</span></span><br><span class="line">        writer.write(<span class="string">&quot;&lt;!DOCTYPE html PUBLIC \&quot;-//W3C//DTD HTML 4.01 Transitional//EN\&quot; \&quot;http://www.w3.org/TR/html4/loose.dtd\&quot;&gt;&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;&lt;meta http-equiv=\&quot;Content-Type\&quot; content=\&quot;text/html; charset=UTF-8\&quot;&gt;&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;&lt;title&gt;Insert title here&lt;/title&gt;&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;这是由Servlet程序输出的html页面内容！&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接着，在浏览器中输入访问Servlet的访问路径得到以下结果：</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220823193538516.png" alt="image-20220823193538516"></p><p>上面的代码我们不难发现。通过Servlet输出简单的html页面信息都非常不方便。那我们要输出一个复杂页面的时候，就更加的困难，而且不利于页面的维护和调试。</p><h2 id="1-2-Servlet与HTML"><a href="#1-2-Servlet与HTML" class="headerlink" title="1.2 Servlet与HTML"></a>1.2 Servlet与HTML</h2><div class="table-container"><table><thead><tr><th></th><th>Servlet</th><th>HTML</th></tr></thead><tbody><tr><td>长处</td><td>接收请求参数，访问域对象，转发页面</td><td>以友好方式显示数据</td></tr><tr><td>短处</td><td>以友好方式显示数据</td><td>动态显示数据</td></tr></tbody></table></div><h2 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h2><p>那能否将Servlet和HTML二者的长处结合起来呢？</p><p>能！sun公司推出一种叫做JSP的动态页面技术帮助我们实现对页面输出繁锁工作。</p><h1 id="第2章-JSP简介"><a href="#第2章-JSP简介" class="headerlink" title="第2章 JSP简介"></a>第2章 JSP简介</h1><h2 id="2-1-JSP全称"><a href="#2-1-JSP全称" class="headerlink" title="2.1 JSP全称"></a>2.1 JSP全称</h2><ul><li>JSP全称Java Server Pages，顾名思义就是运行在java服务器中的页面。由Sun 公司专门为了解决动态生成HTML文档的技术，也就是在我们JavaWeb中的动态页面。</li><li>JSP能够以HTML页面的方式呈现数据，是一个可以嵌入Java代码的HTML。</li><li>JSP其本质就是一个<code>Servlet</code>。Servlet能做的事情 <code>JSP</code> 都能做。</li><li>JSP必须运行在服务器中，不能直接使用浏览器打开。</li><li>JSP是Web网页的技术标准,主要语法组成包括：指令，html模板元素，脚本片段（小脚本），表达式，声明，注释，后缀是*.JSP。</li><li>JSP的主要作用是代替Servlet程序回传HTML页面的数据</li><li>web目录(或其他)右击 —&gt; new —&gt; JSP/JSPX —&gt; 输入文件名 —&gt; 选择JSP file创建</li></ul><h2 id="2-2-JSP与HTML的区别"><a href="#2-2-JSP与HTML的区别" class="headerlink" title="2.2 JSP与HTML的区别"></a>2.2 JSP与HTML的区别</h2><ul><li><p>JSP是动态页面，html是静态页面。</p><p>|          | 动态页面                                     | 静态页面                           |<br>| ———— | —————————————————————— | ————————————————— |<br>| 运行原理 | 通过服务器解析后，将数据在浏览器中显示       | 直接在浏览器中解析运行             |<br>| 维护成本 | 较低，可以修改后台数据，进而影响页面中的数据 | 较高，必须将修改后的页面覆盖原页面 |<br>| 数据库   | 可以连接数据库                               | 不可连接数据库                     |<br>| 访问速度 | 较慢                                         | 较快                               |<br>| 书写代码 | 可以书写java代码                             | 不能书写java代码                   |</p></li></ul><h2 id="2-3-JSP与Servlet分工"><a href="#2-3-JSP与Servlet分工" class="headerlink" title="2.3 JSP与Servlet分工"></a>2.3 JSP与Servlet分工</h2><ul><li>JSP本质是一个Servlet ，翻译后的文件结构为：class helloworld_JSP : HttpJSPBase : HttpServlet。</li><li>JSP主要负责显示及获取数据，从表面上看，JSP 相对于在html中嵌入java代码：JSP=html+java。</li><li>Servlet主要负责处理业务，从表面上看，Servlet相当于在java中嵌入html代码：Servlet=java+html。</li><li>总结：相比于Servlet，JSP更加善于处理显示页面，而Servlet更善于处理业务逻辑，两种技术各有专长，所以一般我们会将Servlet和 JSP 结合使用，Servlet负责业务，JSP 负责显示。</li></ul><h2 id="2-4-JSP基本格式"><a href="#2-4-JSP基本格式" class="headerlink" title="2.4 JSP基本格式"></a>2.4 JSP基本格式</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;JSP页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">这是我的第一个JSP页面。</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="2-5-JSP的本质"><a href="#2-5-JSP的本质" class="headerlink" title="2.5 JSP的本质"></a>2.5 JSP的本质</h2><blockquote><p>JSP页面本质上是一个Servlet程序，第一次访问JSP页面时(运行Tomcat服务器后在浏览器地址栏输入路径)，Tomcat服务器会将此JSP页面翻译成为一个Java源文件，并对其进行编译成为.class字节码文件(一个.java，一个.class)，当打开.java文件时发现其中的内容是：</p></blockquote><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/20200811124521945.png" alt=""></p><blockquote><p>而HttpJspBase类直接继承于HttpServlet类，即JSP翻译出来的Java类间接继承于HttpServlet类，证明JSP页面是一个Servlet程序</p></blockquote><h1 id="第3章-JSP初体验"><a href="#第3章-JSP初体验" class="headerlink" title="第3章 JSP初体验"></a>第3章 JSP初体验</h1><h2 id="3-1-创建一个JSP动态页面程序：HelloWorld"><a href="#3-1-创建一个JSP动态页面程序：HelloWorld" class="headerlink" title="3.1 创建一个JSP动态页面程序：HelloWorld"></a>3.1 创建一个JSP动态页面程序：HelloWorld</h2><p><strong>① 选中Web目录，右键创建一个jsp文件</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220823194648212.png" alt="image-20220823194648212"></p><p><strong>②在body标签中添加你想要显示的文本内容</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220823195139844.png" alt="image-20220823195139844" style="zoom:80%;" /></p><p><strong>③然后在浏览器中输入jsp页面的访问地址</strong></p><ul><li>jsp页面的访问地址和html页面的访问路径一样<a href="http://ip:端口号/工程名/文件名。也就是https://localhost:8080/day07/demo.jsp">http://ip:端口号/工程名/文件名。也就是https://localhost:8080/day07/demo.jsp</a></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220823193538516.png" alt="image-20220823193538516"></p><p><strong>注意事项：</strong></p><p>1、jsp 页面是一个类似于 <code>html</code> 的一个页面。 jsp直接存放到 <code>web</code>目录下，和html一样访问 jsp 的时候，也和访问html一样</p><p>2、jsp 的默认编码集是 <code>ISO-8859-1</code>，修改 jsp 的默认编码为<code>UTF-8</code></p><h2 id="3-2-JSP运行原理"><a href="#3-2-JSP运行原理" class="headerlink" title="3.2 JSP运行原理"></a>3.2 JSP运行原理</h2><ul><li><p>jsp的本质其实是一个Servlet程序。</p><ul><li>实际上Tomcat在运行JSP时，并不是直接显示的我们所编写的JSP页面，而是将JSP页面转换成了一个Java类，这个Java类是什么，我想大家也能猜到了，它实际上就是一个Servlet。</li></ul></li><li><p>这个Servlet在哪呢？在Tomcat目录中work目录中，在那个目录下保存着 Tomcat自动生成的一些内容，下面让我们来找到那个目录。</p></li><li><p>在work目录下的…work\Catalina\localhost\day07_jsp\org\apache\jsp文件夹中我们可以发现两个文件index_jsp.java和index_jsp.class，前者就是Tomcat自动生成的Servlet的源码，后者是编译后的.class文件。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558366745836.png" alt="1558366745836"></p></li></ul><p>打开index_jsp.java文件部分内容如下：</p><ul><li><p>图一：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220823200206048.png" alt="image-20220823200206048"></p><p>我们打开index_jsp.java文件查看里面的内容：发现，生成的类继承于HttpJspBase类。这是一个jsp文件生成Servlet程序要继承的基类！于是，我们关联源代码。去查看一下HttpJspBase类的内容。从源码的类注释说明中，我们发现。HttpJspBase这个类就是所有JSP文件生成Servlet程序需要去继承的基类。并且这个HttpJspBase类继承于HttpServlet类。我们访问JSP时服务器就是调用了该Servlet来响应请求。所以JSP也是一个Servlet小程序。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558367072400.png" alt="1558367072400"></p><p>我们分别在工程的WebContent目录下创建多个jsp文件。然后依次访问。它们都被翻译为.java文件并编译成为.class字节码文件。</p></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/JSP%E5%8E%9F%E7%90%86.png" alt=""></p><ul><li><p>我们顺着代码向下看，会发现_jspService()方法。会发现有九个对象（实际上默认会看到八个），这是后面要讲到的重点。</p><ul><li><p>图二：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jsp%E7%BF%BB%E8%AF%91servlet%E5%90%8E%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%812.png" alt="jsp翻译servlet后部分源码2"></p></li></ul></li></ul><p><strong>小结：</strong>            </p><p>从生成的文件我们不难发现一个规则：</p><p>a.jsp 翻译成 java文件后的全名是    a_jsp.java文件</p><p>b.jsp 翻译成 java文件后的全名是    b_jsp.java文件</p><p><strong>那么当我们访问 一个xxx.jsp文件后翻译成java文件的全名是  xxx_jsp.java文件。</strong></p><p><strong>xxx_jsp.java文件是一个Servlet程序。原来jsp中的html内容都被翻译到Servlet类的service方法中原样输出。</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558023396492.png" alt="1558023396492"></p><p><strong>Servlet是需要在web.xml中配置的</strong>，而我们并没有配置JSP的serlvet映射，那他是如何访问的呢？实际在tomcat下的conf目录中的<strong>web.xm</strong>l早已配置好了JSP的映射信息，具体内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.jasper.servlet.JspServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>fork<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>xpoweredBy<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="总结Jsp运行原理"><a href="#总结Jsp运行原理" class="headerlink" title="总结Jsp运行原理"></a>总结Jsp运行原理</h4><ol><li><strong>第一次访问jsp页面时，服务器会将xxx.jsp文件翻译成xxx_jsp.java文件，再编译成xxx_jsp.class文件。</strong> </li><li><strong>以后在访问同一个jsp文件</strong><ul><li><strong>如果文件未改变，不会被翻译和编译</strong></li><li><strong>如果文件改变，会翻译和编译</strong></li></ul></li></ol><h1 id="第4章-JSP基本语法"><a href="#第4章-JSP基本语法" class="headerlink" title="第4章 JSP基本语法"></a>第4章 JSP基本语法</h1><p>JSP头部的page指令：</p><p>JSP头部的page指令可以修改JSP页面中的一些重要属性或行为<br>(以下属性均写在page指令中，默认page指令中没有出现的属性都采用默认值)：</p><blockquote><p>(1) contentType属性：表示JSP返回的数据类型是什么，即response.setContentType()的参数值<br>(2) language属性：表示JSP翻译之后是什么语言文件(目前只支持Java)<br>(3) pageEncoding属性：表示当前JSP文件本身的字符集(可在IDEA右下角看到)<br>(4) import属性：表示导包(导类)，与Java一致<br>(5) autoFlush属性：设置当out输出流缓冲区满了之后是否自动刷新缓冲区，默认值是true<br>(6) buffer属性：设置out缓冲区的大小，默认是8kb<br>注意：out缓冲区满了之后不能自动刷新的话会报错<br>(7) errorPage属性：设置当JSP页面运行出错时自动跳转到的页面(错误信息页面)的路径，这个 路径一般都是以斜杠打头，表示请求的地址是<a href="http://ip:port/工程路径/，对应代码web目录">http://ip:port/工程路径/，对应代码web目录</a><br>(8) isErrorPage属性：设置当前JSP页面是否是错误信息页面，默认是false，如果是true可以 获取错误信息<br>(9) session属性：设置访问当前JSP页面时是否会创建HttpSession对象，默认值是true<br>(10) extends属性：设置JSP页面翻译出来的Java类默认继承谁</p></blockquote><p><strong>注意：以上默认值除非有特殊需要，否则不建议修改</strong></p><h2 id="4-1指令"><a href="#4-1指令" class="headerlink" title="4.1指令"></a>4.1指令</h2><ul><li><p>语法格式：&lt;%@ %&gt;  </p></li><li><p>实例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br></pre></td></tr></table></figure></li><li><p>三大指令：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page %&gt; ，&lt;%@ include %&gt; ，| &lt;%@ taglib %&gt; </span><br></pre></td></tr></table></figure></li></ul><h2 id="4-2模板元素"><a href="#4-2模板元素" class="headerlink" title="4.2模板元素"></a>4.2模板元素</h2><ul><li>html&amp;css&amp; js &amp;jQuery 等…</li></ul><h2 id="4-3代码脚本片段（重点）"><a href="#4-3代码脚本片段（重点）" class="headerlink" title="4.3代码脚本片段（重点）"></a>4.3代码脚本片段（重点）</h2><ul><li><p>格式 ：&lt;%%&gt;</p></li><li><p>作用：在_jspService()方法中，书写java代码。</p></li><li><p>实例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;%&gt;</span><br><span class="line">&lt;%-- &lt;% 第一种方式声明%&gt; --%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-4表达式（重点）"><a href="#4-4表达式（重点）" class="headerlink" title="4.4表达式（重点）"></a>4.4表达式（重点）</h2><ul><li>格式：&lt;%=表达式 %&gt;</li><li>作用：在浏览器的JSP页面上输出数据(只有此脚本可以在浏览器的页面上输出数据)</li><li>特点：<br>(1) 所有的表达式脚本都会被翻译到对应的Java类的 <code>_ jspService()</code>方法中，故表达式脚本可以 直接使用 <code>_jspService()</code> 方法参数中的对象<br>(2) 表达式脚本都会被编译后的Java类中的 <code>out.print()</code> 方法输出到浏览器页面上<br>(3) 表达式脚本中的表达式不能以分号结束</li></ul><p>代码演示：表达式脚本的使用(此JSP文件在web目录下，名为First.jsp)</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=<span class="number">22</span> %&gt; &lt;br/&gt;</span><br><span class="line">&lt;%=<span class="string">&quot;可以输出字符串&quot;</span> %&gt; &lt;br/&gt;</span><br><span class="line">&lt;%=map %&gt; &lt;br/&gt;</span><br><span class="line">&lt;%--使用_jspService方法中的对象--%&gt;</span><br><span class="line">&lt;%=request.getParameter(<span class="string">&quot;username&quot;</span>) %&gt;</span><br></pre></td></tr></table></figure><h2 id="4-5声明（了解）"><a href="#4-5声明（了解）" class="headerlink" title="4.5声明（了解）"></a>4.5声明（了解）</h2><ul><li><p>格式：&lt;%! 声明Java代码 %&gt;</p></li><li><p>作用：可以给JSP翻译出来的Java类定义属性、方法、静态代码块、内部类等</p></li><li><p>特点：不会在浏览器的页面上显示出来，仅存在于翻译后的Java类中</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%--<span class="number">1.</span>声明类属性--%&gt;</span><br><span class="line">    &lt;%!</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;%--<span class="number">2.</span>声明类方法--%&gt;</span><br><span class="line">    &lt;%!</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;%--<span class="number">3.</span>声明静态代码块--%&gt;</span><br><span class="line">    &lt;%!</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-6注释：Jsp支持三种注释"><a href="#4-6注释：Jsp支持三种注释" class="headerlink" title="4.6注释：Jsp支持三种注释"></a>4.6注释：Jsp支持三种注释</h2><ul><li>java：单行注释：//，多行注释：/**/ </li><li>html：<!-- --></li><li>jsp：&lt;%— —%&gt;</li><li>jsp中三种注释的比较，如下所示：</li></ul><div class="table-container"><table><thead><tr><th></th><th>JSP注释</th><th>Java注释</th><th>HTML注释</th></tr></thead><tbody><tr><td>JSP页面</td><td>可见</td><td>可见</td><td>可见</td></tr><tr><td>Java代码</td><td>不可见</td><td>可见</td><td>可见</td></tr><tr><td>浏览器</td><td>不可见</td><td>不可见</td><td>可见</td></tr></tbody></table></div><h1 id="第5章-JSP常用指令"><a href="#第5章-JSP常用指令" class="headerlink" title="第5章 JSP常用指令"></a>第5章 JSP常用指令</h1><h2 id="5-1-语法格式"><a href="#5-1-语法格式" class="headerlink" title="5.1 语法格式"></a>5.1 语法格式</h2><blockquote><p>&lt;%@ 指令名   属性=属性值    属性2=属性值2  … %&gt; </p></blockquote><h2 id="5-2-Jsp常用指令"><a href="#5-2-Jsp常用指令" class="headerlink" title="5.2 Jsp常用指令"></a>5.2 Jsp常用指令</h2><h4 id="5-2-1-page指令"><a href="#5-2-1-page指令" class="headerlink" title="5.2.1 page指令"></a>5.2.1 page指令</h4><ul><li><p>语法</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br></pre></td></tr></table></figure></li><li><p>属性</p><ul><li>language：语言，值为 <code>java</code> 且仅 <code>java</code>。</li><li>contentType：与response.setContentType()作用一致，设置浏览器字符集。</li><li>pageEncoding：设置Jsp页面的编码字符集。</li><li>import：导包</li><li>isErrorPage：设置当前页面是否为错误页面，默认值”false”。<ul><li>​    true：设置当前页面为错误页面，可以使用exception内置对象，捕获异常 。</li><li>​    false：设置当前页面不是错误页面，不可以使用exception内置对象，捕获异常 。</li></ul></li><li>errorPage：设置当前页面错误时的跳转目标页面。错误需要在_jspService()中才可以捕获。</li></ul></li></ul><h3 id="5-2-2-include指令-静态包含"><a href="#5-2-2-include指令-静态包含" class="headerlink" title="5.2.2 include指令:静态包含"></a>5.2.2 include指令:静态包含</h3><ul><li><p>语法</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;被包含文件的路径&quot;</span> %&gt; </span><br></pre></td></tr></table></figure></li><li><p>作用：将目标文件包含到当前文件中。</p></li><li><p>特点：被包含的文件不会被翻译&amp;编译。（先包含，再翻译)</p></li></ul><h3 id="5-2-3-静态包含和动态包含"><a href="#5-2-3-静态包含和动态包含" class="headerlink" title="5.2.3 静态包含和动态包含"></a>5.2.3 静态包含和动态包含</h3><h4 id="静态包含"><a href="#静态包含" class="headerlink" title="静态包含"></a>静态包含</h4><p>(1)使用场景：</p><p>(2)使用方法：<br>&lt;%@include file=“”%&gt;<br>其中file属性设置要包含的JSP页面，以/打头，代表<a href="http://ip:port/工程路径/，对应web目录">http://ip:port/工程路径/，对应web目录</a></p><p>代码演示1：在web目录下创建body.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    头部信息 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    主体信息 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &lt;%@include file=&quot;/foot.jsp&quot;%&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码演示2：在web目录下创建foot.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    页脚信息 &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>(3)静态包含的特点：</p><blockquote><p>① 静态包含不会将被包含的JSP页面翻译成.java.class文件<br>② 静态包含是把被包含的页面的代码拷贝到body.jsp对应的Java文件的对应位置执行输出</p></blockquote><h4 id="动态包含"><a href="#动态包含" class="headerlink" title="动态包含"></a>动态包含</h4><p>(1)使用方法：</p><blockquote><p><jsp:include page=””>&lt;/jsp:include&gt;<br>其中page属性设置要包含的JSP页面，与静态包含一致</p></blockquote><p>(2)动态包含的特点：<br>①动态包含将被包含的JSP页面翻译成.java.class文件<br>②动态包含还可以传递参数<br>③动态包含底层使用如下代码调用被包含的JSP页面执行输出：<br>org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, “/foot.jsp”, out, false);</p><p>代码演示1：在web目录下创建body.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    头部信息 &lt;br&gt;</span><br><span class="line">    主体信息 &lt;br&gt;</span><br><span class="line">    &lt;jsp:include page=<span class="string">&quot;/foot.jsp&quot;</span>&gt;</span><br><span class="line">        &lt;jsp:param name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;Jaychou&quot;</span>/&gt;</span><br><span class="line">        &lt;jsp:param name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;root&quot;</span>/&gt;</span><br><span class="line">    &lt;/jsp:include&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>设置参数的标签要写在动态包含之中<br>出现Expecting “jsp:param” standard action with “name” and “value” attributes异常，两个原因：<br>①动态包含中未设置参数但没有把<jsp:include page=””>&lt;/jsp:include&gt;放在一行上<br>②动态包含中加了注释</p></blockquote><p>代码演示2：在web目录下创建 foot.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    页脚信息 &lt;br&gt;</span><br><span class="line">    &lt;%=request.getParameter(<span class="string">&quot;username&quot;</span>)%&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220823203947439.png" alt="image-20220823203947439"></p><p>(3)动态包含的底层原理：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220823204008104.png" alt="image-20220823204008104"></p><h3 id="5-2-4-taglib指令（略）"><a href="#5-2-4-taglib指令（略）" class="headerlink" title="5.2.4 taglib指令（略）"></a>5.2.4 taglib指令（略）</h3><ul><li><p>语法</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br></pre></td></tr></table></figure></li><li><p>属性</p><ul><li>prefix用来指定前缀名，我们通过该名来使用JSTL。</li><li>uri相当于库的唯一标识，因为JSTL由多个不同的库组成，使用该属性指定要导入哪个库。</li></ul></li><li><p>作用：引入标签库。</p></li></ul><h2 id="第六章-Jsp常用动作标签"><a href="#第六章-Jsp常用动作标签" class="headerlink" title="第六章 Jsp常用动作标签"></a>第六章 Jsp常用动作标签</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><ul><li>JSP动作标签与HTML标签不同，HTML标签由浏览器来解析，而JSP动作标签需要服务器（Tomcat）来运行。</li></ul><h3 id="6-2-常用的JSP动作标签"><a href="#6-2-常用的JSP动作标签" class="headerlink" title="6.2 常用的JSP动作标签"></a>6.2 常用的JSP动作标签</h3><h4 id="6-2-1-转发动作标签"><a href="#6-2-1-转发动作标签" class="headerlink" title="6.2.1  转发动作标签"></a>6.2.1  转发动作标签</h4><ul><li><p>语法：\<jsp:forward>\&lt;/jsp:forward&gt;</p></li><li><p>作用：在页面中用于转发操作</p></li><li><p>实例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">&quot;target.jsp&quot;</span>&gt;&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure></li><li><p>转发子标签</p><ul><li><p>语法：<jsp:param value="paramValue" name="paramName"/></p></li><li><p>作用：在转发时设置请求参数，通过request.getParameter()在目标页面获取请求参数。</p></li><li><p>实例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">&quot;target.jsp&quot;</span>&gt;</span><br><span class="line">&lt;jsp:param value=<span class="string">&quot;paramValue&quot;</span> name=<span class="string">&quot;paramName&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure></li><li><p>注意：如果转发动作标签不需要设置请求参数，该标签开始与结束标签内部，不允许书写任何内容，（包括空格）</p></li></ul></li></ul><h4 id="6-2-2-动态包含动作标签"><a href="#6-2-2-动态包含动作标签" class="headerlink" title="6.2.2 动态包含动作标签"></a>6.2.2 动态包含动作标签</h4><ul><li><p>语法：<jsp:include page=*"target.jsp"*></p></li><li><p>作用：动态包含，将其他页面包含到当前页面中。</p></li><li><p>实例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;target.jsp&quot;</span>&gt;&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure></li><li><p>特点：被包含的文件同时会被翻译&amp;编译。（先翻译，再包含）</p><ul><li><p>本质原理：当使用动态包含时，Tomcat会在生成的Servlet中加入如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, <span class="string">&quot;target.jsp&quot;</span>, out, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="6-3-动态包含与静态包含的区别"><a href="#6-3-动态包含与静态包含的区别" class="headerlink" title="6.3 动态包含与静态包含的区别"></a>6.3 动态包含与静态包含的区别</h3><div class="table-container"><table><thead><tr><th></th><th>@include指令</th><th><jsp:include>标签</th></tr></thead><tbody><tr><td>特点</td><td>静态包含</td><td>动态包含</td></tr><tr><td>语法的基本形式</td><td>&lt;%@ include   file=”…”%&gt;</td><td><jsp:include   page=”…”/></td></tr><tr><td>包含动作发生的时机</td><td>翻译期间</td><td>请求期间</td></tr><tr><td>是否生成java文件</td><td>不生成</td><td>生成</td></tr><tr><td>合并方式</td><td>代码复制</td><td>合并运行结果</td></tr><tr><td>包含的内容</td><td>文件实际内容</td><td>页面输出结果</td></tr><tr><td>代码冲突</td><td>有可能</td><td>不可能</td></tr><tr><td>编译次数</td><td>1</td><td>包含的文件 + 1</td></tr><tr><td>适用范围</td><td>适用包含纯静态内容(CSS,HTML,JS)，或没有非常耗时操作。或少量java代码的jsp</td><td>包含需要传递参数。含有大量java代码，运算，耗时很长的操作。</td></tr></tbody></table></div><h1 id="第6章-JSP常用动作标签"><a href="#第6章-JSP常用动作标签" class="headerlink" title="第6章 JSP常用动作标签"></a>第6章 JSP常用动作标签</h1><h3 id="6-1-概述-1"><a href="#6-1-概述-1" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><ul><li>JSP动作标签与HTML标签不同，HTML标签由浏览器来解析，而JSP动作标签需要服务器（Tomcat）来运行。</li></ul><h3 id="6-2-常用的JSP动作标签-1"><a href="#6-2-常用的JSP动作标签-1" class="headerlink" title="6.2 常用的JSP动作标签"></a>6.2 常用的JSP动作标签</h3><h4 id="6-2-1-转发动作标签-1"><a href="#6-2-1-转发动作标签-1" class="headerlink" title="6.2.1  转发动作标签"></a>6.2.1  转发动作标签</h4><ul><li><p>语法：\<jsp:forward>\&lt;/jsp:forward&gt;</p></li><li><p>作用：在页面中用于转发操作</p></li><li><p>实例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">&quot;target.jsp&quot;</span>&gt;&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure></li><li><p>转发子标签</p><ul><li><p>语法：<jsp:param value="paramValue" name="paramName"/></p></li><li><p>作用：在转发时设置请求参数，通过request.getParameter()在目标页面获取请求参数。</p></li><li><p>实例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">&quot;target.jsp&quot;</span>&gt;</span><br><span class="line">&lt;jsp:param value=<span class="string">&quot;paramValue&quot;</span> name=<span class="string">&quot;paramName&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure></li><li><p>注意：如果转发动作标签不需要设置请求参数，该标签开始与结束标签内部，不允许书写任何内容，（包括空格）</p></li></ul></li></ul><h4 id="6-2-2-动态包含动作标签-1"><a href="#6-2-2-动态包含动作标签-1" class="headerlink" title="6.2.2 动态包含动作标签"></a>6.2.2 动态包含动作标签</h4><ul><li><p>语法：<jsp:include page=*"target.jsp"*></p></li><li><p>作用：动态包含，将其他页面包含到当前页面中。</p></li><li><p>实例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;target.jsp&quot;</span>&gt;&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure></li><li><p>特点：被包含的文件同时会被翻译&amp;编译。（先翻译，再包含）</p><ul><li><p>本质原理：当使用动态包含时，Tomcat会在生成的Servlet中加入如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, <span class="string">&quot;target.jsp&quot;</span>, out, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="6-3-动态包含与静态包含的区别-1"><a href="#6-3-动态包含与静态包含的区别-1" class="headerlink" title="6.3 动态包含与静态包含的区别"></a>6.3 动态包含与静态包含的区别</h3><div class="table-container"><table><thead><tr><th></th><th>@include指令</th><th><jsp:include>标签</th></tr></thead><tbody><tr><td>特点</td><td>静态包含</td><td>动态包含</td></tr><tr><td>语法的基本形式</td><td>&lt;%@ include   file=”…”%&gt;</td><td><jsp:include   page=”…”/></td></tr><tr><td>包含动作发生的时机</td><td>翻译期间</td><td>请求期间</td></tr><tr><td>是否生成java文件</td><td>不生成</td><td>生成</td></tr><tr><td>合并方式</td><td>代码复制</td><td>合并运行结果</td></tr><tr><td>包含的内容</td><td>文件实际内容</td><td>页面输出结果</td></tr><tr><td>代码冲突</td><td>有可能</td><td>不可能</td></tr><tr><td>编译次数</td><td>1</td><td>包含的文件 + 1</td></tr><tr><td>适用范围</td><td>适用包含纯静态内容(CSS,HTML,JS)，或没有非常耗时操作。或少量java代码的jsp</td><td>包含需要传递参数。含有大量java代码，运算，耗时很长的操作。</td></tr></tbody></table></div><h1 id="第7章-JSP九大隐式对象"><a href="#第7章-JSP九大隐式对象" class="headerlink" title="第7章 JSP九大隐式对象"></a>第7章 JSP九大隐式对象</h1><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><blockquote><p>Jsp共有九大隐式对象，也叫隐含对象或内置对象。JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。</p></blockquote><h3 id="7-2-对象详情"><a href="#7-2-对象详情" class="headerlink" title="7.2 对象详情"></a>7.2 对象详情</h3><h4 id="7-2-1-pageContext"><a href="#7-2-1-pageContext" class="headerlink" title="7.2.1 pageContext"></a>7.2.1 pageContext</h4><ul><li>类型：PageContext</li><li>定义：代表页面域对象，用来代表整个JSP页面。</li><li>作用：<ol><li>页面域对象，具体详见：下方四大域对象。</li><li>九大隐式对象的“大哥”，可以直接调用其他八大隐式对象。</li></ol></li><li>在Servlet中获取方式：无。</li></ul><h4 id="7-2-2-request"><a href="#7-2-2-request" class="headerlink" title="7.2.2 request"></a>7.2.2 request</h4><ul><li><p>类型：HttpServletRequest</p></li><li><p>定义：代表浏览器向服务器发送的请求报文，该对象由服务器创建，最终以参数的形式发送到doGet()和doPost()方法中。</p><blockquote><p>每当客户端请求一个JSP页面时，JSP引擎就会制造一个新的request对象来代表这个请求。request对象提供了一系列方法来获取HTTP头信息，cookies，HTTP方法等等。</p></blockquote></li><li><p>作用（详见Servlet中request对象）</p><ol><li>获取请求参数</li><li>获取url地址参数</li><li>请求转发</li><li>向请求域中保存数据（获取数据&amp;移除数据）</li><li>获取请求头信息</li></ol></li><li><p>在Servlet中获取方式：doGet()或doPost()中直接使用。</p></li></ul><h4 id="7-2-3-session"><a href="#7-2-3-session" class="headerlink" title="7.2.3 session"></a>7.2.3 session</h4><ul><li><p>类型：HttpSession</p></li><li><p>定义：代表浏览器与服务器之间的会话。</p></li><li><p>作用</p><ul><li>会话域对象，具体详见：下方四大域对象。</li></ul><blockquote><p>session对象用来跟踪在各个客户端请求间的会话。</p></blockquote></li><li><p>在Servlet中获取方式 ：request.getSession();</p></li></ul><h4 id="7-2-4-application"><a href="#7-2-4-application" class="headerlink" title="7.2.4 application"></a>7.2.4 application</h4><ul><li><p>类型：ServletContext</p></li><li><p>定义：Servlet上下文，代表当前web应用。</p><blockquote><p>Web容器在启动时，它会为<strong>每个Web应用程序都创建一个唯一对应的ServletContext对象</strong>，意思是Servlet上下文，<strong>代表当前Web应用。</strong></p></blockquote></li><li><p>作用</p><ol><li><p>获取项目的上下文路径(带/的项目名)：<strong>getContextPath()</strong></p></li><li><p>获取虚拟路径所映射的本地真实路径：<strong>getRealPath(String path)</strong></p></li><li><p>获取WEB应用程序的全局初始化参数（基本不用）</p><ul><li><p>设置Web应用初始化参数的方式是在web.xml的根标签下加入如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Web应用初始化参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ParamName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>ParamValue<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><pre><code> - 获取Web应用初始化参数   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="comment">//1.获取ServletContext对象</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> config.getServletContext();</span><br><span class="line"><span class="comment">//2.获取Web应用初始化参数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> application.getInitParameter(<span class="string">&quot;ParamName&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;全局初始化参数paramValue=&quot;</span>+paramValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ol><li>作为域对象共享数据:具体详见：下方四大域对象。</li></ol><ul><li>在Servlet中获取方式：使用this.getServletContext()方法获取。</li></ul><h4 id="7-2-5-page"><a href="#7-2-5-page" class="headerlink" title="7.2.5 page"></a>7.2.5 page</h4><ul><li>类型：Object</li><li>作用：this，当前类对象。</li></ul><h4 id="7-2-6-response"><a href="#7-2-6-response" class="headerlink" title="7.2.6 response"></a>7.2.6 response</h4><ul><li>类型：HttpServletResponse</li><li>定义：代表服务器向浏览器发送的响应报文，该对象由服务器创建，最终以参数的形式发送到doGet()和doPost()方法中。</li><li>作用：<ol><li>向页面（响应体）中响应数据，数据包括文本、Html等。</li><li>重定向</li><li>设置响应头信息</li></ol></li><li>在Servlet中获取方式：doGet()或doPost()中直接使用</li></ul><h4 id="7-2-7-config"><a href="#7-2-7-config" class="headerlink" title="7.2.7 config"></a>7.2.7 config</h4><ul><li>类型：ServletConfig</li><li>定义：代表当前Servlet的配置信息，每一个Servlet都有一个唯一对应的ServletConfig对象。</li><li>作用：<ol><li>获取Servlet名称：getServletName()</li><li>获取全局上下文ServletContext对象：getServletContext()</li><li>获取Servlet初始化参数：getInitParameter(String) / getInitParameterNames()。</li></ol></li><li>在Servlet中获取方式：this.getServletConfig()</li></ul><h4 id="7-2-8-out"><a href="#7-2-8-out" class="headerlink" title="7.2.8 out"></a>7.2.8 out</h4><ul><li>类型：JspWriter</li><li>定义：代表当前页面的输出流。</li><li>作用：与Servlet中的PrintWriter功能类似，将数据响应到页面，响应的数据可以是页面、页面片段、字符串等。</li><li>在Servlet中获取方式：无</li></ul><h4 id="7-2-9-exception"><a href="#7-2-9-exception" class="headerlink" title="7.2.9 exception"></a>7.2.9 exception</h4><ul><li>类型：Throwable</li><li>定义：代表当前页面的异常对象。</li><li>作用：代表当前页面的异常对象。</li><li>在Servlet中获取方式：new Throwable()</li></ul><p><strong>九大内置对象，都是我们可以在【代码脚本】中或【表达式脚本】中直接使用的对象。</strong></p><blockquote><p>request：请求对象<br>response：响应对象<br>pageContext：JSP的上下文对象<br>session：会话对象<br>application：ServletContext对象<br>config：ServletConfig对象<br>out：JSP输出流对象<br>page：指向当前JSP的对象<br>exception：异常对象</p></blockquote><h1 id="第8章-JSP四大域对象"><a href="#第8章-JSP四大域对象" class="headerlink" title="第8章 JSP四大域对象"></a>第8章 JSP四大域对象</h1><h2 id="8-1-域对象概述"><a href="#8-1-域对象概述" class="headerlink" title="8.1 域对象概述"></a>8.1 域对象概述</h2><blockquote><p>​    生活中使用“域对象”比较经典的行业，是快递行业。现如今快递行业大体分为，全球快递，全国快递，同城快递和同区快递。需求不同，使用不同“域对象”。</p><p>​    如：外卖一般使用同区快递，给北京朝阳区的朋友邮寄贺卡，一般使用同城快递。在某宝某东上购买外地商品，一般使用全国快递或全球快递。</p></blockquote><h2 id="8-2-程序中的域对象"><a href="#8-2-程序中的域对象" class="headerlink" title="8.2 程序中的域对象"></a>8.2 程序中的域对象</h2><h3 id="8-2-1-域对象概述"><a href="#8-2-1-域对象概述" class="headerlink" title="8.2.1 域对象概述"></a>8.2.1 域对象概述</h3><blockquote><p>程序中的域对象，主要负责在不同web资源之间进行数据交换，（如:servlet和jsp之间的数据交换）。由于不同的web资源之间需要共享数据，所以就有了域对象。</p><p>在Jsp中一共有四个域对象，分别是pageContext 、request、session、application。主要作用是能够在一定范围内共享数据。</p></blockquote><h3 id="8-2-2-域对象分析"><a href="#8-2-2-域对象分析" class="headerlink" title="8.2.2 域对象分析"></a>8.2.2 域对象分析</h3><p><strong>每个域对象内部都维护了一个Map<String , Object>，域对象的共同方法。</strong></p><ul><li>设置属性到域中：void setAttribute(String key , Object value);</li><li>从域中获取指定的属性：Object  getAttribute(String key);</li><li>移除域中指定属性：void removeAttribute(String key);</li></ul><h3 id="8-2-3-域对象有效性"><a href="#8-2-3-域对象有效性" class="headerlink" title="8.2.3 域对象有效性"></a>8.2.3 域对象有效性</h3><ul><li>pageContext: 当前页面中共享数据有效，离开当前页面失效。<ul><li>每个页面都有自己唯一的一个pageContext对象。</li><li>注意servlet中没有该对象。</li></ul></li><li>request： 当前请求中共享数据有效。<ul><li>当前请求：转发、直接访问一个页面为当前请求。</li><li>不在当前请求：重定向、 打开页面再点击页面中的超链接不在当前请求 。</li></ul></li><li>session： 一次会话范围中共享数据有效。<ul><li>当前会话：当前浏览器不关闭&amp;不更换浏览器即为当前会话。</li><li>只关心浏览器是否关闭，不关心服务器关闭重启。</li><li>不同浏览器不共享会话。</li></ul></li><li>application： 在服务器运行的一次过程中共享数据有效。<ul><li>服务器关闭销毁</li></ul></li></ul><p><strong>小结</strong>：</p><div class="table-container"><table><thead><tr><th>域对象</th><th>作用范围</th><th>起始时间</th><th>结束时间</th></tr></thead><tbody><tr><td>pageContext</td><td>当前JSP页面</td><td>页面加载</td><td>离开页面</td></tr><tr><td>request</td><td>同一个请求</td><td>收到请求</td><td>响应</td></tr><tr><td>session</td><td>同一个会话</td><td>开始会话</td><td>结束会话</td></tr><tr><td>application</td><td>当前Web应用</td><td>Web应用加载</td><td>Web应用卸载</td></tr></tbody></table></div><h3 id="8-2-4-四个作用域的测试代码："><a href="#8-2-4-四个作用域的测试代码：" class="headerlink" title="8.2.4 四个作用域的测试代码："></a>8.2.4 四个作用域的测试代码：</h3><ul><li><p>新建两个jsp页面。分别取名叫：context1.jsp，context2.jsp</p><ul><li><p>context1.jsp的页面代码如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">这是context1页面&lt;br/&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="comment">//设置page域的数据</span></span><br><span class="line">pageContext.setAttribute(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;pageContext-value&quot;</span>);</span><br><span class="line"><span class="comment">//设置request域的数据</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;request-value&quot;</span>);</span><br><span class="line"><span class="comment">//设置session域的数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;session-value&quot;</span>);</span><br><span class="line"><span class="comment">//设置application域的数据</span></span><br><span class="line">application.setAttribute(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;application-value&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%-- 测试当前页面作用域 --%&gt;</span><br><span class="line">&lt;%=pageContext.getAttribute(<span class="string">&quot;key&quot;</span>) %&gt;&lt;br/&gt;</span><br><span class="line">&lt;%=request.getAttribute(<span class="string">&quot;key&quot;</span>) %&gt;&lt;br/&gt;</span><br><span class="line">&lt;%=session.getAttribute(<span class="string">&quot;key&quot;</span>) %&gt;&lt;br/&gt;</span><br><span class="line">&lt;%=application.getAttribute(<span class="string">&quot;key&quot;</span>) %&gt;&lt;br/&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="comment">// 测试request作用域</span></span><br><span class="line"><span class="comment">// request.getRequestDispatcher(&quot;/context2.jsp&quot;).forward(request, response);</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>context2.jsp的页面代码如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">这是context2页面 &lt;br/&gt;</span><br><span class="line">&lt;%=pageContext.getAttribute(<span class="string">&quot;key&quot;</span>) %&gt;&lt;br/&gt;</span><br><span class="line">&lt;%=request.getAttribute(<span class="string">&quot;key&quot;</span>) %&gt;&lt;br/&gt;</span><br><span class="line">&lt;%=session.getAttribute(<span class="string">&quot;key&quot;</span>) %&gt;&lt;br/&gt;</span><br><span class="line">&lt;%=application.getAttribute(<span class="string">&quot;key&quot;</span>) %&gt;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>测试操作：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">测试pageContext作用域步骤：</span><br><span class="line">直接访问context1.jsp文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">测试request作用域步骤：</span><br><span class="line">1.在context1.jsp文件中添加转发到context2.jsp（有数据）</span><br><span class="line">2.直接访问context2.jsp文件 （没有数据）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">测试session作用域步骤：</span><br><span class="line">1.访问完context1.jsp文件</span><br><span class="line">2.关闭浏览器。但是要保持服务器一直开着</span><br><span class="line">3.打开浏览器，直接访问context2.jsp文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">测试application作用域步骤：</span><br><span class="line">1.访问完context1.jsp文件，然后关闭浏览器</span><br><span class="line">2.停止服务器。再启动服务器。</span><br><span class="line">3.打开浏览器访问context2.jsp文件</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一文学懂JSP&quot;&gt;&lt;a href=&quot;#一文学懂JSP&quot; class=&quot;headerlink&quot; title=&quot;一文学懂JSP&quot;&gt;&lt;/a&gt;一文学懂JSP&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🏠个人主页：&lt;a href=&quot;https://blog.csdn.net</summary>
      
    
    
    
    <category term="Web网页技术" scheme="https://manamn.space/categories/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="Web网页技术" scheme="https://manamn.space/tags/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>一文学懂Cookie与Session的区别</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/%E4%B8%80%E6%96%87%E5%AD%A6%E6%87%82Cookie%E4%B8%8ESession%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/%E4%B8%80%E6%96%87%E5%AD%A6%E6%87%82Cookie%E4%B8%8ESession%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-10-16T15:00:28.000Z</published>
    <updated>2022-10-17T13:37:31.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一文学懂Cookie与Session的区别"><a href="#一文学懂Cookie与Session的区别" class="headerlink" title="一文学懂Cookie与Session的区别"></a>一文学懂Cookie与Session的区别</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始</strong>  —————</p><p><strong>一张思维导图了解</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%80%E6%96%87%E5%AD%A6%E6%87%82Cookie%E4%B8%8ESession%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt=""></p><blockquote><p>Session用来实现用户会话<br>Session对应类名:HttpSession（javax.servlet.http.HttpSession）<br>Session是JSP内置的对象</p></blockquote><h1 id="会话的理解"><a href="#会话的理解" class="headerlink" title="会话的理解"></a>会话的理解</h1><ul><li>什么是会话？<ul><li>用户打开浏览器，对浏览器进行一系列操作，最终关闭浏览器的过程中，这个整个过程叫做 ： <font color='red'>会话</font>。会话在服务器端也对应一个Java对象，这个Java对象叫做 ：  <font color='red'>session</font>。</li><li>什么是一次请求：用户在浏览器上点击了一下，然后到页面停下来，可以粗略认为是一次请求。请求对应的服务器端的Java对象是：request。</li><li>一个会话当中包含多次请求。（ <font color='red'>一次会话对应N次请求。</font>）</li></ul></li><li>在Java的servlet规范当中，session对应的类名：HttpSession。</li><li>Session机制实际上是一个规范。然后不同的语言对这种会话机制都有实现。</li></ul><blockquote><p>对于会话有了基本的理解以后，我们来看一下，它的作用是什么</p></blockquote><h1 id="Seesion的作用"><a href="#Seesion的作用" class="headerlink" title="Seesion的作用"></a>Seesion的作用</h1><ul><li><p>Session对象最主要的作用是：保存会话状态。（<code>用户登录成功了，这是一种登录成功的状态，你怎么把登录成功的状态一直保存下来呢？使用session对象可以保留会话状态。</code>）</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220828193623047.png" alt="image-20220828193623047" style="zoom:80%;" /></p></li></ul><blockquote><p>既然Session是用来保存会话状态的，那么我们就会有一个疑惑，为什么要用它来保存会话状态。因为客户端发送请求以后，它和服务器的连接就断开了。</p></blockquote><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220828193742715.png" alt="image-20220828193742715" style="zoom:80%;" /></p><ul><li>为什么需要Session对象来保存会话状态呢 ？<ul><li>因为HTTP是无状态的</li><li>什么是无状态：请求的时候，B和S是连接的，但是请求结束之后，连接就断了。为什么要这么做？HTTP协议为什么要设计成这样？因为这样的无状态协议，可以降低服务器的压力。请求的瞬间是连接的，请求结束之后，连接断开，这样服务器压力小。</li><li>只要B/S断开了，也就是关闭浏览器这个动作，服务器是不知道的。</li></ul></li><li><p>张三打开一个浏览器A，李四打开一个浏览器B，访问服务器之后，在服务器端会生成：</p></li><li><ul><li>张三专属的 <code>Session</code> 对象</li><li>李四专属的 <code>Session</code> 对象</li></ul></li><li><p>为什么不使用request对象保存会话状态？为什么不使用ServletContext对象保存会话状态？</p></li><li><ul><li>request.setAttribute()存，request.getAttribute()取，ServletContext也有这个方法。request是请求域。ServletContext是应用域。</li><li>request 是一次请求一个对象。</li><li>ServletContext 对象是服务器启动的时候创建，服务器关闭的时候销毁，这个ServletContext对象只有一个。</li><li>ServletContext对象的域太大。</li><li>request请求域（HttpServletRequest）、session会话域（HttpSession）、application域（ServletContext）</li><li><code>request &lt; session &lt; application</code></li></ul></li></ul><h1 id="HTTP协议的无状态特点"><a href="#HTTP协议的无状态特点" class="headerlink" title="HTTP协议的无状态特点"></a>HTTP协议的无状态特点</h1><blockquote><p>服务器没有办法识别每一次请求是从哪一台电脑访问的，它能接收请求，但是它不知道这个请求是从哪里来的，不知道要响应给谁。比如说我们买东西，添加购物车，由于它无法识别是来自哪一个客户端的请求，它就可能把我们的请求发送给其他人，所以必须要有一种技术来让服务器知道请求来自哪里，这就是会话技术</p></blockquote><p><strong>下面这一张图很清晰的概述了我们为什么需要会话技术 </strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220828193924749.png" alt="image-20220828193924749" style="zoom:80%;" /></p><h1 id="Seesion的实现原理（重点）"><a href="#Seesion的实现原理（重点）" class="headerlink" title="Seesion的实现原理（重点）"></a>Seesion的实现原理（重点）</h1><ul><li>Session的实现原理 ：<ul><li>JSESSIONID = xxx 这个是以Cookie的形式保存在浏览器的内存中的。浏览器只要关闭。这个cookie就没有了。</li><li>Session列表是一个Map，Map的 key可以 <code>SeesionId</code> ，Map的 value 是 <code>Session</code> 对象。</li><li>用户发送第一次请求时，服务器生成Session对象，同时生成SeesionId，然后将这个id以cookie的形式发送给浏览器。</li><li>用户发送第二次 ，自动将浏览器内存中的SeesionId发送给服务器，服务器根据SeesionId来查找Seesion对象。</li><li>关闭浏览器，内存消失，cookie消失，sessionid消失，会话等同于结束。</li></ul></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220828191330094.png" alt="image-20220828191330094"></p><ul><li><p>总结一下到目前位置我们所了解的域对象：</p><ul><li>request（对应的类名：HttpServletRequest）<ul><li>请求域（请求级别的）</li></ul></li><li>session（对应的类名：HttpSession）<ul><li>会话域（用户级别的）</li></ul></li><li>application（对应的类名：ServletContext）<ul><li>应用域（项目级别的，所有用户共享的。）</li></ul></li><li><p>这三个域对象的大小关系</p></li><li><p>request &lt; session &lt; application</p></li><li><p>他们三个域对象都有以下三个公共的方法：</p><ul><li>setAttribute（向域当中绑定数据）</li><li>getAttribute（从域当中获取数据）</li><li>removeAttribute（删除域当中的数据）</li></ul></li></ul></li><li><p>使用原则：尽量使用小的域。</p></li></ul><h1 id="Session的常用方法"><a href="#Session的常用方法" class="headerlink" title="Session的常用方法"></a>Session的常用方法</h1><blockquote><p>Session在实际开发中是用来记录我们的用户信息的，我们不需要每一次访问都输入用户名和密码，如果登录过一次，后面可以不用再输入，但是这是有一个周期的，不可能一直存着的，默认失效时间为1800秒(也就是30分钟)</p></blockquote><h2 id="Session数据的存取"><a href="#Session数据的存取" class="headerlink" title="Session数据的存取"></a>Session数据的存取</h2><ul><li><p>Session域对象数据的存取和其他三个域对象PageContext、Request、ServletContext是一样的。只需要调用下面两个方法：</p><ul><li><code>setAttribute 设置属性</code></li><li><code>getAttribute 获取属性</code></li></ul></li><li><p>编写下面的java代码去访问，就可以在Session域中设置属性，和获取属性。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">// 第一个调用就是获取一个新的Session。如果Session已经创建过。就获取原来的会话。</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">// 设置数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc value&quot;</span>);</span><br><span class="line">response.getWriter().write(<span class="string">&quot;设置属性值成功！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">getAttribute</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">// 第一个调用就是获取一个新的Session。如果Session已经创建过。就获取原来的会话。</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">// 设置数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">response.getWriter().write(<span class="string">&quot;获取abc的属性值：&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改session.html 中访问的连接地址，然后点击访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sessionServlet?action=setAttribute&quot;</span> &gt;</span>Session域数据的存储<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sessionServlet?action=getAttribute&quot;</span> &gt;</span>Session域数据的获取<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问后效果图：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558628097144.png" alt="1558628097144"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558628140230.png" alt="1558628140230"></p><h2 id="Session-的有效时间"><a href="#Session-的有效时间" class="headerlink" title="Session 的有效时间"></a>Session 的有效时间</h2><ul><li><p><strong>基本原则</strong></p><ul><li>Session对象在服务器端不能长期保存，它是有时间限制的，超过一定时间没有被访问过的Session对象就应该释放掉，以节约内存。所以Session的有效时间并不是从创建对象开始计时，到指定时间后释放。而是<strong>从最后一次被访问开始计时，统计其“空闲”的时间。</strong></li></ul></li><li><p><strong>默认时效</strong></p><ul><li><p>在tomcat的conf 目录下web.xml配置文件中能够找到如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ==================== Default Session Configuration ================= --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- You can set the default session timeout (in minutes) for all newly   --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- created sessions by modifying the value below.                       --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>说明：Session对象默认的最长有效时间为30分钟。</p></blockquote></li></ul></li><li><p><strong>手动设置1：全局</strong></p><ul><li><p>我们也可以在自己工程的web.xml文件中配置Session会话的超时时间为10分钟。</p></li><li><p>记住一点，我们在web.xml文件中配置的Session会话超时时间是对所有Session都生效的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置Session默认的过期时间  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以分钟为单位。10分钟超时  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>10<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>手动设置2：局部</strong></p><ul><li><code>int getMaxInactiveInterval()    获取超时时间。以秒为单位。</code></li><li><code>setMaxInactiveInterval (int seconds)  设置用户多长时间没有操作之后就会Session过期。以秒为单位。</code><ul><li><code>如果是正数。表示用户在给定的时间内没有任意操作，Session会话就会过期。</code></li><li><code>如果是非正数（零&amp;负数）。表示Session永不过期。</code></li></ul></li></ul></li><li><p><strong>强制失效</strong></p><ul><li><code>invalidate()</code></li></ul></li><li><p><strong>示例代码</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Session在<span class="number">3</span>秒之后超时</span><br><span class="line"><span class="comment">// 第一个调用就是获取一个新的Session。如果Session已经创建过。就获取原来的会话。</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">// 设置过期时间为3秒 </span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Session在<span class="number">1</span>分钟之后超时</span><br><span class="line"><span class="comment">// 第一个调用就是获取一个新的Session。如果Session已经创建过。就获取原来的会话。 </span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">// 设置过期时间为1分钟</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">Session在<span class="number">1</span>小时之后超时</span><br><span class="line"><span class="comment">// 第一个调用就是获取一个新的Session。如果Session已经创建过。就获取原来的会话。</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">// 设置过期时间为1小时</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">Session在<span class="number">1</span>天之后超时</span><br><span class="line"><span class="comment">// 第一个调用就是获取一个新的Session。如果Session已经创建过。就获取原来的会话。</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">// 设置过期时间为1天</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">Session在<span class="number">1</span>周之后超时</span><br><span class="line"><span class="comment">// 第一个调用就是获取一个新的Session。如果Session已经创建过。就获取原来的会话。</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">// 设置过期时间为1周</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">Session永远不超时</span><br><span class="line"><span class="comment">// 第一个调用就是获取一个新的Session。如果Session已经创建过。就获取原来的会话。</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">// 设置永远不超时</span></span><br><span class="line">session.setMaxInactiveInterval(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Session马上超时（失效）</span><br><span class="line"><span class="comment">// 第一个调用就是获取一个新的Session。如果Session已经创建过。就获取原来的会话。</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">// 让Session对象立即过期</span></span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure><h2 id="Session对象的释放"><a href="#Session对象的释放" class="headerlink" title="Session对象的释放"></a>Session对象的释放</h2><ul><li><p>Session对象空闲时间达到了目标设置的最大值，自动释放</p></li><li><p>Session对象被强制失效</p></li><li><p>Web应用卸载</p></li><li><p>服务器进程停止</p></li></ul><h2 id="Session的活化和钝化"><a href="#Session的活化和钝化" class="headerlink" title="Session的活化和钝化"></a>Session的活化和钝化</h2><ul><li><p>Session机制很好的解决了Cookie的不足，但是当访问应用的用户很多时，服务器上就会创建非常多的Session对象，如果不对这些Session对象进行处理，那么在Session失效之前，这些Session一直都会在服务器的内存中存在。那么，就出现了Session活化和钝化的机制。</p></li><li><p><strong>Session钝化：</strong>Session在一段时间内没有被使用或关闭服务器时，会将当前存在的Session对象及Session对象中的数据从内存序列化到磁盘的过程，称之为钝化。</p></li><li><p><strong>Session活化：</strong>Session被钝化后，服务器再次调用Session对象或重启服务器时，将Session对象及Session对象中的数据从磁盘反序列化到内存的过程，称之为活化。</p></li><li><p>如果希望Session域中的对象也能够随Session钝化过程一起序列化到磁盘上，则对象的实现类也必须实现java.io.Serializable接口。不仅如此，如果对象中还包含其他对象的引用，则被关联的对象也必须支持序列化，否则会抛出异常：java.io.NotSerializableException</p></li></ul><h2 id="浏览器和Session关联的技术内幕"><a href="#浏览器和Session关联的技术内幕" class="headerlink" title="浏览器和Session关联的技术内幕"></a>浏览器和Session关联的技术内幕</h2><p>一旦浏览器关闭之后，我们再去获取Session对象就会创建一个新的Session对象。这是怎么回事呢。现在让我们来看一下。这一系列操作过程中的内幕细节。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558628349795.png" alt="1558628349795"></p><blockquote><p>通过上图的分析，我们不难发现。当浏览器关闭之后。只是因为浏览器无法再通知服务器，之前创建的Session的会话id是多少了。所以服务器没办法找到对应的Session对象之后，就以为这是第一次访问服务器。就创建了新的Session对象返回。</p></blockquote><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><ul><li><p>Session的实现原理中 ： 每一个Seesion对象都会关联一个sessionid，例如  ：</p><ul><li><p>JSESSIONID=41C481F0224664BDB28E95081D23D5B8</p></li><li><p>以上的这个键值对数据其实就是cookie对象。</p></li><li><p>对于session关联的cookie来说，这个cookie是被保存在浏览器的 <code>运行内存</code> 当中。</p></li><li><p>只要浏览器不关闭，用户再次发送请求的时候，会自动将运行内存的cookie发送给服务器。</p></li><li><p>例如  ， 这个cookie ： </p><p><code>JSESSIONID=41C481F0224664BDB28E95081D23D5B8</code>就会再次发送给服务器。</p></li><li><p>服务器就是根据<code>41C481F0224664BDB28E95081D23D5B8</code>这个值来找到对应的session对象的。</p></li></ul></li><li><p>cookie怎么生成？cookie保存在什么地方？cookie有啥用？浏览器什么时候会发送cookie，发送哪些cookie给服务器？？？？？？？</p></li><li><p>cookie最终是保存在浏览器客户端上面的。</p><ul><li>可以保存在运行内存中。（浏览器只要关闭cookie就会立即消失。）</li><li>也可以保存在硬盘文件中。（永久保存）</li></ul></li><li><p>cookie有什么用呢 ？</p><ul><li>cookie和session的机制其实都为了保存绘画的状态。</li><li>cookie是将会话的状态保存在浏览器客户端上。（cookie数据存储在浏览器客户端上的。）</li><li>session是将会话的状态保存在服务器端上。（session对象是存储在服务器上。）</li><li>为什么要有cookie和session机制呢？因为HTTP协议是无状态 无连接协议。</li></ul></li></ul><h1 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h1><ul><li><p>cookie的经典案例</p></li><li><ul><li>京东商城，在未登录的情况下，向购物车中放几件商品。然后关闭商城，再次打开浏览器，访问京东商城的时候，购物车中的商品还在，这是怎么做的？我没有登录，为什么购物车中还有商品呢？</li></ul></li><li><p>将购物车中的商品编号放到cookie当中，cookie保存在硬盘文件当中。这样即使关闭浏览器。硬盘上的cookie还在。下一次再打开京东商城的时候，查看购物车的时候，会自动读取本地硬盘中存储的cookie，拿到商品编号，动态展示购物车中的商品。</p></li><li><p>京东存储购物车中商品的cookie可能是这样的：productIds=xxxxx,yyyy,zzz,kkkk</p><ul><li>注意：cookie如果清除掉，购物车中的商品就消失了。</li></ul></li></ul><ul><li>cookie机制和session机制其实都不属于Java中的机制，其实cookie机制和session机制都是HTTP协议的一部分。不论是什么编程语言，cookie和session机制都时必不可少的。</li><li>HTTP协议中规定 ： 任何一个cookie都是由name和value组成的。name和value都是字符串类型。</li><li>在 <code>java</code>的servlet中，对cookie提供了哪些支持呢？<ul><li>提供了一个Cookie类来专门表示cookie数据。<code>javax.servlet.http.Cookie;</code></li><li>java程序怎么把cookie数据发送给浏览器呢？<code>response.addCookie(cookie);</code></li></ul></li><li>在HTTP协议中是这样规定的：当浏览器发送请求的时候，会自动携带该path下的cookie数据给服务器。（URL。）</li><li>关于cookie的有效时间<ul><li>怎么用Java设置cookie的有效时间<ul><li>cookie.setMaxAge（60*60）；设置保存在一小时之后失效。</li></ul></li><li>没有设置有效时间 ： 默认保存在浏览器的运行内存中，浏览器关闭则cookie消失。</li></ul></li><li>只要设置cookie的有效时间 &gt; 0，这个cookie一定会存储到硬盘文件当中。</li><li><p>设置cookie的有效时间 = 0 呢？</p><ul><li>cookie被删除，同名cookie被删除。</li><li>设置cookie的有效时间 &lt; 0 呢？</li><li>保存在运行内存中。和不设置一样。</li></ul></li><li><p>浏览器发送cookie给服务器了，服务器中的java程序怎么接收？</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Cookie[] cookies = request.getCookies(); <span class="comment">// 这个方法可能返回null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cookies != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">        <span class="comment">// 获取cookie的name</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">        <span class="comment">// 获取cookie的value</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Cookie的常用方法"><a href="#Cookie的常用方法" class="headerlink" title="Cookie的常用方法"></a>Cookie的常用方法</h1><div class="table-container"><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>void setMaxAge(int age)</td><td>设置Cookie的有效时间，单位为秒</td></tr><tr><td>int getMaxAge()</td><td>获取Cookie的有效时间</td></tr><tr><td>String getName/()</td><td>获取Cookie的name</td></tr><tr><td>String getValue()</td><td>获取Cookie的value</td></tr></tbody></table></div><h1 id="Seesion与Cookie的区别"><a href="#Seesion与Cookie的区别" class="headerlink" title="Seesion与Cookie的区别"></a>Seesion与Cookie的区别</h1><p>Session: <strong>保存在服务器，Session是一个对象保存在Java虚拟机中</strong><br>保存的数据是Object<br>随着会话的结束而销毁<br>保存重要信息</p><p>Cookie: <strong>保存在浏览器</strong><br>只能保存String类型，类似于文本文件，存放的都是数据，而不是对象<br>可以长期保存在浏览器，与会话无关<br>保存不重要信息</p><blockquote><p>存储用户信息：<br>Session:setAttribute(name,“admin”) 存<br>getAttribute(name) 取<br>生命周期：服务端:只要WEB应用重启或者销毁<br>客户端:只要浏览器关闭就销毁<br>退出登录:session.invalidate();<br>Cookie:<br>Cookie cookie=new Cookie(name,“admin”);<br>response.addCookie(cookie); 存</p></blockquote><p>取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies=request.getCookie();</span><br><span class="line"> <span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line"><span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;name&quot;</span>)&#123;</span><br><span class="line">out.write(<span class="string">&quot;欢迎回来&quot;</span>+cookie.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生命周期：不会随着服务端的重启而销毁，客户端：默认是只要关闭浏览器就会销毁，我们通过setMaxAge()方法来设置有效期，一旦设置了有效期，就不会随着浏览器的关闭而销毁，而是由设置的时间来决定<br>退出登录:setMaxAge(0)</p><p>Cookie是浏览器提供的一种技术，通过服务器的程序能把一些只须保存在客户端，或者在客户端进行处理的数据放在本地计算机上，不需要通过网络传送，因此提高网页处理效率，并且可以减少服务器的负载，但是因为Cookie是服务器端保存在客户端的信息，所以它的安全性也是很差的，例如：常见的记住密码就可以通过Cookie来实现</p><p>如果想要把Cookie随着响应发送到客户端，需要先添加到response对象中</p><p>cookie默认是关闭浏览器失效</p><h1 id="Cookie的有效时间值"><a href="#Cookie的有效时间值" class="headerlink" title="Cookie的有效时间值"></a>Cookie的有效时间值</h1><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220828202948622.png" alt="image-20220828202948622" style="zoom:80%;" /></p><h1 id="Cookie的注意点"><a href="#Cookie的注意点" class="headerlink" title="Cookie的注意点"></a>Cookie的注意点</h1><blockquote><p>1.cookie保存在当前浏览器，不能跨浏览器，更不用说换电脑了<br>2.cookie存中文问题<br>cookie不能存中文，如果有中文，则通过URLEncoder.encode()来进行编码<br>通过URLDecoder.decode()进行解码</p></blockquote><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220828203015097.png" alt="image-20220828203015097"></p><blockquote><p>3.同名cookie问题<br>如果服务器发送重复的cookie，那么会覆盖原来的cookie<br>4.cookie的数量<br>不同浏览器对cookie有限定，cookie的存储是有上限的，cookie存储在客户端(浏览器)的，而且一般是由服务器创建和指定，后期结合Session来实现会话追踪</p></blockquote><h1 id="Cookie路径的问题"><a href="#Cookie路径的问题" class="headerlink" title="Cookie路径的问题"></a>Cookie路径的问题</h1><p>Cookie的setPath（可以设置cookie的路径，这个路径直接决定服务器的请求是否会从浏览器中加载某些cookie</p><p>情景一：当前服务器下的任何项目的任意资源都可以获取Cookie对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前项目路径s</span></span><br><span class="line">Cookie cookie=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="comment">//设置路径为&quot;/&quot;,表示在当前项目下的任何项目都可以访问到cookie对象</span></span><br><span class="line"></span><br><span class="line">cookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><p>情景二：当前项目下的资源都可获取Cookie对象(默认不设置Cookie的path)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前项目路径s</span><br><span class="line">Cookie cookie=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="comment">//设置路径为&quot;/s&quot;,表示在当前项目下的任何项目都可以访问到cookie对象</span></span><br><span class="line"><span class="comment">//默认情况下可以不设置path的值</span></span><br><span class="line">cookie.setPath(<span class="string">&quot;/s&quot;</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><p>情景三：指定项目下的资源可获取Cookie对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前项目路径s</span><br><span class="line">Cookie cookie=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="comment">//设置路径为&quot;/s2&quot;,表示在s2项目下才可以访问到</span></span><br><span class="line">cookie.setPath(<span class="string">&quot;/s2&quot;</span>);</span><br><span class="line"><span class="comment">//只能在s2项目下获取cookie，就算cookie是s产生的，s也不能获取它</span></span><br><span class="line"> response.addCookie(cookie);</span><br></pre></td></tr></table></figure><p>情景四：指定目录下的资源可获取Cookie对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前项目路径s</span></span><br><span class="line">Cookie cookie=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="comment">//设置路径为/s/cook,表示在s1/cook目录下面才可以访问到cookie对象</span></span><br><span class="line">cookie.setPath(<span class="string">&quot;/s/cook&quot;</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><h1 id="Cookie的禁用问题"><a href="#Cookie的禁用问题" class="headerlink" title="Cookie的禁用问题"></a>Cookie的禁用问题</h1><p>Cookie禁用了，session还能找到吗？</p><blockquote><p>cookie禁用就是说服务器正常发送cookie给浏览器，但是浏览器不要了。拒收了。并不是服务器不发了。<br>找不到了。每一次请求都会获取到新的session对象。<br>cookie禁用了，session机制还能实现吗？<br>可以。需要使用URL重写机制。<br><a href="http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16">http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16</a><br>URL重写机制会提高开发者的成本。开发人员在编写任何请求路径的时候，后面都要添加一个sessionid，给开发带来了很大的难度，很大的成本。所以大部分的网站都是这样设计的：如果禁用cookie，就别用了。</p></blockquote><h1 id="URL重写（了解）"><a href="#URL重写（了解）" class="headerlink" title="URL重写（了解）"></a>URL重写（了解）</h1><ul><li><p>在整个会话控制技术体系中，保持JSESSIONID的值主要通过Cookie实现。但Cookie在浏览器端可能会被禁用，所以我们还需要一些备用的技术手段，例如：URL重写。</p></li><li><p>URL重写其实就是将JSESSIONID的值以固定格式附着在URL地址后面，以实现保持JSESSIONID，进而保持会话状态。这个固定格式是：URL;jsessionid=xxxxxxxxx</p></li><li><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">targetServlet;jsessionid=97120112D5538009334F1C6DEADB1BE7</span><br></pre></td></tr></table></figure></li><li><p>实现方式：</p><ul><li><p>response.encodeURL(String)</p></li><li><p>response.encodeRedirectURL(String)</p></li></ul></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取Session对象</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建目标URL地址字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;targetServlet&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.在目标URL地址字符串后面附加JSESSIONID的值</span></span><br><span class="line">url = response.encodeURL(url+<span class="string">&quot;;jsessionid=97120112D5538009334F1C6DEADB1BE7&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.重定向到目标资源</span></span><br><span class="line">response.sendRedirect(url);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="处理表单重复提交问题"><a href="#处理表单重复提交问题" class="headerlink" title="处理表单重复提交问题"></a>处理表单重复提交问题</h1><ul><li>表单重复提交的危害<ul><li>可重复注册，对数据库进行批处理攻击。（验证码已解决该问题）</li><li>可重复提交已付款表单，用户支付一次订单费用，下了多个订单</li><li>等待…</li></ul></li><li>解决表单重复提交的步骤<ul><li>生成一个不可重复（全球唯一）的随机数(uuid)</li><li>在提交表单前，将随机数(uuid)分别存放到表单内的隐藏域，和session域对象中</li><li>发送“提交表单”请求</li><li>判断是否提交表单，具体操作如下：<ul><li>分别获取隐藏域和session域中的uuid</li><li>判断两个域中的数据是否相等<ul><li>相等：提交表单，并将session域中的uuid移除</li><li>不等：不提交表单</li></ul></li></ul></li></ul></li><li>UUID<ul><li>定义：是一个32位16进制的随机数</li><li>特点：全球唯一</li><li>使用：java.util.UUID.randomUUID()</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一文学懂Cookie与Session的区别&quot;&gt;&lt;a href=&quot;#一文学懂Cookie与Session的区别&quot; class=&quot;headerlink&quot; title=&quot;一文学懂Cookie与Session的区别&quot;&gt;&lt;/a&gt;一文学懂Cookie与Session的区别&lt;/</summary>
      
    
    
    
    <category term="Web网页技术" scheme="https://manamn.space/categories/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="Web网页技术" scheme="https://manamn.space/tags/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>一文学懂过滤器和监听器</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/%E4%B8%80%E6%96%87%E5%AD%A6%E6%87%82%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/%E4%B8%80%E6%96%87%E5%AD%A6%E6%87%82%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/</id>
    <published>2022-10-16T15:00:12.000Z</published>
    <updated>2022-10-17T13:37:24.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一文学懂过滤器和监听器"><a href="#一文学懂过滤器和监听器" class="headerlink" title="一文学懂过滤器和监听器"></a>一文学懂过滤器和监听器</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始</strong>  —————</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/Filter&amp;Listener.png" alt=""></p><h1 id="第一章-什么是Filter"><a href="#第一章-什么是Filter" class="headerlink" title="第一章  什么是Filter"></a>第一章  什么是Filter</h1><h2 id="1-1-Filter简介"><a href="#1-1-Filter简介" class="headerlink" title="1.1 Filter简介"></a>1.1 Filter简介</h2><blockquote><p>Filter的中文意思是过滤器。顾名思义，过滤器就是在浏览器和目标资源之间起到一个过滤与资源拦截的作用。例如：水净化器，可以看成是生活中的一个过滤器，他可以将污水中的杂质过滤，从而使进入的污水变成净水。</p></blockquote><ul><li>对于WEB应用来说，过滤器是一个驻留在服务器中的WEB组件，他可以截取客户端和WEB资源之间的请求和响应信息。<ul><li>WEB资源可能包括 Servlet、JSP、HTML页面等。</li></ul></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558767049205.png" alt="1558767049205"></p><ul><li><p>当服务器收到资源请求之后，会首先将请求给顾虑器处理，程序员可以在过滤器中对请求信息进行读取修改等操作，然后将请求信息再发送给目标资源。目标资源作出响应后，服务器会再次将响应转交给过滤器，在过滤器中同样可以对响应信息做一些操作，<code>然后再将响应发送给服务器</code>。</p></li><li><p>在一个WEB应用中可以部署多个过滤器，多个过滤器就组成了一个过滤器链，请求和响应必须在经过多个过滤器后才能到达目标；</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558774993622.png" alt="1558774993622"></p></li><li><p>过滤器不是必须将请求传送到下一个过滤器（或WEB资源），也可以自己来处理请求，发送响应。</p></li><li><p>当配置<code>多个Filter</code> 的时候就有一个执行顺序的问题，实际执行顺序是按照在web.xml文件中servlet-mapping的顺序决定的，如果顺序越靠前越先被调用。</p></li></ul><h2 id="1-2-总结"><a href="#1-2-总结" class="headerlink" title="1.2 总结"></a>1.2 总结</h2><ul><li>Filter是一个接口。</li><li>Filter是Java Web三大组件之一。（JavaWeb三大组件分别是：Servlet小程序、Filter过滤器、Listener监听器）</li><li>Filter是服务器专门用来过滤请求，拦截请求的。</li><li>Filter的常见作用 ： <ul><li>检查用的的访问权限。</li><li>设置响应编码，解决乱码问题。</li></ul></li></ul><h2 id="1-3-主要API"><a href="#1-3-主要API" class="headerlink" title="1.3 主要API"></a>1.3 主要API</h2><h4 id="1-3-1-Filter接口"><a href="#1-3-1-Filter接口" class="headerlink" title="1.3.1 Filter接口"></a>1.3.1 Filter接口</h4><ul><li><p>编写Filter 需要实现Filter接口，我们来看一下Filter接口的主要方法：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558775226983.png" alt="1558775226983"></p><ul><li><code>init()方法用于初始化Filter</code></li><li><code>doFilter()作用和service()方法类似，是过滤请求和响应的主要方法。</code></li><li><code>destroy()用于在Filter对象被销毁前做一些收尾工作。如：释放资源等。</code></li></ul></li></ul><h4 id="1-3-2-FilterConfig接口"><a href="#1-3-2-FilterConfig接口" class="headerlink" title="1.3.2 FilterConfig接口"></a>1.3.2 FilterConfig接口</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558775582961.png" alt="1558775582961"></p><ul><li>FilterConfig对象在服务器调用init()方法时传递进来。<ul><li><code>getFilterName() 获取Filter的名字</code></li><li><code>getServletContext() 获取ServletContext对象（即application）</code></li><li><code>getInitParameter() 获取Filter的初始化参数</code></li><li><code>getInitParameterNames() 获取所有初始化参数的名字</code></li></ul></li></ul><h4 id="1-3-3-FilterChain接口"><a href="#1-3-3-FilterChain接口" class="headerlink" title="1.3.3 FilterChain接口"></a>1.3.3 FilterChain接口</h4><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558775624400.png" alt="1558775624400"></p><ul><li>FilterChain对象是在doFilter()方法被调用时作为参数传递进来的。<ul><li>doFilter()方法用于调用Filter链上的下一个过滤器，如果当前过滤器为最后一个过滤器则将请求发送到目标资源。</li></ul></li></ul><h1 id="第二章-Filter初体验"><a href="#第二章-Filter初体验" class="headerlink" title="第二章  Filter初体验"></a>第二章  Filter初体验</h1><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><p>现在在Web目录下有一个目录admin。这个目录是管理员操作的目录。这个目录里有 jsp文件，有html文件，还有图片资源文件。现在我们要让这些资源都在用户登录才能被访问。那么我们要怎么实现这样的需求。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>前面我们讲过Session。有同学可能会想，我们可以在用户登录之后把用户的信息保存在Session域对象中。然后在 jsp页面里通过Session域对象获取用户的信息。如果用户信息存在，说明用户已登录。否则就重定向到登录页面。这个方案可行。可是html页面呢? html页面是没有Session域对象的。</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>这就需要我们使用Filter过滤器来进行请求的拦截。然后判断Session域对象中是否包含用户的信息。</p><p>现在我们以admin目录下user.jsp为例进行讲解。</p><p>1、首先，我们需要创建一个类来实现Filter接口，用来检查Session中是否包含用户信息。</p><p>2、实现Filter中的doFilter方法</p><p>3、然后到web.xml文件中去配置Filter的过滤信息。</p><p>4、然后重启服务器访问测试</p><p><strong>操作步骤1：Filter1的类代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter1</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter初始化方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter的过滤方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"><span class="comment">// 强转</span></span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">httpRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line"><span class="comment">// 获取用户登录信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) httpRequest.getSession().getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (username != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 过滤器中，只要允许用户访问资源，一定要调用chain.doFilter方法，否则用户永远访问不到资源</span></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果用户未登录。返回登录页面</span></span><br><span class="line">httpResponse.sendRedirect(httpRequest.getContextPath() + <span class="string">&quot;/login.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter销毁的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>操作步骤2：web.xml文件中的Filter配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Filter1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给Filter1起一个名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Filter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是哪一个Filter类，即全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atmanman.filter.Filter1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Filter的名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Filter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Filter1的过滤地址</span></span><br><span class="line"><span class="comment">表示过滤http://127.0.0.1:8080/day17/admin/user.jsp</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/user.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>除此之外在filter-mapping还有一个子标签dispatcher，该标签用来指定需要Filter处理的请求类型，该标签可以配置四个值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户直接访问资源时，会调用Filter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过转发访问时，会调用Filter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>FORWARD<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过动态包含获取时，会调用Filter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>INCLUDE<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当通过异常处理访问页面时，会调用Filter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这四种情况可以设置一个，也可以同时设置多个，如果不设置那么默认为REQUEST。</li></ul></li></ul><h1 id="第三章-Filter的生命周期"><a href="#第三章-Filter的生命周期" class="headerlink" title="第三章  Filter的生命周期"></a>第三章  Filter的生命周期</h1><p><strong>Servlet的生命周期</strong></p><ol><li>先执行构造方法</li><li>执行init方法做初始化操作</li><li>执行service方法</li><li>销毁的时候调用destory方法</li></ol><p><strong>Filter生命周期：</strong></p><ol><li>先执行Filter的构造方法</li><li>然后执行Filter的init()方法，对象创建后，马上就被调用，对Filter做一些初始化操作</li><li>执行Filter的doFilter()方法，每次访问目标资源，只要匹配过滤的地址，就会调用。</li><li>执行Filter的destroy()方法，服务器停止时调用，用来释放资源。</li></ol><p><strong>Filter的生命周期和生命周期方法</strong></p><div class="table-container"><table><thead><tr><th>生命周期阶段</th><th>执行时机</th><th>生命周期方法</th></tr></thead><tbody><tr><td>创建对象</td><td>Web应用启动时</td><td>init方法，通常在该方法中做初始化工作</td></tr><tr><td>拦截请求</td><td>接收到匹配的请求</td><td>doFilter方法，通常在该方法中执行拦截过滤</td></tr><tr><td>销毁</td><td>Web应用卸载前</td><td>destroy方法，通常在该方法中执行资源释放</td></tr></tbody></table></div><h1 id="第四章-FilterConfig类"><a href="#第四章-FilterConfig类" class="headerlink" title="第四章 FilterConfig类"></a>第四章 FilterConfig类</h1><ul><li><p>作用：FilterConfig类和ServletConfig类是一样的。可以获取Filter在web.xml文件中的配置信息，做初始化之用。</p></li><li><p>我们可以在web.xml文件中给Filter添加初始化参数。然后在init初始化方法中使用FilterConfig类获取到初始化的参数。</p></li><li><p>FilterConfig类，一般有三个作用：</p><ul><li>获取Filter在web.xml文件中配置的名称</li></ul></li><li>获取Filter在web.xml文件中配置的初始化参数<ul><li>通过FilterConfig类获取ServletContext对象实例</li></ul></li></ul><p><strong>第一步：修改Filter2在web.xml中的配置信息</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Filter2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给Filter2起一个名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是哪一个Filter类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.manman.filter.Filter2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置初始化参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化参数的名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化参数的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二步：修改Filter2中init方法的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter初始化方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Filter2 init 方法被调用。初始化……&quot;</span>);</span><br><span class="line"><span class="comment">// 获取Filter的名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> filterConfig.getFilterName();</span><br><span class="line">System.out.println(<span class="string">&quot;Filter name ==&gt;&gt;&gt; &quot;</span> + filterName);</span><br><span class="line"><span class="comment">// 获取初始化参数。username的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;username ==&gt;&gt; &quot;</span> + username);</span><br><span class="line"><span class="comment">// 获取ServletContext的对象实例 </span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> filterConfig.getServletContext();</span><br><span class="line">System.out.println(ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三步：重启Tomcat服务器，控制台打印如下：</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558764469028.png" alt="1558764469028"></p><h1 id="第5章-FilterChain过滤器链（重点）"><a href="#第5章-FilterChain过滤器链（重点）" class="headerlink" title="第5章 FilterChain过滤器链（重点）"></a>第5章 FilterChain过滤器链（重点）</h1><ul><li><p>FilterChain是整个Filter过滤器的调用者。Filter与Filter之间的传递，或者Filter与请求资源之间的传递都靠FilterChain.doFilter方法。</p></li><li><p>一般Filter.doFilter中的代码分为三段：</p><ul><li>第一段是FilterChain.doFilter之前的代码。一般用来做请求的拦截，检查用户访问的权限，访问日记的记录。参数编码的设置等等操作。</li></ul></li><li><p>第二段是FilterChain.doFilter方法。此方法可以将代码的执行传递到下一个Filter中。或者是传递到用户最终访问的资源中。</p><ul><li>第三段是FilterChain.doFilter之后的代码。主要用过做一些日志操作。我们很少会在第三段中做太多复杂的操作。</li></ul></li><li><p>在每一个Filter类的doFilter方法中，一定要调用chain.doFilter方法，除非你想要阻止用户继续往下面访问。否则一定要调用FilterChain的doFilter方法。</p></li></ul><p><strong>5.1 图解：多个Filter过滤器的代码流转</strong></p><p> <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558764647060.png" alt="1558764647060"></p><p><strong>5.2 现在我们添加两个Filter类，对同一个资源进行过滤</strong></p><p>第一个Filter类ChainFilter1 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainFilter1</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;资源访问前---ChainFilter1 -- 开始执行&quot;</span>);</span><br><span class="line"><span class="comment">// 转发下一个Filter或者请求的资源</span></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">System.out.println(<span class="string">&quot;资源访问后---ChainFilter1 -- 执行结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个Filter类ChainFilter2 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainFilter2</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;资源访问前---ChainFilter2 -- 开始执行&quot;</span>);</span><br><span class="line"><span class="comment">// 转发下一个Filter或者请求的资源</span></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">System.out.println(<span class="string">&quot;资源访问后---ChainFilter2 -- 执行结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.3 在web.xml文件中的配置如下：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ChainFilter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.manman.filter.ChainFilter1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ChainFilter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/chainFilter.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ChainFilter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.manman.filter.ChainFilter2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ChainFilter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/chainFilter.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>5.4 WebContent/chainFilter.jsp文件的内容如下：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;cache-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;%</span><br><span class="line">System.out.println(&quot;这是请求资源的代码&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">这是ChainFilter.jsp</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>5.5 打开浏览器输入<a href="http://127.0.0.1:8080/day17/chainFilter.jsp回车访问：">http://127.0.0.1:8080/day17/chainFilter.jsp回车访问：</a></strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558764839164.png" alt="1558764839164"></p><blockquote><p><strong>千万要注意：</strong>在Filter类的doFilter方法中，除非你要拦截请求的资源，否则一定要调用FilterChain参数的doFilter方法让代码的执行传递到下一个Filter或访问的资源中。</p></blockquote><h1 id="第6章-Filter的拦截路径（目标资源的配置）"><a href="#第6章-Filter的拦截路径（目标资源的配置）" class="headerlink" title="第6章 Filter的拦截路径（目标资源的配置）"></a>第6章 Filter的拦截路径（目标资源的配置）</h1><ul><li><p>Filter的目标资源指的是需要调用Filter来进行过滤处理的资源，例如上文我们配置的/index.html就是我们的目标资源，当我们访问项目根目录下的index.html时就会调用HelloFilter来进行过滤。</p></li><li><p>目标资源的配置方式主要有以下两大种：</p><ul><li><p>第一种：通过filter-mapping的url-pattern来配置（与Servlet的url-pattern的规则相同）</p><ul><li><p><strong>精确匹配：/路径/资源名</strong></p><p>比如：/index.html、/hello/index.jsp 、 /client/LoginServlet 等，只要在请求地址完全一样时才会调用Filter</p></li><li><p><strong>目录匹配：/路径名/*</strong></p><p>比如1：/abc/ <strong>表示可以拦截abc目录下的所有资源，甚至是abc目录下的其他目录</strong>。其中：/* 表示访问 当前工程下所有资源</p><p>比如2：/* 表示只要访问项目根目录下的资源就会调用Filter</p></li><li><p><strong>后缀名匹配：*.后缀名</strong></p><p>比如：*.jsp 表示拦截所有后缀为jsp文件资源</p></li></ul></li><li><p>第二种：通过 <strong>filter-mapping</strong> 中的 <strong>servlet-name</strong> 来指定要过滤的Servlet</p></li><li><p>如：以下是一个项目中的web.xml配置文件，在项目中有一个Filter加做HelloFilter，一个Servlet叫做HelloServlet。在Filter的filter-mapping中增加了一个servlet-name标签，将该标签的值设置成Servlet的名字，在访问Servlet时就会调用该过滤器过滤请求。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HelloFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.manman.web.filter.HelloFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HelloFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.manman.web.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>针对于第一种情况：</p><p>精确匹配前面 ，我们已经演示过了。</p><p>下面我们以目录匹配为示例展示代码。大家可以在此基础上修改web.xml文件中的<url-pattern>标签来测试自己想要的路径。</p><p><strong>1. Filter的代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterPath</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;filter path 执行了&quot;</span>);</span><br><span class="line"><span class="comment">// 将代码执行传递到下一个Filter或者是请求资源</span></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. web.xml文件中的配置内容：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterPath<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.manman.filter.FilterPath<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterPath<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第7章-HttpFilter"><a href="#第7章-HttpFilter" class="headerlink" title="第7章 HttpFilter"></a>第7章 HttpFilter</h1><ul><li><p>回想Servlet中学习，我们发现：实现Servlet接口，不如继承HttpServlet应用方便。所以，我们想到需要继承HttpFilter。</p></li><li><p>如果tomcat类库没有提供HttpFilter,就需要我们自己设计一个HttpFilter。</p><ul><li><p>类比最终创建Servlet的方式，我们发现设计HttpFilter大体分为以下几个步骤：</p><ol><li><p>提供 getFilterConfig() 和 getServletContext()</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558775624401.png" alt="1558764839164"></p></li><li><p>将doFilter()重载并抽象化处理</p></li><li><p>原有doFilter()方法需要将参数转换类型后，调用重载doFilter()方法</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558775624402.png" alt="1558764839164"></p></li></ol></li></ul></li></ul><h1 id="第八章-监听器（了解即可）"><a href="#第八章-监听器（了解即可）" class="headerlink" title="第八章 监听器（了解即可）"></a>第八章 监听器（了解即可）</h1><h2 id="2-1-监听器的简介"><a href="#2-1-监听器的简介" class="headerlink" title="2.1 监听器的简介"></a>2.1 监听器的简介</h2><h3 id="2-1-1-监听器的概念"><a href="#2-1-1-监听器的概念" class="headerlink" title="2.1.1 监听器的概念"></a>2.1.1 监听器的概念</h3><p>监听器：专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象，当被监视的对象发生情况时，立即采取相应的行动。<br><span style="color:blue;font-weight:bold;">Servlet监听器</span>：Servlet规范中定义的一种特殊类，它用于监听Web应用程序中的ServletContext，HttpSession 和HttpServletRequest等域对象的创建与销毁事件，以及监听这些域对象中的属性发生修改的事件。</p><h3 id="2-1-2-Servlet监听器的分类-了解"><a href="#2-1-2-Servlet监听器的分类-了解" class="headerlink" title="2.1.2 Servlet监听器的分类(了解)"></a>2.1.2 Servlet监听器的分类(了解)</h3><h4 id="①-ServletContextListener"><a href="#①-ServletContextListener" class="headerlink" title="① ServletContextListener"></a>① ServletContextListener</h4><p>作用：监听ServletContext对象的创建与销毁</p><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>contextInitialized(ServletContextEvent sce)</td><td>ServletContext创建时调用</td></tr><tr><td>contextDestroyed(ServletContextEvent sce)</td><td>ServletContext销毁时调用</td></tr></tbody></table></div><p>ServletContextEvent对象代表从ServletContext对象身上捕获到的事件，通过这个事件对象我们可以获取到ServletContext对象。</p><h6 id="②-HttpSessionListener"><a href="#②-HttpSessionListener" class="headerlink" title="② HttpSessionListener"></a>② HttpSessionListener</h6><p>作用：监听HttpSession对象的创建与销毁</p><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>sessionCreated(HttpSessionEvent hse)</td><td>HttpSession对象创建时调用</td></tr><tr><td>sessionDestroyed(HttpSessionEvent hse)</td><td>HttpSession对象销毁时调用</td></tr></tbody></table></div><p>HttpSessionEvent对象代表从HttpSession对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpSession对象。</p><h6 id="③-ServletRequestListener"><a href="#③-ServletRequestListener" class="headerlink" title="③ ServletRequestListener"></a>③ ServletRequestListener</h6><p>作用：监听ServletRequest对象的创建与销毁</p><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>requestInitialized(ServletRequestEvent sre)</td><td>ServletRequest对象创建时调用</td></tr><tr><td>requestDestroyed(ServletRequestEvent sre)</td><td>ServletRequest对象销毁时调用</td></tr></tbody></table></div><p>ServletRequestEvent对象代表从HttpServletRequest对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpServletRequest对象。另外还有一个方法可以获取到当前Web应用的ServletContext对象。</p><h6 id="④-ServletContextAttributeListener"><a href="#④-ServletContextAttributeListener" class="headerlink" title="④ ServletContextAttributeListener"></a>④ ServletContextAttributeListener</h6><p>作用：监听ServletContext中属性的添加、移除和修改</p><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>attributeAdded(ServletContextAttributeEvent scab)</td><td>向ServletContext中添加属性时调用</td></tr><tr><td>attributeRemoved(ServletContextAttributeEvent scab)</td><td>从ServletContext中移除属性时调用</td></tr><tr><td>attributeReplaced(ServletContextAttributeEvent scab)</td><td>当ServletContext中的属性被修改时调用</td></tr></tbody></table></div><p>ServletContextAttributeEvent对象代表属性变化事件，它包含的方法如下：</p><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取修改或添加的属性名</td></tr><tr><td>getValue()</td><td>获取被修改或添加的属性值</td></tr><tr><td>getServletContext()</td><td>获取ServletContext对象</td></tr></tbody></table></div><h6 id="⑤-HttpSessionAttributeListener"><a href="#⑤-HttpSessionAttributeListener" class="headerlink" title="⑤ HttpSessionAttributeListener"></a>⑤ HttpSessionAttributeListener</h6><p>作用：监听HttpSession中属性的添加、移除和修改</p><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>attributeAdded(HttpSessionBindingEvent se)</td><td>向HttpSession中添加属性时调用</td></tr><tr><td>attributeRemoved(HttpSessionBindingEvent se)</td><td>从HttpSession中移除属性时调用</td></tr><tr><td>attributeReplaced(HttpSessionBindingEvent se)</td><td>当HttpSession中的属性被修改时调用</td></tr></tbody></table></div><p>HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：</p><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取修改或添加的属性名</td></tr><tr><td>getValue()</td><td>获取被修改或添加的属性值</td></tr><tr><td>getSession()</td><td>获取触发事件的HttpSession对象</td></tr></tbody></table></div><h6 id="⑥-ServletRequestAttributeListener"><a href="#⑥-ServletRequestAttributeListener" class="headerlink" title="⑥ ServletRequestAttributeListener"></a>⑥ ServletRequestAttributeListener</h6><p>作用：监听ServletRequest中属性的添加、移除和修改</p><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>attributeAdded(ServletRequestAttributeEvent srae)</td><td>向ServletRequest中添加属性时调用</td></tr><tr><td>attributeRemoved(ServletRequestAttributeEvent srae)</td><td>从ServletRequest中移除属性时调用</td></tr><tr><td>attributeReplaced(ServletRequestAttributeEvent srae)</td><td>当ServletRequest中的属性被修改时调用</td></tr></tbody></table></div><p>ServletRequestAttributeEvent对象代表属性变化事件，它包含的方法如下：</p><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取修改或添加的属性名</td></tr><tr><td>getValue()</td><td>获取被修改或添加的属性值</td></tr><tr><td>getServletRequest ()</td><td>获取触发事件的ServletRequest对象</td></tr></tbody></table></div><h6 id="⑦-HttpSessionBindingListener"><a href="#⑦-HttpSessionBindingListener" class="headerlink" title="⑦ HttpSessionBindingListener"></a>⑦ HttpSessionBindingListener</h6><p>作用：监听某个对象在Session域中的创建与移除</p><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>valueBound(HttpSessionBindingEvent event)</td><td>该类的实例被放到Session域中时调用</td></tr><tr><td>valueUnbound(HttpSessionBindingEvent event)</td><td>该类的实例从Session中移除时调用</td></tr></tbody></table></div><p>HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：</p><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取当前事件涉及的属性名</td></tr><tr><td>getValue()</td><td>获取当前事件涉及的属性值</td></tr><tr><td>getSession()</td><td>获取触发事件的HttpSession对象</td></tr></tbody></table></div><h4 id="2-2-ServletContextListener的使用"><a href="#2-2-ServletContextListener的使用" class="headerlink" title="2.2 ServletContextListener的使用"></a>2.2 ServletContextListener的使用</h4><h5 id="2-2-1-作用"><a href="#2-2-1-作用" class="headerlink" title="2.2.1 作用"></a>2.2.1 作用</h5><p>ServletContextListener是监听ServletContext对象的创建和销毁的，因为ServletContext对象是在服务器启动的时候创建、在服务器关闭的时候销毁，所以ServletContextListener也可以监听服务器的启动和关闭</p><h5 id="2-2-2-使用场景"><a href="#2-2-2-使用场景" class="headerlink" title="2.2.2 使用场景"></a>2.2.2 使用场景</h5><p>将来学习SpringMVC的时候，会用到一个ContextLoaderListener，这个监听器就实现了ServletContextListener接口，表示对ServletContext对象本身的生命周期进行监控。</p><h5 id="2-2-3-代码实现"><a href="#2-2-3-代码实现" class="headerlink" title="2.2.3 代码实现"></a>2.2.3 代码实现</h5><h6 id="①-创建监听器类"><a href="#①-创建监听器类" class="headerlink" title="① 创建监听器类"></a>① 创建监听器类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:com.manman.listener</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenxin</span></span><br><span class="line"><span class="comment"> * 日期2021-06-19  10:26</span></span><br><span class="line"><span class="comment"> * 编写监听器的步骤:</span></span><br><span class="line"><span class="comment"> * 1. 写一个类实现对应的：Listener的接口(我们这里使用的是ServletContextListener),并且实现它里面的方法</span></span><br><span class="line"><span class="comment"> *    1.1 contextInitialized()这个方法在ServletContext对象被创建出来的时候执行，也就是说在服务器启动的时候执行</span></span><br><span class="line"><span class="comment"> *    1.2 contextDestroyed()这个方法会在ServletContext对象被销毁的时候执行，也就是说在服务器关闭的时候执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. 在web.xml中注册(配置)监听器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextLoaderListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在服务器启动的时候，模拟创建SpringMVC的核心容器...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在服务器启动的时候，模拟销毁SpringMVC的核心容器...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="②-注册监听器"><a href="#②-注册监听器" class="headerlink" title="② 注册监听器"></a>② 注册监听器</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.manman.listener.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一文学懂过滤器和监听器&quot;&gt;&lt;a href=&quot;#一文学懂过滤器和监听器&quot; class=&quot;headerlink&quot; title=&quot;一文学懂过滤器和监听器&quot;&gt;&lt;/a&gt;一文学懂过滤器和监听器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🏠个人主页：&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="Web网页技术" scheme="https://manamn.space/categories/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="Web网页技术" scheme="https://manamn.space/tags/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>一文了解转发与重定向</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/</id>
    <published>2022-10-16T14:59:54.000Z</published>
    <updated>2022-10-17T13:37:15.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一文了解转发与重定向"><a href="#一文了解转发与重定向" class="headerlink" title="一文了解转发与重定向"></a>一文了解转发与重定向</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始</strong>  —————</p><p><strong>先看一下思维导图了解一下大体</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91.png" alt=""></p><h1 id="第1章-请求的转发与重定向"><a href="#第1章-请求的转发与重定向" class="headerlink" title="第1章 请求的转发与重定向"></a>第1章 请求的转发与重定向</h1><p>请求的转发与重定向是web应用页面跳转的主要手段，在Web应用中使用非常广泛。所以我们一定要搞清楚他们的区别。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1562000421414.png" alt="1562000421414"></p><h3 id="8-1-请求的转发"><a href="#8-1-请求的转发" class="headerlink" title="8.1 请求的转发"></a>8.1 请求的转发</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1557754164834.png" alt="1557754164834"></p><ul><li>第一个Servlet接收到了浏览器端的请求，进行了一定的处理，然后没有立即对请求进行响应，而是将请求“交给下一个Servlet”继续处理，下一个Servlet处理完成之后对浏览器进行了响应。<strong>在服务器内部将请求“交给”其它组件继续处理就是请求的转发。</strong>对浏览器来说，一共只发了一次请求，服务器内部进行的“转发”浏览器感觉不到，同时浏览器地址栏中的地址不会变成“下一个Servlet”的虚拟路径。</li><li><code>HttpServletRequest</code> 代表HTTP请求，对象由Servlet容器创建。转发的情况下，两个<code>Servlet</code> 可以共享同一个<code>Request</code>对象中保存的数据。</li><li>当需要将后台获取的数据传送到 <code>JSP</code>上显示的时候，就可以先将数据存放到Request对象中，再转发到JSP从属性域中获取。此时由于是“转发”，所以它们二者共享 <code>Request</code> 对象中的数据。</li><li>转发的情况下，可以访问WEB-INF下的资源。</li><li><strong>转发以“/”开始表示项目根路径，重定向以”/”开始表示主机地址。</strong></li><li>功能：<ul><li>获取请求参数</li><li>获取请求路径即URL地址相关信息</li><li>在请求域中保存数据</li><li>转发请求</li></ul></li><li>代码举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//1.使用RequestDispatcher对象封装目标资源的虚拟路径</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line"><span class="comment">//2.调用RequestDispatcher对象的forward()方法“前往”目标资源</span></span><br><span class="line"><span class="comment">//[注意：传入的参数必须是传递给当前Servlet的service方法的</span></span><br><span class="line"><span class="comment">//那两个ServletRequest和ServletResponse对象]</span></span><br><span class="line">dispatcher.forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-2-请求的重定向"><a href="#8-2-请求的重定向" class="headerlink" title="8.2 请求的重定向"></a>8.2 请求的重定向</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1557754122187.png" alt="1557754122187"></p><ul><li><p>第一个Servlet接收到了浏览器端的请求，进行了一定的处理，然后给浏览器一个特殊的响应消息，这个特殊的响应消息会通知浏览器去访问另外一个资源，这个动作是服务器和浏览器自动完成的。<strong>整个过程中浏览器端会发出两次请求</strong>，且在<strong>浏览器地址栏里面能够看到地址的改变</strong>，改变为下一个资源的地址。</p></li><li><p>重定向的情况下，原Servlet和目标资源之间就不能共享请求域数据了。</p></li><li><p>HttpServletResponse代表HTTP响应，对象由Servlet容器创建。</p></li><li><p>功能：</p><ul><li>向浏览器输出数据</li><li>重定向请求</li></ul></li><li><p>重定向的响应报文的头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Found</span><br><span class="line">Location: success.html</span><br></pre></td></tr></table></figure></li><li><p>应用：</p><ul><li><p>用户从 login.html 页面提交登录请求数据给LoginServlet处理。</p><p>如果账号密码正确，需要让用户跳转到成功页面，通过servlet向响应体中写入成功页面过于复杂，通过重定向将成功页面的地址交给浏览器并设置响应状态码为302，浏览器会自动进行跳转</p></li></ul></li><li><p>代码举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//1.调用HttpServletResponse对象的sendRedirect()方法</span></span><br><span class="line"><span class="comment">//2.传入的参数是目标资源的虚拟路径</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-3-对比请求的转发与重定向"><a href="#8-3-对比请求的转发与重定向" class="headerlink" title="8.3 对比请求的转发与重定向"></a>8.3 对比请求的转发与重定向</h3><div class="table-container"><table><thead><tr><th></th><th>转发</th><th>重定向</th></tr></thead><tbody><tr><td>浏览器感知</td><td>在服务器内部完成，浏览器感知不到</td><td>服务器以302状态码通知浏览器访问新地址，浏览器有感知</td></tr><tr><td>浏览器地址栏</td><td>不改变</td><td>改变</td></tr><tr><td>整个过程发送请求次数</td><td>一次</td><td>两次</td></tr><tr><td>执行效率</td><td>效率高</td><td>效率低</td></tr><tr><td>API（或发起者）</td><td>Request对象</td><td>Response对象</td></tr><tr><td>能否共享request对象数据</td><td>能</td><td>否</td></tr><tr><td>WEB-INF下的资源</td><td>能访问</td><td>不能访问</td></tr><tr><td>目标资源</td><td>必须是当前web应用中的资源</td><td>不局限于当前web应用</td></tr></tbody></table></div><blockquote><p>说明1：默认情况下，浏览器是不能访问服务器web-inf下的资源的，而服务器是可以访问的。</p><p>说明2：浏览器默认的绝对路径：<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>​              服务器项目的代码中的绝对路径：<a href="http://localhost:8080/项目名/">http://localhost:8080/项目名/</a></p></blockquote><h1 id="第2章-请求与响应中的字符编码设置"><a href="#第2章-请求与响应中的字符编码设置" class="headerlink" title="第2章 请求与响应中的字符编码设置"></a>第2章 请求与响应中的字符编码设置</h1><h3 id="9-1-字符编码问题"><a href="#9-1-字符编码问题" class="headerlink" title="9.1 字符编码问题"></a>9.1 字符编码问题</h3><ul><li>我们 web 程序在接收请求并处理过程中，如果不注意编码格式及解码格式，很容易导致中文乱码，引起这个问题的原因到底在哪里？如何解决？</li><li>说到这个问题我们先来说一说字符集。<ul><li>什么是字符集，就是各种字符的集合，包括汉字，英文，标点符号等等。各国都有不同的文字、符号。这些文字符号的集合就叫字符集。</li><li>现有的字符集ASCII、GB2312、BIG5、GB18030、Unicode、UTF-8、ISO-8859-1等</li></ul></li><li>这些字符集，集合了很多的字符，然而，字符要以二进制的形式存储在计算机中，我们就需要对其进行编码，将编码后的二进制存入。取出时我们就要对其解码，将二进制解码成我们之前的字符。这个时候我们就需要制定一套编码解码标准。否则就会导致出现混乱，也就是我们的乱码。</li></ul><h3 id="9-2-编码与解码"><a href="#9-2-编码与解码" class="headerlink" title="9.2 编码与解码"></a>9.2 编码与解码</h3><ul><li>编码：将字符转换为二进制数</li></ul><div class="table-container"><table><thead><tr><th>汉字</th><th>编码方式</th><th>编码</th><th>二进制</th></tr></thead><tbody><tr><td>‘中’</td><td><strong>GB2312</strong></td><td><strong>D6D0</strong></td><td><strong>1101 0110-1101 0000</strong></td></tr><tr><td>‘中’</td><td><strong>UTF-16</strong></td><td><strong>4E2D</strong></td><td><strong>0100 1110-0010 1101</strong></td></tr><tr><td>‘中’</td><td><strong>UTF-8</strong></td><td><strong>E4B8AD</strong></td><td><strong>1110</strong> <strong>0100-</strong> <strong>1011</strong> <strong>1000-1010 1101</strong></td></tr></tbody></table></div><ul><li>解码：将二进制数转换为字符</li></ul><p>1110 0100-1011 1000-1010 1101 → E4B8AD → ’中’</p><ul><li>乱码：一段文本，使用A字符集编码，使用B字符集解码，就会产生乱码。所以解决乱码问题的根本方法就是统一编码和解码的字符集。</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558009252673.png" alt="1558009252673"></p><h3 id="9-3-解决请求乱码问题"><a href="#9-3-解决请求乱码问题" class="headerlink" title="9.3 解决请求乱码问题"></a>9.3 解决请求乱码问题</h3><p>解决乱码的方法：就是统一字符编码。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1558009756944.png" alt="1558009756944"></p><h4 id="9-3-1-GET请求"><a href="#9-3-1-GET请求" class="headerlink" title="9.3.1 GET请求"></a>9.3.1 GET请求</h4><ul><li>GET请求参数是在地址后面的。我们需要修改tomcat的配置文件。需要在server.xml文件修改Connector标签，添加URIEncoding=”utf-8”属性。</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561220531242.png" alt="1561220531242"></p><ul><li>一旦配置好以后，可以解决当前工作空间中所有的GET请求的乱码问题。</li></ul><h4 id="9-3-2-POST请求"><a href="#9-3-2-POST请求" class="headerlink" title="9.3.2 POST请求"></a>9.3.2 POST请求</h4><ul><li><p>post请求提交了中文的请求体，服务器解析出现问题。</p></li><li><p>解决方法：在获取参数值之前，设置请求的解码格式，使其和页面保持一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>POST请求乱码问题的解决，只适用于当前的操作所在的类中。不能类似于GET请求一样统一解决。因为请求体有可能会上传文件。不一定都是中文字符。</p></li></ul><h3 id="9-4-解决响应乱码问题"><a href="#9-4-解决响应乱码问题" class="headerlink" title="9.4 解决响应乱码问题"></a>9.4 解决响应乱码问题</h3><ul><li><p>向浏览器发送响应的时候，要告诉浏览器，我使用的字符集是哪个，浏览器就会按照这种方式来解码。如何告诉浏览器响应内容的字符编码方案。很简单。</p></li><li><p>解决方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>解决方法二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>说明：有的人可能会想到使用response.setCharacterEncoding(“utf-8”)，设置reponse对象将UTF-8字符串写入到响应报文的编码为UTF-8。只这样做是不行的，还必须手动在浏览器中设置浏览器的解析用到的字符集。</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一文了解转发与重定向&quot;&gt;&lt;a href=&quot;#一文了解转发与重定向&quot; class=&quot;headerlink&quot; title=&quot;一文了解转发与重定向&quot;&gt;&lt;/a&gt;一文了解转发与重定向&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🏠个人主页：&lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="Web网页技术" scheme="https://manamn.space/categories/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="Web网页技术" scheme="https://manamn.space/tags/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>初始ServletContext</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/%E5%88%9D%E5%A7%8BServletContext/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/%E5%88%9D%E5%A7%8BServletContext/</id>
    <published>2022-10-16T14:59:35.000Z</published>
    <updated>2022-10-17T13:37:06.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始ServletContext"><a href="#初始ServletContext" class="headerlink" title="初始ServletContext"></a>初始ServletContext</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始</strong>  —————</p><p>在正式了解 <code>ServletConfig</code>  之前，先让大家有一个整体印象。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220823224011140.png" alt="image-20220823224011140"><br>之前讲过ServletConfig, 我发现他们有两个共同的方法，我对他们的区别做了小小的总结<br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220822230342360.png" alt="image-20220822230342360"></p><p>上面的思维导图是对下面内容的总结，大家可以先看看，对等会的内容有一个大概印象，看完后，可以再回头看看这个思维导图。</p><h1 id="ServletContext是什么"><a href="#ServletContext是什么" class="headerlink" title="ServletContext是什么"></a>ServletContext是什么</h1><ul><li>ServletContext是一个接口，是<a href="https://so.csdn.net/so/search?q=Servlet&amp;spm=1001.2101.3001.7020">Servlet</a>规范中的一员，</li><li>ServletContext对象的创建也是Tomcat服务器来完成的。启动webapp的时候创建的。</li></ul><h1 id="ServletContext是谁实现的"><a href="#ServletContext是谁实现的" class="headerlink" title="ServletContext是谁实现的"></a>ServletContext是谁实现的</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tomcat服务器(WEB服务器)实现了ServletContext接口</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">org</span>.apache.catalina.core.ApplicationContextFacade <span class="keyword">implements</span> <span class="title class_">ServletContext</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>Servlet对象是谁创建的，在什么时候创建的</li></ul><blockquote><p>ServletContext对象是WEB服务器启动的时候创建的<br>ServletContext对象是WEB服务器创建的</p></blockquote><h1 id="ServletContext的生命周期"><a href="#ServletContext的生命周期" class="headerlink" title="ServletContext的生命周期"></a>ServletContext的生命周期</h1><ul><li><p>对于一个webapp来说，ServletContext对象只有一个</p></li><li><p>一个web应用对应一个ServletContext实例，这个实例是应用部署启动后，servlet容器为应用创建的。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/a7f1d3abfc7048c0a531ddda6c0b6b54.png" alt="在这里插入图片描述"></p><p><strong>ServletContext对象在服务器关闭的时候销毁</strong></p></li><li><p>一个Servlet对象对应一个ServletConfig。100个Servlet对象则对应100个ServletConfig对象。</p></li><li><p>只要在同一个webapp当中，只要在同一个应用当中，所有的Servlet对象都是共享同一个ServletContext对象的。</p></li><li><p>ServletContext对象在服务器启动阶段创建，在服务器关闭的时候销毁。这就是ServletContext对象的生命周期。ServletContext对象是应用级对象。</p></li><li><p>Tomcat服务器中有一个webapps，这个webapps下可以存放webapp，可以存放多个webapp，假设有100个webapp，那么就有100个ServletContext对象。但是，总之，一个应用，一个webapp肯定是只有一个ServletContext对象。<br>接下来，通过程序验证一下</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">writer.print(<span class="string">&quot;ServletContext对象:&quot;</span>+servletContext+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220822230557934.png" alt="image-20220822230557934"></p><p>一个webapp应用共享一个ServletContext对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">writer.print(<span class="string">&quot;ServletContext对象:&quot;</span>+servletContext+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/ed42916df9d84fcabca8bfb6b0bf2ee9.png" alt="在这里插入图片描述"><br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220822230614454.png" alt="image-20220822230614454"><br><strong><font color='red'>在同一个webapp下的Servlet都是共享同一个ServletContext对象</font></strong></p><ul><li>ServletContext被称为Servlet上下文对象。（<font color='red'>Servlet对象的四周环境对象。</font>&gt;）</li><li>一个ServletContext对象通常对应的是一个web.xml文件。</li><li>ServletContext对应显示生活中的什么例子呢？<ul><li>一个教室里有多个学生，那么每一个学生就是一个Servlet，这些学生都在同一个教室当中，那么我们可以把这个教室叫做ServletContext对象。那么也就是说放在这个ServletContext对象（环境）当中的数据，在同一个教室当中，物品都是共享的。比如：教室中有一个空调，所有的学生都可以操作。可见，空调是共享的。因为空调放在教室当中。教室就是ServletContext对象。</li><li>Tomcat是一个容器，一个容器可以放多个webapp,一个webapp对应一个ServletContext对象</li></ul></li></ul><h1 id="ServletContext接口中常用的方法"><a href="#ServletContext接口中常用的方法" class="headerlink" title="ServletContext接口中常用的方法"></a>ServletContext接口中常用的方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;ServletContext对象:&quot;</span>+servletContext+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">initParameter</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;pageSize&quot;</span>);</span><br><span class="line">        writer.println(<span class="string">&quot;pageSize=  &quot;</span>+initParameter);</span><br><span class="line"></span><br><span class="line">  Enumeration&lt;String&gt; names = servletContext.getInitParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (names.hasMoreElements())&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> names.nextElement();</span><br><span class="line">            <span class="comment">//通过name获取value</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">initParameter</span> <span class="operator">=</span> servletContext.getInitParameter(s);</span><br><span class="line">            writer.println(s +<span class="string">&quot;---&gt;&quot;</span>+ initParameter +<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/3eefc83c7ca440e6b6d968e998e6aeac.png" alt="在这里插入图片描述"><br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/93184e838c8e47ffbe12d6334af4dd66.png" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--以上两个方法是ServletContext对象的方法，这个方法获取的是什么信息？是以下的配置信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pageSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>startIndex<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：以上的配置信息属于应用级的配置信息，一般一个项目中共享的配置信息会放到以上的标签当中。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果你的配置信息只是想给某一个servlet作为参考，那么你配置到servlet标签当中即可，使用ServletConfig对象来获取。--&gt;</span></span><br></pre></td></tr></table></figure><p>获取应用的根路径（非常重要），因为在java源代码当中有一些地方可能会需要应用的根路径，这个方法可以动态获取应用的根路径<br>在java源码当中，不要将应用的根路径写死，因为你永远都不知道这个应用在最终部署的时候，起一个什么名字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">获取项目的根路径</span><br><span class="line">获取应用的根路径（非常重要），因为在java源代码当中有一些地方可能会需要应用的根路径，这个方法可以动态获取应用的根路径</span><br><span class="line">在java源码当中，不要将应用的根路径写死，因为你永远都不知道这个应用在最终部署的时候，起一个什么名字。</span><br><span class="line">       writer.print(<span class="string">&quot;获取项目的根路径:&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> servletContext.getContextPath();</span><br><span class="line">       <span class="comment">//  /servlet04</span></span><br><span class="line">       writer.println(contextPath+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220822230717498.png" alt="image-20220822230717498"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取文件的绝对路径</span><br><span class="line"> <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;AServlet.java&quot;</span>);</span><br><span class="line">        writer.println(realPath+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220823222908577.png" alt="image-20220823222908577"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  通过ServletContext对象也是可以记录日志的</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message, Throwable t)</span>;</span><br><span class="line">  这些日志信息记录到哪里了？</span><br><span class="line">  localhost<span class="number">.2022</span>-<span class="number">03</span>-<span class="number">12.</span>log</span><br><span class="line"></span><br><span class="line">  Tomcat服务器的logs目录下都有哪些日志文件？</span><br><span class="line"> catalina<span class="number">.2022</span>-<span class="number">03</span>-<span class="number">12.</span>log 服务器端的java程序运行的控制台信息。</span><br><span class="line"> localhost<span class="number">.2022</span>-<span class="number">03</span>-<span class="number">12.</span>log ServletContext对象的log方法记录的日志信息存储到这个文件中。</span><br><span class="line"> localhost_access_log<span class="number">.2022</span>-<span class="number">03</span>-<span class="number">12.</span>txt 访问日志</span><br></pre></td></tr></table></figure><h1 id="应用域-重点"><a href="#应用域-重点" class="headerlink" title="应用域(重点)"></a>应用域(重点)</h1><p>ServletContext 对象还有另一个名字：<font color='red'>应用域</font>（后面还有其他域，例如：请求域、会话域）</p><p>如果所有的用户共享一份数据，并且这个数据很少的被修改，并且这个数据量很少，可以将这些数据放到ServletContext这个应用域中</p><p>为什么是所有用户共享的数据？ 不是共享的没有意义。因为ServletContext这个对象只有一个。只有共享的数据放进去才有意义。</p><p>为什么数据量要小？ 因为数据量比较大的话，太占用堆内存，并且这个对象的生命周期比较长，服务器关闭的时候，这个对象才会被销毁。大数据量会影响服务器的性能。占用内存较小的数据量可以考虑放进去。</p><p>为什么这些共享数据很少的修改，或者说几乎不修改？<br>所有用户共享的数据，如果涉及到修改操作，必然会存在线程并发所带来的安全问题。所以放在ServletContext对象中的数据一般都是只读的。</p><p>数据量小、所有用户共享、又不修改，这样的数据放到ServletContext这个应用域当中，会大大提升效率。因为应用域相当于一个缓存，放到缓存中的数据，下次在用的时候，不需要从数据库中再次获取，大大提升执行效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  存（怎么向ServletContext应用域中存数据）</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object value)</span>;   map.put(k, v)</span><br><span class="line">  取（怎么从ServletContext应用域中取数据）</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>;   <span class="type">Object</span> <span class="variable">v</span> <span class="operator">=</span> map.get(k)</span><br><span class="line">  删（怎么删除ServletContext应用域中的数据）</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>;   map.remove(k)</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：以后我们编写Servlet类的时候，实际上是不会去直接继承GenericServlet类的，因为我们是B/S结构的系统，这种系统是基于HTTP超文本传输协议的，在Servlet规范当中，提供了一个类叫做HttpServlet，它是专门为HTTP协议准备的一个Servlet类。我们编写的Servlet类要继承HttpServlet。（HttpServlet是HTTP协议专用的。）使用HttpServlet处理HTTP协议更便捷。但是你需要知道它的继承结构：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;    javax.servlet.Servlet（接口）【爷爷】</span><br><span class="line">&gt;     javax.servlet.GenericServlet <span class="keyword">implements</span> <span class="title class_">Servlet</span>（抽象类）【儿子】</span><br><span class="line">&gt;     javax.servlet.http.HttpServlet <span class="keyword">extends</span> <span class="title class_">GenericServlet</span>（抽象类）【孙子】</span><br><span class="line">&gt;     </span><br><span class="line">&gt;    我们以后编写的Servlet要继承HttpServlet类。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前为止都接触过哪些缓存机制了？</p><ul><li>堆内存当中的字符串常量池。<ul><li>“abc” 先在字符串常量池中查找，如果有，直接拿来用。如果没有则新建，然后再放入字符串常量池。</li></ul></li><li>堆内存当中的整数型常量池。<ul><li>[-128 ~ 127] 一共256个Integer类型的引用，放在整数型常量池中。没有超出这个范围的话，直接从常量池中取。</li></ul></li><li>连接池(Connection Cache)<ul><li>这里所说的连接池中的连接是java语言连接数据库的连接对象：java.sql.Connection对象。</li><li>JVM是一个进程。MySQL数据库是一个进程。进程和进程之间建立连接，打开通道是很费劲的。是很耗费资源的。怎么办？可以提前先创建好N个Connection连接对象，将连接对象放到一个集合当中，我们把这个放有Connection对象的集合称为连接池。每一次用户连接的时候不需要再新建连接对象，省去了新建的环节，直接从连接池中获取连接对象，大大提升访问效率。</li><li>连接池<ul><li>最小连接数</li><li>最大连接数</li><li>连接池可以提高用户的访问效率。当然也可以保证数据库的安全性。</li></ul></li></ul></li><li>线程池<ul><li>Tomcat服务器本身就是支持多线程的。</li><li>Tomcat服务器是在用户发送一次请求，就新建一个Thread线程对象吗？<ul><li>当然不是，实际上是在Tomcat服务器启动的时候，会先创建好N多个线程Thread对象，然后将线程对象放到集合当中，称为线程池。用户发送请求过来之后，需要有一个对应的线程来处理这个请求，这个时候线程对象就会直接从线程池中拿，效率比较高。</li><li>所有的WEB服务器，或者应用服务器，都是支持多线程的，都有线程池机制。</li></ul></li></ul></li><li>redis<ul><li>NoSQL数据库。非关系型数据库。缓存数据库。</li></ul></li><li>向ServletContext应用域中存储数据，也等于是将数据存放到缓存cache当中</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初始ServletContext&quot;&gt;&lt;a href=&quot;#初始ServletContext&quot; class=&quot;headerlink&quot; title=&quot;初始ServletContext&quot;&gt;&lt;/a&gt;初始ServletContext&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;�</summary>
      
    
    
    
    <category term="Web网页技术" scheme="https://manamn.space/categories/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="Web网页技术" scheme="https://manamn.space/tags/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>初识ServletConfig</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/%E5%88%9D%E8%AF%86ServletConfig/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/%E5%88%9D%E8%AF%86ServletConfig/</id>
    <published>2022-10-16T14:59:04.000Z</published>
    <updated>2022-10-17T13:36:57.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识ServletConfig"><a href="#初识ServletConfig" class="headerlink" title="初识ServletConfig"></a>初识ServletConfig</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始</strong>  —————</p><p><strong>可以先通过这个思维导图来大致了解一下关于ServletConfig</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220820100945035.png" alt="image-20220820100945035"></p><p>ServletConfig 是一个接口(jakarta.<a href="https://so.csdn.net/so/search?q=Servlet&amp;spm=1001.2101.3001.7020">Servlet</a>的一个接口)<br>ServletConfig 是Servlet规范的一员<br>全称:jakarta.servlet.ServletConfig<br>Servlet对象的配置信息对象。<br>ServletConfig对象中封装了标签中的配置信息。（web.xml文件中servlet的配置信息）<br>每个serlvet类的实例都有且只有一个对应的servletConfig对象</p><h1 id="谁去实现ServletConfig这个接口"><a href="#谁去实现ServletConfig这个接口" class="headerlink" title="谁去实现ServletConfig这个接口"></a>谁去实现ServletConfig这个接口</h1><p>public class org.apache.catalina.core.StandardWrapperFacade</p><p>结论:Tomcat服务器实现了ServletConfig这个接口——-WEB服务器实现了这个接口<br>不同服务器有不同的实现<br>思考：如果把Tomcat服务器换成jetty服务器，输出ServletConfig对象的时候，还是这个结果吗？<br>不一定一样，包名类名可能和Tomcat服务器不一样，但是他们都实现了ServletConfig这个规范</p><h1 id="一个Servlet对象有一个ServletConfig对象，他们之间是一对一"><a href="#一个Servlet对象有一个ServletConfig对象，他们之间是一对一" class="headerlink" title="一个Servlet对象有一个ServletConfig对象，他们之间是一对一"></a>一个Servlet对象有一个ServletConfig对象，他们之间是一对一</h1><h1 id="ServletConfig对象是谁创建？在什么时候创建？"><a href="#ServletConfig对象是谁创建？在什么时候创建？" class="headerlink" title="ServletConfig对象是谁创建？在什么时候创建？"></a>ServletConfig对象是谁创建？在什么时候创建？</h1><ul><li><p>Tomcat服务器调用Servlet对象的init方法的时候需要传一个ServletConfig对象的参数给init方法。</p><ul><li><p>Tomcat服务器(WEB服务器)创建了ServletConfig对象<br>在创建Servlet对象的时候，同时创建了ServletConfig对象</p></li><li><p>Servlet对象是Tomcat服务器创建，并且ServletConfig对象也是Tomcat服务器创建。并且默认情况下，他们都是在用户发送第一次请求的时候创建。</p></li></ul></li><li><p>Tomcat服务器调用Servlet对象的init方法的时候需要传一个ServletConfig对象的参数给init方法。</p><h1 id="ServletConfig接口的作用"><a href="#ServletConfig接口的作用" class="headerlink" title="ServletConfig接口的作用"></a>ServletConfig接口的作用</h1></li></ul><p>Config是Configuration单词的缩写<br>ServletConfig对象翻译为:Servlet对象的配置信息对象<br>一个Servlet对象就有一个配置信息对象</p><h1 id="ServletConfig对象中包装的信息"><a href="#ServletConfig对象中包装的信息" class="headerlink" title="ServletConfig对象中包装的信息"></a>ServletConfig对象中包装的信息</h1><p>web.xml文件中标签中的配置信息</p><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"> &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;configTestServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.bjpowernode.servlet.ConfigTestServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;!--这里可以配置servlet对象的初始化信息 --&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;driver&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;com.mysql.cj.jdbc.Driver&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">       </span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;configTestServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/test&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>String value=config.getInitParameter(“driver);<br>通过这个方法，传入name,可以获取初始化配置信息的value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br><span class="line"><span class="keyword">public</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span>; <span class="comment">// 获取ServletContext对象</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletName</span><span class="params">()</span>; <span class="comment">// 获取当前Servlet的name</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="keyword">package</span> com.bjpowernode.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"> /</span><br><span class="line"> * <span class="meta">@author</span> gaoziman</span><br><span class="line"> * <span class="meta">@create</span> <span class="number">2022</span>--08--<span class="number">19</span> <span class="number">20</span>:<span class="number">39</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigTestServlet</span> <span class="keyword">extends</span> <span class="title class_">GenericServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out=response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        <span class="comment">//org.apache.catalina.core.StandardWrapperFacade@778f4ce</span></span><br><span class="line">        out.println(<span class="string">&quot;ServletConfig对象:&quot;</span>+config);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">configServletName</span> <span class="operator">=</span> config.getServletName();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;servlet-name&gt;&quot;</span>+configServletName+<span class="string">&quot;&lt;/servlet-name&gt;&quot;</span>);</span><br><span class="line"><span class="comment">//通过ServletConfig对象中的方法可以获取web.xml文件中的初始化参数配置信息</span></span><br><span class="line">        <span class="comment">//java.util.Enumeration&lt;java.lang.String&gt; getInitParameterNames()  获取所有初始化参数name</span></span><br><span class="line"><span class="comment">//java.lang.String   getInitParameter(java.lang.String name)   通过初始化参数的name，来获取value</span></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames = config.getInitParameterNames();<span class="comment">//获取对应name的value</span></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        out.println(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (initParameterNames.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> initParameterNames.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> config.getInitParameter(s);</span><br><span class="line"></span><br><span class="line">            out.println(s+<span class="string">&quot;-----&gt;&quot;</span>+value);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//实际上获取一个Servlet对象的初始化参数，可以不用获取ServletConfig对象</span></span><br><span class="line">        <span class="comment">//因为适配器有相关方法</span></span><br><span class="line">        Enumeration&lt;String&gt; names = <span class="built_in">this</span>.getInitParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (names.hasMoreElements())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> names.nextElement();</span><br><span class="line">            System.out.println(s+<span class="string">&quot;----&gt;&quot;</span>+<span class="built_in">this</span>.getInitParameter(s));</span><br><span class="line">            <span class="comment">//out.println(&quot;&lt;br&gt;&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//怎么获取ServletContext对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一种方式通过ServletConfig对象来获取ServletContext对象</span></span><br><span class="line">        ServletContext application=config.getServletContext();</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="comment">//org.apache.catalina.core.ApplicationContextFacade@bb8cbf0</span></span><br><span class="line">        out.print(<span class="string">&quot;&lt;br&gt;&quot;</span>+application);</span><br><span class="line">        <span class="comment">//第二种:通过this来获取ServletContext对象，注意:this必须是继承GenericServlet</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application2</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//org.apache.catalina.core.ApplicationContextFacade@bb8cbf0</span></span><br><span class="line">        out.print(<span class="string">&quot;&lt;br&gt;&quot;</span>+application2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识ServletConfig&quot;&gt;&lt;a href=&quot;#初识ServletConfig&quot; class=&quot;headerlink&quot; title=&quot;初识ServletConfig&quot;&gt;&lt;/a&gt;初识ServletConfig&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🏠个人主</summary>
      
    
    
    
    <category term="Web网页技术" scheme="https://manamn.space/categories/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="Web网页技术" scheme="https://manamn.space/tags/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>JS常用正则表达式大全</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/JS%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%A7%E5%85%A8/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/JS%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%A7%E5%85%A8/</id>
    <published>2022-10-16T14:58:31.000Z</published>
    <updated>2022-10-17T13:39:33.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS常用正则表达式大全"><a href="#JS常用正则表达式大全" class="headerlink" title="JS常用正则表达式大全"></a>JS常用正则表达式大全</h1><h2 id="JavaScript中使用正则表达式"><a href="#JavaScript中使用正则表达式" class="headerlink" title="JavaScript中使用正则表达式"></a>JavaScript中使用<a href="https://so.csdn.net/so/search?q=正则表达式&amp;spm=1001.2101.3001.7020">正则表达式</a></h2><hr><ol><li><strong>使用直接量写法</strong><br>以斜杆表示开始和结束：<code>var regex = /^[a-zA-Z]+$/;</code>，创建一个内容为<code>^[a-zA-Z]+$</code>的正则表达式，验证英文字母</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;str&quot;</span>).<span class="property">value</span>.<span class="title function_">trim</span>();<span class="comment">//获取指定id的内容，去除空格</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^[a-zA-Z]+$/</span>; <span class="comment">// 直接量正则表达式</span></span><br><span class="line"><span class="keyword">if</span>(!regex.<span class="title function_">test</span>(str))&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;请输入正确的英文字母!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>2.使用内置构造函数生成</strong><br>通过实例化得到对象：<code>var regex = new RegExp(&#39;^[a-zA-Z]+$&#39;);</code>，创建一个内容为<code>^[a-zA-Z]+$</code>的正则表达式，验证英文字母，等价于上面直接量方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;str&quot;</span>).<span class="property">value</span>.<span class="title function_">trim</span>();<span class="comment">//获取指定id的内容，去除空格</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;^[a-zA-Z]+$&#x27;</span>); <span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">if</span>(!regex.<span class="title function_">test</span>(str))&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;请输入正确的英文字母!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>3. 下面是JS常用正则表达式</strong></p><p>JS验证代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证帮助</span></span><br><span class="line"><span class="keyword">var</span> verifyUtils = &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证输入的内容是否是空</span></span><br><span class="line"><span class="attr">isNull</span>:<span class="keyword">function</span>(<span class="params">idStr</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idStr).<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\S/</span>;</span><br><span class="line"><span class="keyword">if</span>(!regex.<span class="title function_">test</span>(str))&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;文本框不能为空，请输入内容！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证输入的字符是否是英文字母</span></span><br><span class="line"><span class="attr">isLetter</span>:<span class="keyword">function</span>(<span class="params">idStr</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idStr).<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^[a-zA-Z]+$/</span>;</span><br><span class="line"><span class="keyword">if</span>(!regex.<span class="title function_">test</span>(str))&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;请输入正确的英文字母!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  验证日期格式是否为YYYY-MM-DD格式</span></span><br><span class="line">&#125;,<span class="attr">isDate</span>:<span class="keyword">function</span>(<span class="params">idStr</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idStr).<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;1,4&#125;)(-|\/)(\d&#123;1,2&#125;)\2(\d&#123;1,2&#125;)$/</span>;</span><br><span class="line"><span class="keyword">var</span> r = str.<span class="title function_">match</span>(regex); <span class="comment">// 使用match方法获取指定字符串的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(r==<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;请输入正确的日期格式!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  验证日期格式是否为YYYY-MM-DD hh:mm:ss格式</span></span><br><span class="line">&#125;,<span class="attr">isDateTime</span>:<span class="keyword">function</span>(<span class="params">idStr</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idStr).<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;1,4&#125;)(-|\/)(\d&#123;1,2&#125;)\2(\d&#123;1,2&#125;) (\d&#123;1,2&#125;):(\d&#123;1,2&#125;):(\d&#123;1,2&#125;)$/</span>;</span><br><span class="line"><span class="keyword">var</span> r = str.<span class="title function_">match</span>(regex); <span class="comment">// 使用match方法获取指定字符串的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(r==<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;请输入正确的日期格式!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证整数</span></span><br><span class="line">&#125;,<span class="attr">isInteger</span>:<span class="keyword">function</span>(<span class="params">idStr</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idStr).<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^[-+]?\d*$/</span>;</span><br><span class="line"><span class="keyword">if</span>(!regex.<span class="title function_">test</span>(str))&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;请输入正确的整数!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证双精度</span></span><br><span class="line">&#125;,<span class="attr">isDouble</span>:<span class="keyword">function</span>(<span class="params">idStr</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idStr).<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^[-\+]?\d+(\.\d+)?$/</span>;</span><br><span class="line"><span class="keyword">if</span>(!regex.<span class="title function_">test</span>(str))&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;请输入正确的小数!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证中文</span></span><br><span class="line">&#125;,<span class="title function_">isChinese</span>(<span class="params">idStr</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idStr).<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^[\u0391-\uFFE5]+$/</span>;</span><br><span class="line"><span class="keyword">if</span>(!regex.<span class="title function_">test</span>(str))&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;请输入正确的中文!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证邮箱</span></span><br><span class="line">&#125;,<span class="title function_">isEmail</span>(<span class="params">idStr</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idStr).<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span>;</span><br><span class="line"><span class="keyword">if</span>(!regex.<span class="title function_">test</span>(str))&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;请输入正确的邮箱格式!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证手机号</span></span><br><span class="line">&#125;,<span class="title function_">isPhone</span>(<span class="params">idStr</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idStr).<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^1[3456789]\d&#123;9&#125;$/</span>;</span><br><span class="line"><span class="keyword">if</span>(!regex.<span class="title function_">test</span>(str))&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;请输入正确的手机号!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证身份证</span></span><br><span class="line">&#125;,<span class="title function_">isIdCard</span>(<span class="params">idStr</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idStr).<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^\d&#123;6&#125;(18|19|20)?\d&#123;2&#125;(0[1-9]|1[12])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;(\d|X)$/</span>;</span><br><span class="line"><span class="keyword">if</span>(!regex.<span class="title function_">test</span>(str))&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;请输入正确的身份证号码!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><strong>正则验证代码如下：</strong><br>验证字母：<code>/^[a-zA-Z]+$/</code><br>验证长度为3的字符：<code>/^.&#123;3&#125;$/</code><br>验证由26个英文字母组成的字符串：<code>/^[A-Za-z]+$/</code><br>验证日期YYYY-MM-DD：<code>/^(\d&#123;1,4&#125;)(-|\/)(\d&#123;1,2&#125;)\2(\d&#123;1,2&#125;)$/</code><br>验证邮编：<code>/^\d&#123;6&#125;$/</code><br>验证日期格式YYYY-MM-DD hh:mm:ss：<code>/^(\d&#123;1,4&#125;)(-|\/)(\d&#123;1,2&#125;)\2(\d&#123;1,2&#125;) (\d&#123;1,2&#125;):(\d&#123;1,2&#125;):(\d&#123;1,2&#125;)$/</code><br>验证整数：<code>/^[-+]?\d*$/</code><br>验证小数：<code>/^[-\+]?\d+(\.\d+)?$/</code><br>验证中文：<code>/^[\u0391-\uFFE5]+$/</code><br>验证邮箱：<code>/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</code><br>验证手机号：<code>/^1[3456789]\d&#123;9&#125;$/</code><br>验证身份证：<code>/^\d&#123;6&#125;(18|19|20)?\d&#123;2&#125;(0[1-9]|1[12])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;(\d|X)$/</code></p><p><strong>表达式分析：</strong><br>“/”代表一个正则表达式；<br>“^”代表字符串的开始位置，“$”代表字符串的结束位置；<br>“?”代表匹配前面的字符一个或零个，所以这里0?的意思是手机号码可以以0开头或不以0开头。<br>那里写的不对可以指出，如果你有更好的方式，可以一起讨论，希望可以帮助到大家，也可以加qq群：1007307899</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS常用正则表达式大全&quot;&gt;&lt;a href=&quot;#JS常用正则表达式大全&quot; class=&quot;headerlink&quot; title=&quot;JS常用正则表达式大全&quot;&gt;&lt;/a&gt;JS常用正则表达式大全&lt;/h1&gt;&lt;h2 id=&quot;JavaScript中使用正则表达式&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="Web网页技术" scheme="https://manamn.space/categories/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="Web网页技术" scheme="https://manamn.space/tags/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Get请求和Post请求的区别</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/Get%E8%AF%B7%E6%B1%82%E5%92%8CPost%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/Get%E8%AF%B7%E6%B1%82%E5%92%8CPost%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-10-16T14:57:55.000Z</published>
    <updated>2022-10-17T13:59:37.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Get请求和Post请求的区别"><a href="#Get请求和Post请求的区别" class="headerlink" title="Get请求和Post请求的区别"></a>Get请求和Post请求的区别</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始</strong>  —————</p><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h1 id="什么是协议？"><a href="#什么是协议？" class="headerlink" title="什么是协议？"></a>什么是协议？</h1><ul><li><p>协议实际上是某些人，或者某些组织提前制定好的一套规范，大家都按照这个规范来，这样可以做到沟通无障碍。</p></li><li><p>协议就是一套规范，就是一套标准。由其他人或其他组织来负责制定的。</p></li><li><p>我说的话你能听懂，你说的话，我也能听懂，这说明我们之间是有一套规范的，一套协议的，这套协议就是：中国普通话协议。我们都遵守这套协议，我们之间就可以沟通无障碍。<br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220823231411702.png" alt="image-20220823231411702" style="zoom: 80%;" /></p><h1 id="什么是HTTP协议？"><a href="#什么是HTTP协议？" class="headerlink" title="什么是HTTP协议？"></a>什么是HTTP协议？</h1></li><li><p>HTTP协议：是W3C制定的一种超文本传输协议。（<a href="https://so.csdn.net/so/search?q=通信协议&amp;spm=1001.2101.3001.7020">通信协议</a>：发送消息的模板提前被制定好。）</p></li><li><p>W3C：</p><ul><li>万维网联盟组织</li><li>负责制定标准的：HTTP HTML4.0 HTML5 XML DOM等规范都是W3C制定的。</li><li>万维网之父：<font color='skyblue'>蒂姆·伯纳斯·李</font></li></ul></li><li><p>什么是超文本？</p><ul><li>超文本说的就是：不是普通文本，比如流媒体：声音、视频、图片等。</li><li>HTTP协议支持：不但可以传送普通字符串，同样支持传递声音、视频、图片等流媒体信息。</li></ul></li><li><p>这种协议游走在B和S之间。B向S发数据要遵循HTTP协议。S向B发数据同样需要遵循HTTP协议。这样B和S才能解耦合。</p></li><li><p>什么是解耦合？</p><ul><li>B不依赖S。</li><li>S也不依赖B。</li><li>耦合是对象之间有依赖关系，减少耦合，可以扩展软件功能</li></ul></li><li><p>B/S表示：B/S结构的系统（浏览器访问WEB服务器的系统）</p></li><li><p>浏览器 向 WEB服务器发送数据，叫做：请求（request)</p></li><li><p>WEB服务器 向 浏览器发送数据，叫做：响应（response）</p></li><li><p>HTTP协议包括：</p><ul><li>请求协议<ul><li>浏览器 向 WEB服务器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li></ul></li><li>响应协议<ul><li>WEB服务器 向 浏览器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li></ul></li></ul></li><li><p>HTTP协议就是提前制定好的一种消息模板。</p><ul><li>不管你是哪个品牌的浏览器，都是这么发。</li><li>不管你是哪个品牌的WEB服务器，都是这么发。</li><li>FF浏览器 可以向 Tomcat发送请求，也可以向Jetty服务器发送请求。浏览器不依赖具体的服务器品牌。</li><li>WEB服务器也不依赖具体的浏览器品牌。可以是FF浏览器，也可以是Chrome浏览器，可以是IE，都行。</li></ul></li><li><p>HTTP的请求协议（B —&gt; S）</p></li><li><p>HTTP的请求协议包括：4部分</p><p>- 请求行<br>- 请求头<br>- 空白行<br>- 请求体</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220822231613359.png" alt="image-20220822231613359"></p></li><li><p>HTTP请求协议的具体报文：GET请求</p></li></ul><blockquote><p>GET /servlet05/getServlet?username=lucy&amp;userpwd=1111 HTTP/1.1 请求行<br>Host: localhost:8080 请求头<br>Connection: keep-alive<br>sec-ch-ua: “Google Chrome”;v=“95”, “Chromium”;v=“95”, “;Not A Brand”;v=“99”<br>sec-ch-ua-mobile: ?0<br>sec-ch-ua-platform: “Windows”<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54</p><p>Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-User: ?1<br>Sec-Fetch-Dest: document<br>Referer: <a href="http://localhost:8080/servlet05/index.html">http://localhost:8080/servlet05/index.html</a><br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=0.9</p></blockquote><p>空白行<br>请求体</p><ul><li><p>HTTP请求协议的具体报文：POST请求</p><blockquote><p>POST /servlet05/postServlet HTTP/1.1 请求行<br>Host: localhost:8080 请求头<br>Connection: keep-alive<br>Content-Length: 25<br>Cache-Control: max-age=0<br>sec-ch-ua: “Google Chrome”;v=“95”, “Chromium”;v=“95”, “;Not A Brand”;v=“99”<br>sec-ch-ua-mobile: ?0<br>sec-ch-ua-platform: “Windows”<br>Upgrade-Insecure-Requests: 1<br>Origin: <a href="http://localhost:8080">http://localhost:8080</a><br>Content-Type: application/x-www-form-urlencoded<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-User: ?1<br>Sec-Fetch-Dest: document<br>Referer: <a href="http://localhost:8080/servlet05/index.html">http://localhost:8080/servlet05/index.html</a><br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=0.9</p></blockquote><p>空白行<br>username=lisi&amp;userpwd=123 请求体</p><ul><li>请求行<ul><li>包括三部分：<ul><li>第一部分：请求方式（7种）<ul><li>get（常用的）</li><li>post（常用的）</li><li>delete</li><li>put</li><li>head</li><li>options</li><li>trace</li></ul></li><li>第二部分：URI<ul><li>什么是URI？ 统一资源标识符。代表网络中某个资源的名字。但是通过URI是无法定位资源的。</li><li>什么是URL？统一资源定位符。代表网络中某个资源，同时，通过URL是可以定位到该资源的。</li><li>URI和URL什么关系，有什么区别？<ul><li>URL包括URI</li><li><a href="http://localhost:8080/servlet05/index.html">http://localhost:8080/servlet05/index.html</a> 这是URL。</li><li>/servlet05/index.html 这是URI。</li></ul></li></ul></li><li>第三部分：HTTP协议版本号</li></ul></li></ul></li><li>请求头<ul><li>请求的主机</li><li>主机的端口</li><li>浏览器信息</li><li>平台信息</li><li>cookie等信息</li><li>…</li></ul></li><li>空白行<ul><li>空白行是用来区分“请求头”和“请求体”</li></ul></li><li>请求体<ul><li>向服务器发送的具体数据。</li></ul></li></ul></li><li><p>HTTP的响应协议（S —&gt; B）</p><ul><li><p>HTTP的响应协议包括：4部分</p><ul><li>状态行</li><li>响应头</li><li>空白行</li><li>响应体</li></ul></li><li><p>HTTP响应协议的具体报文：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 ok                                     状态行</span><br><span class="line">Content-Type: text/html;charset=UTF-8               响应头</span><br><span class="line">Content-Length: 160</span><br><span class="line">Date: Mon, 08 Nov 2021 13:19:32 GMT</span><br><span class="line">Keep-Alive: timeout=20</span><br><span class="line">Connection: keep-alive</span><br><span class="line">                                                    空白行</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span>                                     响应体</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>from get servlet<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>from get servlet<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>状态行</p><ul><li>三部分组成<ul><li>第一部分：协议版本号（HTTP/1.1）</li><li>第二部分：状态码（HTTP协议中规定的响应状态号。不同的响应结果对应不同的号码。）<ul><li>200 表示请求响应成功，正常结束。</li><li>404表示访问的资源不存在，通常是因为要么是你路径写错了，要么是路径写对了，但是服务器中对应的资源并没有启动成功。总之404错误是前端错误。</li><li>405表示前端发送的请求方式与后端请求的处理方式不一致时发生：<ul><li>比如：前端是POST请求，后端的处理方式按照get方式进行处理时，发生405</li><li>比如：前端是GET请求，后端的处理方式按照post方式进行处理时，发生405</li></ul></li><li>500表示服务器端的程序出现了异常。一般会认为是服务器端的错误导致的。</li><li>以4开始的，一般是浏览器端的错误导致的。</li><li>以5开始的，一般是服务器端的错误导致的。</li></ul></li><li>第三部分：状态的描述信息<ul><li>ok 表示正常成功结束。</li><li>not found 表示资源找不到。</li></ul></li></ul></li></ul></li><li><p>响应头：</p><ul><li>响应的内容类型</li><li>响应的内容长度</li><li>响应的时间</li><li>…</li></ul></li><li><p>空白行：</p><ul><li>用来分隔“响应头”和“响应体”的。</li></ul></li><li><p>响应体：</p><ul><li>响应体就是响应的正文，这些内容是一个长的字符串，这个字符串被浏览器渲染，解释并执行，最终展示出效果。</li></ul></li></ul><ul><li><p>怎么查看的协议内容？</p><ul><li>使用chrome浏览器：F12。然后找到network，通过这个面板可以查看协议的具体内容。</li></ul></li><li><p>怎么向服务器发送GET请求，怎么向服务器发送POST请求？</p><ul><li>到目前为止，只有一种情况可以发送POST请求：使用form表单，并且form标签中的method属性值为：method=“post”。</li><li>其他所有情况一律都是get请求：<ul><li>在浏览器地址栏上直接输入URL，敲回车，属于get请求。</li><li>在浏览器上直接点击超链接，属于get请求。</li><li>使用form表单提交数据时，form标签中没有写method属性，默认就是get</li><li>或者使用form的时候，form标签中method属性值为：method=“get”</li><li>…</li></ul></li></ul></li></ul><h1 id="HTTP协议的特点"><a href="#HTTP协议的特点" class="headerlink" title="HTTP协议的特点"></a>HTTP协议的特点</h1><p>1.简单快速:客户向服务器请求服务的时候，只需要传送请求方法和路径，请求方法一般是get和post，因为HTTP协议简单，所以HTTP服务器的程序规模小，通信速度快。<br>2.灵活：HTTP协议运行传输任意类型的数据对象，传输的类型由Content-Type标记<br>3.无连接:客户端向服务端发送一次请求，服务端接收后，连接就断开了，无连接表示每一次连接都只处理一个请求，这种方式可以节省传输时间.<br>举个例子：你打电话给朋友说让他帮忙买一瓶水，然后就把电话挂掉了，这个时候，想到说还要麻烦朋友做什么事情，就再打电话过去。<br>HTTP1.1版本以后，支持可连续连接，通过这种连接就有可能在建立一个TCP连接后，发送请求并得到回应，然后接着发送请求并得到回应。通过建立和释放TCP连接的开销分摊到多个请求，对每一个请求来说，因为TCO造成的相对开销被大大降低了，而且还可以发送流水线请求，就是说在发送请求1之后，在回应到来之前就可以发送请求2.</p><p>4.无状态。HTTP协议是无状态协议，无状态指的是对事务处理没有记忆能力，如果后面想要处理之前的信息的话，就必须重传，这样会导致每一次连接传送的数据量增大</p><h1 id="GET请求和POST请求有什么区别？"><a href="#GET请求和POST请求有什么区别？" class="headerlink" title="GET请求和POST请求有什么区别？"></a>GET请求和POST请求有什么区别？</h1><ul><li>get请求发送数据的时候，数据会挂在URI的后面，并且在URI后面添加一个“?”，”?”后面是数据。这样会导致发送的数据回显在浏览器的地址栏上。（get请求在“请求行”上发送数据）<ul><li><a href="http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111">http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111</a></li></ul></li><li>post请求发送数据的时候，在请求体当中发送。不会回显到浏览器的地址栏上。也就是说post发送的数据，在浏览器地址栏上看不到。（post在“请求体”当中发送数据）</li><li>get请求只能发送普通的字符串。并且发送的字符串长度有限制，不同的浏览器限制不同。这个没有明确的规范。</li><li>get请求无法发送大数据量。</li><li>post请求可以发送任何类型的数据，包括普通字符串，流媒体等信息：视频、声音、图片。</li><li>post请求可以发送大数据量，理论上没有长度限制。</li><li>get请求在W3C中是这样说的：get请求比较适合从服务器端获取数据。</li><li>post请求在W3C中是这样说的：post请求比较适合向服务器端传送数据。<br>可能好多人，一看到说get请求会把内容显示在地址栏上，就是不安全的<br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220822231731100.png" alt="image-20220822231731100"></li><li>get请求是安全的。get 请求是绝对安全的。为什么？因为get请求只是为了从服务器上获取数据。不会对服务器造成威胁。（get本身是安全的，你不要用错了。用错了之后又冤枉人家get不安全，你这样不好（太坏了），那是你自己的问题，不是get请求的问题。）</li><li>post请求是危险的。为什么？因为post请求是向服务器提交数据，如果这些数据通过后门的方式进入到服务器当中，服务器是很危险的。另外post是为了提交数据，所以一般情况下拦截请求的时候，大部分会选择拦截（监听）post请求。</li><li>注意:我这里说的安全是相对而言，事实上它们都不安全，比如get请求，会把数据显示在url上，但是我们要正确使用就不会出现这种问题。post请求则比较危险。</li><li>get请求支持缓存。<ul><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg">https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg</a></li><li>任何一个get请求最终的“响应结果”都会被浏览器缓存起来。在浏览器缓存当中：</li><li>一个get请求的路径a 对应 一个资源。</li><li>一个get请求的路径b 对应 一个资源。</li><li>一个get请求的路径c 对应 一个资源。</li><li>…<br>- 实际上，你只要发送get请求，浏览器做的第一件事都是先从本地浏览器缓存中找，找不到的时候才会去服务器上获取。这种缓存机制目的是为了提高用户的体验。</li><li>有没有这样一个需求：我们不希望get请求走缓存，怎么办？怎么避免走缓存？我希望每一次这个get请求都去服务器上找资源，我不想从本地浏览器的缓存中取。</li><li>只要每一次get请求的请求路径不同即可。</li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898</a></li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899</a></li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=系统毫秒数">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=系统毫秒数</a></li><li>怎么解决？可以在路径的后面添加一个每时每刻都在变化的“时间戳”，这样，每一次的请求路径都不一样，浏览器就不走缓存了。</li></ul></li><li>post请求不支持缓存。（POST是用来修改服务器端的资源的。）<ul><li>post请求之后，服务器“响应的结果”不会被浏览器缓存起来。因为这个缓存没有意义。</li></ul></li><li>GET请求和POST请求如何选择，什么时候使用GET请求，什么时候使用POST请求？</li><li>怎么选择GET请求和POST请求呢？衡量标准是什么呢？你这个请求是想获取服务器端的数据，还是想向服务器发送数据。如果你是想从服务器上获取资源，建议使用GET请求，如果你这个请求是为了向服务器提交数据，建议使用POST请求。</li><li>大部分的form表单提交，都是post方式，因为form表单中要填写大量的数据，这些数据是收集用户的信息，一般是需要传给服务器，服务器将这些数据保存/修改等。</li><li>如果表单中有敏感信息，还是建议适用post请求，因为get请求会回显敏感信息到浏览器地址栏上。（例如：密码信息）</li><li><strong>做文件上传，一定是post请求。要传的数据不是普通文本。</strong></li><li>其他情况都可以使用get请求。</li><li>不管你是get请求还是post请求，发送的请求数据格式是完全相同的，只不过位置不同，格式都是统一的：<ul><li>name=value&amp;name=value&amp;name=value&amp;name=value</li><li>name是什么？<ul><li>以form表单为例：form表单中input标签的name。</li></ul></li><li>value是什么？<ul><li>以form表单为例：form表单中input标签的value。</li></ul></li></ul></li></ul><h1 id="总结get和post"><a href="#总结get和post" class="headerlink" title="总结get和post"></a>总结get和post</h1><p>啰嗦一句，不要主观臆断。大家可能都会有这样的主观错误，认为get请求会把信息显示在地址栏，所以就是不安全，post就是安全的。我觉得这是一种常见的误区。其实这种安全只是相对的</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220822231423610.png" alt="image-20220822231423610" style="zoom: 50%;" /><br>这个表格是从<code>W3cschool</code> 截取的</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220822231446203.png" alt="image-20220822231446203"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Get请求和Post请求的区别&quot;&gt;&lt;a href=&quot;#Get请求和Post请求的区别&quot; class=&quot;headerlink&quot; title=&quot;Get请求和Post请求的区别&quot;&gt;&lt;/a&gt;Get请求和Post请求的区别&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🏠个人主</summary>
      
    
    
    
    <category term="Web网页技术" scheme="https://manamn.space/categories/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
    <category term="Web网页技术" scheme="https://manamn.space/tags/Web%E7%BD%91%E9%A1%B5%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>数据库三大范式、ER图与实体类、外键约束与级联操作</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F%E3%80%81ER%E5%9B%BE%E4%B8%8E%E5%AE%9E%E4%BD%93%E7%B1%BB%E3%80%81%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E4%B8%8E%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9C/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F%E3%80%81ER%E5%9B%BE%E4%B8%8E%E5%AE%9E%E4%BD%93%E7%B1%BB%E3%80%81%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E4%B8%8E%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9C/</id>
    <published>2022-10-16T14:52:17.000Z</published>
    <updated>2022-10-17T13:59:59.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库三大范式、ER图与实体类、外键约束与级联操作"><a href="#数据库三大范式、ER图与实体类、外键约束与级联操作" class="headerlink" title="数据库三大范式、ER图与实体类、外键约束与级联操作"></a>数据库三大范式、ER图与实体类、外键约束与级联操作</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始  —————</strong></p><h1 id="1-数据库三大范式🙊"><a href="#1-数据库三大范式🙊" class="headerlink" title="1. 数据库三大范式🙊"></a>1. 数据库三大范式🙊</h1><h2 id="1）范式"><a href="#1）范式" class="headerlink" title="1）范式"></a>1）范式</h2><ul><li><p>必须保证数据库设计的合理性</p><ul><li>数据库设计关系整个系统的架构，关系到后续开发效率和运行效率</li><li>数据库的设计主要包含了设计表结构和表之间的联系</li></ul></li><li><p>什么是合理的数据库 ？</p><ul><li>结构合理</li><li>冗余较小</li><li>尽量避免插入删除时修改异常</li></ul></li></ul><p>如何才能保证数据库设计水平</p><p>​          遵循一定的规则</p><p>​           在关系型数据库中这种规则就称为 <strong>范式</strong>。</p><p>• 什么是范式（NF= NormalForm）</p><p>​           范式是符合某一种设计要求的总结。</p><p>​           要想设计一个结构合理的关系型数据库，必须满足一定的范式。</p><h2 id="2）范式分类"><a href="#2）范式分类" class="headerlink" title="2）范式分类"></a>2）范式分类</h2><ul><li><p>第一范式</p><p>• 第二范式</p><p>• 第三范式</p><p>​         • 各个范式是依次嵌套包含的</p><p>​         • 范式越高，设计质量越高，在现实设计中也越难实现</p><p>​         • 一般数据库设计，只要达到第三范式，即可避免异常的出现 </p></li></ul><h2 id="3）第一范式"><a href="#3）第一范式" class="headerlink" title="3）第一范式"></a>3）第一范式</h2><ul><li><p>要求    </p><ul><li>最基本的范式</li><li><font color='red'>第一范式要求数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值</font></li><li>简单来说就是要确保数据的原子性。</li><li>第一范式的合理遵循需要根据系统的实际需求来定</li></ul><p>• 示例</p><ul><li>用户表（用户名，家庭地址）</li><li>用户表（用户名，省，城市，详细地址）</li><li>系（系名称，系主任，系高级职 称人数）</li><li>系（系名称，系主任，系教授人数，系副教授人数） </li></ul></li><li><p>比方说学生信息：</p><p>| 字段名 | 值   | 字段名 | 值   | 字段名 | 值   | 字段名   | 值           |<br>| ——— | —— | ——— | —— | ——— | —— | ———— | —————— |<br>| 姓名   | 张三 | 性别   | 男   | 民族   | 汉   | 出生日期 | 2000年x月x日 |</p></li></ul><p>  又比方说用户地址栏，一般情况下我们用一个varchar列来表示，其中值如下</p><div class="table-container"><table><thead><tr><th>字段名</th><th>值</th></tr></thead><tbody><tr><td>家庭住址</td><td>湖北省武汉市武昌区某某街某某号</td></tr></tbody></table></div><p>  如果有相应的业务要求，这个字段就可以按第一范式进行拆分，这样在针对地址进行检索时更加精确方便</p><div class="table-container"><table><thead><tr><th>字段名</th><th>值</th><th>字段名</th><th>值</th><th>字段名</th><th>值</th><th>字段名</th><th>值</th></tr></thead><tbody><tr><td>省份</td><td>湖北省</td><td>地市</td><td>武汉市</td><td>区名</td><td>武昌区</td><td>街道名</td><td>某某街道</td></tr></tbody></table></div><ul><li><p><strong>若某一列有多个值，可以将该列单独拆分成一个实体，新实体和原实体间是一对多的关系。</strong></p><p>比如：学生选课</p><p>张三选了计算机、高数、英语三门课。使用一个字段存放，这就违反了范式。</p></li></ul><div class="table-container"><table><thead><tr><th>字段名</th><th>值</th><th>字段名</th><th>值</th></tr></thead><tbody><tr><td>姓名</td><td>张三</td><td>成绩</td><td>计算机80，英语90，高数70</td></tr></tbody></table></div><p>  应该设计学生选课表，并对学生信息表产生1对多的关联</p><div class="table-container"><table><thead><tr><th>字段名</th><th>值</th><th>字段名</th><th>值</th></tr></thead><tbody><tr><td>学生编号</td><td>123</td><td>学生姓名</td><td>张三</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>字段名</th><th>值</th><th>字段名</th><th>值</th></tr></thead><tbody><tr><td>学科编号</td><td>s1</td><td>学科名称</td><td>计算机</td></tr><tr><td>学科编号</td><td>s2</td><td>学科名称</td><td>英语</td></tr><tr><td>学科编号</td><td>s3</td><td>学科名称</td><td>高数</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>字段名</th><th>值</th><th>字段名</th><th>值</th><th>字段名</th><th></th></tr></thead><tbody><tr><td>学生编号</td><td>123</td><td>学科编号</td><td>s1</td><td>成绩</td><td>80</td></tr><tr><td>学生编号</td><td>123</td><td>学科编号</td><td>s2</td><td>成绩</td><td>90</td></tr><tr><td>学生编号</td><td>123</td><td>学科编号</td><td>s3</td><td>成绩</td><td>70</td></tr></tbody></table></div><ul><li>在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。</li></ul><h2 id="4）第二范式"><a href="#4）第二范式" class="headerlink" title="4）第二范式"></a>4）第二范式</h2><ul><li>要求<ul><li><font color='red'>第二范式需要确保数据库表中的每一列都和主键相关，而不能只有一部分和主键相关（主要针对联合主键而言）。</font></li><li>即在一个数据库表中只能保存一种数据，不可以把多种数据保存到同一张表中。</li></ul></li><li>实例<ul><li>学号和课程编号作为联合主键</li><li><font color='red'>课程名称只依赖于课程编号，而和学号没有关系</font></li></ul></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps16.jpg" alt=""></p><p> 解决</p><ul><li>提取出学生表</li><li>提取成课程表</li><li>提取选课表，存放选课记录</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/wps16.jpg" alt="img"> </p><p>​       学生表                                选课表                                        课程表</p><h2 id="5）第三范式"><a href="#5）第三范式" class="headerlink" title="5）第三范式"></a>5）第三范式</h2><ul><li><p>要求</p><ul><li><font color = 'red'>第三范式确保数据表中的每一列数据都与主键相关，而不能间接相关。</font></li><li><font color = 'red'>属性不依赖其他非主属性.</font></li></ul></li></ul><p><strong>示例1：学生班级表</strong> </p><div class="table-container"><table><thead><tr><th>学号(主键)</th><th>学生姓名</th><th>班级编号</th><th>班级名称</th><th>班级信息</th></tr></thead><tbody><tr><td>023145</td><td>张三</td><td>987654</td><td>3班</td><td>特招班</td></tr><tr><td>023146</td><td>李四</td><td>987654</td><td>3班</td><td>特招班</td></tr><tr><td>023147</td><td>王五</td><td>987655</td><td>4班</td><td>普通班</td></tr><tr><td>023258</td><td>赵六</td><td>987654</td><td>3班</td><td>特招班</td></tr></tbody></table></div><p><strong>完善之后的方案：</strong></p><div class="table-container"><table><thead><tr><th>学号(主键)</th><th>学生姓名</th><th>班级编号</th></tr></thead><tbody><tr><td>023145</td><td>张三</td><td>987654</td></tr><tr><td>023146</td><td>李四</td><td>987654</td></tr><tr><td>023147</td><td>王五</td><td>987655</td></tr><tr><td>023258</td><td>赵六</td><td>987654</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>班级编号(主键)</th><th>班级名称</th><th>班级信息</th></tr></thead><tbody><tr><td>987654</td><td>3班</td><td>特招班</td></tr><tr><td>987655</td><td>4班</td><td>普通班</td></tr></tbody></table></div><p>​    示例2: 订单明细表</p><div class="table-container"><table><thead><tr><th>编号(主键)</th><th>图书id</th><th>图书名称</th><th>价格</th><th>作者</th><th>出版社</th><th>出版日期</th><th>数量</th></tr></thead><tbody><tr><td>023145</td><td>1</td><td>精通Java</td><td>60.00</td><td>张三</td><td>清华出版社</td><td>2007</td><td>1</td></tr><tr><td>023146</td><td>2</td><td>Oracle</td><td>65.00</td><td>李四</td><td>机械出版社</td><td>2009</td><td>1</td></tr><tr><td>023147</td><td>3</td><td>JSP</td><td>87</td><td>王五</td><td>电子出版社</td><td>2014</td><td>3</td></tr><tr><td>023258</td><td>1</td><td>精通Java</td><td>60.00</td><td>张三</td><td>清华出版社</td><td>2007</td><td>2</td></tr><tr><td>023259</td><td>2</td><td>Oracle</td><td>65.00</td><td>李四</td><td>机械出版社</td><td>2009</td><td>3</td></tr></tbody></table></div><p><strong>完善之后的方案：分割成图书表和订单表两种表</strong></p><div class="table-container"><table><thead><tr><th>图书id</th><th>图书名称</th><th>价格</th><th>作者</th><th>出版社</th><th>出版日期</th></tr></thead><tbody><tr><td>1</td><td>精通Java</td><td>60.00</td><td>张三</td><td>清华出版社</td><td>2007</td></tr><tr><td>2</td><td>Oracle</td><td>65.00</td><td>李四</td><td>机械出版社</td><td>2009</td></tr><tr><td>3</td><td>JSP</td><td>87</td><td>王五</td><td>电子出版社</td><td>2014</td></tr><tr><td>4</td><td>Struts2</td><td>56</td><td>赵六</td><td>清华出版社</td><td>2005</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>编号(主键)</th><th>图书id</th><th>数量</th></tr></thead><tbody><tr><td>023145</td><td>1</td><td>1</td></tr><tr><td>023146</td><td>2</td><td>1</td></tr><tr><td>023147</td><td>3</td><td>3</td></tr><tr><td>023258</td><td>2</td><td>2</td></tr><tr><td>023259</td><td>2</td><td>3</td></tr></tbody></table></div><h2 id="6）范式的优缺点"><a href="#6）范式的优缺点" class="headerlink" title="6）范式的优缺点"></a>6）范式的优缺点</h2><p> 优点</p><ul><li>结构合理</li><li>冗余较小</li><li>尽量避免插入删除修改异常</li></ul><p>• 缺点</p><ul><li>性能降低</li><li>多表查询比单表查询速度慢</li><li>数据库的设计应该根据当前情况和需求做出灵活的处理。</li><li>在实际设计中，要整体遵循范式理论。</li><li>如果在某些特定的情况下还死死遵循范式也是不可取的，因为可能降低数据库的效率，此时<strong>可以适当增加冗余而提高性能。</strong></li></ul><p>• 示例：</p><p>​      比如经常购物车条目的中除了条目编号，商品编号，商品数量外，可以增加经常使用的商品名称，商品价格等</p><p>图书表</p><div class="table-container"><table><thead><tr><th>图书id</th><th>图书名称</th><th>价格</th><th>作者</th><th>出版社</th><th>出版日期</th></tr></thead><tbody><tr><td>1</td><td>精通Java</td><td>60</td><td>张三</td><td>清华出版社</td><td>2007</td></tr><tr><td>2</td><td>Oracle宝典</td><td>65</td><td>李四</td><td>机械出版社</td><td>2009</td></tr><tr><td>3</td><td>JSP</td><td>87</td><td>王五</td><td>电子出版社</td><td>2014</td></tr><tr><td>4</td><td>Struts2</td><td>56</td><td>赵六</td><td>清华出版社</td><td>2005</td></tr></tbody></table></div><p>订单表中增加冗余列图书名称、价格，以空间换时间。</p><div class="table-container"><table><thead><tr><th>编号(主键)</th><th>图书id</th><th>图书名称</th><th>价格</th><th>数量</th></tr></thead><tbody><tr><td>023145</td><td>1</td><td>精通Java</td><td>60</td><td>1</td></tr><tr><td>023146</td><td>2</td><td>Oracle宝典</td><td>65</td><td>1</td></tr><tr><td>023147</td><td>3</td><td>JSP</td><td>87</td><td>3</td></tr><tr><td>023258</td><td>1</td><td>精通Java</td><td>60</td><td>2</td></tr></tbody></table></div><h2 id="7）总结"><a href="#7）总结" class="headerlink" title="7）总结"></a>7）总结</h2><ul><li>范式是指导数据库设计的规范化原则，可以保证数据库的设计质量。</li><li><font color = 'red'>第一范式 ： 字段不能再分。</font></li><li><font color = 'red'>第二范式 ： 不存在局部依赖（要和主键相关）。</font></li><li><font color = 'red'>第三范式： 不包含传递依赖（间接依赖）。</font></li><li>使用范式可以减少冗余，但是会降低性能。</li><li>特定的表可以违反第三范式，但是可以增加其性能。</li></ul><h1 id="2-ER图与实体🍢"><a href="#2-ER图与实体🍢" class="headerlink" title="2. ER图与实体🍢"></a>2. ER图与实体🍢</h1><blockquote><p>ER图是我们建立概念数据模型的工具<br>​        数据模型是现实世界中数据特征的抽象。数据模型应该满足三个方面的要求：<br>​                01 能够比较真实地模拟现实世界<br>​                02 容易为人所理解<br>​                03 便于计算机实现</p></blockquote><p>​        概念数据模型也称信息模型，它以实体－联系(<strong>Entity-RelationShip</strong>,简称E-R)理论为基础，并对这一理论进行了扩充。它从用户的观点出发对信息进行建模，主要用于数据库的概念级设计。    </p><h4 id="ER图图例"><a href="#ER图图例" class="headerlink" title="ER图图例"></a>ER图图例</h4><p>​        ER图分为实体、属性、关系三个核心部分。实体是长方形体现，而属性则是椭圆形，关系为菱形。</p><p>​        ER图的<strong>实体（entity）</strong>即数据模型中的数据对象，例如人、学生、音乐都可以作为一个数据对象，用长方体来表示，每个实体都有自己的实体成员（entity member）或者说实体对象（entity instance），例如学生实体里包括张三、李四等，实体成员（entity member）/实体实例（entity instance） 不需要出现在ER图中。</p><p>​        ER图的<strong>属性（attribute）</strong>即数据对象所具有的属性，例如学生具有姓名、学号、年级等属性，属性分为唯一属性（ unique attribute）和非唯一属性，唯一属性指的是唯一可用来标识该实体实例或者成员的属性，用下划线表示，一般来讲实体都至少有一个唯一属性。</p><p>​        ER图的<strong>关系（relationship）</strong>用来表现数据对象与数据对象之间的联系，例如学生的实体和成绩表的实体之间有一定的联系，每个学生都有自己的成绩表，这就是一种关系。</p><p>​        ER图中关联关系有三种：</p><p>​        <strong>1对1（1:1）</strong> ：1对1关系是指对于实体集A与实体集B，A中的每一个实体至多与B中一个实体有关系；反之，在实体集B中的每个实体至多与实体集A中一个实体有关系。</p><p>​        <strong>1对多（1:N）</strong> ：1对多关系是指实体集A与实体集B中至少有N(N&gt;0)个实体有关系；并且实体集B中每一个实体至多与实体集A中一个实体有关系。</p><p>​        <strong>多对多（M:N）</strong> ：多对多关系是指实体集A中的每一个实体与实体集B中至少有M(M&gt;0)个实体有关系，并且实体集B中的每一个实体与实体集A中的至少N（N&gt;0）个实体有关系。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/20170101154040319.png" alt="img">ER的实        实体还会细分为<strong>弱实体</strong>和<strong>强实体</strong>：</p><p>​        弱实体：一个实体必须依赖于另一个实体存在，那么前者是弱实体，后者是强实体，弱实体必须依赖强实体存在，例如上图的学生实体和成绩单实体，成绩单依赖于学生实体而存在，因此学生是强实体，而成绩单是弱实体。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/20170101211800859.png" alt="img"></p><p>​        弱实体和强实体的联系必然只有1：N或者1：1，这是由于弱实体完全依赖于强实体，强实体不存在，那么弱实体就不存在，所以弱实体是完全参与联系的，因此弱实体与联系之间的联系也是用的双线菱形。</p><p>​        <strong>复合实体：</strong>复合实体也称联合实体或桥接实体，常常用于实现两个或多个实体间的M：N联系，它由每个关联实体的主玛组成，用长方体内加一个菱形来表示。</p><p>​        下图就是一个典型的复合实体，因为只是举例，相对粗糙，用户和商品两个实体是M：N的关系，中间又订单这个实体联系，因此订单这个实体是一个复合实体，同时如果用户 实体不存在，就没有订单实体的存在，因此对于用户实体来讲订单是弱实体，同理商品实体如果不存在，同样不存在订单实体，因此对商品实体而言订单是弱实体，具体如图：<br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/20170101220128826.png" alt="img"></p><h4 id="ER物理模型与数据建模"><a href="#ER物理模型与数据建模" class="headerlink" title="ER物理模型与数据建模"></a>ER物理模型与数据建模</h4><p>​        上面说的原生ER图，主要用于模型分析，实际上我们更常用的ER图的物理模型。</p><p>​        这里是一个在线免费ER图绘制网站，<a href="https://www.freedgo.com/erd-index.html，我们用这个工具来讲解一下ER图的分析绘制、及导出成SQL的过程。">https://www.freedgo.com/erd-index.html，我们用这个工具来讲解一下ER图的分析绘制、及导出成SQL的过程。</a></p><p>​        进入页面，可以点击“格式”按钮，展现图例菜单。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200312040016715.png" alt="image-20200312040016715"></p><p>​        我们可以选择实体关系/MySQL下的图标来完成学生班级课程模型模型。</p><h5 id="建立学生表模型"><a href="#建立学生表模型" class="headerlink" title="建立学生表模型"></a>建立学生表模型</h5><p>​        表名：student</p><div class="table-container"><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>s_id</td><td>int</td><td>主键，自动增长</td></tr><tr><td>s_name</td><td>varchar（20）</td><td>学生姓名</td></tr><tr><td>s_code</td><td>varchar(20)</td><td>学号</td></tr></tbody></table></div><p>点击对应的表图标，将之拖入到主体图纸上。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/MA3HJ8B9N45AK0Y_ZVR5R.png" alt="img"></p><p>双击表头“MySQL Table”，可以编辑表名。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/T%7D%5DO$QJN%60AJH@Q29JIT9K5J.png" alt="img"></p><p>在字段上点击右键，选“列修改”，可以设置列属性。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/0%7BUUGFSL$M6U1AHY1%5D%5D6ON.png" alt="img" style="zoom:67%;" /></p><p>改成以下样子</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/D6D%J{22N@2]YWUQ[_1XKKW.png" alt="img" style="zoom:67%;" /></p><p>点击”应用”。</p><p>编辑完成后</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20200312042421.png" alt="QQ截图20200312042421"></p><p>在其上点击右键，选择“选中sql”，可以看到弹出窗口自动生成建表语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS student (s_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">s_name VARCHAR(20) NOT NULL default  ‘’,</span><br><span class="line">s_code VARCHAR(20) NOT NULL default  ‘’</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="建立学生辅助信息表模型"><a href="#建立学生辅助信息表模型" class="headerlink" title="建立学生辅助信息表模型"></a>建立学生辅助信息表模型</h5><p>表名：studentAdd</p><div class="table-container"><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>a_id</td><td>int</td><td>主键，自动增长</td></tr><tr><td>s_id</td><td>int</td><td>学生id</td></tr><tr><td>s_address</td><td>varchar(60)</td><td>学生住址</td></tr></tbody></table></div><p>仿照上面流程，完成此表的模型。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20200312043128.png" alt="QQ截图20200312043128"></p><p>然后点击“1对1关系”图标。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20200312043321.png" alt="QQ截图20200312043321"></p><p>将两个端点分别拖动到student.s_id和studentAdd.s_id上去。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20200312043452.png" alt="QQ截图20200312043452"></p><p>点击 数据库 -&gt; MySQL -&gt; 全部SQL 就可以看到完整的sql建表语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> student (s_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">s_name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  ‘’,</span><br><span class="line">s_code <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  ‘’</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> studentAdd (a_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">s_id <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  <span class="number">0</span>,</span><br><span class="line">s_address <span class="type">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  ‘’</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> studentAdd <span class="keyword">add</span> <span class="keyword">constraint</span> studentAdd_s_id_fk0  <span class="keyword">foreign</span> key (s_id) <span class="keyword">references</span> student (s_id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里针对1对1关系，建立了外键关联。</p><h5 id="建立班级信息表模型"><a href="#建立班级信息表模型" class="headerlink" title="建立班级信息表模型"></a>建立班级信息表模型</h5><p>表名：class</p><div class="table-container"><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>c_id</td><td>int</td><td>主键，自动增长</td></tr><tr><td>c_name</td><td>varchar(60)</td><td>班级名称</td></tr><tr><td></td><td></td></tr></tbody></table></div><p>表名：classStudent</p><div class="table-container"><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>cs_id</td><td>int</td><td>主键，自动增长</td></tr><tr><td>c_id</td><td>int</td><td>班级ID</td></tr><tr><td>s_id</td><td>int</td><td>学生ID</td></tr></tbody></table></div><p>仿照上面流程，完成此表的模型。</p><p>并建立class.c_id 与 classStudent.c_id 的1对多关联，及student.s_id 与 classStudent.s_id的关联</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20200312044550.png" alt="QQ截图20200312044550" style="zoom:67%;" /></p><p>再看完整的建表sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> student (s_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">s_name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  ‘’,</span><br><span class="line">s_code <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  ‘’</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> studentAdd (a_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">s_id <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  <span class="number">0</span>,</span><br><span class="line">s_address <span class="type">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  ‘’</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> studentAdd <span class="keyword">add</span> <span class="keyword">constraint</span> studentAdd_s_id_fk0  <span class="keyword">foreign</span> key (s_id) <span class="keyword">references</span> student (s_id);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> class (c_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">c_name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  <span class="string">&#x27;&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> classStudent (cs_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">c_id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">s_id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> classStudent <span class="keyword">add</span> <span class="keyword">constraint</span> classStudent_c_id_fk0  <span class="keyword">foreign</span> key (c_id) <span class="keyword">references</span> class (c_id);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> classStudent <span class="keyword">add</span> <span class="keyword">constraint</span> classStudent_s_id_fk0  <span class="keyword">foreign</span> key (s_id) <span class="keyword">references</span> student (s_id);</span><br></pre></td></tr></table></figure><h5 id="建立课程班级信息表模型"><a href="#建立课程班级信息表模型" class="headerlink" title="建立课程班级信息表模型"></a>建立课程班级信息表模型</h5><p>表名：course</p><div class="table-container"><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>co_id</td><td>int</td><td>主键，自动增长</td></tr><tr><td>co_name</td><td>varchar(60)</td><td>课程名称</td></tr><tr><td></td><td></td></tr></tbody></table></div><p>表名：courseClass</p><div class="table-container"><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>cc_id</td><td>int</td><td>主键，自动增长</td></tr><tr><td>co_id</td><td>int</td><td>课程ID</td></tr><tr><td>c_id</td><td>int</td><td>班级ID</td></tr></tbody></table></div><p>仿照上面流程，完成此表的模型。</p><p>并建立course.co_id 与 courseClass.co_id 的1对多关联，及class.c_id 与 courseClass.c_id的关联。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20200312045437.png" alt="QQ截图20200312045437" style="zoom:67%;" /></p><h5 id="导出完整建表sql"><a href="#导出完整建表sql" class="headerlink" title="导出完整建表sql"></a>导出完整建表sql</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> student (s_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">s_name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  ‘’,</span><br><span class="line">s_code <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  ‘’</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> studentAdd (a_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">s_id <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  <span class="number">0</span>,</span><br><span class="line">s_address <span class="type">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  ‘’</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> studentAdd <span class="keyword">add</span> <span class="keyword">constraint</span> studcentAdd_s_id_fk0  <span class="keyword">foreign</span> key (s_id) <span class="keyword">references</span> student (s_id);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> class (c_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">c_name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  <span class="string">&#x27;&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> classStudent (cs_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">c_id <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">s_id <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> classStudent <span class="keyword">add</span> <span class="keyword">constraint</span> classStudent_c_id_fk0  <span class="keyword">foreign</span> key (c_id) <span class="keyword">references</span> class (c_id);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> classStudent <span class="keyword">add</span> <span class="keyword">constraint</span> classStudent_s_id_fk0  <span class="keyword">foreign</span> key (s_id) <span class="keyword">references</span> student (s_id);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> course (co_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">co_name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  <span class="string">&#x27;&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> courseClass (cc_id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">co_id <span class="type">INT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">c_id <span class="type">INT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span>  <span class="string">&#x27;&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> courseClass <span class="keyword">add</span> <span class="keyword">constraint</span> courseClass_co_id_fk0  <span class="keyword">foreign</span> key (co_id) <span class="keyword">references</span> course (co_id);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> courseClass <span class="keyword">add</span> <span class="keyword">constraint</span> courseClass_c_id_fk0  <span class="keyword">foreign</span> key (c_id) <span class="keyword">references</span> class (c_id);</span><br></pre></td></tr></table></figure><h1 id="3-外键约束与级联操作🍒"><a href="#3-外键约束与级联操作🍒" class="headerlink" title="3. 外键约束与级联操作🍒"></a>3. 外键约束与级联操作🍒</h1><p>外键约束（FOREIGN KEY）用来在两个表的数据之间建立连接，它可以是<code>一列或者多列</code>，一个表可以有一个或者多个外键。</p><p>​    <strong>外键是表的一个字段，不是本表的主键，但对应另一个表的主键。</strong>定义外键后，不允许删除另一个表中具有关联关系的行。</p><p>​        外键对应的是<strong>参照完整性</strong>，一个表的外键可以为空值，若不为空值，则每一个外键的值必须等于另一个表中主键的某个值。</p><p>​        外键的主要作用是保持数据的一致性、完整性。</p><p>​        例如，部门表 tb_dept 的主键是 id，在员工表 tb_emp5 中有一个键 deptId 与这个 id 关联。</p><ul><li><p><strong>主表（父表）：</strong> 对于两个具有关联关系的表而言，相关联中字段中的主键所在的表就是主表。</p></li><li><p><strong>从表（子表）：</strong>    对于两个具有关联关系的表而言，相关联字段中的外键所在的表就是子表。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/abf.png" alt="abf"></p></li></ul><h2 id="设置MySQL外键结束的约束"><a href="#设置MySQL外键结束的约束" class="headerlink" title="设置MySQL外键结束的约束"></a>设置MySQL外键结束的约束</h2><p>​                            <strong>定义MySQL外键的时候，需要遵守一下规则：</strong></p><ul><li>主表必须已经存在数据库中，或者是当前正在创建的表。如果是后一种情况，则主表与从表是同一个表，这样的表称为自参表（顾名思义，就是自我参照的意思），这种结构称为自参完整性。</li><li>MySQL支持外键的存储引擎只有<code>InnoDB</code>，这里和主键有区别，注意区分。在创建外键的时候，要求主表必须有对应的索引。从表在创建外键的时候也会自动创建对应的索引。</li><li><strong>必须为主表定义主键。</strong></li><li>主键不能包含空值，但是允许在外键中出现空值。也就是说，<strong>只要外键的每个非空值出现在指定的主键中，这个外键的内容就是正确的。</strong></li><li>在主表的表名后面指定列名或列名的组合。<strong>这个列或列的组合必须是主表的主键或候选键（唯一键、复合主键）。</strong></li><li>外键中列的数目必须和主表的主键中列的数目相同。</li><li>外键中列的数据类型必须和主表主键中对应列的数据类型相同。</li></ul><h2 id="在创建表时指定外键约束"><a href="#在创建表时指定外键约束" class="headerlink" title="在创建表时指定外键约束"></a>在创建表时指定外键约束</h2><p>在数据表中创建外键使用 <strong>FOREIGN KEY</strong> 关键字，具体的语法规则如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>外键名<span class="operator">&gt;</span>] <span class="keyword">FOREIGN</span> KEY 字段名 [，字段名<span class="number">2</span>，…]</span><br><span class="line"><span class="keyword">REFERENCES</span> <span class="operator">&lt;</span>主表名<span class="operator">&gt;</span> 主键列<span class="number">1</span> [，主键列<span class="number">2</span>，…]</span><br></pre></td></tr></table></figure><p>其中：外键名为定义的外键约束的名称，一个表中不能有相同名称的外键；字段名表示子表需要添加外健约束的字段列；主表名即被子表外键所依赖的表的名称；主键列表示主表中定义的主键列或者列组合。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 成绩;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 学生;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 科目;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 学生 (id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 科目 (id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 成绩 (id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">学生ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">科目ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">成绩 <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_c_s <span class="keyword">FOREIGN</span> KEY(学生ID) <span class="keyword">REFERENCES</span> 学生(id),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_c_k <span class="keyword">FOREIGN</span> KEY(科目ID) <span class="keyword">REFERENCES</span> 科目(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> indexes <span class="keyword">from</span> 成绩;</span><br></pre></td></tr></table></figure><p>提示：关联指的是关系数据库中，相关表之间的联系。它是通过相同的属性或属性组来表示的。子表的外键必须关联父表的主键，且关联字段的数据类型必须匹配，如果类型不一样，则创建子表时会出现错误</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="number">3780</span> (HY000): <span class="keyword">Referencing</span> <span class="keyword">column</span> <span class="string">&#x27;学生ID&#x27;</span> <span class="keyword">and</span> referenced <span class="keyword">column</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">in</span> <span class="keyword">foreign</span> key <span class="keyword">constraint</span> <span class="string">&#x27;s&#x27;</span> <span class="keyword">are</span> incompatible.</span><br></pre></td></tr></table></figure><h2 id="建立外键以后产生的影响"><a href="#建立外键以后产生的影响" class="headerlink" title="建立外键以后产生的影响"></a>建立外键以后产生的影响</h2><p>在向从表中插入数据时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 成绩 <span class="keyword">values</span>(<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">12.3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 成绩(id, 成绩) <span class="keyword">values</span> (<span class="number">2</span>, <span class="number">12.3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 成绩 <span class="keyword">values</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12.3</span>);</span><br><span class="line">Cannot <span class="keyword">add</span> <span class="keyword">or</span> <span class="keyword">update</span> a child <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`test`.`成绩`, <span class="keyword">CONSTRAINT</span> `fk_c_s` <span class="keyword">FOREIGN</span> KEY (`学生ID`) <span class="keyword">REFERENCES</span> `学生` (`id`))</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 学生 <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 科目 <span class="keyword">values</span>(<span class="number">3</span>, <span class="string">&#x27;bbb&#x27;</span>);</span><br></pre></td></tr></table></figure><p>​        <strong>如果外键字段插入的值，在不为null时，必须在关联的主表字段中存在，才能插入成功，否则报错。</strong></p><p>​        在向从表中更新数据时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 成绩 <span class="keyword">set</span> 学生ID<span class="operator">=</span><span class="number">3</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"> Cannot <span class="keyword">add</span> <span class="keyword">or</span> <span class="keyword">update</span> a child <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`test`.`成绩`, <span class="keyword">CONSTRAINT</span> `fk_c_s` <span class="keyword">FOREIGN</span> KEY (`学生ID`) <span class="keyword">REFERENCES</span> `学生` (`id`))</span><br><span class="line"> <span class="keyword">update</span> 成绩 <span class="keyword">set</span> 学生ID<span class="operator">=</span><span class="keyword">null</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>​        <strong>如果外键字段更新后的值，在不为null时，必须在关联的主表字段中存在时，才能更新成功，否则报错。</strong></p><p>​        </p><p>​        在向主表中更新存在已关联从表的字段数据时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update 学生 set id=3 where id=2;</span><br><span class="line">delete from 学生 where id=2;</span><br><span class="line">Cannot delete or update a parent row: a foreign key constraint fails (`test`.`成绩`, CONSTRAINT `fk_c_s` FOREIGN KEY (`学生ID`) REFERENCES `学生` (`id`))</span><br></pre></td></tr></table></figure><p>​        <strong>无法更新主表中，存在已关联到从表的字段数据，只能更无关联的数据。</strong></p><p>​        在主表删除存在已关联从表的字段数据时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 学生 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line">Cannot <span class="keyword">delete</span> <span class="keyword">or</span> <span class="keyword">update</span> a parent <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`test`.`成绩`, <span class="keyword">CONSTRAINT</span> `fk_c_s` <span class="keyword">FOREIGN</span> KEY (`学生ID`) <span class="keyword">REFERENCES</span> `学生` (`id`))</span><br></pre></td></tr></table></figure><p>​        <strong>如果存在关联到将被删除的主表记录，的从表记录时，无法删除。必须先删除从表中对应记录后，才能删除主表记录。</strong></p><p>​        在删除从表记录时：</p><p>​        <strong>无影响</strong></p><p>​        在删除主表时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 学生;</span><br><span class="line"> Cannot <span class="keyword">drop</span> <span class="keyword">table</span> <span class="string">&#x27;学生&#x27;</span> referenced <span class="keyword">by</span> a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> <span class="string">&#x27;fk_c_s&#x27;</span> <span class="keyword">on</span> <span class="keyword">table</span> <span class="string">&#x27;成绩&#x27;</span>.</span><br></pre></td></tr></table></figure><p>​        <strong>当外键关系还存在时，不能删除主表。必须先删除外键后，才能删除主表。</strong></p><p>​        在删除从表时：<strong>无影响</strong></p><h2 id="在修改表时添加外键约束"><a href="#在修改表时添加外键约束" class="headerlink" title="在修改表时添加外键约束"></a>在修改表时添加外键约束</h2><p>在修改数据表时添加外键约束的语法规则为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;数据表名&gt; ADD CONSTRAINT &lt;索引名&gt; FOREIGN KEY(&lt;列名&gt;) REFERENCES &lt;主表名&gt; (&lt;列名&gt;);</span><br></pre></td></tr></table></figure><p>我们还是来看看学生成绩表的例子。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 成绩;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 学生;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 科目;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 学生 (id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 科目 (id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 成绩 (id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">学生ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">科目ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">成绩 <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 成绩 <span class="keyword">add</span> <span class="keyword">constraint</span> 成绩_学生ID_fk0  <span class="keyword">foreign</span> key (学生ID) <span class="keyword">references</span> 学生 (id);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 成绩 <span class="keyword">add</span> <span class="keyword">constraint</span> 成绩_科目ID_fk0  <span class="keyword">foreign</span> key (科目ID) <span class="keyword">references</span> 科目 (id);</span><br></pre></td></tr></table></figure><h2 id="删除外键约束"><a href="#删除外键约束" class="headerlink" title="删除外键约束"></a>删除外键约束</h2><p>对于数据库中定义的外键，如果不再需要，可以将其删除。外键一旦删除，就会解除主表和从表间的关联关系，MySQL 中删除外键的语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY <span class="operator">&lt;</span>外键约束名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>去除外键约束后，对应创建在从表上的索引，还继续存在，除非直接drop相关索引。</p><h2 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h2><p>​        在创建外键的时候，可以指定在删除、更新父表时，对子表进行的相应操作，包括<strong>RESTRICT、NO ACTION、SET NULL和CASCADE</strong>。</p><p>​        其中RESTRICT和NO ACTION相同，是指在子表有关联记录的情况下父表不能更新；CASCADE表示父表在更新或者删除时，更新或者删除子表对应记录；SET NULL则是表示父表在更新或者删除的时候，子表的对应字段被SET NULL。</p><h3 id="不允许级联操作"><a href="#不允许级联操作" class="headerlink" title="不允许级联操作"></a>不允许级联操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 成绩 (id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">学生ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">科目ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">成绩 <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_c_s <span class="keyword">FOREIGN</span> KEY(学生ID) <span class="keyword">REFERENCES</span> 学生(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> RESTRICT,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_c_k <span class="keyword">FOREIGN</span> KEY(科目ID) <span class="keyword">REFERENCES</span> 科目(id)</span><br><span class="line">);</span><br><span class="line"><span class="comment">--或者如下</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 成绩 (id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">学生ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">科目ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">成绩 <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_c_s <span class="keyword">FOREIGN</span> KEY(学生ID) <span class="keyword">REFERENCES</span> 学生(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> ACTION <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> ACTION,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_c_k <span class="keyword">FOREIGN</span> KEY(科目ID) <span class="keyword">REFERENCES</span> 科目(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>进行no action设置之后，与未设置级联操作一致（no action实际是默认模式），删除和更新会报错。</p><h3 id="级联更新"><a href="#级联更新" class="headerlink" title="级联更新"></a>级联更新</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 成绩 (id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">学生ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">科目ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">成绩 <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_c_s <span class="keyword">FOREIGN</span> KEY(学生ID) <span class="keyword">REFERENCES</span> 学生(id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_c_k <span class="keyword">FOREIGN</span> KEY(科目ID) <span class="keyword">REFERENCES</span> 科目(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>进行了on update cascade设置之后，update操作主表，将主表数据和从表中关联的数据字段都一并更新。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 学生 <span class="keyword">set</span> id<span class="operator">=</span><span class="number">3</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 学生;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 成绩;</span><br></pre></td></tr></table></figure><h3 id="级联删除"><a href="#级联删除" class="headerlink" title="级联删除"></a>级联删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 成绩 (id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">学生ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">科目ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">成绩 <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_c_s <span class="keyword">FOREIGN</span> KEY(学生ID) <span class="keyword">REFERENCES</span> 学生(id) <span class="keyword">ON</span> <span class="keyword">delete</span> CASCADE,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_c_k <span class="keyword">FOREIGN</span> KEY(科目ID) <span class="keyword">REFERENCES</span> 科目(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>进行了on delete cascade设置之后，delete操作主表，将主表数据和从表中关联的数据都一并删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 学生 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 学生;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 成绩;</span><br></pre></td></tr></table></figure><p>on update cascade 与 on delete cascade 可以连起来写。</p><h3 id="级联设置为null"><a href="#级联设置为null" class="headerlink" title="级联设置为null"></a>级联设置为null</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 成绩 (id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">学生ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">科目ID <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">成绩 <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_c_s <span class="keyword">FOREIGN</span> KEY(学生ID) <span class="keyword">REFERENCES</span> 学生(id) <span class="keyword">ON</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_c_k <span class="keyword">FOREIGN</span> KEY(科目ID) <span class="keyword">REFERENCES</span> 科目(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>进行了on delete set null 或 on update set null 设置之后，delete 或 update 操作主表，将主表数据和从表中关联的数据字段都一并设为null。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 学生 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 学生;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 成绩;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库三大范式、ER图与实体类、外键约束与级联操作&quot;&gt;&lt;a href=&quot;#数据库三大范式、ER图与实体类、外键约束与级联操作&quot; class=&quot;headerlink&quot; title=&quot;数据库三大范式、ER图与实体类、外键约束与级联操作&quot;&gt;&lt;/a&gt;数据库三大范式、ER图</summary>
      
    
    
    
    <category term="MySQL" scheme="https://manamn.space/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://manamn.space/tags/MySQL/"/>
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>悉知JDBC</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/%E6%82%89%E7%9F%A5JDBC/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/%E6%82%89%E7%9F%A5JDBC/</id>
    <published>2022-10-16T14:51:55.000Z</published>
    <updated>2022-10-17T14:00:10.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="悉知JDBC"><a href="#悉知JDBC" class="headerlink" title="悉知JDBC"></a>悉知JDBC</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始  —————</strong></p><h2 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0. 学习目标"></a>0. 学习目标</h2><ul><li>掌握JDBC的概念</li><li>掌握JDBC操作单表CRUD的方法</li><li>掌握JDBC操作数据库事务的方法</li><li>掌握数据库操作工具类的实现方法</li><li>了解一些市面上的流行的连接池</li><li>了解并熟悉掌握三层架构</li></ul><h1 id="第1章JDBC概述"><a href="#第1章JDBC概述" class="headerlink" title="第1章JDBC概述"></a>第1章JDBC概述</h1><p><strong>首先看一下下面这张JDBC的思维导图理一下思路吧！！！</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/JDBC.png" style="zoom: 50%;" /></p><p>客户端操作MySQL数据库的方式</p><ol><li>使用第三方客户端来访问MySQL：SQLyog、Navicat、SQLWave、MyDB Studio、EMS SQL Manager for MySQL</li><li>使用MySQL自带的命令行方式</li><li><strong>通过Java来访问MySQL数据库，今天要学习的内容</strong></li></ol><p><strong>什么是JDBC</strong>：<code>Java DataBase Connectivity</code>(Java数据库连接) JDBC是Java访问数据库的<code>标准规范</code><br><strong>JDBC的作用</strong>：JDBC是用于执行SQL语句的Java API(<strong>Java语言通过JDBC可以操作数据库</strong>)</p><h2 id="1-1-JDBC概述"><a href="#1-1-JDBC概述" class="headerlink" title="1.1 JDBC概述"></a>1.1 JDBC概述</h2><p>JDBC：Java Database Connectivity，它是代表一组独立于任何数据库管理系统（DBMS）的API，声明在java.sql与javax.sql包中，是SUN(现在Oracle)提供的一组接口规范。由各个数据库厂商来提供实现类，这些实现类的集合构成了数据库驱动jar。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561212287381.png" alt="1561212287381"></p><p>即JDBC技术包含两个部分：</p><p>（1）java.sql包和javax.sql包中的API</p><blockquote><p>因为为了项目代码的可移植性，可维护性，SUN公司从最初就制定了Java程序连接各种数据库的统一接口规范。这样的话，不管是连接哪一种DBMS软件，Java代码可以保持一致性。</p></blockquote><p>（2）各个数据库厂商提供的jar</p><blockquote><p>因为各个数据库厂商的DBMS软件各有不同，那么内部如何通过sql实现增、删、改、查等管理数据，只有这个数据库厂商自己更清楚，因此把接口规范的实现交给各个数据库厂商自己实现。</p></blockquote><h2 id="1-2-JDBC的由来"><a href="#1-2-JDBC的由来" class="headerlink" title="1.2.JDBC的由来"></a>1.2.JDBC的由来</h2><ol><li><p><strong>直接写代码操作数据库</strong><br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdbc01.png" alt=""><br><strong>直接写代码操作数据库存在的问题：</strong></p><ol><li>不知道MySQL数据库的操作方式，解析方式</li><li>代码繁琐，写起来麻烦</li><li>MySQL和Oracle等其他数据库的操作方式和解析方式不同，每个数据库都要写一套代码</li><li>MySQL和Oracle等其他数据库相互切换麻烦</li></ol></li><li><p><strong>JDBC规范定义接口，具体的实现由各大数据库厂商来实现</strong><br>JDBC是Java访问数据库的标准规范。真正怎么操作数据库还需要具体的实现类，也就是数据库驱动。每个数据库厂商根据自家数据库的通信格式编写好自己数据库的驱动。所以我们只需要会调用JDBC接口中的方法即可。数据库驱动由数据库厂商提供。<br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdbc02.png" alt=""></p></li></ol><p><strong>JDBC的好处：</strong></p><ol><li>我们只需要会调用JDBC接口中的方法即可，使用简单</li><li>使用同一套Java代码，进行少量的修改就可以访问其他JDBC支持的数据库</li></ol><p><strong>JDBC会用到的包：</strong></p><ol><li>java.sql：JDBC访问数据库的基础包，在JavaSE中的包。如：java.sql.Connection</li><li>javax.sql： JDBC访问数据库的扩展包</li><li>数据库的驱动，各大数据库厂商来实现。如：MySQL的驱动：com.mysql.jdbc.Driver</li></ol><p><strong>JDBC四个核心对象</strong><br>这几个类都是在java.sql包中</p><ol><li>DriverManager: 用于注册驱动</li><li>Connection: 表示与数据库创建的连接</li><li>Statement: 执行SQL语句的对象</li><li>ResultSet: 结果集或一张虚拟表<br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdbc03.png" alt=""></li></ol><h2 id="1-3-JDBC使用步骤"><a href="#1-3-JDBC使用步骤" class="headerlink" title="1.3 JDBC使用步骤"></a>1.3 JDBC使用步骤</h2><p>代码编写步骤：</p><p>JDBC访问数据库步骤</p><blockquote><p>1：注册一个Driver驱动</p><p>三部曲：</p><p>​    （1）将DBMS数据库管理软件的驱动jar拷贝到项目的libs目录中</p><p>​              例如：mysql-connector-java-5.1.36-bin.jar</p><p>​     （2）把驱动jar添加到项目的build path中</p><p>​     （3）将驱动类加载到内存中</p><p>​               Class.forName(“com.mysql.jdbc.Driver”);</p><p>2：获取数据库连接（Connection）</p><p>​     Connection conn = DriverManager.getConnection(url,username,password);</p><p>​     mysql的url：jdbc:mysql://localhost:3306/数据库名?参数名=参数值</p><p>​     jdbc:mysql://localhost:3306/testdb?useUnicode=true&amp;characterEncoding=utf8</p><p>​    （如果JDBC程序与服务器端       的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集</p><p>3：创建SQL命令发送器Statement</p><p>​     创建Statement或PreparedStatement对象</p><p>4：通过Statement发送SQL命令并得到结果</p><p>5：处理结果（select语句）</p><p>6：关闭数据库资源ResultSet  Statement  Connection</p></blockquote><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1561213163143.png" alt="1561213163143"></p><h2 id="1-4-相关的API："><a href="#1-4-相关的API：" class="headerlink" title="1.4 相关的API："></a>1.4 相关的API：</h2><h3 id="相关API介绍"><a href="#相关API介绍" class="headerlink" title="相关API介绍"></a>相关API介绍</h3><h4 id="1、DriverManager：驱动管理类"><a href="#1、DriverManager：驱动管理类" class="headerlink" title="1、DriverManager：驱动管理类"></a>1、DriverManager：驱动管理类</h4><p>使用<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code>加载驱动，这样驱动只会注册一次</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Demo01 &#123;</span><br><span class="line">public <span class="keyword">static</span> void main(String[] args) throws Exception &#123;</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;); </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 后期可以将&quot;com.mysql.jdbc.Driver&quot;字符串写在文件中.</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Connection：代表数据库连接"><a href="#2、Connection：代表数据库连接" class="headerlink" title="2、Connection：代表数据库连接"></a>2、Connection：代表数据库连接</h4><blockquote><p>注意：使用<code>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</code>，存在两方面不足</p><ol><li>硬编码，后期不易于程序扩展和维护</li><li>驱动被注册两次</li></ol></blockquote><h4 id="3、Statement和PreparedStatement：用来执行sql"><a href="#3、Statement和PreparedStatement：用来执行sql" class="headerlink" title="3、Statement和PreparedStatement：用来执行sql"></a>3、Statement和PreparedStatement：用来执行sql</h4><p>​    执行增、删、改：int executeUpate()</p><p>​    执行查询：ResultSet executeQuery()</p><h4 id="4、如何遍历ResultSet-？"><a href="#4、如何遍历ResultSet-？" class="headerlink" title="4、如何遍历ResultSet ？"></a>4、如何遍历ResultSet ？</h4><p>​    （1）boolean next()：判断是否还有下一行</p><p>​    （2）getString(字段名或序号),getInt(字段名或序号),getObject(字段名或序号)</p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ol><li><code>String url</code>：连接数据库的URL，用于说明连接数据库的位置</li><li><code>String user</code>：数据库的账号</li><li><code>String password</code>：数据库的密码</li></ol><p>连接数据库的URL地址格式：<code>协议名:子协议://服务器名或IP地址:端口号/数据库名?参数=参数值</code><br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdbc13.png" alt=""><br>MySQL写法：<code>jdbc:mysql://localhost:3306/dayxx如果是本地服务器，端口号是默认的3306，则可以简写：</code>jdbc:mysql:///db1</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><p>如果数据出现乱码需要加上参数: ?characterEncoding=utf8，表示让数据库以UTF-8编码来处理数据。<br>如: jdbc:mysql://localhost:3306/dayxx?characterEncoding=utf8</p></blockquote><p>若出现以下内容,代表数据库服务没有启动</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220820122713724.png" alt="image-20220820122713724" style="zoom:80%;" /></p><p><code>示例代码1：增、删、改</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line"><span class="comment">//1、注册驱动</span></span><br><span class="line"><span class="comment">//(1)方式一：Class.forName(&quot;驱动类的全名称&quot;)</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//(2)创建驱动类的对象</span></span><br><span class="line"><span class="comment">//new com.mysql.jdbc.Driver();//硬编码</span></span><br><span class="line"><span class="comment">//(3)通过DriverManager注册驱动</span></span><br><span class="line"><span class="comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());//硬编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取连接，连接数据库</span></span><br><span class="line">        <span class="comment">//TCP/IP协议编程，需要服务器的IP地址和端口号</span></span><br><span class="line"><span class="comment">//mysql的url格式：jdbc协议:子协议://主机名:端口号/要连接的数据库名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<span class="comment">//其中test是数据库名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、执行sql</span></span><br><span class="line"><span class="comment">//添加一个部门到数据库的t_department表中</span></span><br><span class="line"><span class="comment">//(1)编写sql</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_department values(null,&#x27;计算部2&#x27;,&#x27;计算钞票2&#x27;)&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 回忆：TCP/IP程序时</span></span><br><span class="line"><span class="comment"> * Socket代表连接</span></span><br><span class="line"><span class="comment"> * socket.getOutputStream()来发送数据，</span></span><br><span class="line"><span class="comment"> * socket.getInputStream()来接收数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 可以把Connection比喻成Socket</span></span><br><span class="line"><span class="comment"> *    把Statement比喻成OutputStream</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//(2)获取Statement对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="comment">//(3)执行sql</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> st.executeUpdate(sql);</span><br><span class="line"><span class="comment">//(4)处理结果</span></span><br><span class="line">System.out.println(len&gt;<span class="number">0</span>?<span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、关闭</span></span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>示例代码2：查询</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSelect</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">// 1、注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、连接数据库</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、执行sql</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM t_department&quot;</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery(sql);<span class="comment">//ResultSet看成InputStream</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;<span class="comment">//next()表示是否还有下一行</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">did</span> <span class="operator">=</span> rs.getObject(<span class="number">1</span>);<span class="comment">//获取第n列的值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">dname</span> <span class="operator">=</span> rs.getObject(<span class="number">2</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">desc</span> <span class="operator">=</span> rs.getObject(<span class="number">3</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int did = rs.getInt(&quot;did&quot;);//也可以根据列名称，并且可以按照数据类型获取</span></span><br><span class="line"><span class="comment">String dname = rs.getString(&quot;dname&quot;);</span></span><br><span class="line"><span class="comment">String desc = rs.getString(&quot;description&quot;);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">System.out.println(did +<span class="string">&quot;\t&quot;</span> + dname + <span class="string">&quot;\t&quot;</span>+ desc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、关闭</span></span><br><span class="line">rs.close();</span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第2章-使用PreparedStatement处理CRUD"><a href="#第2章-使用PreparedStatement处理CRUD" class="headerlink" title="第2章  使用PreparedStatement处理CRUD"></a>第2章  使用PreparedStatement处理CRUD</h1><h2 id="2-1-通过PreparedStatement来解决Statement的问题"><a href="#2-1-通过PreparedStatement来解决Statement的问题" class="headerlink" title="2.1 通过PreparedStatement来解决Statement的问题"></a>2.1 通过PreparedStatement来解决Statement的问题</h2><p>Statement的问题：通过PreparedStatement来代替</p><h3 id="1-sql拼接"><a href="#1-sql拼接" class="headerlink" title="1. sql拼接"></a>1. sql拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_employee(ename,tel,gender,salary) values(&#x27;&quot;</span> + ename + <span class="string">&quot;&#x27;,&#x27;&quot;</span> + tel + <span class="string">&quot;&#x27;,&#x27;&quot;</span> + gender + <span class="string">&quot;&#x27;,&quot;</span> + salary +<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> st.executeUpdate(sql);</span><br></pre></td></tr></table></figure><h3 id="2-sql注入"><a href="#2-sql注入" class="headerlink" title="2 . sql注入"></a>2 . sql注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM t_employee where ename=&#x27;&quot;</span> + ename + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">//如果我此时从键盘输入ename值的时候，输入：张三&#x27; or &#x27;1&#x27;= &#x27;1</span></span><br><span class="line"><span class="comment">//结果会把所有数据都查询出来</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery(sql);</span><br></pre></td></tr></table></figure><h3 id="3-处理blob等类型的数据"><a href="#3-处理blob等类型的数据" class="headerlink" title="3. 处理blob等类型的数据"></a>3. 处理blob等类型的数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建含有Blob字段类型的表 测试插入</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user(username,photo) values(&#x27;zs&#x27;, 图片字节流)&quot;</span>;</span><br><span class="line"><span class="comment">//此时photo是blob类型的数据时，无法在sql中直接拼接</span></span><br></pre></td></tr></table></figure><p>PreparedStatement解决问题：</p><h3 id="4-避免sql拼接"><a href="#4-避免sql拼接" class="headerlink" title="4. 避免sql拼接"></a>4. 避免sql拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_employee(ename,tel,gender,salary) values(?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);<span class="comment">//这里要传带？的sql，然后mysql端就会对这个sql进行预编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置？的具体值</span></span><br><span class="line"><span class="comment">/*pst.setString(1, ename);</span></span><br><span class="line"><span class="comment">pst.setString(2, tel);</span></span><br><span class="line"><span class="comment">pst.setString(3, gender);</span></span><br><span class="line"><span class="comment">pst.setDouble(4, salary);*/</span></span><br><span class="line"></span><br><span class="line">pst.setObject(<span class="number">1</span>, ename);</span><br><span class="line">pst.setObject(<span class="number">2</span>, tel);</span><br><span class="line">pst.setObject(<span class="number">3</span>, gender);</span><br><span class="line">pst.setObject(<span class="number">4</span>, salary);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> pst.executeUpdate();<span class="comment">//此处不能传sql</span></span><br><span class="line">System.out.println(len);</span><br></pre></td></tr></table></figure><h3 id="5-不会有sql注入"><a href="#5-不会有sql注入" class="headerlink" title="5. 不会有sql注入"></a>5. 不会有sql注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM t_employee where ename=?&quot;</span>;</span><br><span class="line"><span class="comment">//即使输入&#x27;张三&#x27; or &#x27;1&#x27;= &#x27;1&#x27;也没问题</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间加入设置？的值</span></span><br><span class="line">pst.setObject(<span class="number">1</span>, ename);</span><br><span class="line"></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pst.executeQuery();</span><br></pre></td></tr></table></figure><h3 id="6-处理blob类型的数据"><a href="#6-处理blob类型的数据" class="headerlink" title="6. 处理blob类型的数据"></a>6. 处理blob类型的数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user(username,photo) values(?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置？的值</span></span><br><span class="line">pst.setObject(<span class="number">1</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/QMDownload/img/美女/15.jpg&quot;</span>);</span><br><span class="line">pst.setBlob(<span class="number">2</span>, fis);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> pst.executeUpdate();</span><br><span class="line">System.out.println(len&gt;<span class="number">0</span>?<span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>注意两个问题：</p><p>①my.ini关于上传的字节流文件有大小限制，可以在my.ini中配置变量</p><p>​    max_allowed_packet=16M</p><p>②每一种blob有各自大小限制：</p><p>tinyblob:255字节、blob:65k、mediumblob:16M、longblob:4G</p></li></ul><h2 id="2-2-获取自增长键值"><a href="#2-2-获取自增长键值" class="headerlink" title="2.2 获取自增长键值"></a>2.2 获取自增长键值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 我们通过JDBC往数据库的表格中添加一条记录，其中有一个字段是自增的，那么在JDBC这边怎么在添加之后直接获取到这个自增的值</span></span><br><span class="line"><span class="comment"> * PreparedStatement是Statement的子接口。</span></span><br><span class="line"><span class="comment"> * Statement接口中有一些常量值：</span></span><br><span class="line"><span class="comment"> * （1）Statement.RETURN_GENERATED_KEYS</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 要先添加后获取到自增的key值：</span></span><br><span class="line"><span class="comment"> * （1）PreparedStatement pst = conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);</span></span><br><span class="line"><span class="comment"> * （2）添加sql执行完成后,通过PreparedStatement的对象调用getGeneratedKeys()方法来获取自增长键值，遍历结果集</span></span><br><span class="line"><span class="comment"> * ResultSet rs = pst.getGeneratedKeys();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAutoIncrement</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//1、注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、执行sql</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_department values(null,?,?)&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这里在创建PreparedStatement对象时，传入第二个参数的作用，就是告知服务器端</span></span><br><span class="line"><span class="comment"> * 当执行完sql后，把自增的key值返回来。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置？的值</span></span><br><span class="line">pst.setObject(<span class="number">1</span>, <span class="string">&quot;测试部&quot;</span>);</span><br><span class="line">pst.setObject(<span class="number">2</span>, <span class="string">&quot;测试项目数据&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行sql</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> pst.executeUpdate();<span class="comment">//返回影响的记录数</span></span><br><span class="line"><span class="keyword">if</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//从pst中获取到服务器端返回的键值</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pst.getGeneratedKeys();</span><br><span class="line"><span class="comment">//因为这里的key值可能多个，因为insert语句可以同时添加多行，所以用ResultSet封装</span></span><br><span class="line"><span class="comment">//这里因为只添加一条，所以用if判断</span></span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> rs.getObject(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;自增的key值did =&quot;</span> + key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、关闭</span></span><br><span class="line">pst.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-批处理"><a href="#2-3-批处理" class="headerlink" title="2.3 批处理"></a>2.3 批处理</h2><p>需要在url的末尾添加此参数：rewriteBatchedStatements=true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 批处理：</span></span><br><span class="line"><span class="comment"> * 批量处理sql</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 例如：</span></span><br><span class="line"><span class="comment"> * （1）订单明细表的多条记录的添加</span></span><br><span class="line"><span class="comment"> * （2）批量添加模拟数据</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 不用批处理，和用批处理有什么不同？</span></span><br><span class="line"><span class="comment"> * 批处理的效率很多</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 如何进行批处理操作？</span></span><br><span class="line"><span class="comment"> * （1）在url中要加一个参数</span></span><br><span class="line"><span class="comment"> *     rewriteBatchedStatements=true</span></span><br><span class="line"><span class="comment"> *     那么我们的url就变成了  jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true</span></span><br><span class="line"><span class="comment"> *     这里的?，表示?后面是客户端给服务器端传的参数，多个参数直接使用&amp;分割</span></span><br><span class="line"><span class="comment"> * （2）调用方法不同</span></span><br><span class="line"><span class="comment"> * pst.addBatch();</span></span><br><span class="line"><span class="comment"> * int[] all = pst.executeBatch();</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注意：如果批量添加时，insert使用values,不要使用value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBatch</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">//例如：在部门表t_department中添加1000条模拟数据</span></span><br><span class="line"><span class="comment">//1、注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//2、获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="comment">//3、执行sql</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_department values(null,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//设置？的值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">1000</span>; i++) &#123;</span><br><span class="line">pst.setObject(<span class="number">1</span>, <span class="string">&quot;模拟部门&quot;</span>+i);</span><br><span class="line">pst.setObject(<span class="number">2</span>, <span class="string">&quot;模拟部门的简介&quot;</span>+i);</span><br><span class="line">pst.addBatch();<span class="comment">//添加到批处理一组操作中，攒一块处理</span></span><br><span class="line"><span class="comment">/*          if(i % 500 == 0)&#123;//有时候也攒一部分，执行一部分</span></span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line"><span class="comment">pst.executeBatch();</span></span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line"><span class="comment">pst.clearBatch();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line">pst.executeBatch();</span><br><span class="line"><span class="comment">//4、关闭</span></span><br><span class="line">pst.close();</span><br><span class="line">conn.close();</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;耗时：&quot;</span> + (end - start));<span class="comment">//耗时：821</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第3章-JDBC实现对单表数据增、删、改、查"><a href="#第3章-JDBC实现对单表数据增、删、改、查" class="headerlink" title="第3章 JDBC实现对单表数据增、删、改、查"></a>第3章 JDBC实现对单表数据增、删、改、查</h1><p>我们要对数据库进行增、删、改、查，需要使用<code>Statement</code>对象来执行SQL语句。</p><h2 id="4-1-JDBC实现对单表数据增、删、改"><a href="#4-1-JDBC实现对单表数据增、删、改" class="headerlink" title="4.1 JDBC实现对单表数据增、删、改"></a>4.1 JDBC实现对单表数据增、删、改</h2><p><strong>案例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///mysqltest&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">System.out.println(conn);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从连接中拿到一个Statement对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.插入记录</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO category (cname) VALUES (&#x27;手机&#x27;);&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">System.out.println(<span class="string">&quot;影响的行数:&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.修改记录</span></span><br><span class="line">sql = <span class="string">&quot;UPDATE category SET cname=&#x27;汽车&#x27; WHERE cid=4;&quot;</span>;</span><br><span class="line">i = stmt.executeUpdate(sql);</span><br><span class="line">System.out.println(<span class="string">&quot;影响的行数:&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.删除记录</span></span><br><span class="line">sql = <span class="string">&quot;DELETE FROM category WHERE cid=1;&quot;</span>;</span><br><span class="line">i = stmt.executeUpdate(sql);</span><br><span class="line">System.out.println(<span class="string">&quot;影响的行数:&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例效果</strong></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdbc17.png" alt=""></p><h2 id="4-2-JDBC实现对单表数据查询"><a href="#4-2-JDBC实现对单表数据查询" class="headerlink" title="4.2 JDBC实现对单表数据查询"></a>4.2 JDBC实现对单表数据查询</h2><p><strong>使用JDBC查询数据库中的数据的步骤</strong></p><ol><li>注册驱动</li><li>获取连接</li><li>获取到Statement</li><li>使用Statement执行SQL</li><li>ResultSet处理结果</li><li>关闭资源</li></ol><p><strong>案例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///mysqltest&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM category;&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部有一个指针,只能取指针指向的那条记录</span></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123; <span class="comment">// 指针移动一行,有数据才返回true</span></span><br><span class="line"><span class="comment">// 取出数据</span></span><br><span class="line"><span class="type">int</span> <span class="variable">cid</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;cid&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">cname</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;cname&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(cid + <span class="string">&quot; == &quot;</span> + cname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>如果光标在第一行之前，使用rs.getXXX()获取列值，报错：Before start of result set</li><li>如果光标在最后一行之后，使用rs.getXXX()获取列值，报错：After end of result set</li></ol></blockquote><p><strong>案例效果</strong><br><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdbc20.png" alt=""></p><blockquote><p>总结：其实我们使用JDBC操作数据库的步骤都是固定的。不同的地方是在编写SQL语句</p><ol><li>注册驱动</li><li>获取连接</li><li>获取到Statement</li><li>使用Statement执行SQL</li><li>ResultSet处理结果</li><li>关闭资源</li></ol></blockquote><h1 id="第4章-JDBC事务"><a href="#第4章-JDBC事务" class="headerlink" title="第4章 JDBC事务"></a>第4章 JDBC事务</h1><p>之前我们是使用MySQL的命令来操作事务。接下来我们使用JDBC来操作银行转账的事务。</p><h2 id="5-1-准备数据"><a href="#5-1-准备数据" class="headerlink" title="5.1 准备数据"></a>5.1 准备数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">balance <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account (NAME, balance) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>, <span class="number">1000</span>), (<span class="string">&#x27;李四&#x27;</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="5-2-API介绍"><a href="#5-2-API介绍" class="headerlink" title="5.2 API介绍"></a>5.2 API介绍</h2><p><code>Connection</code>接口中与事务有关的方法</p><ol><li><p>```java<br>void setAutoCommit(boolean autoCommit) throws SQLException;<br>false：开启事务， ture：关闭事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```java</span><br><span class="line">   void commit() throws SQLException;</span><br><span class="line">   提交事务</span><br></pre></td></tr></table></figure></li><li><p>```java<br>void rollback() throws SQLException;<br>回滚事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 5.3 使用步骤</span><br><span class="line"></span><br><span class="line">1. 注册驱动</span><br><span class="line">2. 获取连接</span><br><span class="line">3. 获取到Statement</span><br><span class="line">4. **开启事务**</span><br><span class="line">5. 使用PrepareStatement执行SQL</span><br><span class="line">6. **提交或回滚事务**</span><br><span class="line">7. 处理结果集</span><br><span class="line">8. 关闭资源</span><br><span class="line"></span><br><span class="line">## 5.4 案例代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line"> * mysql默认每一个连接是自动提交事务的。</span><br><span class="line"> * 那么当我们在JDBC这段，如果有多条语句想要组成一个事务一起执行的话，那么在JDBC这边怎么设置手动提交事务呢？</span><br><span class="line"> * (1)在执行之前，设置手动提交事务</span><br><span class="line"> * Connection的对象.setAutoCommit(false)</span><br><span class="line"> * (2)成功：</span><br><span class="line"> * Connection的对象.commit();</span><br><span class="line"> * 失败：</span><br><span class="line"> * Connection的对象.rollback();</span><br><span class="line"> * </span><br><span class="line"> * 补充说明：</span><br><span class="line"> * 为了大家养成要的习惯，在关闭Connection的对象之前，把连接对象设置回自动提交</span><br><span class="line"> * (3)Connection的对象.setAutoCommit(true)</span><br><span class="line"> * </span><br><span class="line"> * 因为我们现在的连接是建立新的连接，那么如果没有还原为自动提交，没有影响。</span><br><span class="line"> * 但是我们后面实际开发中，每次获取的连接，不一定是新的连接，而是从连接池中获取的旧的连接，而且你关闭也不是真关闭，而是还给连接池，供别人接着用。以防别人拿到后，以为是自动提交的，而没有commit，最终数据没有成功。</span><br><span class="line">   */</span><br><span class="line">   public class TestTransaction &#123;</span><br><span class="line">   public static void main(String[] args) throws Exception&#123;</span><br><span class="line">   /*</span><br><span class="line">    * 一般涉及到事务处理的话，那么业务逻辑都会比较复杂。</span><br><span class="line">    * 例如：购物车结算时：</span><br><span class="line">    * （1）在订单表中添加一条记录</span><br><span class="line">    * （2）在订单明细表中添加多条订单明细的记录（表示该订单买了什么东西）</span><br><span class="line">    * （3）修改商品表的销量和库存量</span><br><span class="line">    * ...</span><br><span class="line">    * 那么我们今天为了大家关注事务的操作，而不会因为复杂的业务逻辑的影响导致我们的理解，那么我们这里故意</span><br><span class="line">    * 用两条修改语句来模拟组成一个简单的事务。</span><br><span class="line">    * update t_department set description = &#x27;xx&#x27; where did = 2;</span><br><span class="line">    * update t_department set description = &#x27;yy&#x27; where did = 3;</span><br><span class="line">    * </span><br><span class="line">    * 我希望这两天语句要么一起成功，要么一起回滚</span><br><span class="line">    * 为了制造失败，我故意把第二条语句写错</span><br><span class="line">    * update t_department set description = &#x27;yy&#x27; （少了where） did = 3;</span><br><span class="line">    */</span><br><span class="line">       </span><br><span class="line">//1、注册驱动</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line"></span><br><span class="line">//2、获取连接</span><br><span class="line">Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;123456&quot;);</span><br><span class="line"></span><br><span class="line">//设置手动提交事务</span><br><span class="line">conn.setAutoCommit(false);</span><br><span class="line"></span><br><span class="line">//3、执行sql</span><br><span class="line">String sql1 = &quot;update t_department set description = &#x27;xx&#x27; where did = 2&quot;;</span><br><span class="line">String sql2 = &quot;update t_department set description = &#x27;yy&#x27; did = 3&quot;;//这是错的</span><br><span class="line"></span><br><span class="line">//使用prepareStatement的sql也可以不带?</span><br><span class="line">PreparedStatement pst = null;</span><br><span class="line">try &#123;</span><br><span class="line">pst = conn.prepareStatement(sql1);</span><br><span class="line">int len = pst.executeUpdate();</span><br><span class="line">System.out.println(&quot;第一条：&quot; + (len&gt;0?&quot;成功&quot;:&quot;失败&quot;));</span><br><span class="line"></span><br><span class="line">pst = conn.prepareStatement(sql2);</span><br><span class="line">len = pst.executeUpdate();</span><br><span class="line">System.out.println(&quot;第二条：&quot; + (len&gt;0?&quot;成功&quot;:&quot;失败&quot;));</span><br><span class="line"></span><br><span class="line">//都成功了，就提交事务</span><br><span class="line">System.out.println(&quot;提交&quot;);</span><br><span class="line">conn.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.out.println(&quot;回滚&quot;);</span><br><span class="line">//失败要回滚</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125;</span><br><span class="line">//4、关闭</span><br><span class="line">pst.close();</span><br><span class="line">conn.setAutoCommit(true);//还原为自动提交</span><br><span class="line">conn.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 拿到连接</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///dayxx&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line">conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"><span class="type">Statement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="comment">// 张三减500</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE account SET balance = balance - 500 WHERE id=1;&quot;</span>;</span><br><span class="line">pstmt.executeUpdate(sql);</span><br><span class="line"><span class="comment">// 模拟异常</span></span><br><span class="line"><span class="comment">// int i = 10 / 0;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 李四加500</span></span><br><span class="line">sql = <span class="string">&quot;UPDATE account SET balance = balance + 500 WHERE id=2;&quot;</span>;</span><br><span class="line">pstmt.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">pstmt.close();</span><br><span class="line"><span class="comment">// 成功,提交事务</span></span><br><span class="line">System.out.println(<span class="string">&quot;成功,提交事务&quot;</span>);</span><br><span class="line">conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// 失败,回滚事务</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;出了异常,回滚事务&quot;</span>);</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-案例效果"><a href="#5-5-案例效果" class="headerlink" title="5.5 案例效果"></a>5.5 案例效果</h2><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/jdbc21.png" alt=""></p><p><strong>说明：</strong>JDBC操作MySQL默认是自动提交事务的，事务不安全；可以手动开启事务管理，进行事务提交和回滚。</p><h1 id="第5章-数据库连接池"><a href="#第5章-数据库连接池" class="headerlink" title="第5章 数据库连接池"></a>第5章 数据库连接池</h1><h2 id="1、什么是数据库连池"><a href="#1、什么是数据库连池" class="headerlink" title="1、什么是数据库连池"></a>1、什么是数据库连池</h2><p>连接对象的缓冲区。负责申请，分配管理，释放连接的操作。</p><h2 id="2、为什么要使用数据库连接池"><a href="#2、为什么要使用数据库连接池" class="headerlink" title="2、为什么要使用数据库连接池"></a>2、为什么要使用数据库连接池</h2><p>Connection对象在每次执行DML和DQL的过程中都要创建一次,DML和DQL执行完毕后,connection对象都会被销毁. connection对象是可以反复使用的,没有必要每次都创建新的.该对象的创建和销毁都是比较消耗系统资源的,如何实现connection对象的反复使用呢?使用连接池技术实现。</p><h2 id="3-连接池的优势"><a href="#3-连接池的优势" class="headerlink" title="3.连接池的优势"></a>3.连接池的优势</h2><ul><li>预先准备一些链接对象,放入连接池中,当多个线程并发执行时,可以避免短时间内一次性大量创建链接对象,减少计算机单位时间内的运算压力,提高程序的响应速度</li><li>实现链接对象的反复使用,可以大大减少链接对象的创建次数,减少资源的消耗</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1600053286973.png" alt="1600053286973"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1600053272909.png" alt="1600053272909"></p><h2 id="4、市面上有很多现成的数据库连接池技术："><a href="#4、市面上有很多现成的数据库连接池技术：" class="headerlink" title="4、市面上有很多现成的数据库连接池技术："></a>4、市面上有很多现成的数据库连接池技术：</h2><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口（通常被称为数据源），该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池，<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以</strong></li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池</li><li><strong>HikariCP</strong>是由日本程序员开源的一个数据库连接池组件，代码非常轻量，并且速度非常的快。根据官方提供的数据，在i7,开启32个线程32个连接的情况下，进行随机数据库读写操作，HikariCP 的速度是现在常用的C3P0数据库连接池的数百倍。在SpringBoot2.0 中，官方也是推荐使用 HikariCP</li></ul></li></ul><h2 id="5-使用HikariCP作为连接池"><a href="#5-使用HikariCP作为连接池" class="headerlink" title="5. 使用HikariCP作为连接池"></a>5. 使用HikariCP作为连接池</h2><h3 id="HikariCP特点"><a href="#HikariCP特点" class="headerlink" title="HikariCP特点"></a>HikariCP特点</h3><blockquote><ol><li>字节码精简 ：优化代码（HikariCP利用了一个第三方的Java字节码修改类库Javassist来生成委托实现动态代理，动态代理的实现在ProxyFactory类），直到编译后的字节码最少，这样，CPU缓存可以加载更多的程序代码；</li><li>优化代理和拦截器：减少代码，例如HikariCP的Statement proxy只有100行代码，只有BoneCP的十分之一；</li><li>自定义数组类型（FastStatementList）代替ArrayList：避免每次get()调用都要进行range check，避免调用remove()时的从头到尾的扫描，相对与ArrayList极大地提升了性能，而其中的区别是，ArrayList在每次执行get(Index)方法时，都需要对List的范围进行检查，而FastStatementList不需要，在能确保范围的合法性的情况下，可以省去范围检查的开销。<br>自定义集合类型（ConcurrentBag）：支持快速插入和删除，特别是在同一线程既添加又删除项时，提高并发读写的效率；</li><li>针对CPU的时间片算法进行优化：尽可能在一个时间片里面完成各种操作（具体机制比较模糊）。</li><li>针对连接中断的情况：比其他CP响应时间上有了极好的优化，响应时间为5S，会抛出SqlException异常，并且后续的getConnection()可以正常进行。</li></ol></blockquote><p><strong>关于Connection的操作：另外在Java代码中，很多都是在使用完之后直接关闭连接，以前都是从头到尾遍历，来关闭对应的Connection，而HikariCP则是从尾部对Connection集合进行扫描，整体上来说，从尾部开始的性能更好一些。</strong></p><h3 id="HikariCP配置"><a href="#HikariCP配置" class="headerlink" title="HikariCP配置"></a>HikariCP配置</h3><ul><li><p>maximum-pool-size 池中最大连接数（包括空闲和正在使用的连接）</p></li><li><p>minimum-idle 池中最小空闲连接数量。默认值10</p></li><li><p>pool-name 连接池的名字</p></li><li><p>auto-commit 是否自动提交池中返回的连接。默认值为true。</p></li><li><p>idle-timeout 空闲时间。仅在minimum-idle小于maximum-poop-size的时候才会起作用。默认值10分钟。</p></li><li><p>max-lifetime 连接池中连接的最大生命周期。当连接一致处于闲置状态时，数据库可能会主动断开连接。</p></li><li><p>connection-timeout 连接超时时间。默认值为30s，可以接收的最小超时时间为250ms。但是连接池请求也可以自定义超时时间。</p></li></ul><h1 id="第6章-JDBC获取连接与关闭连接工具类实现"><a href="#第6章-JDBC获取连接与关闭连接工具类实现" class="headerlink" title="第6章 JDBC获取连接与关闭连接工具类实现"></a>第6章 JDBC获取连接与关闭连接工具类实现</h1><p>​    通过上面案例需求我们会发现每次去执行SQL语句都需要注册驱动，获取连接，得到Statement，以及释放资源。发现很多重复的劳动，我们可以将重复的代码定义到某个类的方法中。直接调用方法，可以简化代码。<br>​    那么我们接下来定义一个<code>JDBCUtil</code>类。把注册驱动，获取连接，得到Statement，以及释放资源的代码放到这个类的方法中。以后直接调用方法即可。</p><h2 id="6-1-编写JDBC工具类步骤"><a href="#6-1-编写JDBC工具类步骤" class="headerlink" title="6.1 编写JDBC工具类步骤"></a>6.1 编写JDBC工具类步骤</h2><ol><li>将固定字符串定义为常量</li><li>在静态代码块中注册驱动(只注册一次)</li><li>提供一个获取连接的方法<code>static Connection getConneciton();</code></li><li>定义关闭资源的方法<code>close(Connection conn, Statement stmt, ResultSet rs)</code></li><li>重载关闭方法<code>close(Connection conn, Statement stmt)</code></li></ol><h2 id="6-2-案例代码"><a href="#6-2-案例代码" class="headerlink" title="6.2 案例代码"></a>6.2 案例代码</h2><p><code>JDBCUtil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.manman.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zaxxer.hikari.HikariConfig;</span><br><span class="line"><span class="keyword">import</span> com.zaxxer.hikari.HikariDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gaoziman</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/15 19:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">public</span>  <span class="keyword">static</span> <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driverClass</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///jdbc?serverTimezone=UTC&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HikariDataSource dataSource;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             properties = <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未加载到配置文件，使用默认配置&quot;</span>);</span><br><span class="line">            properties.setProperty(<span class="string">&quot;driverClassName&quot;</span>, driverClass);</span><br><span class="line">            properties.setProperty(<span class="string">&quot;jdbcUrl&quot;</span>, url);</span><br><span class="line">            properties.setProperty(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">            properties.setProperty(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HikariConfig</span> <span class="variable">hikariConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariConfig</span>(properties);</span><br><span class="line">        dataSource = <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>(hikariConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">      <span class="doctag">@return</span>0000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回收连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">evictConnection</span><span class="params">(Connection conn)</span>&#123;</span><br><span class="line">        dataSource.evictConnection(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(String sql,Class&lt;T&gt; c)</span> &#123;</span><br><span class="line">        List&lt;T&gt; tlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             conn = dataSource.getConnection();</span><br><span class="line">            <span class="comment">//3、获取预编译对象</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 4、执行SQL</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 5、处理结果集</span></span><br><span class="line">            <span class="type">List</span> <span class="variable">tList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取结果集元数据</span></span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">md</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">            <span class="comment">//  获得总列数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">columnCounts</span> <span class="operator">=</span> md.getColumnCount();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="comment">//   根据反射创建对象 将每一行的数据封装到一个对象中 这里在外层通过反射创建对象</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=columnCounts ; i++) &#123;</span><br><span class="line">                    <span class="comment">//     获取结果集中每一行每一列中的数据</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">cellValue</span> <span class="operator">=</span> rs.getObject(i);</span><br><span class="line">                    <span class="comment">//      结果集中的每一列的列名 == 实体类中的属性名 这里可以通过使用反射给属性名赋值</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> md.getColumnName(i);</span><br><span class="line">                    <span class="comment">//      根据属性名来获取属性的代理对象</span></span><br><span class="line">                    <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c.getDeclaredField(columnName);</span><br><span class="line">                    f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">if</span> (cellValue != <span class="literal">null</span>)</span><br><span class="line">                        f.set(t, cellValue);</span><br><span class="line">                &#125;</span><br><span class="line">                    <span class="comment">//        将这些字段封装到对象中</span></span><br><span class="line">                    tList.add(t);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//返回集合</span></span><br><span class="line">            JdbcUtils.evictConnection(conn);</span><br><span class="line">            <span class="keyword">return</span> tList;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增删改操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">executeUpdate</span><span class="params">(String sql , Object... params)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//    3、获取预编译对象</span></span><br><span class="line">         ps = conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//设置参数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;params.length ; i++) &#123;</span><br><span class="line">            ps.setObject(i+<span class="number">1</span>,params[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//    4、执行SQL</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">        JdbcUtils.evictConnection(conn);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第7章-三层架构的设计原则"><a href="#第7章-三层架构的设计原则" class="headerlink" title="第7章 三层架构的设计原则"></a>第7章 三层架构的设计原则</h1><p>​        三层架构(3-tier architecture) ，通常意义上的三层架构就是将整个业务应用划分为：表示层（User Interface layer）、业务逻辑层（Business Logic Layer）、数据访问层（Data access layer）。区分层次的目的即为了 “<strong>高内聚低耦合</strong>” 的思想。</p><p>​        在软件体系架构设计中，分层式结构是最常见，也是最重要的一种结构。推荐的分层式结构一般分为三层，从上至下分别为：<strong>表示层、业务逻辑层（又或称为领域层）、数据访问层</strong>。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/u=2241965189,1328553484&amp;fm=15&amp;gp=0.jpg" alt="img"></p><p><strong>1、表现层(UI)：</strong>通俗讲就是展现给用户的界面，即用户在使用一个系统的时候他的所见所得。</p><p><strong>2、业务逻辑层(BLL)：</strong>针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。 　　</p><p><strong>3、数据访问层(DAL)：</strong>该层所做事务直接操作数据库，针对数据的增添、删除、修改、查找等。</p><p><strong>表示层</strong></p><p>位于最外层(最上层)，离用户最近。用于显示数据和接收用户输入的数据，为用户提供一种交互式操作的界面。</p><p><strong>业务逻辑层</strong></p><p><strong>业务逻辑层(Business Logic Layer)</strong>无疑是系统架构中体现核心价值的部分。它的关注点主要集中在业务规则的制定、业务流程的实现等与业务需求有关的系统设计，也即是说它是与系统所应对的领域(Domain)逻辑有关，很多时候，也将业务逻辑层称为领域层。</p><p>例如Martin Fowler在《Patterns of Enterprise Application Architecture》一书中，将整个架构分为三个主要的层：表示层、领域层和数据源层。作为领域驱动设计的先驱Eric Evans，对业务逻辑层作了更细致地划分，细分为应用层与领域层，通过分层进一步将领域逻辑与领域逻辑的解决方案分离。</p><p>业务逻辑层在体系架构中的位置很关键，它处于数据访问层与表示层中间，起到了数据交换中承上启下的作用。由于层是一种弱耦合结构，层与层之间的依赖是向下的，底层对于上层而言是“无知”的，改变上层的设计对于其调用的底层而言没有任何影响。</p><p>如果在分层设计时，遵循了面向接口设计的思想，那么这种向下的依赖也应该是一种弱依赖关系。因而在不改变接口定义的前提下，理想的分层式架构，应该是一个支持可抽取、可替换的“抽屉”式架构。正因为如此，业务逻辑层的设计对于一个支持可扩展的架构尤为关键，因为它扮演了两个不同的角色。</p><p>对于数据访问层而言，它是调用者;对于表示层而言，它却是被调用者。依赖与被依赖的关系都纠结在业务逻辑层上，如何实现依赖关系的解耦，则是除了实现业务逻辑之外留给设计师的任务。</p><p><strong>数据层</strong></p><p><strong>数据访问层（Data Access Layer）</strong>：有时候也称为是持久层，其功能主要是负责数据库的访问，可以访问数据库系统、二进制文件、文本文档或是XML文档。</p><p>简单的说法就是实现对数据表的Select，Insert，Update，Delete的操作。如果要加入ORM的元素，那么就会包括对象和数据表之间的mapping，以及对象实体的持久化。</p><p><strong>优缺点</strong></p><p><strong>优点</strong></p><p>1、开发人员可以只关注整个结构中的其中某一层;</p><p>2、可以很容易的用新的实现来替换原有层次的实现;</p><p>3、可以降低层与层之间的依赖;</p><p>4、有利于标准化;</p><p>5、利于各层逻辑的复用。</p><p>6、结构更加的明确</p><p>7、在后期维护的时候，极大地降低了维护成本和维护时间</p><p><strong>缺点</strong></p><p>1、降低了系统的性能。这是不言而喻的。如果不采用分层式结构，很多业务可以直接造访数据库，以此获取相应的数据，如今却必须通过中间层来完成。</p><p>2、有时会导致级联的修改。这种修改尤其体现在自上而下的方向。如果在表示层中需要增加一个功能，为保证其设计符合分层式结构，可能需要在相应的业务逻辑层和数据访问层中都增加相应的代码。</p><p>3、增加了开发成本。</p><p><strong>规则</strong></p><p>三层结构的程序不是说把项目分成DAL, BLL, WebUI三个模块就叫三层了, 下面几个问题在你的项目里面：</p><ol><li><p><strong>UILayer里面只有少量(或者没有)SQL语句或者存储过程调用, 并且这些语句保证不会修改数据?</strong></p></li><li><p><strong>如果把UILayer拿掉, 你的项目还能在Interface/API的层次上提供所有功能吗?</strong></p></li><li><p><strong>你的DAL可以移植到其他类似环境的项目吗?</strong></p></li><li><p><strong>三个模块, 可以分别运行于不同的服务器吗?</strong></p></li></ol><p>如果不是所有答案都为YES, 那么你的项目还不能算是严格意义上的三层程序. 三层程序有一些需要约定遵守的规则：　</p><ol><li><p>最关键的, UI层只能作为一个外壳, 不能包含任何BizLogic的处理过程</p></li><li><p>设计时应该从BLL出发, 而不是UI出发. BLL层在API上应该实现所有BizLogic, 以面向对象的方式</p></li><li><p>不管数据层是一个简单的SqlHelper也好, 还是带有Mapping过的Classes也好, 应该在一定的抽象程度上做到系统无关</p></li><li><p>不管使用<code>COM+(</code>Enterprise Service), 还是<code>Remoting,</code> 还是<code>WebService</code>之类的远程对象技术, 不管部署的时候是不是真的分别部署到不同的服务器上, 最起码在设计的时候要做这样的考虑, 更远的, 还得考虑多台服务器通过负载均衡作集群</p></li></ol><p>所以考虑一个项目是不是应该应用三层/多层设计时, 先得考虑下是不是真的需要? 实际上大部分程序就开个WebApplication就足够了, 完全没必要作的这么复杂. 而多层结构, 是用于解决真正复杂的项目需求的。</p><h1 id="第8章-以用户登录为例解析三层架构逻辑实现"><a href="#第8章-以用户登录为例解析三层架构逻辑实现" class="headerlink" title="第8章 以用户登录为例解析三层架构逻辑实现"></a>第8章 以用户登录为例解析三层架构逻辑实现</h1><p>​        要以三层架构来实现一个业务，我们要从几个方面入手，按先后顺序来区分：</p><p>​            1、分析需求</p><p>​            2、拆解业务逻辑</p><p>​            3、确定调用关系</p><p>​            4、定义接口</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200702092155503.png" alt="image-20200702092155503"></p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200702092126026.png" alt="image-20200702092126026"></p><p>定义接口：</p><p>表示层：</p><blockquote><p>​    采集用户输入(输入：String用户名，String密码，<br>​                  输出：user对象(包含username和password属性))<br>​    显示登录信息(输入：login对象，输出：String login.loginStatus值)</p><p>​    显示错误信息(输入：login对象，输出：String login.errorInfo值)</p><p>1、思考：我们用scan对象来获取用户输入，为什么接口方法不定义成<br>(输入：scan对象或无输入对象，输出：user对象)？</p><p>2、思考：显示登录信息的输出，为什么不用login对象，而是要输出login.loginStatus的值？</p></blockquote><p>逻辑层：</p><blockquote><p>​    校验用户密码，生成登录状态<br>​        (输入：user对象,<br>​         输出：login对象(包含loginStatus和errorInfo属性))</p><p>​                  判断是否允许登录<br>​        (输入：login对象，<br>​         输出：boolean)</p><p>3、思考：校验用户密码方法的输入为什么不定义成接受拼好的查询SQL ?</p></blockquote><p>数据访问层：</p><blockquote><p>​    查询用户密码<br>​        (输入：user对象,<br>​         输出：String password) 如果没查到用户，返回null，否则返回数据库中             存的密码。)</p><p>​                  判断是否允许登录<br>​        (输入：login对象，<br>​         输出：boolean)</p><p>4、思考：查询用户密码，为什么不直接返回是否登录成功的true或false ?</p></blockquote><p>思考解答：</p><blockquote><p>1、考虑封装的通用性，scan是命令行实现，如果是web实现，则需要使用request对象，这样接口就做不到通用</p><p>2、输出也要考虑通用性，如果输出login对象，那么需要在表现层的其他方法或更上层中拆解login对象。如果是web页面带模板解析，还能拆解对象，但是命令行的展现终端是System.out，不具备拆解能力。</p><p>3、如果在逻辑层拼好sql，那么数据访问层只能使用数据库，不能适应文本文件存储底层的情况。</p><p>4、如果使用单点登录等框架，还可能需要调用远程方法来判断登录，这样可以预留实现空间。</p><p>​      三层架构功能要区分清晰，不要混淆。要尽量考虑可扩展性，哪怕牺牲复杂度。</p></blockquote><h1 id="第9章-数据访问层DAO实现"><a href="#第9章-数据访问层DAO实现" class="headerlink" title="第9章 数据访问层DAO实现"></a>第9章 数据访问层DAO实现</h1><h3 id="数据访问层概念"><a href="#数据访问层概念" class="headerlink" title="数据访问层概念"></a>数据访问层概念</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/aaa.png" alt="aaa"></p><blockquote><p>数据持久化目标：<br>      可以是数据库，也可以是普通文件，或xml。<br>      还可以是云端设备等，</p><p>设计数据访问层的一个目的就是<br>     可以广泛适应各种持久化设备，把设计复杂度屏蔽在层的内部，抽取出简单的接口供上层使用。</p></blockquote><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200702100823312.png" alt="image-20200702100823312"></p><p>​        如果不采用持久层设计，则导致业务代码与数据访问代码紧密耦合，可读性差，不利于后期修改和维护，不利于代码复用。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200702101058913.png" alt="image-20200702101058913"></p><p>​        采用数据访问层后，可以把数据访问代码封装在层内部，从而对上层调用屏蔽实现细节，提高系统适应性，提供代码复用率。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200702101336596.png" alt="image-20200702101336596"></p><p>​        通过针对数据访问层接口编程，可以在同一接口下实现不同数据库的持久类，从而简化上层调用，提高系统可扩展性。</p><h3 id="什么是DAO"><a href="#什么是DAO" class="headerlink" title="什么是DAO"></a>什么是DAO</h3><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200702143651922.png" alt="image-20200702143651922"></p><blockquote><p>1）、DAO全称是（Data Access Objects) ，数据库访问对象，主要的功能就是用于进行数据操作的，在程序的标准开发架构中属于数据访问层的操作。</p><p>2）、DAO层一般有接口和该接口的实现类！ 接口用于规范实现类！ 实现类一般用于用于操作数据库！ 一般操作修改，添加，删除数据库操作的步骤很相似，就写了一个公共类DAO类 ，修改，添加，删除数据库操作时 直接调用公共类DAO类！</p></blockquote><p>​        DAO设计模式可以减少代码量，增强程序的可移植性，提高代码的可读性。在整个DAO中实际上都是以接口为操作标准的，即：客户端依靠DAO实现的接口进行操作，而服务端要将接口进行具体的实现。DAO由以下几个部分组成。</p><p>1）、VO实体类：主要由属性、setter、getter方法组成，VO类中的属性与表中的字段相对应，每一个VO类的对象都表示表中的每一条记录，即包含属性和表中字段完全对应的类。</p><p>2）、DAO接口：主要定义操作的接口，定义一系列数据库的原子性操作，例如：增加、修改、删除、按ID查询等，即提供了用户所有的操作方法（就如老师给学生提供一些学习方法）。</p><p>3）、Impl(DAO实现类)： DAO接口的真实实现类，完成具体的数据库操作，但是不负责数据库的打开和关闭，即实现DAO中所有的方法（就如老师给提供的方法看你如何去完成）；</p><p>4）、DatabaseConnection数据库连接类: 专门负责数据库操作的类，即连接数据库并获取连接对象，执行SQL。</p><h3 id="如何实现数据访问层"><a href="#如何实现数据访问层" class="headerlink" title="如何实现数据访问层"></a>如何实现数据访问层</h3><h4 id="实现实体类"><a href="#实现实体类" class="headerlink" title="实现实体类"></a>实现实体类</h4><p><strong>实体类的特征：</strong></p><blockquote><p>​        1.属性一般用private修饰（getter/setter方法——-用public修饰）；</p><p>​        2.最好实现java.io.Serializable接口支持序列化机制，可以将该对象转换成字节序列而保存在磁盘上或在网络上传输；</p><p>​        3.对实体类提供无参构造方法，根据业务需要提供相应的有参构造方法；</p><p>​        4.定义属性serialVersionUID，解决不同版本之间的序列化问题（可选）</p><p>​           (private static final long serialVersionUID=2070056025956126480L)</p></blockquote><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20200702144730677.png" alt="image-20200702144730677"></p><p><strong>其次要实现接口类</strong></p><blockquote><p>​        接口类的定义要根据业务需求，在逻辑层的调用需求，都需要在接口层定义相应的接口。<br>​        只要是实现了此接口的实现类，都可以在逻辑层被正常调用，这样就实现了底层实现类更新扩展替换，而不影响到逻辑层代码的目的。</p></blockquote><p><strong>然后要实现接口的实现类</strong></p><blockquote><p>​         接口的实现类具体实现接口逻辑，根据底层存储的不同，可以有多种不同的实现类，每个实现类对应一种底层存储。最后要实现数据库操作工具类。避免数据库连接和关闭代码的重复使用，方便修改。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;悉知JDBC&quot;&gt;&lt;a href=&quot;#悉知JDBC&quot; class=&quot;headerlink&quot; title=&quot;悉知JDBC&quot;&gt;&lt;/a&gt;悉知JDBC&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🏠个人主页：&lt;a href=&quot;https://blog.csdn.net/qq_</summary>
      
    
    
    
    <category term="MySQL" scheme="https://manamn.space/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://manamn.space/tags/MySQL/"/>
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>初识MySQL索引</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/%E5%88%9D%E8%AF%86MySQL%E7%B4%A2%E5%BC%95/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/%E5%88%9D%E8%AF%86MySQL%E7%B4%A2%E5%BC%95/</id>
    <published>2022-10-16T14:51:37.000Z</published>
    <updated>2022-10-17T13:34:49.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识MySQL索引"><a href="#初识MySQL索引" class="headerlink" title="初识MySQL索引"></a>初识MySQL索引</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始  —————</strong></p><blockquote><p>索引这个东西，在我还没接触到MySQL的学习中，就已经听到无数次了，现在正好赶上了MySQL阶段的学习，那就一起来啃一啃索引这个硬骨头!!!</p></blockquote><p>可以毫不夸张的说，系统中 SQL 的好坏，是能直接决定你系统的快慢的。但是在优化之前大家是否想过一个问题？</p><p>那就是：<code>我们优化的原则是什么？</code> <code>优化SQL的理论基础是什么？</code></p><p>所以说了这么多只想告诉大家，在真正的开始索引优化之前，我们需要彻底搞明白索引的原理。这样再谈优化你将觉得更丝滑~</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/image-20220812222205065.png" alt="image-20220812222205065"></p><h1 id="1-索引的本质"><a href="#1-索引的本质" class="headerlink" title="1.索引的本质"></a>1.索引的本质</h1><p>索引的本质是一种排好序的数据结构。这个我相信其实大家并不陌生，因为谈到索引很多人自然而然的就会联想到字典中或者是文章中的目录。</p><p><strong>下面谈谈我对索引的看法吧</strong></p><blockquote><p>索引是对数据库表中的字段 （可以是一个字段也可以是多个字段）的值进行排序的数据结构。索引就像一个数的目录一样，可以快速访问我们想要访问的目录，在数据库中就是可以快速访问到数据库表中具有一定特点的数据信息。这个只是索引的表面，实际上索引的底层是一些高级的数据结构，只不过我们看不到，在数据库中已经帮我们写好了，在数据库中其实有很多种类的数据结构，常见的有<code>平衡二叉树</code>，<code>红黑树</code>，<code>Hash表</code>，<code>B+树</code>等，但是在MySQL数据库中主要是<strong>B+树</strong>。</p></blockquote><h2 id="1️⃣索引的优缺点"><a href="#1️⃣索引的优缺点" class="headerlink" title="1️⃣索引的优缺点"></a>1️⃣索引的优缺点</h2><p>索引可以大大提高MySQL的检索速度，为什么不对表中的每一个列创建一个索引呢？</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a><code>优点</code></h3><ol><li>索引大大减小了服务器需要扫描的数据量，从而大大加快数据的检索速度，这也是创建索引的最主要的原因。</li><li>索引可以帮助服务器避免排序和创建临时表</li><li>索引可以将随机IO变成顺序IO</li><li>索引对于InnoDB（对索引支持行级锁）非常重要，因为它可以让查询锁更少的元组，提高了表访问并发性</li><li>关于InnoDB、索引和锁：InnoDB在二级索引上使用共享锁（读锁），但访问主键索引需要排他锁（写锁）</li><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li><li>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</li><li>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</li><li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><code>缺点</code></h3><ol><li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加</li><li>索引需要占物理空间，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间，如果需要建立聚簇索引，那</li><li>需要占用的空间会更大</li><li>对表中的数据进行增、删、改的时候，索引也要动态的维护，这就降低了整数的维护速度</li><li>如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</li><li>对于非常小的表，大部分情况下简单的全表扫描更高效；</li></ol><h2 id="2️⃣创建索引准则"><a href="#2️⃣创建索引准则" class="headerlink" title="2️⃣创建索引准则"></a>2️⃣创建索引准则</h2><p>索引是建立在数据库表中的某些列的上面。因此，在创建索引的时候，应该仔细考虑在哪些列上可以创建索引，在哪些列上不能创建索引。</p><h3 id="应该创建索引的列"><a href="#应该创建索引的列" class="headerlink" title="应该创建索引的列"></a><code>应该创建索引的列</code></h3><ul><li>在经常需要搜索的列上，可以加快搜索的速度</li><li>在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构</li><li>在经常用在连接（JOIN）的列上，这些列主要是一外键，可以加快连接的速度</li><li>在经常需要根据范围（&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN）进行搜索的列上创建索引，因为索引已经排序，其指定的范是连续的</li><li>在经常需要排序（order by）的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；</li><li>在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。</li></ul><h3 id="不该创建索引的列"><a href="#不该创建索引的列" class="headerlink" title="不该创建索引的列"></a><code>不该创建索引的列</code></h3><ul><li>对于那些在查询中很少使用或者参考的列不应该创建索引。</li><li>若列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。</li><li>对于那些只有很少数据值或者重复值多的列也不应该增加索引。</li><li>这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，<code>即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。</code></li><li>对于那些定义为text, image和bit数据类型的列不应该增加索引。这些列的数据量要么相当大，要么取值很少。</li><li>当该列修改性能要求远远高于检索性能时，不应该创建索引。<strong>（修改性能和检索性能是互相矛盾的）</strong></li></ul><h1 id="2-索引的分类"><a href="#2-索引的分类" class="headerlink" title="2.索引的分类"></a>2.索引的分类</h1><h2 id="2-1-主键索引"><a href="#2-1-主键索引" class="headerlink" title="2.1 主键索引"></a>2.1 主键索引</h2><blockquote><p>主键索引：一张表只能有一个主键索引，不允许重复、不允许为 NULL；</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TableName <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(column_list); </span><br></pre></td></tr></table></figure><h2 id="2-2-唯一索引"><a href="#2-2-唯一索引" class="headerlink" title="2.2 唯一索引"></a>2.2 唯一索引</h2><blockquote><p>唯一索引：数据列不允许重复，允许为 NULL 值，一张表可有多个唯一索引，索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX IndexName <span class="keyword">ON</span> `TableName` (`字段名`(length));</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TableName <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (column_list); </span><br></pre></td></tr></table></figure><h2 id="2-3-普通索引"><a href="#2-3-普通索引" class="headerlink" title="2.3 普通索引"></a>2.3 普通索引</h2><blockquote><p>普通索引：一张表可以创建多个普通索引，一个普通索引可以包含多个字段，允许数据重复，允许 NULL 值插入；</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX IndexName <span class="keyword">ON</span> `TableName`(`字段名`(length));</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TableName <span class="keyword">ADD</span> INDEX IndexName(`字段名`(length));</span><br></pre></td></tr></table></figure><h2 id="2-4-全局索引"><a href="#2-4-全局索引" class="headerlink" title="2.4 全局索引"></a>2.4 全局索引</h2><blockquote><p>全文索引：它查找的是文本中的关键词，主要用于全文检索。<code>一般很少用</code></p></blockquote><p>全文索引：FULLTEXT索引用于全文搜索。只有InnoDB和 MyISAM存储引擎支持，FULLTEXT索引仅适用于 CHAR， VARCHAR和 TEXT列。</p><p>​        <code>创建全文索引</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tc_10;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tc_10(</span><br><span class="line">  aaa <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">  bbb <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  ccc datetime,</span><br><span class="line">  fulltext i_tc10_a(bbb)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tc_10 <span class="keyword">add</span> fulltext i_tc10_b(bbb);</span><br></pre></td></tr></table></figure><p>​        删除全文索引，与删除普通索引一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index i_tc10_b on tc_10;</span><br></pre></td></tr></table></figure><h1 id="3-操作索引"><a href="#3-操作索引" class="headerlink" title="3. 操作索引"></a>3. 操作索引</h1><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">索引名称 index_name 是可以省略的，省略后，索引的名称和索引列名相同。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建普通索引 </span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX index_name <span class="keyword">ON</span> table_name(col_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX index_name <span class="keyword">ON</span> table_name(col_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建普通组合索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX index_name <span class="keyword">ON</span> table_name(col_name_1,col_name_2);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建唯一组合索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX index_name <span class="keyword">ON</span> table_name(col_name_1,col_name_2);</span><br></pre></td></tr></table></figure><h2 id="修改表结构创建索引"><a href="#修改表结构创建索引" class="headerlink" title="修改表结构创建索引"></a>修改表结构创建索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> INDEX index_name(col_name);</span><br></pre></td></tr></table></figure><h2 id="创建表时直接指定索引"><a href="#创建表时直接指定索引" class="headerlink" title="创建表时直接指定索引"></a>创建表时直接指定索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">    ID <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    col_name <span class="type">VARCHAR</span> (<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    INDEX index_name (col_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 直接删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表结构删除索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> INDEX index_name;</span><br></pre></td></tr></table></figure><p><strong>删除唯一索引的方法与删除普通索引相同。</strong></p><h2 id="其它相关命令"><a href="#其它相关命令" class="headerlink" title="其它相关命令"></a>其它相关命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">desc</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看生成表的SQL</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看索引信息（包括索引结构等）</span></span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span>  table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看SQL执行时间（精确到小数点后8位）</span></span><br><span class="line"><span class="keyword">set</span> profiling <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">SQL...</span><br><span class="line"><span class="keyword">show</span> profiles;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识MySQL索引&quot;&gt;&lt;a href=&quot;#初识MySQL索引&quot; class=&quot;headerlink&quot; title=&quot;初识MySQL索引&quot;&gt;&lt;/a&gt;初识MySQL索引&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🏠个人主页：&lt;a href=&quot;https://blog.</summary>
      
    
    
    
    <category term="MySQL" scheme="https://manamn.space/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://manamn.space/tags/MySQL/"/>
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>一文了解视图、存储过程、触发器</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3%E8%A7%86%E5%9B%BE%E3%80%81%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E3%80%81%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3%E8%A7%86%E5%9B%BE%E3%80%81%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E3%80%81%E8%A7%A6%E5%8F%91%E5%99%A8/</id>
    <published>2022-10-16T14:51:18.000Z</published>
    <updated>2022-10-17T13:35:43.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一文了解视图、存储过程、触发器"><a href="#一文了解视图、存储过程、触发器" class="headerlink" title="一文了解视图、存储过程、触发器"></a>一文了解视图、存储过程、触发器</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始  —————</strong></p><h1 id="视图操作"><a href="#视图操作" class="headerlink" title="视图操作"></a>视图操作</h1><h4 id="视图是什么"><a href="#视图是什么" class="headerlink" title="视图是什么"></a>视图是什么</h4><p>​        视图（view）是一种虚拟存在的表，是一个逻辑表，本身并不包含数据。作为一个select语句保存在数据字典中的。</p><p>　　通过视图，可以展现基表的部分数据；视图数据来自定义视图的查询中使用的表，使用查询动态生成。</p><p>​        基表：用来创建视图的表叫做基表 base table。</p><h4 id="为什么要使用视图"><a href="#为什么要使用视图" class="headerlink" title="为什么要使用视图"></a>为什么要使用视图</h4><p>​        因为视图的诸多优点，如下</p><p>　　1）简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。</p><p>　　2）安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。</p><p>　　3）数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</p><p>总而言之，使用视图的大部分情况是为了<strong>保障数据安全性，提高查询效率。</strong></p><h4 id="如何创建视图"><a href="#如何创建视图" class="headerlink" title="如何创建视图"></a>如何创建视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] [ALGORITHM <span class="operator">=</span> &#123;UNDEFINED <span class="operator">|</span> <span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE&#125;]</span><br><span class="line"><span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> OPTION]</span><br></pre></td></tr></table></figure><blockquote><p>1）OR REPLACE：表示替换已有视图</p><p>2）ALGORITHM：表示视图选择算法，默认算法是UNDEFINED(未定义的)：MySQL自动选择要使用的算法 ；merge合并；temptable临时表</p><p>3）select_statement：表示select语句</p><p>4）[WITH [CASCADED | LOCAL] CHECK OPTION]：表示视图在更新时保证在视图的权限范围之内</p><p>　　cascade是默认值，表示更新视图的时候，要满足视图和表的相关条件</p><p>​        local表示更新视图的时候，要满足该视图定义的一个条件即可。</p></blockquote><p>例子：创建单表视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_stu1 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v_stu1;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_stu2 <span class="keyword">as</span> <span class="keyword">select</span> sid, sname <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v_stu2;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_stu3(学生编号, 学生姓名) <span class="keyword">as</span> <span class="keyword">select</span> sid, sname <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v_stu3;</span><br></pre></td></tr></table></figure><p>例子：创建多表关联视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_tc1 <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> tname, cname <span class="keyword">from</span> teacher, course <span class="keyword">where</span> tid<span class="operator">=</span>teacher_id;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_tc2(教师名称，担任课程) <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> tname, cname <span class="keyword">from</span> teacher, course <span class="keyword">where</span> tid<span class="operator">=</span>teacher_id;</span><br></pre></td></tr></table></figure><p>​        视图将我们不需要的数据过滤掉，将相关的列名用我们自定义的列名替换。视图作为一个访问接口，不管基表的表结构和表名有多复杂。</p><p> 　    如果创建视图时不明确指定视图的列名，那么列名就和定义视图的select子句中的列名完全相同；</p><p>　　如果显式的指定视图的列名就按照指定的列名。</p><p><strong>注意：显示指定视图列名，要求视图名后面的列的数量必须匹配select子句中的列的数量。</strong></p><p>​        视图存在2种执行算法。</p><blockquote><p>​        marge：合并的执行方式，指在执行视图时，将视图的sql语句与外部查询视图的sql混合在一起，一次执行。</p><p>​        temptable：临时表模式，在执行视图时，先执行视图的sql语句，生成一个临时表，再在临时表的基础上执行查询视图的sql。</p><p>​        undefined：未定义模式，mysql会在创建时，自动确定使用哪种执行算法。</p></blockquote><h4 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h4><p>​        视图一旦创建完毕，就可以像一个普通表那样使用，视图主要用来查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> view_name;</span><br></pre></td></tr></table></figure><p>​        还可以使用 show create view 语句查看视图信息。</p><p>​        查看库中存在哪些视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.views <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="更改视图"><a href="#更改视图" class="headerlink" title="更改视图"></a>更改视图</h4><p>​        CREATE OR REPLACE VIEW语句修改视图</p><p>​        基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> view_name <span class="keyword">as</span> <span class="keyword">select</span>语句;</span><br></pre></td></tr></table></figure><p>​        <strong>在视图存在的情况下可对视图进行修改，视图不存在的情况下可创建视图。</strong></p><p>​        还可以使用ALTER语句修改视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span></span><br><span class="line">    [ALGORITHM <span class="operator">=</span> &#123;UNDEFINED <span class="operator">|</span> <span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE&#125;]</span><br><span class="line">    [DEFINER <span class="operator">=</span> &#123; <span class="keyword">user</span> <span class="operator">|</span> <span class="built_in">CURRENT_USER</span> &#125;]</span><br><span class="line">    [<span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;]</span><br><span class="line"><span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line">    [<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> OPTION]</span><br></pre></td></tr></table></figure><p>​        注意：修改视图是指修改数据库中已存在的表的定义，当基表的某些字段发生改变时，可以通过修改视图来保持视图和基本表之间一致。</p><h4 id="操作视图数据"><a href="#操作视图数据" class="headerlink" title="操作视图数据"></a>操作视图数据</h4><p>​        <strong>因为视图本身没有数据，因此对视图进行的dml操作最终都体现在基表中</strong></p><p>​        当然，视图的DML操作，不是所有的视图都可以做DML操作。</p><p>有下列内容之一，视图不能做DML操作：</p><blockquote><p>　　　　①select子句中包含distinct</p><p>　　　　②select子句中包含组函数</p><p>　　　　③select语句中包含group by子句</p><p>　　　　④select语句中包含order by子句</p><p>　　　　⑤select语句中包含union 、union all等集合运算符</p><p>　　　　⑥where子句中包含相关子查询</p><p>　　　　⑦from子句中包含多个表</p><p>　　　　⑧如果视图中有计算列，则不能更新</p><p>　　　　⑨如果基表中有某个具有非空约束的列未出现在视图定义中，则不能做insert操作</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_stu4 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> v_stu4 <span class="keyword">values</span>(<span class="number">18</span>,<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;赵四&#x27;</span>,<span class="string">&#x27;2002-2-3&#x27;</span>);</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> v_stu4 <span class="keyword">where</span> sid<span class="operator">=</span><span class="number">18</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h4 id="drop删除视图"><a href="#drop删除视图" class="headerlink" title="drop删除视图"></a>drop删除视图</h4><p>　　删除视图是指删除数据库中已存在的视图，删除视图时，只能删除视图的定义，不会删除数据，也就是说不动基表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [IF <span class="keyword">EXISTS</span>] view_name [, view_name] ...</span><br></pre></td></tr></table></figure><h4 id="使用WITH-CHECK-OPTION约束"><a href="#使用WITH-CHECK-OPTION约束" class="headerlink" title="使用WITH CHECK OPTION约束"></a>使用WITH CHECK OPTION约束</h4><p>​        对于可以执行DML操作的视图，定义时可以带上WITH CHECK OPTION约束</p><p>​        作用：对视图所做的DML操作的结果，不能违反视图的WHERE条件的限制。</p><p>​        示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_stu5 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> birthday <span class="operator">&gt;</span> <span class="string">&#x27;2005-1-1&#x27;</span> <span class="keyword">with</span> <span class="keyword">check</span> option;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> v_stu5 <span class="keyword">values</span>(<span class="number">19</span>,<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;孙五&#x27;</span>,<span class="string">&#x27;2002-2-3&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>MySQL 5.0 版本开始支持存储过程。</p><p>​        <strong>存储过程（Stored Procedure）</strong>是一种在数据库中存储的复杂程序，以便外部程序调用的一种数据库对象。</p><p>​        存储过程是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。</p><p>​        存储过程思想上很简单，就是数据库 SQL 语言层面的<strong>代码封装与重用</strong>。</p><p>​        <strong>存储过程通常有以下优点：</strong></p><p>​        存储过程增强了SQL语言的功能和灵活性。存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</p><p>​        存储过程允许标准组件是编程。存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改，对应用程序源代码毫无影响。</p><p>​        存储过程能实现较快的执行速度。如果某一操作包含大量的Transaction-SQL代码或分别被多次执行，那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。在首次运行一个存储过程时查询，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句在每次运行时都要进行编译和优化，速度相对要慢一些。</p><p>​        存储过程能过减少网络流量。针对同一个数据库对象的操作（如查询、修改），如果这一操作所涉及的Transaction-SQL语句被组织程存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大增加了网络流量并降低了网络负载。</p><p>​        存储过程可被作为一种安全机制来充分利用。系统管理员通过执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全。</p><p>​        <strong>存储过程的缺点</strong></p><p>​        存储过程，往往定制化于特定的数据库上，因为支持的编程语言不同。当切换到其他厂商的数据库系统时，需要重写原有的存储过程。</p><p>​        存储过程的性能调校与撰写，受限于各种数据库系统。</p><h4 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">    [DEFINER <span class="operator">=</span> &#123; <span class="keyword">user</span> <span class="operator">|</span> <span class="built_in">CURRENT_USER</span> &#125;]</span><br><span class="line">　<span class="keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]])</span><br><span class="line">    [characteristic ...] routine_body</span><br><span class="line"><span class="comment">-- 声明过程名称、参数列表</span></span><br><span class="line"> </span><br><span class="line">proc_parameter:</span><br><span class="line">    [ <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">INOUT</span> ] param_name type</span><br><span class="line"> </span><br><span class="line">characteristic:</span><br><span class="line">    COMMENT <span class="string">&#x27;string&#x27;</span></span><br><span class="line">  <span class="operator">|</span> <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line">  <span class="operator">|</span> [<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line">  <span class="operator">|</span> &#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA &#125;</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;</span><br><span class="line"><span class="comment">-- 这是附加的一些存储过程描述信息，一般很少使用，这里不做详解</span></span><br><span class="line"> </span><br><span class="line">routine_body:</span><br><span class="line">　　Valid <span class="keyword">SQL</span> routine statement</span><br><span class="line"><span class="comment">-- SQL路由描述，一般也很少使用</span></span><br><span class="line"> </span><br><span class="line">[begin_label:] <span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- 开始存储过程标记</span></span><br><span class="line">　　[statement_list]</span><br><span class="line"><span class="comment">-- 存储过程主体</span></span><br><span class="line">　　　　……　　　</span><br><span class="line"><span class="keyword">END</span> [end_label]</span><br><span class="line"><span class="comment">-- 结束存储过程标记</span></span><br></pre></td></tr></table></figure><h4 id="一个最简单的无参数存储过程示例"><a href="#一个最简单的无参数存储过程示例" class="headerlink" title="一个最简单的无参数存储过程示例"></a>一个最简单的无参数存储过程示例</h4><p>​        我们来创建一个最简单的存储过程，没有入参出参、内部只有一条语句，向测试表中插入一条语句。</p><p>​        数据准备:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ptest_01(</span><br><span class="line">  pid <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">pname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​        创建存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p_01()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>​        创建完成后，我们调用一下此存储过程，查看效果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> p_01();</span><br></pre></td></tr></table></figure><h4 id="带有入参的存储过程示例"><a href="#带有入参的存储过程示例" class="headerlink" title="带有入参的存储过程示例"></a>带有入参的存储过程示例</h4><p>​        在存储过程中传参分 <strong>in ,out , inout</strong> 三种</p><p>​        <strong>in 可以输出从外部传入的变量 不会改变传进变量本来的值</strong></p><p>​        创建存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p_02(<span class="keyword">in</span> name <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(name);</span><br><span class="line">  <span class="keyword">select</span> name <span class="keyword">as</span> name1;</span><br><span class="line">  <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;hahaha&#x27;</span>;</span><br><span class="line">  <span class="keyword">select</span> name <span class="keyword">as</span> name2;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>​        创建完成后，我们调用一下此存储过程，查看效果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@name</span><span class="operator">=</span><span class="string">&#x27;www&#x27;</span>;</span><br><span class="line"><span class="keyword">call</span> p_02(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@name</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ptest_01;</span><br></pre></td></tr></table></figure><p>​        可以发现，<strong>in 参数在过程体中被改变后，改变的值不能带出过程体，过程体外还是原值。</strong></p><h4 id="带有出参的存储过程示例"><a href="#带有出参的存储过程示例" class="headerlink" title="带有出参的存储过程示例"></a>带有出参的存储过程示例</h4><p>​        <strong>out 不能输出从外部传进的值 会改变传进变量本来的值</strong></p><p>​        创建存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p_03(<span class="keyword">out</span> name <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(name);</span><br><span class="line">  <span class="keyword">select</span> name <span class="keyword">as</span> name1;</span><br><span class="line">  <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;hahaha&#x27;</span>;</span><br><span class="line">  <span class="keyword">select</span> name <span class="keyword">as</span> name2;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>​        创建完成后，我们调用一下此存储过程，查看效果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@name</span><span class="operator">=</span><span class="string">&#x27;rrr&#x27;</span>;</span><br><span class="line"><span class="keyword">call</span> p_03(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@name</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ptest_01;</span><br></pre></td></tr></table></figure><p>​        </p><h4 id="带有出入参的存储过程示例"><a href="#带有出入参的存储过程示例" class="headerlink" title="带有出入参的存储过程示例"></a>带有出入参的存储过程示例</h4><p><strong>inout 既可以从外部传进的值，也可以改变传进变量本来的值</strong></p><p>​        创建存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p_04(<span class="keyword">inout</span> name <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(name);</span><br><span class="line">  <span class="keyword">select</span> name <span class="keyword">as</span> name1;</span><br><span class="line">  <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;hahaha&#x27;</span>;</span><br><span class="line">  <span class="keyword">select</span> name <span class="keyword">as</span> name2;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>​        创建完成后，我们调用一下此存储过程，查看效果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@name</span><span class="operator">=</span><span class="string">&#x27;rrr&#x27;</span>;</span><br><span class="line"><span class="keyword">call</span> p_04(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@name</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ptest_01;</span><br></pre></td></tr></table></figure><p>​        可以发现，<strong>inout 参数可以传值进入过程体，过程题内部被赋值后的值可以带出过程体。</strong></p><h4 id="查看存储过程"><a href="#查看存储过程" class="headerlink" title="查看存储过程"></a>查看存储过程</h4><p>​        查看某个数据库中建立的存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">procedure</span> status <span class="keyword">where</span> db<span class="operator">=</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.routines</span><br><span class="line"><span class="keyword">where</span> routine_schema<span class="operator">=</span><span class="string">&#x27;test&#x27;</span> <span class="keyword">and</span> routine_type<span class="operator">=</span><span class="string">&#x27;PROCEDURE&#x27;</span>;</span><br></pre></td></tr></table></figure><p>​        查看创建存储过程的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> p_06;</span><br></pre></td></tr></table></figure><h4 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> p_05; </span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> p_06; </span><br></pre></td></tr></table></figure><h4 id="存储过程体语法"><a href="#存储过程体语法" class="headerlink" title="存储过程体语法"></a>存储过程体语法</h4><h5 id="变量的声明、引用、赋值"><a href="#变量的声明、引用、赋值" class="headerlink" title="变量的声明、引用、赋值"></a>变量的声明、引用、赋值</h5><p>​        在MySQL编程中，存在两种变量：</p><p>​        <strong>用户变量（可以在过程体内外声明，生存周期为当前会话，两个不同会话之间，同名的变量，不会互相覆盖）。</strong></p><p>​        <strong>局部变量（只能在过程体中声明，离开过程体之后，变量被销毁）。</strong></p><p>​        用户变量不需要声明，可以直接通过赋值来创建变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="variable">@aaa</span> <span class="operator">=</span> <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>​        局部变量使用 declare 关键字声明，使用 set 关键字赋值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> variable_name [,variable_name...] datatype [<span class="keyword">DEFAULT</span> <span class="keyword">value</span>];</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p_05()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> abc <span class="type">int</span> <span class="keyword">default</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">set</span> abc <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="keyword">select</span> abc;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">select</span> abc;</span><br></pre></td></tr></table></figure><p>​        除了使用 set 赋值，还可以通过 select 语句赋值；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pname <span class="keyword">from</span> ptest_01 limit <span class="number">1</span> <span class="keyword">into</span> <span class="variable">@n1</span>;</span><br><span class="line"><span class="keyword">select</span> pname <span class="keyword">into</span> <span class="variable">@n2</span> <span class="keyword">from</span> ptest_01 limit <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@n1</span>, <span class="variable">@n2</span>;</span><br><span class="line"></span><br><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p_06()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> n3, n4 <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">&#x27;000&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> pname <span class="keyword">from</span> ptest_01 limit <span class="number">1</span> <span class="keyword">into</span> n3;</span><br><span class="line">    <span class="keyword">select</span> pname <span class="keyword">into</span> n4 <span class="keyword">from</span> ptest_01 limit <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">select</span> n3, n4;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> p_06();</span><br></pre></td></tr></table></figure><p>​        <strong>注意：使用 select 语句赋值时，返回结果集必须是单行单值。</strong></p><h5 id="程序控制结构-分支结构"><a href="#程序控制结构-分支结构" class="headerlink" title="程序控制结构 - 分支结构"></a>程序控制结构 - 分支结构</h5><h6 id="if-then-else-语句"><a href="#if-then-else-语句" class="headerlink" title="if-then-else 语句"></a>if-then-else 语句</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p_07(<span class="keyword">in</span> n1 <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">if(n1 <span class="operator">&gt;=</span> <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">   <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;n1 &gt;= 0&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;n1 &lt; 0&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> p_07();</span><br></pre></td></tr></table></figure><p>​        <strong>跟js中的语法类似，但是分支判断开始时，if的判断逻辑后面要加入 then ，结束时需要加入 end if;</strong></p><h6 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p_08(<span class="keyword">in</span> n1 <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">case</span>(n1)</span><br><span class="line">  <span class="keyword">when</span>(<span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;n1 = 1&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;1111&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;11111&#x27;</span>);</span><br><span class="line">  <span class="keyword">when</span>(<span class="number">2</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;n1 = 2&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;2222&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;22222&#x27;</span>);</span><br><span class="line">  <span class="keyword">when</span>(<span class="number">3</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;n1 = 3&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;3333&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;33333&#x27;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;n1 = other&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> p_08();</span><br></pre></td></tr></table></figure><p>​        <strong>与 js 相比，没有  switch 关键字，由 case 代替 switch，when 后面加枚举值，在后面加 then。同时不需要break。结束时加入 end case。</strong></p><h5 id="程序控制结构-循环结构"><a href="#程序控制结构-循环结构" class="headerlink" title="程序控制结构 - 循环结构"></a>程序控制结构 - 循环结构</h5><h6 id="while…end-while-循环"><a href="#while…end-while-循环" class="headerlink" title="while…end while 循环"></a>while…end while 循环</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p_11(<span class="keyword">in</span> n1 <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> n2 <span class="type">int</span>;</span><br><span class="line"><span class="keyword">set</span> n2 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">while(n2 <span class="operator">&lt;</span> n1 ) do</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(concat(<span class="string">&#x27;n2 = &#x27;</span>,n2));</span><br><span class="line">  <span class="keyword">set</span> n2 <span class="operator">=</span> n2 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;while is over.&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> p_11(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>​        <strong>while(判断逻辑表达式) 后面要加 do，结束时写 end while; 类似 js 中的 while 循环 。</strong></p><h6 id="repeat····-end-repea-循环"><a href="#repeat····-end-repea-循环" class="headerlink" title="repeat···· end repea 循环"></a>repeat···· end repea 循环</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p_12(<span class="keyword">in</span> n1 <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> n3 <span class="type">int</span>;</span><br><span class="line"><span class="keyword">set</span> n3 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">repeat</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(concat(<span class="string">&#x27;n3 = &#x27;</span>,n3));</span><br><span class="line">  <span class="keyword">set</span> n3 <span class="operator">=</span> n3 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  until(n3 <span class="operator">&gt;</span> n1)</span><br><span class="line"><span class="keyword">end</span> repeat;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;repeat is over.&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> p_12(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>​        <strong>类型 js 中的 do … while 循环，不判断条件，直接进循环体，在 until 时判断条件，为逻辑真时退出循环。结束时写 end repeat; 关键字。</strong></p><h6 id="loop-·····endloop-循环"><a href="#loop-·····endloop-循环" class="headerlink" title="loop ·····endloop 循环"></a>loop ·····endloop 循环</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p_13(<span class="keyword">in</span> n1 <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> n4 <span class="type">int</span>;</span><br><span class="line"><span class="keyword">set</span> n4 <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">loop_lable: loop</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(concat(<span class="string">&#x27;n4 = &#x27;</span>,n4));</span><br><span class="line">  <span class="keyword">set</span> n4 <span class="operator">=</span> n4 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  if(n4 <span class="operator">&gt;</span> n1) <span class="keyword">then</span> leave loop_lable;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ptest_01(pname) <span class="keyword">value</span>(<span class="string">&#x27;loop is over.&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> p_13(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>​        <strong>loop 循环本质上是一个死循环，靠循环体中加入强制跳出循环语句，配合标号语句来标记 loop 头部，来结束循环。</strong></p><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>触发器（trigger）：监视某种情况，并触发某种操作，它是提供给程序员和数据分析员来保证数据完整性的一种方法，它是与表事件相关的特殊的存储过程，<strong>它的执行不是由程序调用</strong>，也不是手工启动，而是由事件来触发，例如当对一个表进行操作（ <strong>insert，delete， update</strong>）时就会激活它执行。</p><h4 id="触发器的作用"><a href="#触发器的作用" class="headerlink" title="触发器的作用"></a>触发器的作用</h4><p>​    触发器经常用于加强数据的完整性约束和业务规则等。 触发器依赖于四个要素：<br>​        1.监视地点(table)<br>​        2.监视事件(insert/update/delete)<br>​        3.触发时间(after/before)<br>​        4.触发事件(内部执行逻辑)</p><p>​    完成作用是：</p><p>​        <strong>在写入数据前后，强制检验或者转换数据(保证护数据安全)</strong></p><p>​    错误处理时：</p><p>​        <strong>触发器发生错误时，前面用户已经执行成功的操作会被撤销，类似事务的回滚</strong></p><h4 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h4><h5 id="创建语法-1"><a href="#创建语法-1" class="headerlink" title="创建语法"></a>创建语法</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delimiter $ <span class="operator">/</span><span class="operator">/</span>设置MySQL执行结束标志，默认为;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tg_name  <span class="comment">-- 触发器名称</span></span><br><span class="line">  after<span class="operator">|</span>before  <span class="comment">-- 触发时间</span></span><br><span class="line">  <span class="keyword">insert</span><span class="operator">|</span><span class="keyword">update</span><span class="operator">|</span><span class="keyword">delete</span>  <span class="comment">-- 监视事件 </span></span><br><span class="line">  <span class="keyword">on</span> table_name <span class="comment">-- 监控表名</span></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span>  <span class="comment">-- 固定写法</span></span><br><span class="line">  <span class="keyword">begin</span>  <span class="comment">-- 开始触发器内部逻辑</span></span><br><span class="line">    <span class="keyword">update</span> goods <span class="keyword">set</span> num<span class="operator">=</span>num<span class="number">-2</span> <span class="keyword">where</span> gid <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span>$  <span class="comment">-- 结束触发器内部逻辑</span></span><br><span class="line">delimiter ;  <span class="operator">/</span><span class="operator">/</span>重新将MySQL执行结束标志设置为;</span><br></pre></td></tr></table></figure><p>​        <strong>注意：</strong>因为mysql的执行结束标识默认是;。如果运行以上的sql语句，mysql碰到;时会自动停止执行，然后end语句就执行不到了。所以我们需要先将mysql的结束标识符改为其他的字符，一般都选用$或者$$，这里选用$来作为执行的结束标识。</p><p>​    触发时间：当 SQL 指令发生时，会令行中数据发生变化，而每张表中对应的行有两种状态：数据操作前和操作后</p><p><strong>before</strong>：表中数据发生改变前的状态<br><strong>after</strong>：表中数据发生改变后的状态<br><strong>PS：如果 before 触发器失败或者语句本身失败，将不执行 after 触发器(如果有的话)</strong></p><p>​    触发事件：触发器是针对数据发送改变才会被触发，对应的操作只有</p><p><strong>INSERT</strong><br><strong>DELETE</strong><br><strong>UPDATE</strong></p><p>注意事项：<br>        触发器名必须在每个表中唯一，但不是在每个数据库中唯一，即同一数据库中的两个表可能具有相同名字的触发器，每个表的每个事件每次只允许一个触发器，因此，每个表最多支持 <strong>6</strong> 个触发器，<strong>before/after insert、before/after delete、before/after update</strong></p><h5 id="简单触发器示例1"><a href="#简单触发器示例1" class="headerlink" title="简单触发器示例1"></a>简单触发器示例1</h5><p>​        订单货品示例，数据准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods(</span><br><span class="line">  gid <span class="type">int</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  num <span class="type">smallint</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ord(</span><br><span class="line">  oid <span class="type">int</span>,</span><br><span class="line">  gid <span class="type">int</span>,</span><br><span class="line">  much <span class="type">smallint</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="number">40</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;dog&#x27;</span>,<span class="number">63</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;pig&#x27;</span>,<span class="number">87</span>);</span><br></pre></td></tr></table></figure><p>​        业务目标</p><p>​                在ord订单表新增一条时，将goods表中 gid=1 的货品数量减少2。</p><p>​        触发器逻辑分析</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">监视谁：ord（订单表）</span><br><span class="line">监视动作：<span class="keyword">insert</span>（插入操作）</span><br><span class="line">触发时间：after（在插入操作后触发）</span><br><span class="line">触发事件：<span class="keyword">update</span>（触发更新操作）</span><br></pre></td></tr></table></figure><p>​        创建触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t1 </span><br><span class="line">  after <span class="keyword">insert</span></span><br><span class="line">  <span class="keyword">on</span> ord</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">update</span> goods <span class="keyword">set</span> num<span class="operator">=</span>num<span class="number">-2</span> <span class="keyword">where</span> gid <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><p>​        我们来检查触发器有没有生效。</p><h5 id="简单触发器示例2"><a href="#简单触发器示例2" class="headerlink" title="简单触发器示例2"></a>简单触发器示例2</h5><p>​        学生成绩示例，数据准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu (</span><br><span class="line">  stu_id <span class="type">int</span> <span class="keyword">PRIMARY</span> key auto_increment,</span><br><span class="line">  stu_code <span class="type">int</span>,</span><br><span class="line">  stu_name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">table</span> sc (</span><br><span class="line">  sc_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  stu_code <span class="type">int</span>,</span><br><span class="line">  stu_score <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​    业务目标 ：</p><p>​        在插入学生表一条记录的时候，插入成绩表一条记录，写入学生编号，成绩为80</p><p>​    触发器逻辑分析</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">监视谁：stu（学生表）</span><br><span class="line">监视动作：<span class="keyword">insert</span>（插入操作）</span><br><span class="line">触发时间：after（在插入操作后触发）</span><br><span class="line">触发事件：<span class="keyword">insert</span>（触发更新操作）</span><br></pre></td></tr></table></figure><p>​    创建触发器</p><p>​        <strong>触发器针对的是数据库中的每一行记录，每行数据在操作前后都会有一个对应的状态，触发器将没有操作之前的状态保存到 old 关键字中，将操作后的状态保存到 new 中</strong>。</p><p>需要注意的是，old 和 new 不是所有触发器都有<br><strong>INSERT型触发器    没有 old，只有 new，new 表示将要(插入前)或者已经增加(插入后)的数据</strong><br><strong>UPDATE型触发器    既有 old 也有 new，old 表示更新之前的数据，new 表示更新之后的数据</strong><br><strong>DELETE型触发器    没有 new，只有 old，old 表示将要(删除前)或者已经被删除(删除后)的数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span>  <span class="keyword">table</span> sc_h (</span><br><span class="line">  sc_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">stu_code <span class="type">int</span>,</span><br><span class="line">  before_update_code <span class="type">int</span>,</span><br><span class="line">after_update_code <span class="type">int</span>,</span><br><span class="line">  before_update_score <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">after_update_score <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t2</span><br><span class="line">  after <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> stu <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> sc(stu_code,stu_score) <span class="keyword">values</span>(new.stu_code, <span class="number">80.0</span>);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t2a</span><br><span class="line">  after <span class="keyword">update</span></span><br><span class="line"><span class="keyword">on</span> sc <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> sc_h(stu_code, before_update_code, after_update_code,</span><br><span class="line">before_update_score,  after_update_score)</span><br><span class="line"><span class="keyword">values</span>(new.stu_code, old.stu_code, new.stu_code,</span><br><span class="line">old.stu_score, new.stu_score);</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><p>​        检查一下触发器是否正常工作。</p><h4 id="带传值的触发器"><a href="#带传值的触发器" class="headerlink" title="带传值的触发器"></a>带传值的触发器</h4><h5 id="升级简单触发器1"><a href="#升级简单触发器1" class="headerlink" title="升级简单触发器1"></a>升级简单触发器1</h5><p>​        在 2.2 简单触发器1 中，我们将固定商品的数量减少2，现在我们将升级这个逻辑，将订单中对应商品的数量建少订单中对应的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t3</span><br><span class="line">  after <span class="keyword">insert</span></span><br><span class="line">  <span class="keyword">on</span> ord</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- new 代表 ord 表中新增的数据</span></span><br><span class="line">    <span class="keyword">update</span> goods <span class="keyword">set</span> num <span class="operator">=</span> num <span class="operator">-</span> new.much <span class="keyword">where</span> gid <span class="operator">=</span> new.gid;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><h5 id="进一步升级简单触发器1"><a href="#进一步升级简单触发器1" class="headerlink" title="进一步升级简单触发器1"></a>进一步升级简单触发器1</h5><p>​     如果在订单数量大于商品库存数量时，该怎么办？</p><p>​     这里需要检查库存量与订货数量，当订货量大于库存量时，放弃订单。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t4</span><br><span class="line">  before <span class="keyword">insert</span></span><br><span class="line">  <span class="keyword">on</span> ord</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- 取出 goods 表中对应 id 的库存</span></span><br><span class="line">    <span class="comment">-- new 代表 orders 表中新增的数据</span></span><br><span class="line">    <span class="keyword">select</span> num <span class="keyword">from</span> goods <span class="keyword">where</span> gid <span class="operator">=</span> new.gid <span class="keyword">into</span> <span class="variable">@num</span>;    </span><br><span class="line">    <span class="comment">-- 用即将插入的 orders 表中的库存和 goods 表中的库存进行比较</span></span><br><span class="line">    <span class="comment">-- 如果库存不够，中断操作</span></span><br><span class="line">    if <span class="variable">@num</span> <span class="operator">&lt;</span> new.num <span class="keyword">then</span></span><br><span class="line">        <span class="comment">-- 中断操作：暴力解决，主动出错</span></span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> xxx <span class="keyword">values</span>(xxx);</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><p><strong>如果在触发器中出现错误，那么前面的已经执行的操作也会全部回滚</strong></p><h5 id="升级简单触发器1的另一种方法"><a href="#升级简单触发器1的另一种方法" class="headerlink" title="升级简单触发器1的另一种方法"></a>升级简单触发器1的另一种方法</h5><p>如果在订单数量大于商品库存数量时，我们还可以强制修改订单订货 数量为库存数量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t5</span><br><span class="line">  before <span class="keyword">insert</span></span><br><span class="line">  <span class="keyword">on</span> ord</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> restNum <span class="type">int</span>;</span><br><span class="line">    <span class="keyword">select</span> num <span class="keyword">into</span> restNum <span class="keyword">from</span> goods <span class="keyword">where</span> gid <span class="operator">=</span> new.gid;</span><br><span class="line">    if new.much <span class="operator">&gt;</span> restNum <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">set</span> new.much <span class="operator">=</span> restNum;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    <span class="keyword">update</span> goods <span class="keyword">set</span> num<span class="operator">=</span>num<span class="operator">-</span>new.much <span class="keyword">where</span> gid<span class="operator">=</span>new.gid;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><p>​        <strong>注意</strong>：这里如果使用的是after就会报错，如果使用的是after，就会先执行insert操作，也就是插入订单操作，然后在进行判断下单数量和库存量，得出新的下单数量，可是已经执行了下单操作了，所以就会报错。这里必须使用before操作。</p><h4 id="管理触发器"><a href="#管理触发器" class="headerlink" title="管理触发器"></a>管理触发器</h4><h5 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> triggers;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.TRIGGERS;</span><br></pre></td></tr></table></figure><p>​    还可以带上数据库名、表名的条件查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.TRIGGERS <span class="keyword">where</span> trigger_schema<span class="operator">=</span><span class="string">&#x27;test&#x27;</span> <span class="keyword">and</span> event_object_table<span class="operator">=</span><span class="string">&#x27;ord&#x27;</span>;</span><br></pre></td></tr></table></figure><p>   查看创建触发器的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">trigger</span> 触发器名称;</span><br></pre></td></tr></table></figure><h5 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> 触发器名称;</span><br></pre></td></tr></table></figure><h5 id="触发器的使用限制"><a href="#触发器的使用限制" class="headerlink" title="触发器的使用限制"></a>触发器的使用限制</h5><p>​        <strong>触发器不是程序员手工调用的，是DBMS自动调用，由对应语句触发。</strong></p><p>​        <strong>MySQL 的触发器中不能对本表进行 insert、update 和 delete 操作，否则会报错</strong></p><p>​        <strong>for each row是干什么的？</strong></p><p>在oracle触发器中，触发器分为行触发器和语句触发器</p><p>比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tn</span><br><span class="line">    after <span class="keyword">update</span></span><br><span class="line">    <span class="keyword">on</span> xxtable</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">    #每一行受影响，触发事件都执行，叫做行触发器</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      sqlN;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span>` `xxtable ``<span class="keyword">set</span>` `xxx<span class="operator">=</span>xxx ``<span class="keyword">where</span>` `id<span class="operator">&gt;</span><span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>该修改操作假设100行，那么sqlN，会触发100次。</p><p>在oracle中，for each row如果不写，无论update语句一次影响了多少行，都只执行一次触发事件。<br>比如：1人下了订单，买了5件商品，insert 5次，可以用行级触发器，修改5次库存；用语句级触发器触发，insert一条发货提醒。<br>遗憾的是mysql目前不支持语句级触发器。</p><p><strong>优点</strong></p><ul><li>触发器可以通过数据库中的关联表实现级联更改，即一张表数据的改变会影响其他表的数据</li><li>可以保证数据安全，并进行安全校验</li></ul><p><strong>缺点</strong></p><ul><li>过分依赖触发器，影响数据库的结构，增加数据库的维护成本</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一文了解视图、存储过程、触发器&quot;&gt;&lt;a href=&quot;#一文了解视图、存储过程、触发器&quot; class=&quot;headerlink&quot; title=&quot;一文了解视图、存储过程、触发器&quot;&gt;&lt;/a&gt;一文了解视图、存储过程、触发器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🏠个人主</summary>
      
    
    
    
    <category term="MySQL" scheme="https://manamn.space/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://manamn.space/tags/MySQL/"/>
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>一文了解MySQL事务</title>
    <link href="https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3MySQL%E4%BA%8B%E5%8A%A1/"/>
    <id>https://manamn.space/2022/10/16/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3MySQL%E4%BA%8B%E5%8A%A1/</id>
    <published>2022-10-16T14:50:55.000Z</published>
    <updated>2022-10-17T14:00:30.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一文了解MySQL事务"><a href="#一文了解MySQL事务" class="headerlink" title="一文了解MySQL事务"></a>一文了解MySQL事务</h1><blockquote><p>🏠个人主页：<a href="https://blog.csdn.net/qq_58608526?spm=1019.2139.3001.5343">不会写代码的满满</a><br>🧑个人简介：大家好，我是满满，一个想要与大家共同进步的男人😉😉<br>目前状况🎉：开学即将大三，目标就是半年内找到一份实习工作👏👏<br>💕欢迎大家：这里是CSDN，我总结知识的地方，欢迎来到我的博客，我亲爱的大佬😘</p></blockquote><p><strong>正文开始  —————</strong></p><h1 id="1-事务概述😪"><a href="#1-事务概述😪" class="headerlink" title="1.事务概述😪"></a>1.事务概述😪</h1><h2 id="事务处理-（事务操作）"><a href="#事务处理-（事务操作）" class="headerlink" title="事务处理 （事务操作）"></a>事务处理 （事务操作）</h2><blockquote><p><strong>保证所有的事务都为同一个工作单元来执行，即使出现了任何故障，也不会改变这样的执行方式。当在一个事务中执行多个操作时，要么所有的事务都被提交(commit)，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务回滚(rollback)到最初状态。</strong></p></blockquote><p>​    一个数据库事务通常包含对数据库进行读或写的一个操作序列。它的存在包含有以下两个目的 ：</p><blockquote><p>1、为数据库操作提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。<br>2、当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如转账操作：A账户要转账给B账户，那么A账户上减少的钱数和B账户上增加的钱数必须一致，也就是说A账户的转出操作和B账户的 </span><br><span class="line">转入操作要么全部执行，要么全不执行；如果其中一个操作出现异常而没有执行的话，就会导致账户A和账户B的转入转出金额不一   </span><br><span class="line">致的情况，为而事实上这种情况是不允许发生的，所以为了防止这种情况的发生，需要使用事务处理。</span><br></pre></td></tr></table></figure><p><strong>当一个事务被提交给了DBMS（数据库管理系统），则DBMS需要确保该事务中的所有操作都成功完成且其结果被永久保存在数据库中，如果事务中有的操作没有成功完成，则事务中的所有操作都需要被回滚，回到事务执行前的状态（要么全执行，要么全都不执行）; 同时，该事务对数据库或者其他事务的执行无影响，所有的事务都好像在独立的运行。</strong></p><p><strong>当一个数据库事务在执行的过程中，有可能会遇上事务操作失败、数据库系统/操作系统失败，甚至是存储介质失败等情况。这便需要DBMS对一个执行失败的事务执行恢复操作，将其数据库状态恢复到一致状态（数据的一致性得到保证的状态）。为了实现将数据库状态恢复到一致状态的功能，DBMS通常需要维护事务日志以追踪事务中所有影响数据库数据的操作。</strong></p><h1 id="2-数据库事务的特性👀"><a href="#2-数据库事务的特性👀" class="headerlink" title="2.数据库事务的特性👀"></a>2.数据库事务的特性👀</h1><p>以银行转账举例，说明如何通过数据库事务保证数据的准确性和完整性。从帐号A到帐号B需要6个操作：</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1422237-20181122103041637-782687204.png" alt="img"></p><p>用一个常用的“A账户向B账号汇钱”的例子来说明如何通过数据库事务保证数据的准确性和完整性。熟悉关系型数据库事务的都知道从帐号A到帐号B需要6个操作：</p><blockquote><p>1、从A账号中把余额读出来（500）。<br>2、对A账号做减法操作（500-100）。<br>3、把结果写回A账号中（400）。<br>4、从B账号中把余额读出来（500）。<br>5、对B账号做加法操作（500+100）。<br>6、把结果写回B账号中（600）。</p></blockquote><p>在这个过程中可能会出现以下问题:</p><ol><li>转账操作的第一步执行成功,A账户上的钱减少了100元,但是第二步执行失败或者未执行便发生系统崩溃,导致B账户并没有相应增加100元。</li><li>转账操作刚完成就发生系统崩溃,系统重启恢复时丢失了崩溃前的转账记录。</li><li>同时又另一个用户转账给B账户,由于同时对B账户进行操作,导致B账户金额出现异常。</li></ol><h2 id="事务的ACID属性："><a href="#事务的ACID属性：" class="headerlink" title="事务的ACID属性："></a>事务的ACID属性：</h2><ul><li><p><strong>原子性（Atomicity）</strong></p><blockquote><p>保证上述例子中 1-6所有过程，要么都执行，要么都不执行、一旦在执行某个过程发生问题，就需要执行回滚操作，假如执行到第五步的时候，B账户突然不可用（比如被注销），那么之前的所有操作都应该回滚到执行事务之前的状态。</p></blockquote><p>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p><strong>一致性（Consistency）</strong></p><blockquote><p>在转账之前，A账户和B账户总共有500元 + 500元 = 1000元，在转账之后，A和B的账户中现在有400 + 600=1000元。也就是，说数据的状态在执行该事务操作之后从一个状态改变到了另外一个状态。同时一致性还能保证账户余额不会变成负数等。</p></blockquote><p>事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong></p><blockquote><p>在A账户向B账户转账的过程中，只要事务没有提交，那么，A账户和B账户的余额就不会有变化。如果在A账户向B账户转账的过程中，C账户也向B账户进行转账，那么最后，B账户的钱是A账户转进来的余额 + C账户转进来的余额 + B账户余额。</p></blockquote><p>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability）</strong></p><blockquote><p>一旦转账成功（事务提交），两个账户的里面的钱就会真的发生变化（会把数据写入数据库做持久化保存）！</p></blockquote><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ul><p>  <strong>关于事务的定义有几点需要注意：</strong></p><ol><li>数据库事务可以包含一个或多个数据库操作,但这些操作构成一个逻辑上的整体。</li><li>构成逻辑整体的这些数据库操作,要么全部执行成功,要么全部不执行。</li><li>构成事务的所有操作,要么全都对数据库产生影响,要么全都不产生影响,即不管事务是否执行成功,数据库总能保持一致性状态。</li><li>以上即使在数据库出现故障以及并发事务存在的情况下依然成立。</li></ol><p>  <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1599461002700.png" alt=""></p><h1 id="3-如何实现数据库事务☕"><a href="#3-如何实现数据库事务☕" class="headerlink" title="3.如何实现数据库事务☕"></a>3.如何实现数据库事务☕</h1><p>在事务的ACID特性中,C即一致性是事务的根本追求,而对数据一致性的破坏主要来自两个方面</p><ul><li>事务的并发执行</li><li>事务故障或系统故障</li></ul><p>数据库系统是通过并发控制技术和日志恢复技术来避免这种情况发生的。</p><p>并发控制技术保证了<strong>事务的隔离性</strong>,使数据库的一致性状态不会因为并发执行的操作被破坏。<br>日志恢复技术保证了<strong>事务的原子性</strong>,使一致性状态不会因事务或系统故障被破坏。同时使已提交的对数据库的修改不会因系统崩溃而丢失,保证了事务的持久性。</p><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1422237-20181122103102223-1059881337.png" alt="img"></p><h1 id="4-MySQL中如何开启、提交-、回滚事务🧅"><a href="#4-MySQL中如何开启、提交-、回滚事务🧅" class="headerlink" title="4. MySQL中如何开启、提交 、回滚事务🧅"></a>4. MySQL中如何开启、提交 、回滚事务🧅</h1><p>MYSQL 事务处理主要有两种方法：</p><p>1、用 <code>begin/start transaction</code>, ROLLBACK, COMMIT来实现</p><ul><li><p>begin/start transaction 开始一个事务</p></li><li><p>rollback 事务回滚</p></li><li><p>commit 事务确认</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> sname<span class="operator">=</span><span class="string">&#x27;王军&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li></ul><p>2、直接用 SET 来改变 MySQL 的自动提交模式:</p><ul><li><p><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</p></li><li><p><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> session variables <span class="keyword">like</span> <span class="string">&#x27;autocommit&#x27;</span>;  <span class="comment">--查看自动提交状态</span></span><br><span class="line"><span class="keyword">set</span> session autocommit <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">--关闭自动提交</span></span><br><span class="line"><span class="keyword">set</span> session autocommit <span class="operator">=</span> off;  <span class="comment">--关闭自动提交</span></span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> sname<span class="operator">=</span><span class="string">&#x27;飞飞&#x27;</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="5-事务的隔离级别💧"><a href="#5-事务的隔离级别💧" class="headerlink" title="5. 事务的隔离级别💧"></a>5. 事务的隔离级别💧</h1><h2 id="5-1-事务并发问题"><a href="#5-1-事务并发问题" class="headerlink" title="5. 1 事务并发问题"></a>5. 1 事务并发问题</h2><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读 ： </strong> 对于两个事务 T1 , T2 ,  T1已经读到了事务T2更新但是<strong>还未提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1599461151424.png" alt="1599461151424"></p><ul><li><p><strong>不可重复读 ：</strong> 对于两个事务T1 ， T2 ，  T1读取一个字段之后，T2对该事务进行了 <strong>更新/修改</strong>操作。之后T1再次读取该字段的时候，值就不一样了。</p><p>​                                <img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1599461170319.png" alt="1599461170319"></p></li><li><p><strong>幻读 : </strong> 对于两个事物 T1 ， T2 ，T1从表中读取一个字段，此时T2进行<strong>插入/ 删除</strong>了一些新的行， 之后, 如果 T1 再次读取同一个表, 就会多/少几行。</p></li></ul><p><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/img/1599461184631.png" alt="1599461184631"></p><p><strong>不可重复度和幻读区别：</strong></p><p>不可重复读的重点是<code>修改</code>，幻读的重点在于<code>新增或者删除</code>。 </p><p>​    <strong>解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</strong></p><blockquote><p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为 1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导致A再读自己的工资时工资变为 2000；这就是不可重复读。 </p><p>例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读 </p></blockquote><h2 id="5-2事务隔离级别"><a href="#5-2事务隔离级别" class="headerlink" title="5.2事务隔离级别"></a>5.2事务隔离级别</h2><h3 id="2、事务隔离级别"><a href="#2、事务隔离级别" class="headerlink" title="2、事务隔离级别"></a>2、事务隔离级别</h3><p><strong>数据库事务的隔离性</strong>：数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。<strong>一个事务与其他事务隔离的程度称为隔离级别。</strong>数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, 隔离级别越高, 数据一致性就越好, 但并发性越弱。</p><p><strong>数据库提供的 4 种事务隔离级别：</strong></p><div class="table-container"><table><thead><tr><th>隔离级别</th><th>描述</th></tr></thead><tbody><tr><td>read-uncommitted</td><td>允许A事务读取其他事务未提交和已提交的数据。会出现<strong>脏读、不可重复读、幻读</strong>问题</td></tr><tr><td>read-committed</td><td>只允许A事务读取其他事务已提交的数据。可以避免脏读，但仍然会出现 <strong>不可重复读、幻读</strong> 问题</td></tr><tr><td>repeatable-read</td><td>确保事务可以多次从一个字段中读取相同的值。在这个事务持续期间，禁止其他事务对这个字段进行更新。可以避免脏读和不可重复读。但是幻读问题仍然存在。</td></tr><tr><td>serializable</td><td>确保事务可以从一个表中读取相同的行，相同的记录。在这个事务持续期间，禁止其他事务对该表执行插入、更新、删除操作。所有并发问题都可以避免，但性能十分低下。</td></tr></tbody></table></div><ul><li>Oracle 支持的 2 种事务隔离级别：<strong>READ-COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: READ COMMITED 。</li><li>Mysql 支持 4 种事务隔离级别。 Mysql 默认的事务隔离级别为: <strong>REPEATABLE-READ</strong>。在mysql中REPEATABLE READ的隔离级别也可以避免幻读了。</li></ul><h2 id="5-3-查看事务隔离级别"><a href="#5-3-查看事务隔离级别" class="headerlink" title="5.3 查看事务隔离级别"></a>5.3 查看事务隔离级别</h2><p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接。每个数据库连接都有一个变量 @@tx_isolation, 表示当前连接的事务隔离级别。mysql服务也有一个全局变量@@global.tx_isolation，表示所有连接的默认事务隔离级别。</p><ul><li>查看当前mysql连接的隔离级别: </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure><ul><li>查看全局的隔离级别：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@global.tx_isolation;</span><br></pre></td></tr></table></figure><ul><li>设置当前 mysql连接的隔离级别:  </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> tx_isolation <span class="operator">=</span><span class="string">&#x27;repeatable-read&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>设置数据库系统的全局的隔离级别:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> tx_isolation <span class="operator">=</span><span class="string">&#x27;read-committed&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里的隔离级别中间是减号，不是下划线。</p></blockquote><p><strong>实验一下，首先做数据准备</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction</span>_isolation;  <span class="comment">--查看当前隔离级别</span></span><br></pre></td></tr></table></figure><p>MySQL默认的事务隔离等级，可重复读（repeatable reads）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--首先我们创建一个表作为测试表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> test_trac;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> test_trac (</span><br><span class="line">    t_id <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">primary</span> key,</span><br><span class="line">    t_name <span class="type">varchar</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">--我们开两个会话，一个用客户端(会话A)，一个用命令行(会话B)，会话A开启事务</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_trac <span class="keyword">values</span>(<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>);  <span class="comment">--在会话A上执行</span></span><br><span class="line"><span class="comment">--在会话B上读取，会发现无法读取未提交的数据，会话A执行commit后，会话B可以正常读取。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--将会话B的事务隔离级别设为“读未提交”</span></span><br><span class="line">sessionB: <span class="keyword">set</span> session transaction isolation level read uncommitted;</span><br><span class="line">sessionB: <span class="keyword">start</span> transaction;</span><br><span class="line">sessionB: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_trac;</span><br><span class="line"><span class="comment">--显示会话A插入之前的值</span></span><br><span class="line">sessionA: <span class="keyword">start</span> transaction;</span><br><span class="line">sessionA: <span class="keyword">insert</span> <span class="keyword">into</span> test_trac <span class="keyword">values</span>(<span class="string">&#x27;ccc0&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="comment">--在sessionA未提交的情况下，会话B可读取：会话A的未提交的insert（脏读）；查询过后被修改（不可重读）；查询过被新增（幻读）。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--将会话B的事务隔离级别设为“读已提交”</span></span><br><span class="line">sessionB: <span class="keyword">set</span> session transaction isolation level read committed;</span><br><span class="line">sessionB: <span class="keyword">start</span> transaction;  <span class="comment">--开启事务</span></span><br><span class="line">sessionB: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_trac <span class="keyword">where</span> t_name<span class="operator">=</span><span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line"><span class="comment">--会话A也开启事务</span></span><br><span class="line">sessionA: <span class="keyword">start</span> transaction;</span><br><span class="line">sessionA: <span class="keyword">insert</span> <span class="keyword">into</span> test_trac <span class="keyword">values</span>(<span class="string">&#x27;ccc1&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="comment">--在sessionA未提交的情况下，sessionB读不到这条记录，除非sessionA已提交</span></span><br><span class="line">sessionA: <span class="keyword">commit</span>;</span><br><span class="line">sessionB: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_trac <span class="keyword">where</span> t_name<span class="operator">=</span><span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line"><span class="comment">--关键是会话B的自己的事务未办结提交过程中，读取到了会话A提交的数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--现在把会话B的隔离基本设为“可重复读”</span></span><br><span class="line">sessionB: <span class="keyword">set</span> session transaction isolation level repeatable read;</span><br><span class="line">sessionB: <span class="keyword">start</span> transaction;  <span class="comment">--开启事务</span></span><br><span class="line">sessionB: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_trac <span class="keyword">where</span> t_name<span class="operator">=</span><span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="comment">--可重复读的例子</span></span><br><span class="line">sessionA: <span class="keyword">start</span> transaction;  <span class="comment">--开启事务</span></span><br><span class="line">sessionA: <span class="keyword">insert</span> <span class="keyword">into</span> test_trac <span class="keyword">values</span>(<span class="string">&#x27;ddd0&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line">sessionA: <span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">--虽然会话A已提交事务，会话B查询，得不到新的值，除非会话B也提交。</span></span><br><span class="line">sessionB: <span class="keyword">commit</span>;</span><br><span class="line">sessionB: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_trac <span class="keyword">where</span> t_name<span class="operator">=</span><span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="comment">--幻读的例子</span></span><br><span class="line">sessionA: <span class="keyword">start</span> transaction; </span><br><span class="line">sessionB: <span class="keyword">start</span> transaction;</span><br><span class="line">sessionA: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_trac <span class="keyword">where</span> t_name<span class="operator">=</span><span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">sessionB: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_trac <span class="keyword">where</span> t_name<span class="operator">=</span><span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="comment">--会话A和B开启事务后，读取的结果集。会话A发现可以插入某个值，插入并提交。会话B也要插入同样的值，结果发现主键冲突，也就是数据库库在查询之后，新增了对应的数据。但是会话B的事务中不知道这个改变。</span></span><br><span class="line">sessionA: <span class="keyword">insert</span> <span class="keyword">into</span> test_trac <span class="keyword">values</span>(<span class="string">&#x27;ddd1&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line">sessionA: <span class="keyword">commit</span>;</span><br><span class="line">sessionB: <span class="keyword">insert</span> <span class="keyword">into</span> test_trac <span class="keyword">values</span>(<span class="string">&#x27;ddd1&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line">sessionB: ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;ddd1&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;PRIMARY&#x27;</span></span><br><span class="line"><span class="comment">--如果会话A插入一个主键值，未提交。会话B插入同样的主键值，在会话A未提交的情况下被阻塞，指导会话A提交或回滚。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--现在把会话B的隔离基本设为“串行化”</span></span><br><span class="line">sessionB: <span class="keyword">set</span> session transaction isolation level serializable;</span><br><span class="line">sessionB: <span class="keyword">start</span> transaction;  <span class="comment">--开启事务</span></span><br><span class="line"><span class="comment">--在此隔离等级下，一旦有某个事务进行了insert、update、delete操作更新类数据，所有其他会话的select操作会被阻塞，除非更新的会话被提交。</span></span><br><span class="line"><span class="comment">--如果两个会话都更新过了，第一个会话select被阻塞，第二个会话进行select直接报错</span></span><br><span class="line">ERROR <span class="number">1213</span> (<span class="number">40001</span>): Deadlock found <span class="keyword">when</span> trying <span class="keyword">to</span> <span class="keyword">get</span> lock; try restarting transaction</span><br></pre></td></tr></table></figure><h1 id="6-行锁与表锁🔍"><a href="#6-行锁与表锁🔍" class="headerlink" title="6. 行锁与表锁🔍"></a>6. 行锁与表锁🔍</h1><p>​    所有的事务实现，处理并发冲突，都需要依赖锁来实现。</p><p>​        一般可以分为两类，一个是<strong>悲观锁</strong>，一个是<strong>乐观锁</strong>，悲观锁一般就是我们通常说的数据库锁机制，乐观锁一般是指用户自己实现的一种锁机制，比如hibernate实现的乐观锁甚至编程语言也有乐观锁的思想的应用。</p><p><strong>悲观锁</strong>：顾名思义，就是很悲观，它对于数据被外界修改持保守态度，认为数据随时会修改，所以整个数据处理中需要将数据加锁。悲观锁一般都是依靠关系数据库提供的锁机制，事实上关系数据库中的行锁，表锁不论是读写锁都是悲观锁。</p><h4 id="1-表级锁定（table-level）"><a href="#1-表级锁定（table-level）" class="headerlink" title="1.表级锁定（table-level）"></a>1.表级锁定（table-level）</h4><p>表级别的锁定是MySQL各存储引擎中最大颗粒度的锁定机制。该锁定机制最大的特点是实现逻辑非常简单。所以获取锁和释放锁的速度很快。由于<strong>表级锁一次会将整个表锁定</strong>，所以可以很好的避免困扰我们的死锁问题。<br>当然，锁定颗粒度大所带来<strong>最大的负面影响就是出现锁定资源争用的概率也会最高</strong>，致使并大度大打折扣。<br>使用表级锁定的主要是MyISAM，MEMORY，CSV等一些非事务性存储引擎。</p><h4 id="2-行级锁定（row-level）"><a href="#2-行级锁定（row-level）" class="headerlink" title="2.行级锁定（row-level）"></a>2.行级锁定（row-level）</h4><p>行级锁定最大的特点就是<strong>锁定对象的颗粒度很小</strong>，也是目前各大数据库管理软件所实现的锁定颗粒度最小的。由于锁定颗粒度很小，所以发<strong>生锁定资源争用的概率也最小</strong>，<strong>能够给予应用程序尽可能大的并发处理能力</strong>而提高一些需要高并发应用系统的整体性能。<br>虽然能够在并发处理能力上面有较大的优势，但是行级锁定也因此带来了不少弊端。由于锁定资源的颗粒度很小，所以<strong>每次获取锁和释放锁需要做的事情也更多，带来的消耗自然也就更大了</strong>。此外，行级锁定也最容易发生死锁。<br>使用行级锁定的主要是InnoDB存储引擎。</p><p><strong>表级锁：开销小，加锁快；较难出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低；</strong><br><strong>行级锁：开销大，加锁慢；容易出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高；</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一文了解MySQL事务&quot;&gt;&lt;a href=&quot;#一文了解MySQL事务&quot; class=&quot;headerlink&quot; title=&quot;一文了解MySQL事务&quot;&gt;&lt;/a&gt;一文了解MySQL事务&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🏠个人主页：&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="MySQL" scheme="https://manamn.space/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://manamn.space/tags/MySQL/"/>
    
    <category term="百里半Java培训" scheme="https://manamn.space/tags/%E7%99%BE%E9%87%8C%E5%8D%8AJava%E5%9F%B9%E8%AE%AD/"/>
    
  </entry>
  
</feed>
